from numpy import *


def LoadDataSet():
    """ Load a vector-like data set tranfered by
    a data set list that generated by artifical.

    Returns:
        return_vec: the vector-like data set.
        class_vec: the class label corresponds to the data items.
    """
    posting_list = [['my', 'dog', 'has', 'flea',
                     'problems', 'help', 'please'],
                    ['maybe', 'not', 'take', 'him',
                     'to', 'dog', 'park', 'stupid'],
                    ['my', 'dalmation', 'is', 'so', 'cute',
                     'I', 'love', 'him'],
                    ['stop', 'posting', 'stupid', 'worthless', 'garbage'],
                    ['mr', 'licks', 'ate', 'my', 'steak', 'how',
                     'to', 'stop', 'him'],
                    ['quit', 'buying', 'worthless', 'dog', 'food', 'stupid']]
    class_vec = [0, 1, 0, 1, 0, 1]  # 1 is abusive, 0 not

    return posting_list, class_vec


def CreateVocabList(data_set):
    """ Create vocabulary list from vector-like data set.

    Arguments:
        data_set: the data source.

    Returns:
        vocab_list: the vocabulary list.
    """

    vocab_set = set([])
    for document in data_set:
        vocab_set = vocab_set | set(document)

    return list(vocab_set)


def SetOfWords2Vec(vocab_list, input_set):
    """ Transfer the words list to vector for each posting.

    Arguments:
        vocab_list: The vocabulary list.
        input_set: The posting that ready to transfer to vector.

    Returns:
        return_vec: the result vector.
    """

    # Initialize
    return_vec = [0] * len(vocab_list)
    for word in input_set:
        if word in vocab_list:
            return_vec[vocab_list.index(word)] = 1
        else:
            print("the word: %s is not in my Vocabulary" % word)

    return return_vec


def TrainNaiveBayes0(train_matrix, train_category):
    """ the training method.

    Arguments:
        train_matrix: The train data.
        train_category: The train label.

    Returns:
        p0_vect: The conditional probability of w by c0
        p1_vect: The conditional probability of w by c1
        p_abusive: The conditional probability of c1
    """

    num_train_docs = len(train_matrix)
    num_words = len(train_matrix[0])
    p_abusive = sum(train_category) / num_train_docs
    p0_num = ones(num_words)
    p1_num = ones(num_words)
    p0_denom = 2.0
    p1_denom = 2.0

    for i in range(num_train_docs):
        if train_category[i] == 1:
            p1_num += train_matrix[i]
            p1_denom += sum(train_matrix[i])
        else:
            p0_num += train_matrix[i]
            p0_denom += sum(train_matrix[i])

    p1_vect = log(p1_num / p1_denom)
    p0_vect = log(p0_num / p0_denom)

    return p0_vect, p1_vect, p_abusive


def ClassifyNaiveBayes(vec_to_classify, p0_vect, p1_vect, p_abusive):
    """ Classify.

    Arguments:
        vec_to_classify: The vector to classify.
        p0_vect: The conditional probability of w by c0.
        p1_vect: The conditional probability of w by c1.
        p_abusive: The conditional probability of c1.

    Returns:
        0: The predict class is 0
        1: The predict class is 1

    """

    p1 = sum(vec_to_classify * p1_vect) + log(p_abusive)
    p0 = sum(vec_to_classify * p0_vect) + log(1 - p_abusive)
    if p1 > p0:
        return 1
    else:
        return 0


def TestNaiveBayes():
    """ A test method.
    """

    list_of_posts, list_of_classes = LoadDataSet()
    my_vocab_list = CreateVocabList(list_of_posts)
    train_mat = []
    for post_in_doc in list_of_posts:
        train_mat.append(SetOfWords2Vec(my_vocab_list, post_in_doc))
    p0_v, p1_v, p_ab = TrainNaiveBayes0(
        array(train_mat), array(list_of_classes))
    test_entry = ['love', 'my', 'dalmation']
    this_doc = array(SetOfWords2Vec(my_vocab_list, test_entry))
    print(test_entry, 'classified as: ',
          ClassifyNaiveBayes(this_doc, p0_v, p1_v, p_ab))
    test_entry = ['stupid', 'garbage']
    this_doc = array(SetOfWords2Vec(my_vocab_list, test_entry))
    print(test_entry, 'classified as: ',
          ClassifyNaiveBayes(this_doc, p0_v, p1_v, p_ab))


def BagOfWords2Vec(vocab_list, input_set):
    """ Transfer the words list to vector for each posting.

    Arguments:
        vocab_list: The vocabulary list.
        input_set: The posting that ready to transfer to vector.

    Returns:
        return_vec: the result vector.
    """

    # Initialize
    return_vec = [0] * len(vocab_list)
    for word in input_set:
        if word in vocab_list:
            return_vec[vocab_list.index(word)] += 1
        else:
            print("the word: %s is not in my Vocabulary" % word)

    return return_vec
