<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Abracdabra</title>
  <subtitle>Do it yourself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-26T08:03:00.180Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ewan Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python data analysis-Learning note-Ch04</title>
    <link href="http://yoursite.com/2017/02/26/Python-data-analysis-Learning-note-Ch04/"/>
    <id>http://yoursite.com/2017/02/26/Python-data-analysis-Learning-note-Ch04/</id>
    <published>2017-02-26T03:25:50.000Z</published>
    <updated>2017-02-26T08:03:00.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy基础：数组和矢量计算"><a href="#Numpy基础：数组和矢量计算" class="headerlink" title="Numpy基础：数组和矢量计算"></a>Numpy基础：数组和矢量计算</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%matplotlib inline</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> randn</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">np.set_printoptions(precision=<span class="number">4</span>, suppress=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</div><div class="line">InteractiveShell.ast_node_interactivity = <span class="string">"all"</span></div></pre></td></tr></table></figure>
<h2 id="NumPy-ndarray-一种多维数组对象"><a href="#NumPy-ndarray-一种多维数组对象" class="headerlink" title="NumPy ndarray: 一种多维数组对象"></a>NumPy ndarray: 一种多维数组对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data = randn(<span class="number">2</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">data</div><div class="line">data * <span class="number">10</span></div><div class="line">data + data</div></pre></td></tr></table></figure>
<pre><code>array([[ 0.1584,  0.299 , -0.2555],
       [ 0.3277, -0.6934,  1.3191]])






array([[  1.5842,   2.9896,  -2.5545],
       [  3.2767,  -6.9342,  13.1913]])






array([[ 0.3168,  0.5979, -0.5109],
       [ 0.6553, -1.3868,  2.6383]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data.shape</div><div class="line">data.dtype</div></pre></td></tr></table></figure>
<pre><code>(2, 3)






dtype(&#39;float64&#39;)
</code></pre><h3 id="创建ndarray"><a href="#创建ndarray" class="headerlink" title="创建ndarray"></a>创建ndarray</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">data1 = [<span class="number">6</span>, <span class="number">7.5</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">1</span>]</div><div class="line">arr1 = np.array(data1)</div><div class="line">arr1</div></pre></td></tr></table></figure>
<pre><code>array([ 6. ,  7.5,  8. ,  0. ,  1. ])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">data2 = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]]</div><div class="line">arr2 = np.array(data2)</div><div class="line">arr2</div><div class="line">arr2.ndim</div><div class="line">arr2.shape</div></pre></td></tr></table></figure>
<pre><code>array([[1, 2, 3, 4],
       [5, 6, 7, 8]])






2






(2, 4)
</code></pre><p>除非显示说明，np.array会尝试为新建的数组选择一个合适的类型</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr1.dtype</div><div class="line">arr2.dtype</div></pre></td></tr></table></figure>
<pre><code>dtype(&#39;float64&#39;)






dtype(&#39;int32&#39;)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">np.zeros(<span class="number">10</span>)</div><div class="line">np.zeros((<span class="number">3</span>, <span class="number">6</span>))</div><div class="line">np.empty((<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>))</div></pre></td></tr></table></figure>
<pre><code>array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])






array([[ 0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.]])






array([[[ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.]],

       [[ 0.,  0.],
        [ 0.,  0.],
        [ 0.,  0.]]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">np.arange(<span class="number">15</span>)</div></pre></td></tr></table></figure>
<pre><code>array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])
</code></pre><p>ones_like, zeros_like, empty_like这三个方法接受一个数组为对象，创建和这个数组形状和dtype一样的全1， 全0和分配的初始空间</p>
<h3 id="ndarray的数据类型"><a href="#ndarray的数据类型" class="headerlink" title="ndarray的数据类型"></a>ndarray的数据类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=np.float64)</div><div class="line">arr2 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=np.int32)</div><div class="line">arr1.dtype</div><div class="line">arr2.dtype</div></pre></td></tr></table></figure>
<pre><code>dtype(&#39;float64&#39;)






dtype(&#39;int32&#39;)
</code></pre><p>当需要控制数据在内存和磁盘中的存储方式时（尤其是对大数据集），那就得了解如何控制存储类型</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line">arr.dtype</div><div class="line">float_arr = arr.astype(np.float64) </div><div class="line">float_arr.dtype</div></pre></td></tr></table></figure>
<pre><code>dtype(&#39;int32&#39;)






dtype(&#39;float64&#39;)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = np.array([<span class="number">3.7</span>, <span class="number">-1.2</span>, <span class="number">-2.6</span>, <span class="number">0.5</span>, <span class="number">12.9</span>, <span class="number">10.1</span>])</div><div class="line">arr</div><div class="line">arr.astype(np.int32)</div></pre></td></tr></table></figure>
<pre><code>array([  3.7,  -1.2,  -2.6,   0.5,  12.9,  10.1])






array([ 3, -1, -2,  0, 12, 10])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">numeric_strings = np.array([<span class="string">'1.25'</span>, <span class="string">'-9.6'</span>, <span class="string">'42'</span>], dtype=np.string_)</div><div class="line">numeric_strings.astype(float)</div></pre></td></tr></table></figure>
<pre><code>array([  1.25,  -9.6 ,  42.  ])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int_array = np.arange(<span class="number">10</span>)</div><div class="line">calibers = np.array([<span class="number">.22</span>, <span class="number">.270</span>, <span class="number">.357</span>, <span class="number">.380</span>, <span class="number">.44</span>, <span class="number">.50</span>], dtype=np.float64)</div><div class="line">int_array.astype(calibers.dtype)</div></pre></td></tr></table></figure>
<pre><code>array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">empty_uint32 = np.empty(<span class="number">8</span>, dtype=<span class="string">'u4'</span>)</div><div class="line">empty_uint32</div></pre></td></tr></table></figure>
<pre><code>array([1, 2, 3, 4, 5, 6, 7, 8], dtype=uint32)
</code></pre><p>调用astype会创建原数组的一份拷贝</p>
<h3 id="数组和标量之间的运算"><a href="#数组和标量之间的运算" class="headerlink" title="数组和标量之间的运算"></a>数组和标量之间的运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr = np.array([[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>], [<span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>]])</div><div class="line">arr</div><div class="line">arr * arr</div><div class="line">arr - arr</div></pre></td></tr></table></figure>
<pre><code>array([[ 1.,  2.,  3.],
       [ 4.,  5.,  6.]])






array([[  1.,   4.,   9.],
       [ 16.,  25.,  36.]])






array([[ 0.,  0.,  0.],
       [ 0.,  0.,  0.]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> / arr</div><div class="line">arr ** <span class="number">0.5</span></div></pre></td></tr></table></figure>
<pre><code>array([[ 1.    ,  0.5   ,  0.3333],
       [ 0.25  ,  0.2   ,  0.1667]])






array([[ 1.    ,  1.4142,  1.7321],
       [ 2.    ,  2.2361,  2.4495]])
</code></pre><h3 id="基本的索引和切片"><a href="#基本的索引和切片" class="headerlink" title="基本的索引和切片"></a>基本的索引和切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">10</span>)</div><div class="line">arr</div><div class="line">arr[<span class="number">5</span>]</div><div class="line">arr[<span class="number">5</span>:<span class="number">8</span>]</div><div class="line">arr[<span class="number">5</span>:<span class="number">8</span>] = <span class="number">12</span></div><div class="line">arr</div></pre></td></tr></table></figure>
<pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])






5






array([5, 6, 7])






array([ 0,  1,  2,  3,  4, 12, 12, 12,  8,  9])
</code></pre><p>切片直接在原数组上操作<br>如果想要得到一个复制的版本，需要显示地调用copy()方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">arr_slice = arr[<span class="number">5</span>:<span class="number">8</span>]</div><div class="line">arr_slice[<span class="number">1</span>] = <span class="number">12345</span></div><div class="line">arr</div><div class="line">arr_slice[:] = <span class="number">64</span></div><div class="line">arr</div></pre></td></tr></table></figure>
<pre><code>array([    0,     1,     2,     3,     4,    12, 12345,    12,     8,     9])






array([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr2d = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</div><div class="line">arr2d[<span class="number">2</span>]</div></pre></td></tr></table></figure>
<pre><code>array([7, 8, 9])
</code></pre><p>注意下面这种索引方式</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr2d[<span class="number">0</span>][<span class="number">2</span>]</div><div class="line">arr2d[<span class="number">0</span>, <span class="number">2</span>]</div></pre></td></tr></table></figure>
<pre><code>3






3
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr3d = np.array([[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]], [[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]]])</div><div class="line">arr3d</div></pre></td></tr></table></figure>
<pre><code>array([[[ 1,  2,  3],
        [ 4,  5,  6]],

       [[ 7,  8,  9],
        [10, 11, 12]]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr3d[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<pre><code>array([[1, 2, 3],
       [4, 5, 6]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">old_values = arr3d[<span class="number">0</span>].copy()</div><div class="line">arr3d[<span class="number">0</span>] = <span class="number">42</span></div><div class="line">arr3d</div><div class="line">arr3d[<span class="number">0</span>] = old_values</div><div class="line">arr3d</div></pre></td></tr></table></figure>
<pre><code>array([[[42, 42, 42],
        [42, 42, 42]],

       [[ 7,  8,  9],
        [10, 11, 12]]])






array([[[ 1,  2,  3],
        [ 4,  5,  6]],

       [[ 7,  8,  9],
        [10, 11, 12]]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr3d[<span class="number">1</span>, <span class="number">0</span>]</div></pre></td></tr></table></figure>
<pre><code>array([7, 8, 9])
</code></pre><h4 id="切片索引"><a href="#切片索引" class="headerlink" title="切片索引"></a>切片索引</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr[<span class="number">1</span>:<span class="number">6</span>]</div></pre></td></tr></table></figure>
<pre><code>array([ 1,  2,  3,  4, 64])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr2d</div><div class="line">arr2d[:<span class="number">2</span>]</div></pre></td></tr></table></figure>
<pre><code>array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])






array([[1, 2, 3],
       [4, 5, 6]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr2d[:<span class="number">2</span>, <span class="number">1</span>:]</div></pre></td></tr></table></figure>
<pre><code>array([[2, 3],
       [5, 6]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr2d[<span class="number">1</span>, :<span class="number">2</span>]</div><div class="line">arr2d[<span class="number">2</span>, :<span class="number">1</span>]</div></pre></td></tr></table></figure>
<pre><code>array([4, 5])






array([7])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr2d[:, :<span class="number">1</span>]</div></pre></td></tr></table></figure>
<pre><code>array([[1],
       [4],
       [7]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr2d[:<span class="number">2</span>, <span class="number">1</span>:] = <span class="number">0</span></div></pre></td></tr></table></figure>
<h3 id="布尔型索引"><a href="#布尔型索引" class="headerlink" title="布尔型索引"></a>布尔型索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">names = np.array([<span class="string">'Bob'</span>, <span class="string">'Joe'</span>, <span class="string">'Will'</span>, <span class="string">'Bob'</span>, <span class="string">'Will'</span>, <span class="string">'Joe'</span>, <span class="string">'Joe'</span>])</div><div class="line">data = randn(<span class="number">7</span>, <span class="number">4</span>)</div><div class="line">names</div><div class="line">data</div></pre></td></tr></table></figure>
<pre><code>array([&#39;Bob&#39;, &#39;Joe&#39;, &#39;Will&#39;, &#39;Bob&#39;, &#39;Will&#39;, &#39;Joe&#39;, &#39;Joe&#39;], 
      dtype=&#39;&lt;U4&#39;)






array([[-2.9033,  1.4721,  0.9512,  1.7727],
       [ 2.2303, -1.0259,  1.0664,  0.534 ],
       [-0.9725,  0.2226, -0.1538, -0.4994],
       [-1.4289,  0.1665, -1.2874, -1.0817],
       [ 1.3581, -1.0734, -0.1387,  0.1673],
       [ 1.2816,  1.8883,  0.5699, -0.5843],
       [-0.0464, -0.9633,  0.2855, -0.6473]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">names == <span class="string">'Bob'</span></div></pre></td></tr></table></figure>
<pre><code>array([ True, False, False,  True, False, False, False], dtype=bool)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data[names == <span class="string">'Bob'</span>]</div></pre></td></tr></table></figure>
<pre><code>array([[-2.9033,  1.4721,  0.9512,  1.7727],
       [-1.4289,  0.1665, -1.2874, -1.0817]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data[names == <span class="string">'Bob'</span>, <span class="number">2</span>:]</div><div class="line">data[names == <span class="string">'Bob'</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure>
<pre><code>array([[ 0.9512,  1.7727],
       [-1.2874, -1.0817]])






array([ 1.7727, -1.0817])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">names != <span class="string">'Bob'</span></div><div class="line">data[~(names == <span class="string">'Bob'</span>)]</div></pre></td></tr></table></figure>
<pre><code>array([False,  True,  True, False,  True,  True,  True], dtype=bool)






array([[ 2.2303, -1.0259,  1.0664,  0.534 ],
       [-0.9725,  0.2226, -0.1538, -0.4994],
       [ 1.3581, -1.0734, -0.1387,  0.1673],
       [ 1.2816,  1.8883,  0.5699, -0.5843],
       [-0.0464, -0.9633,  0.2855, -0.6473]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mask = (names == <span class="string">'Bob'</span>) | (names == <span class="string">'Will'</span>)</div><div class="line">mask</div><div class="line">data[mask]</div></pre></td></tr></table></figure>
<pre><code>array([ True, False,  True,  True,  True, False, False], dtype=bool)






array([[-2.9033,  1.4721,  0.9512,  1.7727],
       [-0.9725,  0.2226, -0.1538, -0.4994],
       [-1.4289,  0.1665, -1.2874, -1.0817],
       [ 1.3581, -1.0734, -0.1387,  0.1673]])
</code></pre><p><strong>Python关键字and和or在布尔型数组中无效</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data[data &lt; <span class="number">0</span>] = <span class="number">0</span></div><div class="line">data</div></pre></td></tr></table></figure>
<pre><code>array([[ 0.    ,  1.4721,  0.9512,  1.7727],
       [ 2.2303,  0.    ,  1.0664,  0.534 ],
       [ 0.    ,  0.2226,  0.    ,  0.    ],
       [ 0.    ,  0.1665,  0.    ,  0.    ],
       [ 1.3581,  0.    ,  0.    ,  0.1673],
       [ 1.2816,  1.8883,  0.5699,  0.    ],
       [ 0.    ,  0.    ,  0.2855,  0.    ]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data[names != <span class="string">'Joe'</span>] = <span class="number">7</span></div><div class="line">data</div></pre></td></tr></table></figure>
<pre><code>array([[ 7.    ,  7.    ,  7.    ,  7.    ],
       [ 2.2303,  0.    ,  1.0664,  0.534 ],
       [ 7.    ,  7.    ,  7.    ,  7.    ],
       [ 7.    ,  7.    ,  7.    ,  7.    ],
       [ 7.    ,  7.    ,  7.    ,  7.    ],
       [ 1.2816,  1.8883,  0.5699,  0.    ],
       [ 0.    ,  0.    ,  0.2855,  0.    ]])
</code></pre><h3 id="花式索引"><a href="#花式索引" class="headerlink" title="花式索引"></a>花式索引</h3><p>花式索引创建新的数组</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr = np.empty((<span class="number">8</span>, <span class="number">4</span>))</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</div><div class="line">    arr[i] = i</div><div class="line">arr</div></pre></td></tr></table></figure>
<pre><code>array([[ 0.,  0.,  0.,  0.],
       [ 1.,  1.,  1.,  1.],
       [ 2.,  2.,  2.,  2.],
       [ 3.,  3.,  3.,  3.],
       [ 4.,  4.,  4.,  4.],
       [ 5.,  5.,  5.,  5.],
       [ 6.,  6.,  6.,  6.],
       [ 7.,  7.,  7.,  7.]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr[[<span class="number">4</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>]]</div></pre></td></tr></table></figure>
<pre><code>array([[ 4.,  4.,  4.,  4.],
       [ 3.,  3.,  3.,  3.],
       [ 0.,  0.,  0.,  0.],
       [ 6.,  6.,  6.,  6.]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr[[<span class="number">-3</span>, <span class="number">-5</span>, <span class="number">-7</span>]]</div></pre></td></tr></table></figure>
<pre><code>array([[ 5.,  5.,  5.,  5.],
       [ 3.,  3.,  3.,  3.],
       [ 1.,  1.,  1.,  1.]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># more on reshape in Chapter 12</span></div><div class="line">arr = np.arange(<span class="number">32</span>).reshape((<span class="number">8</span>, <span class="number">4</span>))</div><div class="line">arr</div><div class="line">arr[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>]]</div></pre></td></tr></table></figure>
<pre><code>array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15],
       [16, 17, 18, 19],
       [20, 21, 22, 23],
       [24, 25, 26, 27],
       [28, 29, 30, 31]])






array([ 4, 23, 29, 10])
</code></pre><p>根据以上可知，传入两个索引数组相当于进行了同位置组合</p>
<p>注意以下这种方式</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>]][:, [<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>]]</div></pre></td></tr></table></figure>
<pre><code>array([[ 4,  7,  5,  6],
       [20, 23, 21, 22],
       [28, 31, 29, 30],
       [ 8, 11,  9, 10]])
</code></pre><p>np.ix_方法将两个一维数组转换为一个矩形区域的索引选择器</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr[np.ix_([<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>])]</div></pre></td></tr></table></figure>
<pre><code>array([[ 4,  7,  5,  6],
       [20, 23, 21, 22],
       [28, 31, 29, 30],
       [ 8, 11,  9, 10]])
</code></pre><h3 id="数组转置和轴对换"><a href="#数组转置和轴对换" class="headerlink" title="数组转置和轴对换"></a>数组转置和轴对换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">15</span>).reshape((<span class="number">3</span>, <span class="number">5</span>))</div><div class="line">arr</div><div class="line">arr.T</div></pre></td></tr></table></figure>
<pre><code>array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14]])






array([[ 0,  5, 10],
       [ 1,  6, 11],
       [ 2,  7, 12],
       [ 3,  8, 13],
       [ 4,  9, 14]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr = np.random.randn(<span class="number">6</span>, <span class="number">3</span>)</div><div class="line">np.dot(arr.T, arr)</div></pre></td></tr></table></figure>
<pre><code>array([[ 3.6804,  0.0133,  1.0388],
       [ 0.0133,  1.6074,  0.1836],
       [ 1.0388,  0.1836,  3.5281]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">16</span>).reshape((<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>))</div><div class="line">arr</div><div class="line">arr.transpose((<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>))</div></pre></td></tr></table></figure>
<pre><code>array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7]],

       [[ 8,  9, 10, 11],
        [12, 13, 14, 15]]])






array([[[ 0,  1,  2,  3],
        [ 8,  9, 10, 11]],

       [[ 4,  5,  6,  7],
        [12, 13, 14, 15]]])
</code></pre><p>Refered from <a href="http://stackoverflow.com/questions/32034237/how-does-numpy-ndarray-transpose-permute-the-axis-of-n-d-array" target="_blank" rel="external">here</a>.</p>
<p>In short: transposing an array means that NumPy just needs to permute the stride and shape information for each axis:</p>
<pre><code>&gt;&gt;&gt; arr.strides
(64, 32, 8)

&gt;&gt;&gt; arr.transpose(1, 0, 2).strides
(32, 64, 8)
</code></pre><p>Notice that the strides for the first and second axes were swapped here. This means that no data needs to be copied; NumPy can simply change how it looks at the memory to construct the array.</p>
<hr>
<p>What are strides?</p>
<p>The values in a 3D array <code>arr</code> are stored in a contiguous block of memory like this:</p>
<pre><code>[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15]
</code></pre><p>In the case of <code>arr</code>, each integer takes up 8 bytes of memory (i.e. we’re using the int64 dtype).</p>
<p>A stride tells NumPy how many bytes to skip in order to move to the next value along an axis. For example, to get the next value in a row in <code>arr</code> (axis 2), we just need to move 8 bytes (1 number).</p>
<p>The strides for <code>arr.transpose(1, 0, 2)</code> are (32, 64, 8). To move along the first axis, instead of 64 bytes (8 numbers) NumPy will now only skip 32 bytes (4 numbers) each time:</p>
<pre><code>[[[0    ...]
  [...  ...]]

 [[4    ...]
  [...  ...]]]
</code></pre><p>Similarly, NumPy will now skip 64 bytes (8 numbers) in order to move along axis 1:</p>
<pre><code>[[[0    ...]
  [8    ...]]

 [[4    ...]
  [12   ...]]]
</code></pre><p>The actual code that does the transposing is written in C and can be found <a href="https://github.com/numpy/numpy/blob/467d4e16d77a2e7c131aac53c639e82b754578c7/numpy/core/src/multiarray/shape.c#l692" target="_blank" rel="external">here</a>.</p>
<p>也可以使用swapaxes方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr</div><div class="line">arr.swapaxes(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line">arr</div></pre></td></tr></table></figure>
<pre><code>array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7]],

       [[ 8,  9, 10, 11],
        [12, 13, 14, 15]]])






array([[[ 0,  4],
        [ 1,  5],
        [ 2,  6],
        [ 3,  7]],

       [[ 8, 12],
        [ 9, 13],
        [10, 14],
        [11, 15]]])






array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7]],

       [[ 8,  9, 10, 11],
        [12, 13, 14, 15]]])
</code></pre><h2 id="通用函数：快速的元素级数组函数"><a href="#通用函数：快速的元素级数组函数" class="headerlink" title="通用函数：快速的元素级数组函数"></a>通用函数：快速的元素级数组函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">10</span>)</div><div class="line">np.sqrt(arr)</div><div class="line">np.exp(arr)</div></pre></td></tr></table></figure>
<pre><code>array([ 0.    ,  1.    ,  1.4142,  1.7321,  2.    ,  2.2361,  2.4495,
        2.6458,  2.8284,  3.    ])






array([    1.    ,     2.7183,     7.3891,    20.0855,    54.5982,
         148.4132,   403.4288,  1096.6332,  2980.958 ,  8103.0839])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">x = randn(<span class="number">8</span>)</div><div class="line">y = randn(<span class="number">8</span>)</div><div class="line">x</div><div class="line">y</div><div class="line">np.maximum(x, y) <span class="comment"># 对应元素进行比较</span></div></pre></td></tr></table></figure>
<pre><code>array([ 0.811 , -0.0214, -0.3702, -0.4856,  1.1449, -0.4246,  0.9396,
        0.0382])






array([-1.223 ,  0.3271, -1.7197, -2.2636, -0.1154, -1.4122, -0.0989,
        0.4477])






array([ 0.811 ,  0.3271, -0.3702, -0.4856,  1.1449, -0.4246,  0.9396,
        0.4477])
</code></pre><p>modf函数挺有意思</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = randn(<span class="number">7</span>) * <span class="number">5</span></div><div class="line">arr</div><div class="line">np.modf(arr)</div></pre></td></tr></table></figure>
<pre><code>array([ 10.3171,  -4.733 ,  -6.3358,   3.2457,  -7.3823,   2.7036,  -2.6173])






(array([ 0.3171, -0.733 , -0.3358,  0.2457, -0.3823,  0.7036, -0.6173]),
 array([ 10.,  -4.,  -6.,   3.,  -7.,   2.,  -2.]))
</code></pre><h2 id="利用数组进行数据处理"><a href="#利用数组进行数据处理" class="headerlink" title="利用数组进行数据处理"></a>利用数组进行数据处理</h2><p>meshgrid产生两个二维数组，对应points中所有的二元组</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">points = np.arange(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">0.01</span>) <span class="comment"># 1000 equally spaced points</span></div><div class="line">xs, ys = np.meshgrid(points, points)</div><div class="line">xs</div><div class="line">ys</div></pre></td></tr></table></figure>
<pre><code>array([[-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       ..., 
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],
       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99]])






array([[-5.  , -5.  , -5.  , ..., -5.  , -5.  , -5.  ],
       [-4.99, -4.99, -4.99, ..., -4.99, -4.99, -4.99],
       [-4.98, -4.98, -4.98, ..., -4.98, -4.98, -4.98],
       ..., 
       [ 4.97,  4.97,  4.97, ...,  4.97,  4.97,  4.97],
       [ 4.98,  4.98,  4.98, ...,  4.98,  4.98,  4.98],
       [ 4.99,  4.99,  4.99, ...,  4.99,  4.99,  4.99]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> matplotlib.pyplot <span class="keyword">import</span> imshow, title</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">z = np.sqrt(xs ** <span class="number">2</span> + ys ** <span class="number">2</span>)</div><div class="line">z</div><div class="line">plt.imshow(z, cmap=plt.cm.gray); plt.colorbar()</div><div class="line">plt.title(<span class="string">"Image plot of $\sqrt&#123;x^2 + y^2&#125;$ for a grid of values"</span>)</div></pre></td></tr></table></figure>
<pre><code>array([[ 7.0711,  7.064 ,  7.0569, ...,  7.0499,  7.0569,  7.064 ],
       [ 7.064 ,  7.0569,  7.0499, ...,  7.0428,  7.0499,  7.0569],
       [ 7.0569,  7.0499,  7.0428, ...,  7.0357,  7.0428,  7.0499],
       ..., 
       [ 7.0499,  7.0428,  7.0357, ...,  7.0286,  7.0357,  7.0428],
       [ 7.0569,  7.0499,  7.0428, ...,  7.0357,  7.0428,  7.0499],
       [ 7.064 ,  7.0569,  7.0499, ...,  7.0428,  7.0499,  7.0569]])






&lt;matplotlib.image.AxesImage at 0x23400a22b38&gt;






&lt;matplotlib.colorbar.Colorbar at 0x23400a7c7b8&gt;






&lt;matplotlib.text.Text at 0x23400a03da0&gt;
</code></pre><p><img src="http://o7ie0tcjk.bkt.clouddn.com/pydata/ch04/meshgrid.png" alt="meshgrid"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plt.draw()</div></pre></td></tr></table></figure>
<pre><code>&lt;matplotlib.figure.Figure at 0x23401396eb8&gt;
</code></pre><h3 id="将条件逻辑表述为数组运算"><a href="#将条件逻辑表述为数组运算" class="headerlink" title="将条件逻辑表述为数组运算"></a>将条件逻辑表述为数组运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xarr = np.array([<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>, <span class="number">1.4</span>, <span class="number">1.5</span>])</div><div class="line">yarr = np.array([<span class="number">2.1</span>, <span class="number">2.2</span>, <span class="number">2.3</span>, <span class="number">2.4</span>, <span class="number">2.5</span>])</div><div class="line">cond = np.array([<span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">True</span>, <span class="keyword">True</span>, <span class="keyword">False</span>])</div></pre></td></tr></table></figure>
<p>注意下面列表生成式的写法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">result = [(x <span class="keyword">if</span> c <span class="keyword">else</span> y)</div><div class="line">          <span class="keyword">for</span> x, y, c <span class="keyword">in</span> zip(xarr, yarr, cond)]</div><div class="line">result</div></pre></td></tr></table></figure>
<pre><code>[1.1000000000000001, 2.2000000000000002, 1.3, 1.3999999999999999, 2.5]
</code></pre><p>上述方法具有一些缺点：</p>
<ol>
<li>大数组处理速度慢（纯Python实现）</li>
<li>无法处理多维数组</li>
</ol>
<p>所以可以使用下面这种方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">result = np.where(cond, xarr, yarr)</div><div class="line">result</div></pre></td></tr></table></figure>
<pre><code>array([ 1.1,  2.2,  1.3,  1.4,  2.5])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr = randn(<span class="number">4</span>, <span class="number">4</span>)</div><div class="line">arr</div><div class="line">np.where(arr &gt; <span class="number">0</span>, <span class="number">2</span>, <span class="number">-2</span>)</div><div class="line">np.where(arr &gt; <span class="number">0</span>, <span class="number">2</span>, arr) <span class="comment"># set only positive values to 2</span></div></pre></td></tr></table></figure>
<pre><code>array([[-0.7355, -0.3188, -0.2358,  0.3137],
       [-0.6196, -0.5803, -0.5504, -1.1508],
       [ 0.1719, -1.1599, -0.7115,  1.7869],
       [-0.2306,  0.2068,  1.5366,  1.6154]])






array([[-2, -2, -2,  2],
       [-2, -2, -2, -2],
       [ 2, -2, -2,  2],
       [-2,  2,  2,  2]])






array([[-0.7355, -0.3188, -0.2358,  2.    ],
       [-0.6196, -0.5803, -0.5504, -1.1508],
       [ 2.    , -1.1599, -0.7115,  2.    ],
       [-0.2306,  2.    ,  2.    ,  2.    ]])
</code></pre><p>显然<code>where</code>还可以应用于更复杂的操作。<br>考虑下面这种逻辑：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">result = []</div><div class="line">for i in range(n):</div><div class="line">    if cond1[i] and cond2[i]:</div><div class="line">        result.append(0)</div><div class="line">    elif cond1[i]:</div><div class="line">        result.append(1)</div><div class="line">    elif cond2[i]:</div><div class="line">        result.append(2)</div><div class="line">    else:</div><div class="line">        result.append(3)</div></pre></td></tr></table></figure>
<p>用<code>where</code>可以这样实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">np.where(cond1 &amp; cond2, 0,</div><div class="line">         np.where(cond1, 1,</div><div class="line">                  np.where(cond2, 2, 3)))</div></pre></td></tr></table></figure>
<p>更加magic一点：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result = 1 * cond1 + 2 * cond2 + 3 * -(cond1 | cond2)</div></pre></td></tr></table></figure>
<h3 id="数学和统计方法"><a href="#数学和统计方法" class="headerlink" title="数学和统计方法"></a>数学和统计方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">arr = np.random.randn(<span class="number">5</span>, <span class="number">4</span>) <span class="comment"># 正态分布</span></div><div class="line">arr</div><div class="line"><span class="comment"># 下面两种方式都可以使用</span></div><div class="line">arr.mean()</div><div class="line">np.mean(arr)</div><div class="line">arr.sum()</div></pre></td></tr></table></figure>
<pre><code>array([[ 1.4513, -0.8225,  0.7011, -0.617 ],
       [ 1.5872,  1.2937,  1.0151,  0.7123],
       [-0.2012, -0.0168, -0.3847,  0.5274],
       [-0.6312, -0.2762,  0.4869,  0.0462],
       [-0.5268, -1.1071,  1.8642,  0.2282]])






0.26650934393195791






0.26650934393195791






5.3301868786391582
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr.mean(axis=<span class="number">1</span>)</div><div class="line">arr.sum(<span class="number">0</span>) <span class="comment"># axis=0</span></div></pre></td></tr></table></figure>
<pre><code>array([ 0.1782,  1.1521, -0.0188, -0.0936,  0.1146])






array([ 1.6793, -0.9289,  3.6826,  0.8971])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr = np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</div><div class="line">arr</div><div class="line">arr.cumsum(<span class="number">0</span>) <span class="comment"># axis=0</span></div><div class="line">arr.cumprod(<span class="number">1</span>) <span class="comment"># axis=1</span></div></pre></td></tr></table></figure>
<pre><code>array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])






array([[ 0,  1,  2],
       [ 3,  5,  7],
       [ 9, 12, 15]], dtype=int32)






array([[  0,   0,   0],
       [  3,  12,  60],
       [  6,  42, 336]], dtype=int32)
</code></pre><h3 id="用于布尔数组的方法"><a href="#用于布尔数组的方法" class="headerlink" title="用于布尔数组的方法"></a>用于布尔数组的方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = randn(<span class="number">100</span>)</div><div class="line">arr</div><div class="line">(arr &gt; <span class="number">0</span>).sum() <span class="comment"># Number of positive values</span></div></pre></td></tr></table></figure>
<pre><code>array([ 0.7828,  0.1372, -0.6264,  1.8927, -0.2104,  0.2822, -0.3672,
       -0.3601,  0.5918,  0.9285,  0.1808, -0.4021,  0.4086, -0.2949,
        0.5633, -0.7462, -0.1635,  0.1482, -0.3226, -1.2127, -0.9821,
        0.0536, -0.1772, -0.4714, -0.9002, -0.0037,  0.7352,  0.5675,
       -1.1612,  0.5288,  0.3319,  0.7315,  0.6841, -0.6881,  1.5654,
       -0.4605, -0.5423,  0.0184, -0.8153, -0.1313,  0.4594,  0.0228,
        0.255 , -2.2361,  0.8703, -1.5153, -0.9458,  0.2769,  0.9986,
        0.7699, -0.7948, -1.2508,  1.7059,  0.1805, -1.0265, -0.0181,
       -0.9415,  0.1265, -0.2576,  0.6791,  0.3969,  0.8027, -0.6792,
       -0.7487, -1.9949, -0.9595,  0.5706, -0.5727, -1.0204,  0.1521,
       -0.9755, -0.4094,  0.67  ,  0.212 ,  0.4081, -0.1435,  0.3964,
       -0.1865, -0.6018, -2.6185, -0.5073, -0.6328, -0.2631,  0.6637,
       -0.5586,  1.3346, -0.5317,  0.8572,  1.1159,  0.9563, -0.0434,
       -1.0534,  0.5869,  0.0502, -0.0479, -0.8673,  0.1531,  1.0646,
       -0.2624, -0.3726])






47
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bools = np.array([<span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">True</span>, <span class="keyword">False</span>])</div><div class="line">bools</div><div class="line">bools.any()</div><div class="line">bools.all()</div></pre></td></tr></table></figure>
<pre><code>array([False, False,  True, False], dtype=bool)






True






False
</code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr = randn(<span class="number">8</span>)</div><div class="line">arr</div><div class="line">arr.sort()</div><div class="line">arr</div></pre></td></tr></table></figure>
<pre><code>array([ 1.0584,  1.9062, -0.2923,  0.7169,  0.5186, -0.6089, -2.0444,
       -0.5661])






array([-2.0444, -0.6089, -0.5661, -0.2923,  0.5186,  0.7169,  1.0584,
        1.9062])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr = randn(<span class="number">5</span>, <span class="number">3</span>)</div><div class="line">arr</div><div class="line">arr.sort(<span class="number">1</span>) <span class="comment"># axis=1</span></div><div class="line">arr</div></pre></td></tr></table></figure>
<pre><code>array([[ 0.0118, -2.8916, -0.4477],
       [-1.9768,  1.859 , -1.128 ],
       [-2.6262,  0.5791,  0.7594],
       [-0.5254, -0.9059,  0.0203],
       [-1.4029, -1.8566,  0.1892]])






array([[-2.8916, -0.4477,  0.0118],
       [-1.9768, -1.128 ,  1.859 ],
       [-2.6262,  0.5791,  0.7594],
       [-0.9059, -0.5254,  0.0203],
       [-1.8566, -1.4029,  0.1892]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">large_arr = randn(<span class="number">1000</span>)</div><div class="line">large_arr</div><div class="line">large_arr.sort()</div><div class="line">large_arr</div><div class="line">large_arr[int(<span class="number">0.05</span> * len(large_arr))] <span class="comment"># 5% quantile</span></div></pre></td></tr></table></figure>
<pre><code>array([ 1.2296,  0.3794, -0.1526,  2.1223, -0.0675,  0.6867, -0.5742,
       -1.4291,  0.6856,  0.1364, -0.3966, -0.7793,  0.4965,  0.2447,
       -0.7487,  0.7695,  0.5358, -0.4813,  0.9949, -0.6489, -0.3656,
        1.9551,  0.8327,  1.497 , -0.4431, -0.8357, -0.821 , -0.7348,
        1.9294, -0.3144,  0.1396, -0.9111,  0.0943,  0.8043,  1.067 ,
        0.9362, -2.2574,  0.7475, -1.0152, -1.1234, -0.3774,  1.076 ,
        0.8743,  1.1864,  0.0801,  0.3995,  0.2536, -0.9371, -1.669 ,
       -2.2444,  1.2544,  1.0539, -0.7579,  0.2963,  0.7496, -1.3655,
        0.1552, -0.6259,  0.2621, -1.5415, -0.1036, -0.5794,  1.2098,
        1.3388,  0.3159,  1.0998,  0.5109, -0.3927,  1.4797, -1.4891,
        0.3624,  0.966 ,  0.0756, -0.4703,  0.1859,  1.6091,  0.662 ,
       -0.4808,  0.8744,  0.4738,  1.1351,  0.0251, -1.017 , -0.849 ,
       -0.1602, -1.5392,  0.0601,  1.7323,  1.1837,  0.4657,  0.8858,
       -0.211 ,  0.1865,  0.673 ,  0.3086, -1.2527, -0.7802,  0.407 ,
       -1.118 , -0.2058,  0.7921,  0.5284, -2.3038, -0.4038, -1.1087,
       -0.827 , -2.6518,  0.3711, -0.0244,  1.1103,  0.2748, -0.7962,
        1.9456,  0.5347,  0.1862, -0.3734, -0.3036,  0.6831, -0.9419,
        1.4848, -0.1247, -0.4138, -0.601 ,  0.6138,  1.1334,  0.4386,
        0.0466, -0.0588,  0.6883, -1.2912, -0.2381,  0.3934,  0.2132,
       -0.4143,  1.0844, -0.5258, -0.9944,  1.0977,  0.3528,  1.9928,
        1.421 ,  0.8634,  0.1973, -1.1799, -2.9433,  2.697 ,  0.4778,
        0.6464,  0.049 , -0.2339,  1.6945, -0.6568, -0.5972, -0.8324,
       -0.6443,  0.0882, -0.3686,  0.0419,  0.5119, -0.641 ,  1.1545,
        1.0735, -0.5329, -0.1126,  0.0375, -1.0699, -1.3153, -1.6097,
        2.5671, -0.9516, -0.388 , -0.0129, -0.0171, -1.0763, -0.7125,
        0.767 ,  0.2254, -0.7638, -0.2065,  1.2797,  0.0784, -0.7762,
        1.7106, -0.0136, -0.4435,  1.2946, -2.5489,  0.4241,  0.5675,
       -0.7596,  0.6128,  1.1161, -1.2456, -0.131 , -0.2684,  1.6461,
       -0.2497, -0.4294,  1.122 ,  0.5969,  0.3335, -0.0453,  1.1567,
        0.0216, -0.7277, -2.5465, -2.4542, -1.5895,  0.4607, -0.8303,
        0.0263,  0.0301, -1.2365, -0.146 , -0.8632,  0.6449,  0.1958,
       -0.6914, -0.3223,  0.4037,  0.9918, -0.3542,  0.8442,  0.7751,
       -1.6248,  2.6081,  0.3524,  1.5298,  0.4421,  1.5228, -1.5263,
       -1.3994,  0.0285, -0.5389,  1.4047, -2.1117, -1.0397,  0.6495,
        0.9073,  1.8738,  0.2913, -1.069 , -0.7835, -0.6437,  0.6739,
        0.3272, -0.8483, -0.2971,  0.2882,  0.1778, -0.6705, -1.4129,
       -0.1935,  0.6615, -0.4423, -1.2472, -0.9816,  0.927 , -2.2774,
        0.5736,  1.3996,  1.1653, -0.3253, -0.2074, -0.2447,  0.4925,
        1.8415, -1.1551, -0.5131, -0.6407,  0.5033, -0.817 ,  0.0479,
       -0.9106,  1.4391, -1.5824, -0.4652,  1.253 , -0.6051,  0.6699,
        0.3803,  1.0767,  1.5449,  0.106 , -0.7215, -0.354 ,  0.1016,
       -1.3191, -0.6596, -0.9632, -0.3655,  0.8411, -0.2314,  1.9493,
       -0.6966, -1.2598,  0.4023,  0.1704, -0.452 ,  1.5924,  0.381 ,
       -0.4731, -1.2467, -0.4264, -0.2298, -0.1792, -0.5009, -1.0032,
        1.0126,  0.5436,  1.1366, -1.0318,  1.3289,  0.3218, -0.2828,
        0.5597, -0.0213, -0.078 ,  0.7667, -0.3984, -1.0263, -0.5557,
       -2.0724, -0.9343, -0.6877,  1.0567, -0.605 ,  1.7923,  0.6351,
       -1.769 ,  0.4175,  0.8266,  0.3767, -0.1508, -0.4301, -0.3397,
        0.7248,  0.188 ,  1.1632, -1.0831, -0.5726, -0.475 ,  0.092 ,
       -0.1566,  1.9074, -1.4261,  1.8589, -0.7534, -1.0767, -0.2704,
        0.7567,  0.5903, -1.5612, -1.1097,  0.3504, -0.9086, -0.1691,
        0.6714, -0.6033,  1.8315, -0.8141,  0.5968, -0.408 , -1.1843,
        0.5146,  0.6201,  0.4293,  0.9797,  1.066 , -1.3325, -1.733 ,
        0.8545,  0.3993, -0.2041, -0.4624,  0.0272, -0.005 ,  0.9237,
       -0.5523,  0.9975, -0.4374,  0.1351, -0.6148,  0.3185,  0.0572,
       -0.3002,  0.0889, -0.0894, -0.5617, -2.0553, -0.2923,  0.7227,
        0.604 , -0.6623, -0.6126, -0.4991,  0.0923, -0.6982,  0.2099,
       -0.6853, -0.4752, -1.625 ,  0.0443,  2.5507, -1.1597,  0.3504,
       -0.7654, -1.4366, -1.3755,  0.3702, -1.7853, -0.7326, -1.2803,
       -0.6089, -0.4472,  0.462 ,  0.7799,  0.3141,  0.8064, -1.0487,
        0.7317, -0.2446,  0.3061,  0.1384, -0.572 , -0.0311,  0.3572,
       -0.6371, -0.2236,  0.0806,  0.6648, -0.148 , -0.2547,  1.3649,
       -0.1595,  1.3632, -0.8858,  1.1801,  0.5533,  2.3306,  0.2724,
        0.7073, -0.5605, -0.8849,  0.9533,  0.3683, -0.2901, -0.0453,
        0.1064,  1.3342, -0.7036,  0.7127,  1.2156,  0.9017,  1.2378,
       -1.1017,  1.0558,  1.4273,  0.7003,  1.1649,  0.0334,  0.3433,
       -0.3997, -0.1195,  1.3725, -0.3746,  0.8444,  0.961 , -0.2644,
        0.3245, -1.3583,  0.387 ,  1.2944,  0.0274, -0.5057,  0.15  ,
        0.6   , -0.5752,  0.3746,  1.7114, -0.0026, -0.1221, -0.8084,
       -0.9521, -0.6332,  0.7254,  1.7032, -0.0879,  0.3329, -1.9525,
       -0.7083, -0.4113,  1.163 ,  0.9018, -0.3667,  0.8419,  0.4417,
        0.2904,  0.1666,  1.3722, -0.4455, -1.4876,  0.4103,  2.3672,
        0.3569, -0.8546,  0.5152,  0.9623,  1.1777,  1.6789, -1.7793,
       -0.7797, -1.0923,  0.07  , -0.8974, -0.3151, -0.3675, -1.9851,
       -2.3352,  0.3566,  1.1929,  1.5275,  1.4349, -1.4742, -0.1913,
        1.5874, -0.7264, -0.5594,  0.3166, -0.9377, -0.6452,  0.394 ,
       -0.2238, -1.1239, -0.0324,  1.3866, -0.6174, -0.1301, -0.0328,
       -0.92  ,  1.8067,  0.2576, -0.5248,  0.4114,  0.1655, -0.1674,
        0.2743,  0.0835, -0.145 ,  1.1658,  1.2624,  0.0404,  2.0929,
        0.6047,  1.0317, -0.4956, -1.5666,  1.1729,  0.484 ,  0.955 ,
        1.0546,  0.0106,  0.5062,  0.3211,  0.8503,  0.4706,  1.9953,
       -0.9362,  0.6326, -0.3154,  1.4987, -0.1695,  1.0906, -0.686 ,
        0.2501, -0.316 ,  0.3032,  0.4873,  0.6402, -0.1209, -0.1857,
       -0.3707, -0.3082, -0.4769, -0.858 , -0.1521, -0.3403, -0.9853,
       -0.5049,  0.3338, -0.3197, -0.5789, -0.7124, -0.8867, -0.0228,
       -1.5519,  1.8517,  0.5229,  0.7613, -0.5586,  0.4827, -1.3011,
       -0.5284, -0.3806, -0.7719,  1.6304,  0.0375, -0.9122, -0.1006,
        0.382 ,  0.0969,  1.7784,  0.1831, -1.8866,  0.2996,  0.4778,
       -0.2491, -1.6537,  0.022 , -0.101 ,  0.5912, -0.2249, -1.1422,
       -0.6436, -1.4096, -0.7446,  0.8055,  1.0727,  0.2426, -0.8079,
       -1.4692,  0.062 , -0.4466,  0.3786, -2.0461,  0.7238, -1.6195,
        1.4005,  0.4881, -0.8161, -0.582 ,  0.3456,  1.2922,  0.2469,
        1.9035,  0.9072, -0.0729, -0.9424, -1.1129,  0.8922, -0.5628,
        1.6215, -0.7022,  0.8395, -0.3423,  0.6048, -0.248 ,  0.7411,
        0.3546,  0.6176, -0.8221, -0.338 , -2.1051, -1.0049, -0.0659,
        0.0917, -0.6661, -0.5234,  0.9574, -0.6316, -0.0047, -0.4773,
        0.1562, -0.116 , -1.6255, -0.9108, -1.4767, -0.7765, -1.7101,
        0.0557,  0.8112,  0.7382,  1.8806,  0.9239,  1.8638,  0.8426,
        0.0359,  0.2743,  1.9204,  1.2223,  0.4575, -0.3408,  0.3727,
        0.5036,  0.5392, -1.3331, -0.4008, -0.1341, -1.5197,  0.1923,
        0.2128,  1.1533, -1.4284, -0.7483, -0.4092,  1.2843, -0.4489,
       -0.6624,  0.9255, -0.0895,  0.3199, -0.2564, -0.1166, -1.4701,
        1.1799, -1.6238,  0.0508,  0.2312,  0.7322, -1.3623, -0.232 ,
       -0.2206,  0.566 ,  1.2411, -1.1563,  1.1777, -1.1481, -0.6716,
        0.4596, -0.2422, -0.8654,  0.4441,  0.1869,  1.4626,  0.7621,
        0.4249,  0.252 ,  0.632 ,  0.5626, -0.7925,  1.1995,  1.5665,
        0.6096,  0.4821, -0.7324, -0.7624,  1.858 , -0.8434, -0.4408,
        0.2011,  0.7552, -0.8955, -1.3255,  0.7022,  0.1507,  0.662 ,
       -1.2229,  0.5199,  0.9837, -0.3947, -0.5262, -1.0424, -1.4582,
        0.5126, -0.3606,  0.4427, -2.3922,  1.2784, -0.8382, -0.0198,
        1.2136, -0.4212, -0.7798, -1.3387, -0.7141,  0.9581, -0.8575,
       -0.2255,  0.8436, -2.2162,  0.0742,  0.9683, -0.3633, -0.0227,
       -1.2176,  1.1482, -0.6697,  0.9643, -1.2802, -0.3651, -1.29  ,
        0.851 ,  1.0167,  1.0011, -1.3014, -0.7205,  1.3621, -0.692 ,
        1.0637,  0.5637,  0.0851,  2.1514, -0.272 ,  0.3136,  0.2179,
        0.7035, -1.3028, -0.1032,  0.0611,  1.2002, -0.7346,  0.9991,
       -0.3747,  0.7908, -0.9573, -0.5114, -0.8607, -0.6711,  1.3335,
       -0.6671, -0.1687,  0.4601,  0.5747, -0.0767, -0.8428,  0.3372,
       -1.7756, -2.5264, -1.503 , -0.5669,  0.0167, -1.961 ,  0.8861,
        1.1902,  2.239 ,  0.2481,  0.7361, -1.1103,  0.8368, -1.0434,
        0.6809, -0.0839, -0.6972, -1.5492, -1.4129,  0.5889,  0.2138,
        1.7689, -0.4861, -0.1124,  0.2032,  1.0664, -0.369 ,  2.3793,
        0.4406, -1.1741,  1.0812,  1.3965, -0.149 ,  0.8793,  1.3494,
        1.2159, -0.0001,  1.1929, -0.1966, -0.1666,  1.7097, -0.4273,
        0.4831, -0.2411, -1.4517, -0.7317,  0.099 ,  1.7922,  0.2313,
       -0.5031, -0.0849,  0.7331, -0.1483, -0.8003,  1.1897,  0.031 ,
       -0.3624, -1.1133,  1.4647,  2.5653, -1.9536, -0.4528, -1.693 ,
        0.4847,  0.1368,  0.6859, -0.9872,  0.8425, -0.1492, -0.1335,
       -0.0229, -0.0903, -0.4381,  1.2552,  1.5763,  0.2375, -0.7597,
        0.0845,  0.0894, -1.6022, -0.1988,  0.3095, -1.0785, -1.6044,
       -0.4922,  0.4583,  0.3168, -2.0485, -1.2147, -0.2803, -0.2071,
        0.0767,  1.9544, -1.7648,  0.2873, -0.4029, -0.8128, -0.1081,
        0.0332,  2.5288,  0.9933,  0.4378, -0.8208, -0.2451,  0.3472,
       -0.2917,  2.0775,  1.7381, -0.467 , -0.8943, -1.4171, -0.3905,
        0.2591,  0.8118, -0.643 ,  1.0387,  0.0049,  1.7299, -0.6882,
       -1.4132, -1.0893,  0.4606, -1.546 , -2.87  ,  0.3492, -1.5968,
        0.9858,  0.1384, -0.6016, -0.9632, -0.9088,  0.3711,  1.3509,
        0.4601, -1.4963, -0.043 ,  0.5588,  0.2638, -1.1118, -0.9376,
       -0.9139,  0.6551,  0.4876, -1.7039, -0.2915,  0.3867, -0.1795,
        1.2298,  0.0893, -0.6019,  1.4109, -1.1918,  0.5009,  0.0157,
       -1.1307,  1.0407,  1.9742, -1.0377, -0.6151, -0.8398,  1.4096,
       -0.012 , -1.5323,  0.3323,  0.0539,  0.2383, -0.4059,  2.285 ,
        0.1536,  0.3838,  0.3623, -0.4326, -0.0975, -1.8119])






array([-2.9433, -2.87  , -2.6518, -2.5489, -2.5465, -2.5264, -2.4542,
       -2.3922, -2.3352, -2.3038, -2.2774, -2.2574, -2.2444, -2.2162,
       -2.1117, -2.1051, -2.0724, -2.0553, -2.0485, -2.0461, -1.9851,
       -1.961 , -1.9536, -1.9525, -1.8866, -1.8119, -1.7853, -1.7793,
       -1.7756, -1.769 , -1.7648, -1.733 , -1.7101, -1.7039, -1.693 ,
       -1.669 , -1.6537, -1.6255, -1.625 , -1.6248, -1.6238, -1.6195,
       -1.6097, -1.6044, -1.6022, -1.5968, -1.5895, -1.5824, -1.5666,
       -1.5612, -1.5519, -1.5492, -1.546 , -1.5415, -1.5392, -1.5323,
       -1.5263, -1.5197, -1.503 , -1.4963, -1.4891, -1.4876, -1.4767,
       -1.4742, -1.4701, -1.4692, -1.4582, -1.4517, -1.4366, -1.4291,
       -1.4284, -1.4261, -1.4171, -1.4132, -1.4129, -1.4129, -1.4096,
       -1.3994, -1.3755, -1.3655, -1.3623, -1.3583, -1.3387, -1.3331,
       -1.3325, -1.3255, -1.3191, -1.3153, -1.3028, -1.3014, -1.3011,
       -1.2912, -1.29  , -1.2803, -1.2802, -1.2598, -1.2527, -1.2472,
       -1.2467, -1.2456, -1.2365, -1.2229, -1.2176, -1.2147, -1.1918,
       -1.1843, -1.1799, -1.1741, -1.1597, -1.1563, -1.1551, -1.1481,
       -1.1422, -1.1307, -1.1239, -1.1234, -1.118 , -1.1133, -1.1129,
       -1.1118, -1.1103, -1.1097, -1.1087, -1.1017, -1.0923, -1.0893,
       -1.0831, -1.0785, -1.0767, -1.0763, -1.0699, -1.069 , -1.0487,
       -1.0434, -1.0424, -1.0397, -1.0377, -1.0318, -1.0263, -1.017 ,
       -1.0152, -1.0049, -1.0032, -0.9944, -0.9872, -0.9853, -0.9816,
       -0.9632, -0.9632, -0.9573, -0.9521, -0.9516, -0.9424, -0.9419,
       -0.9377, -0.9376, -0.9371, -0.9362, -0.9343, -0.92  , -0.9139,
       -0.9122, -0.9111, -0.9108, -0.9106, -0.9088, -0.9086, -0.8974,
       -0.8955, -0.8943, -0.8867, -0.8858, -0.8849, -0.8654, -0.8632,
       -0.8607, -0.858 , -0.8575, -0.8546, -0.849 , -0.8483, -0.8434,
       -0.8428, -0.8398, -0.8382, -0.8357, -0.8324, -0.8303, -0.827 ,
       -0.8221, -0.821 , -0.8208, -0.817 , -0.8161, -0.8141, -0.8128,
       -0.8084, -0.8079, -0.8003, -0.7962, -0.7925, -0.7835, -0.7802,
       -0.7798, -0.7797, -0.7793, -0.7765, -0.7762, -0.7719, -0.7654,
       -0.7638, -0.7624, -0.7597, -0.7596, -0.7579, -0.7534, -0.7487,
       -0.7483, -0.7446, -0.7348, -0.7346, -0.7326, -0.7324, -0.7317,
       -0.7277, -0.7264, -0.7215, -0.7205, -0.7141, -0.7125, -0.7124,
       -0.7083, -0.7036, -0.7022, -0.6982, -0.6972, -0.6966, -0.692 ,
       -0.6914, -0.6882, -0.6877, -0.686 , -0.6853, -0.6716, -0.6711,
       -0.6705, -0.6697, -0.6671, -0.6661, -0.6624, -0.6623, -0.6596,
       -0.6568, -0.6489, -0.6452, -0.6443, -0.6437, -0.6436, -0.643 ,
       -0.641 , -0.6407, -0.6371, -0.6332, -0.6316, -0.6259, -0.6174,
       -0.6151, -0.6148, -0.6126, -0.6089, -0.6051, -0.605 , -0.6033,
       -0.6019, -0.6016, -0.601 , -0.5972, -0.582 , -0.5794, -0.5789,
       -0.5752, -0.5742, -0.5726, -0.572 , -0.5669, -0.5628, -0.5617,
       -0.5605, -0.5594, -0.5586, -0.5557, -0.5523, -0.5389, -0.5329,
       -0.5284, -0.5262, -0.5258, -0.5248, -0.5234, -0.5131, -0.5114,
       -0.5057, -0.5049, -0.5031, -0.5009, -0.4991, -0.4956, -0.4922,
       -0.4861, -0.4813, -0.4808, -0.4773, -0.4769, -0.4752, -0.475 ,
       -0.4731, -0.4703, -0.467 , -0.4652, -0.4624, -0.4528, -0.452 ,
       -0.4489, -0.4472, -0.4466, -0.4455, -0.4435, -0.4431, -0.4423,
       -0.4408, -0.4381, -0.4374, -0.4326, -0.4301, -0.4294, -0.4273,
       -0.4264, -0.4212, -0.4143, -0.4138, -0.4113, -0.4092, -0.408 ,
       -0.4059, -0.4038, -0.4029, -0.4008, -0.3997, -0.3984, -0.3966,
       -0.3947, -0.3927, -0.3905, -0.388 , -0.3806, -0.3774, -0.3747,
       -0.3746, -0.3734, -0.3707, -0.369 , -0.3686, -0.3675, -0.3667,
       -0.3656, -0.3655, -0.3651, -0.3633, -0.3624, -0.3606, -0.3542,
       -0.354 , -0.3423, -0.3408, -0.3403, -0.3397, -0.338 , -0.3253,
       -0.3223, -0.3197, -0.316 , -0.3154, -0.3151, -0.3144, -0.3082,
       -0.3036, -0.3002, -0.2971, -0.2923, -0.2917, -0.2915, -0.2901,
       -0.2828, -0.2803, -0.272 , -0.2704, -0.2684, -0.2644, -0.2564,
       -0.2547, -0.2497, -0.2491, -0.248 , -0.2451, -0.2447, -0.2446,
       -0.2422, -0.2411, -0.2381, -0.2339, -0.232 , -0.2314, -0.2298,
       -0.2255, -0.2249, -0.2238, -0.2236, -0.2206, -0.211 , -0.2074,
       -0.2071, -0.2065, -0.2058, -0.2041, -0.1988, -0.1966, -0.1935,
       -0.1913, -0.1857, -0.1795, -0.1792, -0.1695, -0.1691, -0.1687,
       -0.1674, -0.1666, -0.1602, -0.1595, -0.1566, -0.1526, -0.1521,
       -0.1508, -0.1492, -0.149 , -0.1483, -0.148 , -0.146 , -0.145 ,
       -0.1341, -0.1335, -0.131 , -0.1301, -0.1247, -0.1221, -0.1209,
       -0.1195, -0.1166, -0.116 , -0.1126, -0.1124, -0.1081, -0.1036,
       -0.1032, -0.101 , -0.1006, -0.0975, -0.0903, -0.0895, -0.0894,
       -0.0879, -0.0849, -0.0839, -0.078 , -0.0767, -0.0729, -0.0675,
       -0.0659, -0.0588, -0.0453, -0.0453, -0.043 , -0.0328, -0.0324,
       -0.0311, -0.0244, -0.0229, -0.0228, -0.0227, -0.0213, -0.0198,
       -0.0171, -0.0136, -0.0129, -0.012 , -0.005 , -0.0047, -0.0026,
       -0.0001,  0.0049,  0.0106,  0.0157,  0.0167,  0.0216,  0.022 ,
        0.0251,  0.0263,  0.0272,  0.0274,  0.0285,  0.0301,  0.031 ,
        0.0332,  0.0334,  0.0359,  0.0375,  0.0375,  0.0404,  0.0419,
        0.0443,  0.0466,  0.0479,  0.049 ,  0.0508,  0.0539,  0.0557,
        0.0572,  0.0601,  0.0611,  0.062 ,  0.07  ,  0.0742,  0.0756,
        0.0767,  0.0784,  0.0801,  0.0806,  0.0835,  0.0845,  0.0851,
        0.0882,  0.0889,  0.0893,  0.0894,  0.0917,  0.092 ,  0.0923,
        0.0943,  0.0969,  0.099 ,  0.1016,  0.106 ,  0.1064,  0.1351,
        0.1364,  0.1368,  0.1384,  0.1384,  0.1396,  0.15  ,  0.1507,
        0.1536,  0.1552,  0.1562,  0.1655,  0.1666,  0.1704,  0.1778,
        0.1831,  0.1859,  0.1862,  0.1865,  0.1869,  0.188 ,  0.1923,
        0.1958,  0.1973,  0.2011,  0.2032,  0.2099,  0.2128,  0.2132,
        0.2138,  0.2179,  0.2254,  0.2312,  0.2313,  0.2375,  0.2383,
        0.2426,  0.2447,  0.2469,  0.2481,  0.2501,  0.252 ,  0.2536,
        0.2576,  0.2591,  0.2621,  0.2638,  0.2724,  0.2743,  0.2743,
        0.2748,  0.2873,  0.2882,  0.2904,  0.2913,  0.2963,  0.2996,
        0.3032,  0.3061,  0.3086,  0.3095,  0.3136,  0.3141,  0.3159,
        0.3166,  0.3168,  0.3185,  0.3199,  0.3211,  0.3218,  0.3245,
        0.3272,  0.3323,  0.3329,  0.3335,  0.3338,  0.3372,  0.3433,
        0.3456,  0.3472,  0.3492,  0.3504,  0.3504,  0.3524,  0.3528,
        0.3546,  0.3566,  0.3569,  0.3572,  0.3623,  0.3624,  0.3683,
        0.3702,  0.3711,  0.3711,  0.3727,  0.3746,  0.3767,  0.3786,
        0.3794,  0.3803,  0.381 ,  0.382 ,  0.3838,  0.3867,  0.387 ,
        0.3934,  0.394 ,  0.3993,  0.3995,  0.4023,  0.4037,  0.407 ,
        0.4103,  0.4114,  0.4175,  0.4241,  0.4249,  0.4293,  0.4378,
        0.4386,  0.4406,  0.4417,  0.4421,  0.4427,  0.4441,  0.4575,
        0.4583,  0.4596,  0.4601,  0.4601,  0.4606,  0.4607,  0.462 ,
        0.4657,  0.4706,  0.4738,  0.4778,  0.4778,  0.4821,  0.4827,
        0.4831,  0.484 ,  0.4847,  0.4873,  0.4876,  0.4881,  0.4925,
        0.4965,  0.5009,  0.5033,  0.5036,  0.5062,  0.5109,  0.5119,
        0.5126,  0.5146,  0.5152,  0.5199,  0.5229,  0.5284,  0.5347,
        0.5358,  0.5392,  0.5436,  0.5533,  0.5588,  0.5597,  0.5626,
        0.5637,  0.566 ,  0.5675,  0.5736,  0.5747,  0.5889,  0.5903,
        0.5912,  0.5968,  0.5969,  0.6   ,  0.604 ,  0.6047,  0.6048,
        0.6096,  0.6128,  0.6138,  0.6176,  0.6201,  0.632 ,  0.6326,
        0.6351,  0.6402,  0.6449,  0.6464,  0.6495,  0.6551,  0.6615,
        0.662 ,  0.662 ,  0.6648,  0.6699,  0.6714,  0.673 ,  0.6739,
        0.6809,  0.6831,  0.6856,  0.6859,  0.6867,  0.6883,  0.7003,
        0.7022,  0.7035,  0.7073,  0.7127,  0.7227,  0.7238,  0.7248,
        0.7254,  0.7317,  0.7322,  0.7331,  0.7361,  0.7382,  0.7411,
        0.7475,  0.7496,  0.7552,  0.7567,  0.7613,  0.7621,  0.7667,
        0.767 ,  0.7695,  0.7751,  0.7799,  0.7908,  0.7921,  0.8043,
        0.8055,  0.8064,  0.8112,  0.8118,  0.8266,  0.8327,  0.8368,
        0.8395,  0.8411,  0.8419,  0.8425,  0.8426,  0.8436,  0.8442,
        0.8444,  0.8503,  0.851 ,  0.8545,  0.8634,  0.8743,  0.8744,
        0.8793,  0.8858,  0.8861,  0.8922,  0.9017,  0.9018,  0.9072,
        0.9073,  0.9237,  0.9239,  0.9255,  0.927 ,  0.9362,  0.9533,
        0.955 ,  0.9574,  0.9581,  0.961 ,  0.9623,  0.9643,  0.966 ,
        0.9683,  0.9797,  0.9837,  0.9858,  0.9918,  0.9933,  0.9949,
        0.9975,  0.9991,  1.0011,  1.0126,  1.0167,  1.0317,  1.0387,
        1.0407,  1.0539,  1.0546,  1.0558,  1.0567,  1.0637,  1.066 ,
        1.0664,  1.067 ,  1.0727,  1.0735,  1.076 ,  1.0767,  1.0812,
        1.0844,  1.0906,  1.0977,  1.0998,  1.1103,  1.1161,  1.122 ,
        1.1334,  1.1351,  1.1366,  1.1482,  1.1533,  1.1545,  1.1567,
        1.163 ,  1.1632,  1.1649,  1.1653,  1.1658,  1.1729,  1.1777,
        1.1777,  1.1799,  1.1801,  1.1837,  1.1864,  1.1897,  1.1902,
        1.1929,  1.1929,  1.1995,  1.2002,  1.2098,  1.2136,  1.2156,
        1.2159,  1.2223,  1.2296,  1.2298,  1.2378,  1.2411,  1.253 ,
        1.2544,  1.2552,  1.2624,  1.2784,  1.2797,  1.2843,  1.2922,
        1.2944,  1.2946,  1.3289,  1.3335,  1.3342,  1.3388,  1.3494,
        1.3509,  1.3621,  1.3632,  1.3649,  1.3722,  1.3725,  1.3866,
        1.3965,  1.3996,  1.4005,  1.4047,  1.4096,  1.4109,  1.421 ,
        1.4273,  1.4349,  1.4391,  1.4626,  1.4647,  1.4797,  1.4848,
        1.497 ,  1.4987,  1.5228,  1.5275,  1.5298,  1.5449,  1.5665,
        1.5763,  1.5874,  1.5924,  1.6091,  1.6215,  1.6304,  1.6461,
        1.6789,  1.6945,  1.7032,  1.7097,  1.7106,  1.7114,  1.7299,
        1.7323,  1.7381,  1.7689,  1.7784,  1.7922,  1.7923,  1.8067,
        1.8315,  1.8415,  1.8517,  1.858 ,  1.8589,  1.8638,  1.8738,
        1.8806,  1.9035,  1.9074,  1.9204,  1.9294,  1.9456,  1.9493,
        1.9544,  1.9551,  1.9742,  1.9928,  1.9953,  2.0775,  2.0929,
        2.1223,  2.1514,  2.239 ,  2.285 ,  2.3306,  2.3672,  2.3793,
        2.5288,  2.5507,  2.5653,  2.5671,  2.6081,  2.697 ])






-1.5519406239259821
</code></pre><h3 id="唯一化以及其他的集合逻辑"><a href="#唯一化以及其他的集合逻辑" class="headerlink" title="唯一化以及其他的集合逻辑"></a>唯一化以及其他的集合逻辑</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">names = np.array([<span class="string">'Bob'</span>, <span class="string">'Joe'</span>, <span class="string">'Will'</span>, <span class="string">'Bob'</span>, <span class="string">'Will'</span>, <span class="string">'Joe'</span>, <span class="string">'Joe'</span>])</div><div class="line">np.unique(names)</div><div class="line">ints = np.array([<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>])</div><div class="line">np.unique(ints)</div></pre></td></tr></table></figure>
<pre><code>array([&#39;Bob&#39;, &#39;Joe&#39;, &#39;Will&#39;], 
      dtype=&#39;&lt;U4&#39;)






array([1, 2, 3, 4])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sorted(set(names))</div></pre></td></tr></table></figure>
<pre><code>[&#39;Bob&#39;, &#39;Joe&#39;, &#39;Will&#39;]
</code></pre><p>in1d感觉挺有用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">values = np.array([<span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>])</div><div class="line">np.in1d(values, [<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>])</div></pre></td></tr></table></figure>
<pre><code>array([ True, False, False,  True,  True, False,  True], dtype=bool)
</code></pre><h2 id="用于数组的文件输入输出"><a href="#用于数组的文件输入输出" class="headerlink" title="用于数组的文件输入输出"></a>用于数组的文件输入输出</h2><h3 id="将数组以二进制的形式保存到磁盘"><a href="#将数组以二进制的形式保存到磁盘" class="headerlink" title="将数组以二进制的形式保存到磁盘"></a>将数组以二进制的形式保存到磁盘</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">10</span>)</div><div class="line">np.save(<span class="string">'some_array'</span>, arr)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">np.load(<span class="string">'some_array.npy'</span>)</div></pre></td></tr></table></figure>
<pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
</code></pre><p>压缩存储，并且可以存储多个</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">np.savez(<span class="string">'array_archive.npz'</span>, a=arr[:<span class="number">4</span>], b=arr)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arch = np.load(<span class="string">'array_archive.npz'</span>)</div><div class="line">arch[<span class="string">'a'</span>]</div><div class="line">arch[<span class="string">'b'</span>]</div></pre></td></tr></table></figure>
<pre><code>array([0, 1, 2, 3])






array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
</code></pre><h3 id="存取文本文件"><a href="#存取文本文件" class="headerlink" title="存取文本文件"></a>存取文本文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">!more ch04\array_ex.txt</div></pre></td></tr></table></figure>
<pre><code>0.580052,0.186730,1.040717,1.134411
0.194163,-0.636917,-0.938659,0.124094
-0.126410,0.268607,-0.695724,0.047428
-1.484413,0.004176,-0.744203,0.005487
2.302869,0.200131,1.670238,-1.881090
-0.193230,1.047233,0.482803,0.960334
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr = np.loadtxt(<span class="string">'.\\ch04\\array_ex.txt'</span>, delimiter=<span class="string">','</span>)</div><div class="line">arr</div></pre></td></tr></table></figure>
<pre><code>array([[ 0.5801,  0.1867,  1.0407,  1.1344],
       [ 0.1942, -0.6369, -0.9387,  0.1241],
       [-0.1264,  0.2686, -0.6957,  0.0474],
       [-1.4844,  0.0042, -0.7442,  0.0055],
       [ 2.3029,  0.2001,  1.6702, -1.8811],
       [-0.1932,  1.0472,  0.4828,  0.9603]])
</code></pre><h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">x = np.array([[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>], [<span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>]])</div><div class="line">y = np.array([[<span class="number">6.</span>, <span class="number">23.</span>], [<span class="number">-1</span>, <span class="number">7</span>], [<span class="number">8</span>, <span class="number">9</span>]])</div><div class="line">x</div><div class="line">y</div><div class="line">x.dot(y)  <span class="comment"># equivalently np.dot(x, y)</span></div></pre></td></tr></table></figure>
<pre><code>array([[ 1.,  2.,  3.],
       [ 4.,  5.,  6.]])






array([[  6.,  23.],
       [ -1.,   7.],
       [  8.,   9.]])






array([[  28.,   64.],
       [  67.,  181.]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">np.dot(x, np.ones(<span class="number">3</span>))</div></pre></td></tr></table></figure>
<pre><code>array([  6.,  15.])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">np.random.seed(<span class="number">12345</span>)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> numpy.linalg <span class="keyword">import</span> inv, qr</div><div class="line">X = randn(<span class="number">5</span>, <span class="number">5</span>)</div><div class="line">X</div><div class="line">mat = X.T.dot(X)</div><div class="line">mat</div><div class="line">inv(mat)</div><div class="line">mat.dot(inv(mat))</div><div class="line">q, r = qr(mat) <span class="comment"># QR分解</span></div><div class="line">r</div></pre></td></tr></table></figure>
<pre><code>array([[-0.5031, -0.6223, -0.9212, -0.7262,  0.2229],
       [ 0.0513, -1.1577,  0.8167,  0.4336,  1.0107],
       [ 1.8249, -0.9975,  0.8506, -0.1316,  0.9124],
       [ 0.1882,  2.1695, -0.1149,  2.0037,  0.0296],
       [ 0.7953,  0.1181, -0.7485,  0.585 ,  0.1527]])






array([[ 4.2538, -1.0645,  1.4407,  0.9898,  1.7318],
       [-1.0645,  7.4431, -1.5585,  4.4972, -2.1367],
       [ 1.4407, -1.5585,  2.8126,  0.243 ,  1.2786],
       [ 0.9898,  4.4972,  0.243 ,  5.0897,  0.305 ],
       [ 1.7318, -2.1367,  1.2786,  0.305 ,  1.928 ]])






array([[ 0.4057, -0.1875, -0.0764,  0.1229, -0.541 ],
       [-0.1875,  2.462 ,  0.2537, -2.3367,  3.0984],
       [-0.0764,  0.2537,  0.5435, -0.2369,  0.0268],
       [ 0.1229, -2.3367, -0.2369,  2.4239, -2.9264],
       [-0.541 ,  3.0984,  0.0268, -2.9264,  4.8837]])






array([[ 1.,  0., -0., -0., -0.],
       [ 0.,  1., -0., -0., -0.],
       [ 0.,  0.,  1.,  0., -0.],
       [ 0., -0.,  0.,  1.,  0.],
       [ 0.,  0., -0.,  0.,  1.]])






array([[-5.0281,  2.7734, -2.8428, -1.0619, -3.0078],
       [ 0.    , -8.7212,  1.2925, -6.5614,  1.622 ],
       [ 0.    ,  0.    , -2.0873, -1.0487, -0.6291],
       [ 0.    ,  0.    ,  0.    , -1.408 , -0.955 ],
       [ 0.    ,  0.    ,  0.    ,  0.    ,  0.1537]])
</code></pre><h2 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">samples = np.random.normal(size=(<span class="number">4</span>, <span class="number">4</span>))</div><div class="line">samples</div></pre></td></tr></table></figure>
<pre><code>array([[-0.5196,  1.297 ,  0.9062,  0.5809],
       [ 1.2233, -1.3301,  1.0483,  0.357 ],
       [-0.7935, -0.406 , -0.0096, -0.596 ],
       [ 1.3833, -0.2029, -1.0547, -0.9795]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> normalvariate</div><div class="line">N = <span class="number">1000000</span></div><div class="line">%timeit samples = [normalvariate(<span class="number">0</span>, <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</div><div class="line">%timeit np.random.normal(size=N)</div></pre></td></tr></table></figure>
<pre><code>1 loop, best of 3: 814 ms per loop
10 loops, best of 3: 28.4 ms per loop
</code></pre><p>可以看出numpy确实要快很多</p>
<h2 id="Example-随机游走"><a href="#Example-随机游走" class="headerlink" title="Example: 随机游走"></a>Example: 随机游走</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line">position = <span class="number">0</span></div><div class="line">walk = [position]</div><div class="line">steps = <span class="number">1000</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(steps):</div><div class="line">    step = <span class="number">1</span> <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">1</span>) <span class="keyword">else</span> <span class="number">-1</span></div><div class="line">    position += step</div><div class="line">    walk.append(position)</div></pre></td></tr></table></figure>
<p>通过numpy来实现上述过程</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">np.random.seed(<span class="number">12345</span>)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nsteps = <span class="number">1000</span></div><div class="line">draws = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, size=nsteps)</div><div class="line">steps = np.where(draws &gt; <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>)</div><div class="line">walk = steps.cumsum()</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line">index = [x + <span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(len(walk))]</div><div class="line">plt.plot(index, walk)</div></pre></td></tr></table></figure>
<pre><code>[&lt;matplotlib.lines.Line2D at 0x234014e9f98&gt;]
</code></pre><p><img src="http://o7ie0tcjk.bkt.clouddn.com/pydata/ch04/random_walk.png" alt="random_walk"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">walk.min()</div><div class="line">walk.max()</div></pre></td></tr></table></figure>
<pre><code>-3






31
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(np.abs(walk) &gt;= <span class="number">10</span>).argmax() <span class="comment"># the first index</span></div></pre></td></tr></table></figure>
<pre><code>37
</code></pre><h3 id="一次模拟多次随机漫步"><a href="#一次模拟多次随机漫步" class="headerlink" title="一次模拟多次随机漫步"></a>一次模拟多次随机漫步</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">nwalks = <span class="number">5000</span> <span class="comment"># 5000 random walk</span></div><div class="line">nsteps = <span class="number">1000</span></div><div class="line">draws = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, size=(nwalks, nsteps)) <span class="comment"># 0 or 1</span></div><div class="line">steps = np.where(draws &gt; <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>)</div><div class="line">walks = steps.cumsum(<span class="number">1</span>)</div><div class="line">walks</div></pre></td></tr></table></figure>
<pre><code>array([[ -1,   0,  -1, ...,  24,  23,  22],
       [ -1,   0,  -1, ..., -36, -37, -36],
       [  1,   2,   3, ..., -42, -41, -40],
       ..., 
       [  1,   0,  -1, ...,  48,  49,  50],
       [ -1,  -2,  -3, ..., -38, -39, -40],
       [ -1,   0,   1, ..., -48, -47, -48]], dtype=int32)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">walks.max()</div><div class="line">walks.min()</div></pre></td></tr></table></figure>
<pre><code>130






-117
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hits30 = (np.abs(walks) &gt;= <span class="number">30</span>).any(<span class="number">1</span>)</div><div class="line">hits30</div><div class="line">hits30.sum() <span class="comment"># Number that hit 30 or -30</span></div></pre></td></tr></table></figure>
<pre><code>array([ True,  True,  True, ...,  True,  True,  True], dtype=bool)






3412
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">crossing_times = (np.abs(walks[hits30]) &gt;= <span class="number">30</span>).argmax(<span class="number">1</span>)</div><div class="line">crossing_times.mean()</div></pre></td></tr></table></figure>
<pre><code>497.04103165298943
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Numpy基础：数组和矢量计算&quot;&gt;&lt;a href=&quot;#Numpy基础：数组和矢量计算&quot; class=&quot;headerlink&quot; title=&quot;Numpy基础：数组和矢量计算&quot;&gt;&lt;/a&gt;Numpy基础：数组和矢量计算&lt;/h1&gt;&lt;figure class=&quot;highli
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="numpy" scheme="http://yoursite.com/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>Naive Bayes</title>
    <link href="http://yoursite.com/2017/02/25/Naive-Bayes/"/>
    <id>http://yoursite.com/2017/02/25/Naive-Bayes/</id>
    <published>2017-02-25T05:40:23.000Z</published>
    <updated>2017-02-25T09:58:29.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用朴素贝叶斯进行文本分类"><a href="#利用朴素贝叶斯进行文本分类" class="headerlink" title="利用朴素贝叶斯进行文本分类"></a>利用朴素贝叶斯进行文本分类</h1><h2 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h2><p>从文本中构建词向量</p>
<p>下面写一个词表到向量的转换函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">LoadDataSet</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">""" Load a vector-like data set tranfered by</span></div><div class="line">    a data set list that generated by artifical.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        return_vec: the vector-like data set.</div><div class="line">        class_vec: the class label corresponds to the data items.</div><div class="line">    """</div><div class="line">    posting_list = [[<span class="string">'my'</span>, <span class="string">'dog'</span>, <span class="string">'has'</span>, <span class="string">'flea'</span>,</div><div class="line">                     <span class="string">'problems'</span>, <span class="string">'help'</span>, <span class="string">'please'</span>],</div><div class="line">                    [<span class="string">'maybe'</span>, <span class="string">'not'</span>, <span class="string">'take'</span>, <span class="string">'him'</span>,</div><div class="line">                     <span class="string">'to'</span>, <span class="string">'dog'</span>, <span class="string">'park'</span>, <span class="string">'stupid'</span>],</div><div class="line">                    [<span class="string">'my'</span>, <span class="string">'dalmation'</span>, <span class="string">'is'</span>, <span class="string">'so'</span>, <span class="string">'cute'</span>,</div><div class="line">                     <span class="string">'I'</span>, <span class="string">'love'</span>, <span class="string">'him'</span>],</div><div class="line">                    [<span class="string">'stop'</span>, <span class="string">'posting'</span>, <span class="string">'stupid'</span>, <span class="string">'worthless'</span>, <span class="string">'garbage'</span>],</div><div class="line">                    [<span class="string">'mr'</span>, <span class="string">'licks'</span>, <span class="string">'ate'</span>, <span class="string">'my'</span>, <span class="string">'steak'</span>, <span class="string">'how'</span>,</div><div class="line">                     <span class="string">'to'</span>, <span class="string">'stop'</span>, <span class="string">'him'</span>],</div><div class="line">                    [<span class="string">'quit'</span>, <span class="string">'buying'</span>, <span class="string">'worthless'</span>, <span class="string">'dog'</span>, <span class="string">'food'</span>, <span class="string">'stupid'</span>]]</div><div class="line">    class_vec = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]  <span class="comment"># 1 is abusive, 0 not</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> posting_list, class_vec</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CreateVocabList</span><span class="params">(data_set)</span>:</span></div><div class="line">    <span class="string">""" Create vocabulary list from vector-like data set.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        data_set: the data source.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        vocab_list: the vocabulary list.</div><div class="line">    """</div><div class="line"></div><div class="line">    vocab_set = set([])</div><div class="line">    <span class="keyword">for</span> document <span class="keyword">in</span> data_set:</div><div class="line">        vocab_set = vocab_set | set(document)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> list(vocab_set)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">SetOfWords2Vec</span><span class="params">(vocab_list, input_set)</span>:</span></div><div class="line">    <span class="string">""" Transfer the words list to vector for each posting.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        vocab_list: The vocabulary list.</div><div class="line">        input_set: The posting that ready to transfer to vector.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        return_vec: the result vector.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># Initialize</span></div><div class="line">    return_vec = [<span class="number">0</span>] * len(vocab_list)</div><div class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> input_set:</div><div class="line">        <span class="keyword">if</span> word <span class="keyword">in</span> vocab_list:</div><div class="line">            return_vec[vocab_list.index(word)] = <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"the word: %s is not in my Vocabulary"</span> % word)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> return_vec</div></pre></td></tr></table></figure>
<p>下面对函数的功能进行测试</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">13</span>]: <span class="keyword">import</span> bayes</div><div class="line"></div><div class="line">In [<span class="number">14</span>]: list_of_posts, list_classes = bayes.LoadDataSet()</div><div class="line"></div><div class="line">In [<span class="number">15</span>]: my_vocab_list = bayes.CreateVocabList(list_of_posts)</div><div class="line"></div><div class="line">In [<span class="number">16</span>]: my_vocab_list</div><div class="line">Out[<span class="number">16</span>]:</div><div class="line">[<span class="string">'help'</span>,</div><div class="line"> <span class="string">'worthless'</span>,</div><div class="line"> <span class="string">'I'</span>,</div><div class="line"> <span class="string">'take'</span>,</div><div class="line"> <span class="string">'love'</span>,</div><div class="line"> <span class="string">'maybe'</span>,</div><div class="line"> <span class="string">'stupid'</span>,</div><div class="line"> <span class="string">'to'</span>,</div><div class="line"> <span class="string">'not'</span>,</div><div class="line"> <span class="string">'please'</span>,</div><div class="line"> <span class="string">'quit'</span>,</div><div class="line"> <span class="string">'park'</span>,</div><div class="line"> <span class="string">'posting'</span>,</div><div class="line"> <span class="string">'dog'</span>,</div><div class="line"> <span class="string">'dalmation'</span>,</div><div class="line"> <span class="string">'steak'</span>,</div><div class="line"> <span class="string">'my'</span>,</div><div class="line"> <span class="string">'how'</span>,</div><div class="line"> <span class="string">'food'</span>,</div><div class="line"> <span class="string">'so'</span>,</div><div class="line"> <span class="string">'stop'</span>,</div><div class="line"> <span class="string">'is'</span>,</div><div class="line"> <span class="string">'garbage'</span>,</div><div class="line"> <span class="string">'flea'</span>,</div><div class="line"> <span class="string">'problems'</span>,</div><div class="line"> <span class="string">'has'</span>,</div><div class="line"> <span class="string">'buying'</span>,</div><div class="line"> <span class="string">'ate'</span>,</div><div class="line"> <span class="string">'him'</span>,</div><div class="line"> <span class="string">'licks'</span>,</div><div class="line"> <span class="string">'mr'</span>,</div><div class="line"> <span class="string">'cute'</span>]</div><div class="line"></div><div class="line">In [<span class="number">17</span>]: bayes.SetOfWords2Vec(my_vocab_list, list_of_posts[<span class="number">0</span>])</div><div class="line">Out[<span class="number">17</span>]:</div><div class="line">[<span class="number">1</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">1</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">1</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">1</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">1</span>,</div><div class="line"> <span class="number">1</span>,</div><div class="line"> <span class="number">1</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>]</div><div class="line"></div><div class="line">In [<span class="number">18</span>]: bayes.SetOfWords2Vec(my_vocab_list, list_of_posts[<span class="number">3</span>])</div><div class="line">Out[<span class="number">18</span>]:</div><div class="line">[<span class="number">0</span>,</div><div class="line"> <span class="number">1</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">1</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">1</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">1</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">1</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>,</div><div class="line"> <span class="number">0</span>]</div></pre></td></tr></table></figure>
<p>看上去一切都work，可以进入下一步了。</p>
<h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>从词向量计算概率</p>
<p>我们来看看贝叶斯公式：</p>
<script type="math/tex; mode=display">p(c_i | w) = \frac{p(w | c_i) p(c_i)}{p(w)}</script><p>这里$w$代表词向量， 可以看出$c_i$的计算十分简单，值得注意的是，根据朴素贝叶斯的假设，有：</p>
<script type="math/tex; mode=display">p(w | c_i) = p(w_0, w_1, w_2, \cdots, w_N | c_i) = p(w_0 | c_i)p(w_1 | c_i)p(w_2 | c_i) \cdots p(w_N | c_i)</script><p>当需要预测新样本的类别时：</p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/nb/nb.png" alt="nb"></p>
<p>这样一切就很清楚了，下面给出伪代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">计算每个类别的文档数目</div><div class="line"><span class="keyword">for</span> 每一篇文档：</div><div class="line">	<span class="keyword">for</span> 每一个类别：</div><div class="line">		<span class="keyword">if</span> 词条出现在文档中：</div><div class="line">			增加该词条的计数值</div><div class="line">		增加总词条数的计数值</div><div class="line">	<span class="keyword">for</span> 每一个类别：</div><div class="line">		<span class="keyword">for</span> 每一个词条：</div><div class="line">			将该词条的数目除以总词条数目得到条件概率</div><div class="line">	返回每个类别的条件概率</div></pre></td></tr></table></figure>
<p>注意，这里的$p(w_j | c_i)$是要根据整个训练集来算，代码实现如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">TrainNaiveBayes0</span><span class="params">(train_matrix, train_category)</span>:</span></div><div class="line">    <span class="string">""" the training method.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        train_matrix: The train data.</div><div class="line">        train_category: The train label.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        p0_vect: The conditional probability of w by c0</div><div class="line">        p1_vect: The conditional probability of w by c1</div><div class="line">        p_abusive: The conditional probability of c1</div><div class="line">    """</div><div class="line"></div><div class="line">    num_train_docs = len(train_matrix)</div><div class="line">    num_words = len(train_matrix[<span class="number">0</span>])</div><div class="line">    p_abusive = sum(train_category) / num_train_docs</div><div class="line">    p0_num = zeros(num_words)</div><div class="line">    p1_num = zeros(num_words)</div><div class="line">    p0_denom = <span class="number">0.0</span></div><div class="line">    p1_denom = <span class="number">0.0</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_train_docs):</div><div class="line">        <span class="keyword">if</span> train_category[i] == <span class="number">1</span>:</div><div class="line">            p1_num += train_matrix[i]</div><div class="line">            p1_denom += sum(train_matrix[i])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            p0_num += train_matrix[i]</div><div class="line">            p0_denom += sum(train_matrix[i])</div><div class="line"></div><div class="line">    p1_vect = p1_num / p1_denom</div><div class="line">    p0_vect = p0_num / p0_denom</div><div class="line"></div><div class="line">    <span class="keyword">return</span> p0_vect, p1_vect, p_abusive</div></pre></td></tr></table></figure>
<p>同样进行一下测试：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">25</span>]: train_mat = []</div><div class="line"></div><div class="line">In [<span class="number">26</span>]: <span class="keyword">for</span> post_in_doc <span class="keyword">in</span> list_of_posts:</div><div class="line">    ...:     train_mat.append(bayes.SetOfWords2Vec(my_vocab_list, post_in_doc))</div><div class="line">    ...:</div><div class="line"></div><div class="line">In [<span class="number">27</span>]: p0_v, p1_v, p_ab = bayes.TrainNaiveBayes0(train_mat, list_classes)</div><div class="line"></div><div class="line">In [<span class="number">28</span>]: p_ab</div><div class="line">Out[<span class="number">28</span>]: <span class="number">0.5</span></div><div class="line"></div><div class="line">In [<span class="number">29</span>]: p0_v</div><div class="line">Out[<span class="number">29</span>]:</div><div class="line">array([ <span class="number">0.04166667</span>,  <span class="number">0.</span>        ,  <span class="number">0.04166667</span>,  <span class="number">0.</span>        ,  <span class="number">0.04166667</span>,</div><div class="line">        <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.04166667</span>,  <span class="number">0.</span>        ,  <span class="number">0.04166667</span>,</div><div class="line">        <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.04166667</span>,  <span class="number">0.04166667</span>,</div><div class="line">        <span class="number">0.04166667</span>,  <span class="number">0.125</span>     ,  <span class="number">0.04166667</span>,  <span class="number">0.</span>        ,  <span class="number">0.04166667</span>,</div><div class="line">        <span class="number">0.04166667</span>,  <span class="number">0.04166667</span>,  <span class="number">0.</span>        ,  <span class="number">0.04166667</span>,  <span class="number">0.04166667</span>,</div><div class="line">        <span class="number">0.04166667</span>,  <span class="number">0.</span>        ,  <span class="number">0.04166667</span>,  <span class="number">0.08333333</span>,  <span class="number">0.04166667</span>,</div><div class="line">        <span class="number">0.04166667</span>,  <span class="number">0.04166667</span>])</div><div class="line"></div><div class="line">In [<span class="number">30</span>]: p1_v</div><div class="line">Out[<span class="number">30</span>]:</div><div class="line">array([ <span class="number">0.</span>        ,  <span class="number">0.10526316</span>,  <span class="number">0.</span>        ,  <span class="number">0.05263158</span>,  <span class="number">0.</span>        ,</div><div class="line">        <span class="number">0.05263158</span>,  <span class="number">0.15789474</span>,  <span class="number">0.05263158</span>,  <span class="number">0.05263158</span>,  <span class="number">0.</span>        ,</div><div class="line">        <span class="number">0.05263158</span>,  <span class="number">0.05263158</span>,  <span class="number">0.05263158</span>,  <span class="number">0.10526316</span>,  <span class="number">0.</span>        ,</div><div class="line">        <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.</span>        ,  <span class="number">0.05263158</span>,  <span class="number">0.</span>        ,</div><div class="line">        <span class="number">0.05263158</span>,  <span class="number">0.</span>        ,  <span class="number">0.05263158</span>,  <span class="number">0.</span>        ,  <span class="number">0.</span>        ,</div><div class="line">        <span class="number">0.</span>        ,  <span class="number">0.05263158</span>,  <span class="number">0.</span>        ,  <span class="number">0.05263158</span>,  <span class="number">0.</span>        ,</div><div class="line">        <span class="number">0.</span>        ,  <span class="number">0.</span>        ])</div></pre></td></tr></table></figure>
<p>但是上述代码存在一些缺陷，首先，计算$p(w_j | c_i)$可能会出现结果为0的情况，那么最后的结果就会为0，那么需要进行一些修改 (为什么是2？)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p0_num = ones(num_words)</div><div class="line">p1_num = ones(num_words)</div><div class="line">p0_denom = 2.0</div><div class="line">p1_denom = 2.0</div></pre></td></tr></table></figure>
<p>另外一个就是下溢的问题，所以要改用log函数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p1_vect = log(p1_num / p1_denom)</div><div class="line">p0_vect = log(p0_num / p0_denom)</div></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>最后写一个分类和测试函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ClassifyNaiveBayes</span><span class="params">(vec_to_classify, p0_vect, p1_vect, p_abusive)</span>:</span></div><div class="line">    <span class="string">""" Classify.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        vec_to_classify: The vector to classify.</div><div class="line">        p0_vect: The conditional probability of w by c0.</div><div class="line">        p1_vect: The conditional probability of w by c1.</div><div class="line">        p_abusive: The conditional probability of c1.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        0: The predict class is 0</div><div class="line">        1: The predict class is 1</div><div class="line"></div><div class="line">    """</div><div class="line"></div><div class="line">    p1 = sum(vec_to_classify * p1_vect) + log(p_abusive)</div><div class="line">    p0 = sum(vec_to_classify * p0_vect) + log(<span class="number">1</span> - p_abusive)</div><div class="line">    <span class="keyword">if</span> p1 &gt; p0:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">TestNaiveBayes</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">""" A test method.</span></div><div class="line">    """</div><div class="line"></div><div class="line">    list_of_posts, list_of_classes = LoadDataSet()</div><div class="line">    my_vocab_list = CreateVocabList(list_of_posts)</div><div class="line">    train_mat = []</div><div class="line">    <span class="keyword">for</span> post_in_doc <span class="keyword">in</span> list_of_posts:</div><div class="line">        train_mat.append(SetOfWords2Vec(my_vocab_list, post_in_doc))</div><div class="line">    p0_v, p1_v, p_ab = TrainNaiveBayes0(</div><div class="line">        array(train_mat), array(list_of_classes))</div><div class="line">    test_entry = [<span class="string">'love'</span>, <span class="string">'my'</span>, <span class="string">'dalmation'</span>]</div><div class="line">    this_doc = array(SetOfWords2Vec(my_vocab_list, test_entry))</div><div class="line">    print(test_entry, <span class="string">'classified as: '</span>,</div><div class="line">          ClassifyNaiveBayes(this_doc, p0_v, p1_v, p_ab))</div><div class="line">    test_entry = [<span class="string">'stupid'</span>, <span class="string">'garbage'</span>]</div><div class="line">    this_doc = array(SetOfWords2Vec(my_vocab_list, test_entry))</div><div class="line">    print(test_entry, <span class="string">'classified as: '</span>,</div><div class="line">          ClassifyNaiveBayes(this_doc, p0_v, p1_v, p_ab))</div></pre></td></tr></table></figure>
<p>Test</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">32</span>]: bayes.TestNaiveBayes()</div><div class="line">[<span class="string">'love'</span>, <span class="string">'my'</span>, <span class="string">'dalmation'</span>] classified <span class="keyword">as</span>:  <span class="number">0</span></div><div class="line">[<span class="string">'stupid'</span>, <span class="string">'garbage'</span>] classified <span class="keyword">as</span>:  <span class="number">1</span></div></pre></td></tr></table></figure>
<p>Ok, bravo!</p>
<h2 id="词袋模型"><a href="#词袋模型" class="headerlink" title="词袋模型"></a>词袋模型</h2><p>现在有一个问题， 到目前为止，我们将每个词是否出现作为特征，这被称为词集模型。但是如果有一个词在文档中不止出现一次，那么就需要词袋模型进行建模。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">BagOfWords2Vec</span><span class="params">(vocab_list, input_set)</span>:</span></div><div class="line">    <span class="string">""" Transfer the words list to vector for each posting.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        vocab_list: The vocabulary list.</div><div class="line">        input_set: The posting that ready to transfer to vector.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        return_vec: the result vector.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># Initialize</span></div><div class="line">    return_vec = [<span class="number">0</span>] * len(vocab_list)</div><div class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> input_set:</div><div class="line">        <span class="keyword">if</span> word <span class="keyword">in</span> vocab_list:</div><div class="line">            return_vec[vocab_list.index(word)] += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"the word: %s is not in my Vocabulary"</span> % word)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> return_vec</div></pre></td></tr></table></figure>
<h1 id="高斯朴素贝叶斯"><a href="#高斯朴素贝叶斯" class="headerlink" title="高斯朴素贝叶斯"></a>高斯朴素贝叶斯</h1><p>一般的朴素贝叶斯算法的输入特征为离散值，那么当输入变量为连续值时就不能处理了，一般这时候假设输入变量服从一个正态分布，这样$p(w_j | c_i)$就可以计算了，所以整个的流程如下：</p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/nb/gnb_algo.png" alt="gnb_algo"></p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/nb/gnb_mle.png" alt="gnb_mle"></p>
<p>采用sk-learn进行下实验</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">33</span>]: <span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</div><div class="line">    ...: iris = datasets.load_iris()</div><div class="line">    ...: <span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</div><div class="line">    ...: gnb = GaussianNB()</div><div class="line">    ...: y_pred = gnb.fit(iris.data, iris.target).predict(iris.data)</div><div class="line">    ...: print(<span class="string">"Number of mislabeled points out of a total %d points : %d"</span></div><div class="line">    ...:       % (iris.data.shape[<span class="number">0</span>],(iris.target != y_pred).sum()))</div><div class="line">    ...:</div><div class="line">Number of mislabeled points out of a total <span class="number">150</span> points : <span class="number">6</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;利用朴素贝叶斯进行文本分类&quot;&gt;&lt;a href=&quot;#利用朴素贝叶斯进行文本分类&quot; class=&quot;headerlink&quot; title=&quot;利用朴素贝叶斯进行文本分类&quot;&gt;&lt;/a&gt;利用朴素贝叶斯进行文本分类&lt;/h1&gt;&lt;h2 id=&quot;准备数据&quot;&gt;&lt;a href=&quot;#准备数据&quot;
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="statistics" scheme="http://yoursite.com/tags/statistics/"/>
    
  </entry>
  
  <entry>
    <title>CS231n Lecture2 note</title>
    <link href="http://yoursite.com/2017/02/24/CS231n-Lecture2-note/"/>
    <id>http://yoursite.com/2017/02/24/CS231n-Lecture2-note/</id>
    <published>2017-02-24T09:14:17.000Z</published>
    <updated>2017-02-24T13:53:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图像分类"><a href="#图像分类" class="headerlink" title="图像分类"></a>图像分类</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>给一张输入图片赋予一个标签， 这个标签属于事先定义好的类别集合中</p>
<h2 id="地位"><a href="#地位" class="headerlink" title="地位"></a>地位</h2><p>计算机视觉的核心问题</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n-lec2/classify_example.png" alt="classify_example"></p>
<h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><ol>
<li>拍摄点的视角多样</li>
<li>拍摄点的远近距离多样</li>
<li>物体的变形</li>
<li>物体部分遮挡</li>
<li>光线</li>
<li>背景相似</li>
<li>品种多样</li>
</ol>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n-lec2/challenges.jpeg" alt="challenges"></p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>数据驱动（即包含训练数据）</p>
<h2 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h2><p>输入 -&gt;  学习 -&gt; 评估</p>
<h1 id="最近邻分类器"><a href="#最近邻分类器" class="headerlink" title="最近邻分类器"></a>最近邻分类器</h1><p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n-lec2/nearest_neighbor.jpg" alt="nearest_neighbor"></p>
<h2 id="距离度量"><a href="#距离度量" class="headerlink" title="距离度量"></a>距离度量</h2><h4 id="L1-distance"><a href="#L1-distance" class="headerlink" title="L1 distance"></a>L1 distance</h4><script type="math/tex; mode=display">d_1 (I_1, I_2) = \sum_{p} \left| I^p_1 - I^p_2 \right|</script><p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n-lec2/l1_distance.jpeg" alt="l1-distance"></p>
<h4 id="L2-distance"><a href="#L2-distance" class="headerlink" title="L2 distance"></a>L2 distance</h4><script type="math/tex; mode=display">d_2 (I_1, I_2) = \sqrt{\sum_{p} \left( I^p_1 - I^p_2 \right)^2}</script><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Xtr, Ytr, Xte, Yte = load_CIFAR10(<span class="string">'data/cifar10/'</span>) <span class="comment"># a magic function we provide</span></div><div class="line"><span class="comment"># flatten out all images to be one-dimensional</span></div><div class="line">Xtr_rows = Xtr.reshape(Xtr.shape[<span class="number">0</span>], <span class="number">32</span> * <span class="number">32</span> * <span class="number">3</span>) <span class="comment"># Xtr_rows becomes 50000 x 3072</span></div><div class="line">Xte_rows = Xte.reshape(Xte.shape[<span class="number">0</span>], <span class="number">32</span> * <span class="number">32</span> * <span class="number">3</span>) <span class="comment"># Xte_rows becomes 10000 x 3072</span></div></pre></td></tr></table></figure>
<h3 id="预测及评估"><a href="#预测及评估" class="headerlink" title="预测及评估"></a>预测及评估</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">nn = NearestNeighbor() <span class="comment"># create a Nearest Neighbor classifier class</span></div><div class="line">nn.train(Xtr_rows, Ytr) <span class="comment"># train the classifier on the training images and labels</span></div><div class="line">Yte_predict = nn.predict(Xte_rows) <span class="comment"># predict labels on the test images</span></div><div class="line"><span class="comment"># and now print the classification accuracy, which is the average number</span></div><div class="line"><span class="comment"># of examples that are correctly predicted (i.e. label matches)</span></div><div class="line"><span class="keyword">print</span> <span class="string">'accuracy: %f'</span> % ( np.mean(Yte_predict == Yte) )</div></pre></td></tr></table></figure>
<h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NearestNeighbor</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, X, y)</span>:</span></div><div class="line">    <span class="string">""" X is N x D where each row is an example. Y is 1-dimension of size N """</span></div><div class="line">    <span class="comment"># the nearest neighbor classifier simply remembers all the training data</span></div><div class="line">    self.Xtr = X</div><div class="line">    self.ytr = y</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X)</span>:</span></div><div class="line">    <span class="string">""" X is N x D where each row is an example we wish to predict label for """</span></div><div class="line">    num_test = X.shape[<span class="number">0</span>]</div><div class="line">    <span class="comment"># lets make sure that the output type matches the input type</span></div><div class="line">    Ypred = np.zeros(num_test, dtype = self.ytr.dtype)</div><div class="line"></div><div class="line">    <span class="comment"># loop over all test rows</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(num_test):</div><div class="line">      <span class="comment"># find the nearest training image to the i'th test image</span></div><div class="line">      <span class="comment"># using the L1 distance (sum of absolute value differences)</span></div><div class="line">      distances = np.sum(np.abs(self.Xtr - X[i,:]), axis = <span class="number">1</span>)</div><div class="line">      min_index = np.argmin(distances) <span class="comment"># get the index with smallest distance</span></div><div class="line">      Ypred[i] = self.ytr[min_index] <span class="comment"># predict the label of the nearest example</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> Ypred</div></pre></td></tr></table></figure>
<h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p><strong>L1-distance</strong>        38.6% on CIFAR-10</p>
<p><strong>L2-distance</strong>       35.4% on CIFAR-10</p>
<p><strong>L1 vs. L2</strong>            L2比L1的差异容忍度更小</p>
<h1 id="K近邻分类器"><a href="#K近邻分类器" class="headerlink" title="K近邻分类器"></a>K近邻分类器</h1><p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n-lec2/kNN.jpeg" alt="kNN"></p>
<h2 id="采用验证集进行超参调参"><a href="#采用验证集进行超参调参" class="headerlink" title="采用验证集进行超参调参"></a>采用验证集进行超参调参</h2><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># assume we have Xtr_rows, Ytr, Xte_rows, Yte as before</span></div><div class="line"><span class="comment"># recall Xtr_rows is 50,000 x 3072 matrix</span></div><div class="line">Xval_rows = Xtr_rows[:<span class="number">1000</span>, :] <span class="comment"># take first 1000 for validation</span></div><div class="line">Yval = Ytr[:<span class="number">1000</span>]</div><div class="line">Xtr_rows = Xtr_rows[<span class="number">1000</span>:, :] <span class="comment"># keep last 49,000 for train</span></div><div class="line">Ytr = Ytr[<span class="number">1000</span>:]</div><div class="line"></div><div class="line"><span class="comment"># find hyperparameters that work best on the validation set</span></div><div class="line">validation_accuracies = []</div><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>]:</div><div class="line">  </div><div class="line">  <span class="comment"># use a particular value of k and evaluation on validation data</span></div><div class="line">  nn = NearestNeighbor()</div><div class="line">  nn.train(Xtr_rows, Ytr)</div><div class="line">  <span class="comment"># here we assume a modified NearestNeighbor class that can take a k as input</span></div><div class="line">  Yval_predict = nn.predict(Xval_rows, k = k)</div><div class="line">  acc = np.mean(Yval_predict == Yval)</div><div class="line">  <span class="keyword">print</span> <span class="string">'accuracy: %f'</span> % (acc,)</div><div class="line"></div><div class="line">  <span class="comment"># keep track of what works on the validation set</span></div><div class="line">  validation_accuracies.append((k, acc))</div></pre></td></tr></table></figure>
<h3 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h3><p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n-lec2/cv.jpeg" alt="cv"></p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n-lec2/cv_result.png" alt="cv_result"></p>
<h1 id="最近邻分类器的优缺点"><a href="#最近邻分类器的优缺点" class="headerlink" title="最近邻分类器的优缺点"></a>最近邻分类器的优缺点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>训练速度快</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol>
<li><p>测试速度很慢 </p>
<p>​    解决方法：1. ANN  2. FANN</p>
</li>
<li><p>距离度量不合适</p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n-lec2/knn_shortage_1.png" alt="kNN_shortage_1"></p>
<p>​</p>
</li>
</ol>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n-lec2/knn_shortage_2.png" alt="kNN_shortage_2"></p>
<p>(<a href="http://cs231n.github.io/assets/pixels_embed_cifar10_big.jpg" target="_blank" rel="external">http://cs231n.github.io/assets/pixels_embed_cifar10_big.jpg</a>)</p>
<h1 id="接下来…"><a href="#接下来…" class="headerlink" title="接下来…"></a>接下来…</h1><p>t-SNE <a href="http://lvdmaaten.github.io/tsne/" target="_blank" rel="external">http://lvdmaaten.github.io/tsne/</a></p>
<p>random projection <a href="http://scikit-learn.org/stable/modules/random_projection.html" target="_blank" rel="external">http://scikit-learn.org/stable/modules/random_projection.html</a></p>
<p>INTUITION FAILS IN HIGH DIMENSIONS <a href="http://homes.cs.washington.edu/~pedrod/papers/cacm12.pdf" target="_blank" rel="external">http://homes.cs.washington.edu/~pedrod/papers/cacm12.pdf</a></p>
<p>Recognizing and Learning Object Categories <a href="http://people.csail.mit.edu/torralba/shortCourseRLOC/index.html" target="_blank" rel="external">http://people.csail.mit.edu/torralba/shortCourseRLOC/index.html</a></p>
<h1 id="线性分类"><a href="#线性分类" class="headerlink" title="线性分类"></a>线性分类</h1><h2 id="一个从图像到标签的映射函数"><a href="#一个从图像到标签的映射函数" class="headerlink" title="一个从图像到标签的映射函数"></a>一个从图像到标签的映射函数</h2><script type="math/tex; mode=display">f(x_i, W, b) =  W x_i + b</script><p>x shape is [D x 1],  W shape is  [K x D], b shape is [K x 1]</p>
<p>注意点：</p>
<ol>
<li>W代表K个分类器的参数放在一起，因此整个模型是K个分类器的一个整合</li>
<li>向量化能够大大提升计算速度</li>
</ol>
<h2 id="线性分类器的解释"><a href="#线性分类器的解释" class="headerlink" title="线性分类器的解释"></a>线性分类器的解释</h2><ol>
<li>权重W表示不同的标签对于图像不同位置不同颜色的重视程度。比如太阳可能对于圆形的区域以及黄颜色比较看重</li>
</ol>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n-lec2/linear_clasification_interpret_1.jpg" alt="linear_classification_interpret_1"></p>
<ol>
<li>将图像看成高维空间中的点</li>
</ol>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n-lec2/linear_clasification_interpret_2.jpg" alt="linear_clasification_interpret_2"></p>
<ol>
<li>将线性分类器看成模板匹配</li>
</ol>
<p>将W的每一行看成一个模板，通过内积计算，每一张图片张成的列向量都与每一个模板作比较，最后选出最匹配的，这也是一种最近邻算法。</p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n-lec2/templates.jpg" alt="templates"></p>
<p>从上图可以看出，这里的模板是各个图像的一种折中。</p>
<h2 id="将bias项放入W中"><a href="#将bias项放入W中" class="headerlink" title="将bias项放入W中"></a>将bias项放入W中</h2><p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n-lec2/wb.jpeg" alt="wb"></p>
<h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>​    数据中心化</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;图像分类&quot;&gt;&lt;a href=&quot;#图像分类&quot; class=&quot;headerlink&quot; title=&quot;图像分类&quot;&gt;&lt;/a&gt;图像分类&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>Qiniu cloud images batch upload and directory synchronization</title>
    <link href="http://yoursite.com/2017/02/24/Qiniu-cloud-images-batch-upload-and-directory-synchronization/"/>
    <id>http://yoursite.com/2017/02/24/Qiniu-cloud-images-batch-upload-and-directory-synchronization/</id>
    <published>2017-02-24T07:28:57.000Z</published>
    <updated>2017-02-24T07:49:06.600Z</updated>
    
    <content type="html"><![CDATA[<p>最近写博客的时候会用到图片，因此用了七牛云的图片外链功能，但是其内容管理不能创建目录，所以图片的命名以及上传都很麻烦，然后去网上查了一下，也看了一下官方文档，发现官方有一个批量上传的工具挺好用，所以记录一下，下面把官方文档中的一些东西贴出来，方便日后查阅。</p>
<p>​    <img src="http://o7ie0tcjk.bkt.clouddn.com/Qiniu_Upload/qiniu_docu.jpg" alt="docu"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近写博客的时候会用到图片，因此用了七牛云的图片外链功能，但是其内容管理不能创建目录，所以图片的命名以及上传都很麻烦，然后去网上查了一下，也看了一下官方文档，发现官方有一个批量上传的工具挺好用，所以记录一下，下面把官方文档中的一些东西贴出来，方便日后查阅。&lt;/p&gt;
&lt;p&gt;​
    
    </summary>
    
    
      <category term="Tools" scheme="http://yoursite.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Correlation Analysis</title>
    <link href="http://yoursite.com/2017/02/24/Correlation-Analysis/"/>
    <id>http://yoursite.com/2017/02/24/Correlation-Analysis/</id>
    <published>2017-02-24T02:22:42.000Z</published>
    <updated>2017-02-28T05:18:06.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>最近有一个关于关联分析的小作业，问题描述如下：</p>
<p>孩子的情感状况、品行症状、亲社会行为等等与很多因素相关，这个作业主要着眼点在于孩子每天看视频的时间是否对于以上这些指标有着重要的影响，因此需要对输入特征与输出标签之间的相关关系做一个分析。</p>
<p>属性描述如下：</p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/features.png" alt="features"></p>
<p>由以上属性描述表可以看出，属性类型同时包括类别以及数值，因此进行相关分析时针对这两种情况需要采用不同的方法，这里采用的策略如下：</p>
<ol>
<li>对于离散-离散的情况，采用卡方检验</li>
<li>对于连续-离散的情况，采用ANOVA方差检验</li>
</ol>
<p>下面对于这两种检验方法进行介绍。</p>
<h1 id="卡方检验"><a href="#卡方检验" class="headerlink" title="卡方检验"></a>卡方检验</h1><h2 id="一维情况"><a href="#一维情况" class="headerlink" title="一维情况"></a>一维情况</h2><p>假设一条河里有三种鱼，gumpies, sticklebarbs, 以及spotheads。如果这条河的生态环境没有遭到干扰，那么这三种鱼的数量是相等的（下表第三行）。现在从河里进行300次抽样，最后抽样得到的结果如下表第二行所示：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>gumpies</th>
<th>sticklebarbs</th>
<th>spothheads</th>
<th>Totals</th>
</tr>
</thead>
<tbody>
<tr>
<td>观察到的频数</td>
<td>89</td>
<td>120</td>
<td>91</td>
<td>300</td>
</tr>
<tr>
<td>期望的频数</td>
<td>100</td>
<td>100</td>
<td>100</td>
<td>300</td>
</tr>
</tbody>
</table>
</div>
<p>现在需要解决的问题是，是否这条河的生态环境收到了干扰？我们假设生态环境正常，这是我们的原假设。</p>
<p>（注意，期望的频数是根据实际情况自行定义的）</p>
<p>很容易想到的是，我们可以建立一种度量来衡量现实情况与原假设的偏离程度，例如：</p>
<script type="math/tex; mode=display">\frac{观察值 - 期望值}{期望值}</script><p>把实际的数据带入，可以得到以下的结果：</p>
<p>gumpies:    $\frac{89 - 100}{100} = -0.11$</p>
<p>sticklebarbs:    $\frac{120 - 100}{100} = +0.20$</p>
<p>spothheads:    $\frac{91 - 100}{100} = -0.09$</p>
<p>发现结果还不错，但是这只能用来衡量单个类别的偏差程度，而不能用来衡量整体的偏差程度，因为这三者的加和为零。既然这样，很容易想到可以对之前的度量进行简单的修改，变成这样：</p>
<script type="math/tex; mode=display">\frac{(观察值 - 期望值)^2}{期望值}</script><p>再把数据带入看看：</p>
<p>gumpies:    $\frac{(89 - 100)^2}{100} = 1.21$</p>
<p>sticklebarbs:    $\frac{(120 - 100)^2}{100} = 4.0$</p>
<p>spothheads:    $\frac{(91 - 100)}{100} = 0.81$</p>
<p>sum: $1.21 + 4.0 + 0.81 = 6.02$</p>
<p>这样一来问题便得到了解决，而这也正是卡方检验所采取的方式。而这个sum值就是卡方（chi-square），记作$\chi^2$， 为了更加形式化地表示，我们把观察值记为$O$， 期望值记为$E$， 那么有如下等式成立：</p>
<script type="math/tex; mode=display">\chi^2 = \sum \frac{(O - E) ^ 2}{E}</script><p>下面的问题是，我们达到了卡方值，但是这个值到底好还是不好呢？是更加支持原假设还是拒绝原假设呢？</p>
<p>可以设想这样一种情况，我们假设河里的鱼服从原假设的分布，也就是三种鱼出现的概率相等。然后我们把三百次采样看作一次实验，每一次实验完毕之后记录下采样出的300条鱼中每一种鱼的频数，然后计算卡方值。在进行很多次这样的实验之后，我们可以画一个柱状图，这个图记录下了卡方值的分布情况。然后再把实际的观察值（也就是上面表格的第二行）计算的卡方值（6.02）带入进去，看看大于或者等于这个值在柱状图中所有卡方值中占有多少比例。如果占有的比例很大，说明这个值是由跟原假设很近似的假设得出的，这就证明了原假设是对的；反之。如果这个比例很小，说明如果分布服从原假设，那么所计算出的卡方值基本不可能包含这个观测出的卡方值，表明原假设是不对的，我们就可以拒绝原假设。</p>
<p>其实统计检验的基本思想就是这样。但是存在一个问题，我们不可能进行真实的采样（从河里抓鱼），所以一般采用计算机模拟的方式，具体步骤如下所示：</p>
<ol>
<li>等概率的产生a（代表gumpies）, b（代表sticklebarbs）, c（代表spothheads）的序列</li>
<li>计算一个大小为300的序列中a, b, c三者的频数，作为观察值，然后将a = b = c = 100作为期望值，计算并记录下算出的卡方值</li>
<li>重复1~2步10000次， 画出柱状图如下：</li>
</ol>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/chi-square-distribution.gif" alt="chi-square-distribution"></p>
<p>可以看出只有5%左右的值大于6.02，说明我们可以以95%的置信度拒绝原假设。</p>
<h2 id="二维情况"><a href="#二维情况" class="headerlink" title="二维情况"></a>二维情况</h2><p>对于二维的情况，卡方检验又被称为卡方关联度检验，也就是检验两个变量之间的相关程度（独立程度），考虑下面这个数据表$O$：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
<th>Alzhemer’s onset -</th>
<th>during 5-year period</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td>no</td>
<td>yes</td>
<td></td>
</tr>
<tr>
<td>recieved-</td>
<td>yes</td>
<td>147</td>
<td>9</td>
<td>156</td>
</tr>
<tr>
<td>estrogen</td>
<td>no</td>
<td>810</td>
<td>158</td>
<td>968</td>
</tr>
<tr>
<td></td>
<td></td>
<td>957</td>
<td>167</td>
<td>1124</td>
</tr>
</tbody>
</table>
</div>
<p>这是观察值，为了计算卡方值，很明显我们需要计算期望值。</p>
<p>为了方便表示，把上表变成如下形式：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
<th>（A）Alzhemer’s onset -</th>
<th>during 5-year period</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td>no</td>
<td>yes</td>
<td></td>
</tr>
<tr>
<td>(R) recieved-</td>
<td>yes</td>
<td>[cell a]</td>
<td>[cell b]</td>
<td>156</td>
</tr>
<tr>
<td>estrogen</td>
<td>no</td>
<td>[cell c]</td>
<td>[cell d]</td>
<td>968</td>
</tr>
<tr>
<td></td>
<td></td>
<td>957</td>
<td>167</td>
<td>1124</td>
</tr>
</tbody>
</table>
</div>
<p>拿a做例子：</p>
<script type="math/tex; mode=display">E_a = \frac{156}{1124} \times \frac{957}{1124} \times 1124</script><p>这个式子如何解释呢？如果这两个变量是独立的，那么$A$变量取$no$值与$R$变量取$yes$值这两个事件之间就是独立的，那么$[cell_a]$事件发生的概率就是两者相乘，也就是上述等式右边前两个数相乘，最后的期望值自然就是概率乘以实验总数。</p>
<p>上面的解释比较不正式，换一种较为正式的表达方式。假设我们要求$cell$的期望值，设$R$为$cell$所在列的边缘事件总数，$C$为$cell$所在行的边缘事件总数，$N$为实验总数目，这样就有：</p>
<script type="math/tex; mode=display">E_{cell} =\frac{R}{N} \times \frac{C}{N} \times N</script><p>所以就有期望值$E$数据表如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th></th>
<th>（A）Alzhemer’s onset -</th>
<th>during 5-year period</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td>no</td>
<td>yes</td>
<td></td>
</tr>
<tr>
<td>(R) recieved-</td>
<td>yes</td>
<td>$E_a = \frac{156 \times 957}{1124} = 132.82$</td>
<td>$E_b = \frac{156 \times 167}{1124} = 23.18$</td>
<td>156</td>
</tr>
<tr>
<td>estrogen</td>
<td>no</td>
<td>$E_c = \frac{968 \times 957}{1124} = 824.18$</td>
<td>$E_d = \frac{968 \times 167}{1124} = 143.82$</td>
<td>968</td>
</tr>
<tr>
<td></td>
<td></td>
<td>957</td>
<td>167</td>
<td>1124</td>
</tr>
</tbody>
</table>
</div>
<p>这样就可以调用公式：</p>
<script type="math/tex; mode=display">\chi^2 = \sum \frac{(O - E) ^ 2}{E}</script><p>特别地，当行数以及列数都为2时，上述公式需要进行一下修改：</p>
<script type="math/tex; mode=display">\chi^2 = \sum \frac{(|O - E| - 0.5) ^ 2}{E}</script><p>这样算出来的卡方值为$11.01$</p>
<p>最后涉及到自由度的问题，因为比较简单，所以只写出结论：</p>
<script type="math/tex; mode=display">df = (r - 1)(c - 1)</script><p><strong>r = number of rows</strong></p>
<p><strong>c = number of columns</strong></p>
<h1 id="ANOVA方差检验"><a href="#ANOVA方差检验" class="headerlink" title="ANOVA方差检验"></a>ANOVA方差检验</h1><p>为了方便比较，同样采用上述阿尔兹海默病的例子。研究表明，老年痴呆症患者患病之后会经常经历情绪非常不稳定地阶段，原因是因为患者患病之前的生活中经常有恐惧或者焦虑的体验，正是这些一直存在于脑海中的记忆出发了患病后的不稳定情绪的产生。</p>
<p>现在我们假设有一个实验团队发明了一种药物，可以缓解这种情绪问题，他们对小白鼠进行了实验。实验设计如下：</p>
<ol>
<li>将小白鼠随机分为四组A， B， C， D</li>
<li>A组作为参照组，不给药；B， C， D三组分别注射一个单位，两个单位，三个单位的药剂</li>
<li>记录实验结果，数值越低表明实验效果越好</li>
</ol>
<p>实验结果如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
<th>Total</th>
</tr>
</thead>
<tbody>
<tr>
<td>27.0</td>
<td>22.8</td>
<td>21.9</td>
<td>23.5</td>
<td></td>
</tr>
<tr>
<td>26.2</td>
<td>23.1</td>
<td>23.4</td>
<td>19.6</td>
<td></td>
</tr>
<tr>
<td>28.8</td>
<td>27.7</td>
<td>20.1</td>
<td>23.7</td>
<td></td>
</tr>
<tr>
<td>33.5</td>
<td>27.6</td>
<td>27.8</td>
<td>20.8</td>
<td></td>
</tr>
<tr>
<td>28.8</td>
<td>24.0</td>
<td>19.3</td>
<td>23.9</td>
<td></td>
</tr>
<tr>
<td>$M_a = 28.86$</td>
<td>$M_b = 25.04$</td>
<td>$M_c = 22.50$</td>
<td>$M_d = 22.30$</td>
<td>$M_T = 24.68$</td>
</tr>
</tbody>
</table>
</div>
<p>下面需要进行一下相关性分析，判断药物是否对症状的缓解产生作用。</p>
<p>和卡方检验一样，ANOVA检验最后也有一个衡量指标，记为$F$，定义如下：</p>
<script type="math/tex; mode=display">F = \frac{MS_{bg}}{MS_{wg}} = \frac{组间相似度}{组内相似度}</script><p>具体的计算步骤如下所示（推导过程省略）</p>
<p>（1） 首先计算出如下值：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
<th>Total</th>
</tr>
</thead>
<tbody>
<tr>
<td>$N_A = 5$</td>
<td>$N_B = 5$</td>
<td>$N_C = 5$</td>
<td>$N_D = 5$</td>
<td>$N_T = 20$</td>
</tr>
<tr>
<td>$\sum X_{Ai} = 144.30$</td>
<td>$\sum X_{Bi} = 125.20$</td>
<td>$\sum X_{Ci} = 112.50$</td>
<td>$\sum X_{Di} = 111.50$</td>
<td>$\sum X_{Ti} = 493.50$</td>
</tr>
<tr>
<td>$\sum X^2_{Ai} = 4196.57$</td>
<td>$\sum X^2_{Bi} = 3158.50$</td>
<td>$\sum X^2_{Ci} = 2576.51$</td>
<td>$\sum X^2_{Di} = 2501.95$</td>
<td>$\sum X^2_{Ti} = 12433.53$</td>
</tr>
<tr>
<td>$SS_A = 32.07$</td>
<td>$SS_B = 23.49$</td>
<td>$SS_C = 45.26$</td>
<td>$SS_D = 15.50$</td>
<td>$SS_T = 256.42$</td>
</tr>
</tbody>
</table>
</div>
<p>其中：</p>
<script type="math/tex; mode=display">SS = \sum X^2_i - \frac{(\sum X_i)^2}{N}</script><p>（2）计算$SS<em>{wg}$以及$SS</em>{bg}$</p>
<script type="math/tex; mode=display">SS_{wg} = SS_A + SS_B + SS_C + SS_D</script><script type="math/tex; mode=display">SS_{bg} = SS_T - SS_{wg}</script><p>（4）计算相关自由度</p>
<script type="math/tex; mode=display">df_{bg} = k - 1 = 4 - 1 = 3</script><script type="math/tex; mode=display">df_{wg} = (N_A - 1) + (N_B - 1) + (N_C - 1) + (N_D - 1)</script><p>（5）计算 $MS<em>{bg}$以及$MS</em>{wg}$</p>
<script type="math/tex; mode=display">MS_{bg} = \frac{SS_{bg}}{df_{bg}}</script><script type="math/tex; mode=display">MS_{wg} = \frac{SS_{wg}}{df_{wg}}</script><p>（6）计算$F$</p>
<p>最后得出F = 6.42 （df = 3, 16）</p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/f_distribution.png" alt="f_distribution"></p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> scipy.stats <span class="keyword">as</span> stats</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetChildDetailLab</span><span class="params">(combine=True)</span>:</span></div><div class="line">    <span class="string">""" Get the detail labs of each child data.</span></div><div class="line"></div><div class="line">    Returns:</div><div class="line">        child_detail_lab: the detail labs.</div><div class="line">    """</div><div class="line"></div><div class="line">    CHILDS_FEATURE_LAB = [<span class="string">'tid'</span>, <span class="string">'age_m'</span>, <span class="string">'female'</span>, <span class="string">'onlychild'</span>, <span class="string">'divorce'</span>,</div><div class="line">                          <span class="string">'medu_newcat'</span>, <span class="string">'income_newcat'</span>, <span class="string">'scr_ave'</span>, <span class="string">'edu_ave'</span>,</div><div class="line">                          <span class="string">'edu_of_scr'</span>, <span class="string">'scr_h_cat'</span>, <span class="string">'mediacoview'</span>,</div><div class="line">                          <span class="string">'mediacontact'</span>]</div><div class="line">    CHILDS_CAT_LAB = [<span class="string">'emo_cat'</span>, <span class="string">'con_cat'</span>, <span class="string">'hyp_cat'</span>, <span class="string">'pee_cat'</span>,</div><div class="line">                      <span class="string">'difficulties_cat'</span>, <span class="string">'pro_cat'</span>]</div><div class="line"></div><div class="line">    <span class="keyword">if</span> combine:</div><div class="line">        CHILDS_DETAIL_LAB = CHILDS_FEATURE_LAB</div><div class="line">        CHILDS_DETAIL_LAB.extend(CHILDS_CAT_LAB)</div><div class="line">        <span class="keyword">return</span> CHILDS_DETAIL_LAB</div><div class="line"></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> CHILDS_FEATURE_LAB, CHILDS_CAT_LAB</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReadChildInfoFromExcel</span><span class="params">(</span></span></div><div class="line">        file_name=<span class="string">'屏幕暴露与SDQ.xlsx'</span>, sheet_name=<span class="string">'data'</span>):</div><div class="line">    <span class="string">""" Read the screen-exposed vs.SDQ detail information</span></div><div class="line">        of each child from the excel-type file.</div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        file_name: the name of the excel-type file.</div><div class="line">        sheet_name: the name of the sheet of the excel file.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        child_scr_exp_sdq: A list that contains the detail</div><div class="line">                           information of each child.</div><div class="line">        labs: The lab corresponds to each colume of the data.</div><div class="line">    """</div><div class="line"></div><div class="line">    CHILDS_FILE_NAME = <span class="string">'child_scr_exp_sdq.npy'</span></div><div class="line">    CHILDS_DETAIL_LAB = GetChildDetailLab()</div><div class="line">    <span class="comment"># print(CHILDS_DETAIL_LAB)</span></div><div class="line">    NOT_INT_LAB_INDEIES = [CHILDS_DETAIL_LAB.index(<span class="string">'age_m'</span>),</div><div class="line">                           CHILDS_DETAIL_LAB.index(<span class="string">'scr_ave'</span>),</div><div class="line">                           CHILDS_DETAIL_LAB.index(<span class="string">'edu_ave'</span>),</div><div class="line">                           CHILDS_DETAIL_LAB.index(<span class="string">'edu_of_scr'</span>)]</div><div class="line"></div><div class="line">    child_scr_exp_sdq = []</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (os.path.isfile(CHILDS_FILE_NAME)):</div><div class="line">        <span class="keyword">with</span> open(CHILDS_FILE_NAME, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</div><div class="line">            child_scr_exp_sdq = np.load(f)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        workBook = xlrd.open_workbook(file_name)</div><div class="line">        bookSheet = workBook.sheet_by_name(sheet_name)</div><div class="line">        <span class="comment"># read from second row because of the first row has tabs</span></div><div class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">1</span>, bookSheet.nrows):</div><div class="line">            child_row = []</div><div class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range(bookSheet.ncols):</div><div class="line">                cel = bookSheet.cell(row, col)</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    val = str(cel.value)</div><div class="line">                    <span class="comment"># tolerant the value error</span></div><div class="line">                    <span class="keyword">if</span> val == <span class="string">''</span>:</div><div class="line">                        val = <span class="string">'-1.0'</span></div><div class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                    print(e)</div><div class="line"></div><div class="line">                <span class="comment"># because of the type is different</span></div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    <span class="keyword">if</span> col <span class="keyword">in</span> NOT_INT_LAB_INDEIES:</div><div class="line">                        val = float(val)</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        <span class="comment"># in Excel, if cel.value is 1, then str(cel.value) is</span></div><div class="line">                        <span class="comment"># '1.0'</span></div><div class="line">                        val = val.split(<span class="string">'.'</span>)[<span class="number">0</span>]</div><div class="line">                        val = int(val)</div><div class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                    print(e)</div><div class="line">                    val = <span class="number">-1</span></div><div class="line">                child_row.append(val)</div><div class="line">            child_scr_exp_sdq.append(child_row)</div><div class="line">        child_scr_exp_sdq = np.array(child_scr_exp_sdq)</div><div class="line">        <span class="keyword">with</span> open(CHILDS_FILE_NAME, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">            np.save(f, child_scr_exp_sdq)</div><div class="line">    <span class="keyword">return</span> child_scr_exp_sdq, CHILDS_DETAIL_LAB</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">SplitDataSet</span><span class="params">(data_set, feature, cat)</span>:</span></div><div class="line">    <span class="string">""" Split the data set to two column, that is feature and cat</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        data_set: the source data set.</div><div class="line">        feature: the input vector</div><div class="line">        cat: the correspond category.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        splited_data_set: self-explation.</div><div class="line">    """</div><div class="line"></div><div class="line">    CHILDS_DETAIL_LAB = GetChildDetailLab()</div><div class="line">    feature_index = CHILDS_DETAIL_LAB.index(feature)</div><div class="line">    cat_index = CHILDS_DETAIL_LAB.index(cat)</div><div class="line">    <span class="comment"># print(feature_index, cat_index)</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> data_set[:, (feature_index, cat_index)]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CalChi2</span><span class="params">(data_set)</span>:</span></div><div class="line">    <span class="string">""" Calculate the chi-square value and p-value corresponds to the data set.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        data_set: the object data set.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        chi2: the chi-square value.</div><div class="line">        p: the p-value.</div><div class="line">    """</div><div class="line"></div><div class="line">    rows_number = len(set(data_set[:, <span class="number">-1</span>]))</div><div class="line">    columns_number = len(set(data_set[:, <span class="number">0</span>]))</div><div class="line">    <span class="comment"># print(rows_number, columns_number)</span></div><div class="line">    counts = np.zeros((rows_number, columns_number))</div><div class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> data_set:</div><div class="line">        <span class="keyword">if</span> row[<span class="number">-1</span>] != <span class="number">-1</span>:</div><div class="line">            <span class="keyword">if</span> row[<span class="number">0</span>] != <span class="number">-1</span>:</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    counts[int(row[<span class="number">-1</span>])][int(row[<span class="number">0</span>])] += <span class="number">1</span></div><div class="line">                <span class="keyword">except</span>:</div><div class="line">                    <span class="keyword">pass</span></div><div class="line">    <span class="comment"># drop the row that all item is 0</span></div><div class="line">    del_row_index = []</div><div class="line">    <span class="keyword">for</span> index, count <span class="keyword">in</span> enumerate(counts):</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> count.any():</div><div class="line">            del_row_index.append(index)</div><div class="line">    counts = np.delete(counts, tuple(del_row_index), axis=<span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="comment"># drop the column that all item is 0</span></div><div class="line">    del_col_index = []</div><div class="line">    <span class="keyword">for</span> index, count <span class="keyword">in</span> enumerate(counts.T):</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> count.any():</div><div class="line">            del_col_index.append(index)</div><div class="line">    counts = np.delete(counts, tuple(del_col_index), axis=<span class="number">1</span>)</div><div class="line">    <span class="comment"># print(counts)</span></div><div class="line"></div><div class="line">    <span class="comment"># calculate the chi-square value and correspond p-value</span></div><div class="line">    chi2, p, dof, excepted = stats.chi2_contingency(counts)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> chi2, p</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ANOVATest</span><span class="params">(data_set)</span>:</span></div><div class="line">    <span class="string">""" Implement a ANOVA test on the data set.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        data_set: the object data set.</div><div class="line"></div><div class="line">    Return:</div><div class="line">        f: The computed F-value of the test.</div><div class="line">        p: The associated p-value from the F-distribution.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># Initial the three categories</span></div><div class="line">    normal = []</div><div class="line">    critical = []</div><div class="line">    abnormal = []</div><div class="line"></div><div class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> data_set:</div><div class="line">        <span class="keyword">if</span> data[<span class="number">0</span>] != <span class="number">-1</span>:</div><div class="line">            <span class="keyword">if</span> data[<span class="number">-1</span>] == <span class="number">0</span>:</div><div class="line">                normal.append(data[<span class="number">0</span>])</div><div class="line">            <span class="keyword">elif</span> data[<span class="number">-1</span>] == <span class="number">1</span>:</div><div class="line">                critical.append(data[<span class="number">0</span>])</div><div class="line">            <span class="keyword">elif</span> data[<span class="number">-1</span>] == <span class="number">2</span>:</div><div class="line">                abnormal.append(data[<span class="number">0</span>])</div><div class="line"></div><div class="line">    f, p = stats.f_oneway(normal, critical, abnormal)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> f, p</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GenerateCoffMatrix</span><span class="params">(data_set)</span>:</span></div><div class="line">    <span class="string">""" Calculate the chi-square and p-value of each feature-category pair.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        data_set: the source data set.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        coff_matrix: the final cofficient matrix.</div><div class="line">    """</div><div class="line"></div><div class="line">    coff_matrix = &#123;&#125;</div><div class="line">    CHILDS_FEATURE_LAB, CHILDS_CAT_LAB = GetChildDetailLab(combine=<span class="keyword">False</span>)</div><div class="line">    NOT_KEEP_FEATURE_LAB = [<span class="string">'tid'</span>, <span class="string">'age_m'</span>, <span class="string">'scr_ave'</span>, <span class="string">'edu_ave'</span>, <span class="string">'edu_of_scr'</span>]</div><div class="line">    <span class="keyword">for</span> feature <span class="keyword">in</span> CHILDS_FEATURE_LAB:</div><div class="line">        <span class="keyword">if</span> feature <span class="keyword">in</span> NOT_KEEP_FEATURE_LAB:</div><div class="line">            <span class="keyword">if</span> feature != NOT_KEEP_FEATURE_LAB[<span class="number">0</span>]:</div><div class="line">                <span class="keyword">for</span> cat <span class="keyword">in</span> CHILDS_CAT_LAB:</div><div class="line">                    splited_data_set = SplitDataSet(data_set, feature, cat)</div><div class="line">                    <span class="comment"># print(feature, cat)</span></div><div class="line">                    f, p = ANOVATest(splited_data_set)</div><div class="line">                    key = feature + <span class="string">'-'</span> + cat</div><div class="line">                    coff_matrix[key] = (f, p)</div><div class="line"></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">for</span> cat <span class="keyword">in</span> CHILDS_CAT_LAB:</div><div class="line">                splited_data_set = SplitDataSet(data_set, feature, cat)</div><div class="line">                <span class="comment"># print(feature, cat)</span></div><div class="line">                chi2, p = CalChi2(splited_data_set)</div><div class="line">                key = feature + <span class="string">'-'</span> + cat</div><div class="line">                coff_matrix[key] = (chi2, p)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> coff_matrix</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">SiftRelativeFeature</span><span class="params">(coff_matrix, conf=<span class="number">1e-5</span>)</span>:</span></div><div class="line">    <span class="string">""" Sift the feature that satisfy the caonfident condition.</span></div><div class="line"></div><div class="line">    Arguemnts:</div><div class="line">        coff_matrix: the calculated cofficient matrix for</div><div class="line">                     all features and categories.</div><div class="line">        conf: the confident.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        relative_feature_matrix: the satisfied feature and correspond</div><div class="line">                                 category and chi2 and p-value.</div><div class="line">    """</div><div class="line"></div><div class="line">    relative_feature_matrix = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> coff_matrix.keys():</div><div class="line">        <span class="keyword">if</span> coff_matrix[key][<span class="number">-1</span>] &lt;= conf:</div><div class="line">            relative_feature_matrix[key] = coff_matrix[key]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> relative_feature_matrix</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">WriteResult</span><span class="params">(coff_matrix, file_name=<span class="string">'result.txt'</span>)</span>:</span></div><div class="line">    <span class="string">""" Write the result to file.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        relative_feature_matrix: the satisfied feature and correspond</div><div class="line">                                 category and chi2 and p-value.</div><div class="line">        file_name: the result file name.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># Sort</span></div><div class="line">    sorted_coff_matrix = sorted(coff_matrix.items(),</div><div class="line">                                key=<span class="keyword">lambda</span> item: item[<span class="number">1</span>][<span class="number">-1</span>], reverse=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">    <span class="comment"># print(sorted_coff_matrix)</span></div><div class="line"></div><div class="line">    <span class="keyword">with</span> open(file_name, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> sorted_coff_matrix:</div><div class="line">            f.write(str(item))</div><div class="line">            f.write(<span class="string">'\n'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    data_set, labels = ReadChildInfoFromExcel()</div><div class="line">    <span class="comment"># splited_data_set = SplitDataSet(data_set, 'female', 'difficulties_cat')</span></div><div class="line">    <span class="comment"># chi2, p = CalChi2(splited_data_set)</span></div><div class="line">    coff_matrix = GenerateCoffMatrix(data_set)</div><div class="line">    <span class="comment"># relative_feature = SiftRelativeFeature(coff_matrix, 1)</span></div><div class="line">    WriteResult(coff_matrix)</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/anova_chi_result.png" alt="result"></p>
<h1 id="因子分析"><a href="#因子分析" class="headerlink" title="因子分析"></a>因子分析</h1><p>先说说因子分析与主成分分析的区别，下面的话<strong>引自知乎</strong>(<a href="https://www.zhihu.com/question/24524693" target="_blank" rel="external">https://www.zhihu.com/question/24524693</a>)</p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/pca_fa_compare_1.png" alt="pca_fa_1"></p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/pca_fa_compare_2.png" alt="pca_fa_2"></p>
<p>具体实现使用SPSS软件进行实现：</p>
<p>操作步骤如下(<strong>引自 SPSS数据分析从入门到精通-陈胜可</strong>)：</p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/spss_1.png" alt="spss_1"></p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/spss_2.png" alt="spss_2"></p>
<p>实验结果如下：</p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/fa_result.png" alt="fa_result"></p>
<hr>
<p>2017.2.27 Updates</p>
<h1 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</div><div class="line"></div><div class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</div><div class="line">InteractiveShell.ast_node_interactivity = <span class="string">"all"</span></div></pre></td></tr></table></figure>
<h2 id="Read-data"><a href="#Read-data" class="headerlink" title="Read data"></a>Read data</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data = pd.read_excel(<span class="string">'./scr_SDQ.xlsx'</span>, sheetname=<span class="string">'data'</span>, index_col=<span class="number">0</span>).dropna().sort_index()</div></pre></td></tr></table></figure>
<h2 id="Convert-the-data-format"><a href="#Convert-the-data-format" class="headerlink" title="Convert the data format"></a>Convert the data format</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">float_columns = [<span class="string">'scr_ave'</span>, <span class="string">'edu_ave'</span>,<span class="string">'scr_of_edu'</span>]</div><div class="line"><span class="keyword">for</span> column <span class="keyword">in</span> data.columns:</div><div class="line">    <span class="keyword">if</span> column <span class="keyword">not</span> <span class="keyword">in</span> float_columns:</div><div class="line">        data[column] = data[column].astype(int)</div></pre></td></tr></table></figure>
<h2 id="Split-the-data"><a href="#Split-the-data" class="headerlink" title="Split the data"></a>Split the data</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">data_feature_with_edu_ave = data.ix[:, :<span class="string">'mediacontact'</span>].drop(<span class="string">'scr_of_edu'</span>, axis=<span class="number">1</span>)</div><div class="line">data_feature_with_scr_of_edu = data.ix[:, :<span class="string">'mediacontact'</span>].drop(<span class="string">'edu_ave'</span>, axis=<span class="number">1</span>)</div><div class="line">data_classes = data.ix[:, <span class="string">'emo_cat'</span>:]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># dtree = tree.DecisionTreeClassifier(min_samples_leaf=500)</span></div><div class="line"><span class="comment"># cross_val_score(dtree,data_feature_with_edu_ave, data_classes['difficulties_cat'], cv=10)</span></div></pre></td></tr></table></figure>
<pre><code>array([ 0.64356436,  0.64356436,  0.64391855,  0.64391855,  0.64407713,
        0.64407713,  0.64407713,  0.64407713,  0.64407713,  0.64407713])
</code></pre><h2 id="difficulties-cat"><a href="#difficulties-cat" class="headerlink" title="difficulties_cat"></a>difficulties_cat</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">dtree_with_edu_ave = tree.DecisionTreeClassifier(min_samples_leaf=<span class="number">500</span>)</div><div class="line">dtree_with_edu_ave = dtree_with_edu_ave.fit(data_feature_with_edu_ave, data_classes[<span class="string">'difficulties_cat'</span>])</div><div class="line">pd.DataFrame(dtree_with_edu_ave.feature_importances_, columns = [<span class="string">"Imp"</span>], </div><div class="line">             index = data_feature_with_edu_ave.columns).sort_values(by=<span class="string">'Imp'</span>, ascending = <span class="keyword">False</span>)</div><div class="line"></div><div class="line">dtree_with_scr_of_edu = tree.DecisionTreeClassifier(min_samples_leaf=<span class="number">500</span>)</div><div class="line">dtree_with_scr_of_edu = dtree_with_scr_of_edu.fit(data_feature_with_scr_of_edu, data_classes[<span class="string">'difficulties_cat'</span>])</div><div class="line">pd.DataFrame(dtree_with_scr_of_edu.feature_importances_, columns = [<span class="string">"Imp"</span>], </div><div class="line">             index = data_feature_with_scr_of_edu.columns).sort_values(by=<span class="string">'Imp'</span>, ascending = <span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="comment"># dtree_with_edu_ave_diff.png</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'dtree_with_edu_ave_diff.dot'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> dot_file:</div><div class="line">    tree.export_graphviz(dtree_with_edu_ave, out_file=dot_file, feature_names=data_feature_with_edu_ave.columns)</div><div class="line"><span class="comment"># dtree_with_scr_of_edu_diff.png</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'dtree_with_scr_of_edu_diff.dot'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> dot_file:</div><div class="line">    tree.export_graphviz(dtree_with_scr_of_edu, out_file=dot_file, feature_names=data_feature_with_scr_of_edu.columns)</div></pre></td></tr></table></figure>
<div>
<table border="1" class="dataframe">
  <thead>
      <tr style="text-align: right;">

  <th></th>
  <th>Imp</th>
</tr>

  </thead>
  <tbody>

<tr>
  <th>scr_ave</th>
  <td>0.553782</td>
</tr>
<tr>
  <th>medu_newcat</th>
  <td>0.217218</td>
</tr>
<tr>
  <th>age_m</th>
  <td>0.085820</td>
</tr>
<tr>
  <th>income_newcat</th>
  <td>0.048912</td>
</tr>
<tr>
  <th>edu_ave</th>
  <td>0.029740</td>
</tr>
<tr>
  <th>female</th>
  <td>0.026161</td>
</tr>
<tr>
  <th>onlychild</th>
  <td>0.021336</td>
</tr>
<tr>
  <th>mediacontact</th>
  <td>0.017030</td>
</tr>
<tr>
  <th>divorce</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>scr_h_cat</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>mediacoview</th>
  <td>0.000000</td>
</tr>

  </tbody>
</table>
</div>



<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/dtree_with_edu_ave_diff.png" alt="edu_ave_diff"></p>
<div>
<table border="1" class="dataframe">
  <thead>

<tr style="text-align: right;">
  <th></th>
  <th>Imp</th>
</tr>

  </thead>
  <tbody>

<tr>
  <th>scr_ave</th>
  <td>0.525587</td>
</tr>
<tr>
  <th>medu_newcat</th>
  <td>0.213067</td>
</tr>
<tr>
  <th>age_m</th>
  <td>0.084708</td>
</tr>
<tr>
  <th>scr_of_edu</th>
  <td>0.080575</td>
</tr>
<tr>
  <th>mediacontact</th>
  <td>0.029232</td>
</tr>
<tr>
  <th>female</th>
  <td>0.025661</td>
</tr>
<tr>
  <th>onlychild</th>
  <td>0.020929</td>
</tr>
<tr>
  <th>income_newcat</th>
  <td>0.020240</td>
</tr>
<tr>
  <th>divorce</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>scr_h_cat</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>mediacoview</th>
  <td>0.000000</td>
</tr>

  </tbody>
</table>
</div>

<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/dtree_with_scr_of_edu_diff.png" alt="scr_of_edu_diff"></p>
<h2 id="emo-cat"><a href="#emo-cat" class="headerlink" title="emo_cat"></a>emo_cat</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">dtree_with_edu_ave = tree.DecisionTreeClassifier(min_samples_leaf=<span class="number">500</span>)</div><div class="line">dtree_with_edu_ave = dtree_with_edu_ave.fit(data_feature_with_edu_ave, data_classes[<span class="string">'emo_cat'</span>])</div><div class="line">pd.DataFrame(dtree_with_edu_ave.feature_importances_, columns = [<span class="string">"Imp"</span>], </div><div class="line">             index = data_feature_with_edu_ave.columns).sort_values(by=<span class="string">'Imp'</span>, ascending = <span class="keyword">False</span>)</div><div class="line"></div><div class="line">dtree_with_scr_of_edu = tree.DecisionTreeClassifier(min_samples_leaf=<span class="number">500</span>)</div><div class="line">dtree_with_scr_of_edu = dtree_with_scr_of_edu.fit(data_feature_with_scr_of_edu, data_classes[<span class="string">'emo_cat'</span>])</div><div class="line">pd.DataFrame(dtree_with_scr_of_edu.feature_importances_, columns = [<span class="string">"Imp"</span>], </div><div class="line">             index = data_feature_with_scr_of_edu.columns).sort_values(by=<span class="string">'Imp'</span>, ascending = <span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="comment"># dtree_with_edu_ave_emo.png</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'dtree_with_edu_ave_emo.dot'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> dot_file:</div><div class="line">    tree.export_graphviz(dtree_with_edu_ave, out_file=dot_file, feature_names=data_feature_with_edu_ave.columns)</div><div class="line"><span class="comment"># dtree_with_scr_of_edu_emo.png</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'dtree_with_scr_of_edu_emo.dot'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> dot_file:</div><div class="line">    tree.export_graphviz(dtree_with_scr_of_edu, out_file=dot_file, feature_names=data_feature_with_scr_of_edu.columns)</div></pre></td></tr></table></figure>
<div>
<table border="1" class="dataframe">
  <thead>

<tr style="text-align: right;">
  <th></th>
  <th>Imp</th>
</tr>

  </thead>
  <tbody>

<tr>
  <th>scr_ave</th>
  <td>0.521694</td>
</tr>
<tr>
  <th>medu_newcat</th>
  <td>0.159798</td>
</tr>
<tr>
  <th>income_newcat</th>
  <td>0.147978</td>
</tr>
<tr>
  <th>edu_ave</th>
  <td>0.083233</td>
</tr>
<tr>
  <th>age_m</th>
  <td>0.040750</td>
</tr>
<tr>
  <th>female</th>
  <td>0.023781</td>
</tr>
<tr>
  <th>mediacontact</th>
  <td>0.019127</td>
</tr>
<tr>
  <th>mediacoview</th>
  <td>0.003639</td>
</tr>
<tr>
  <th>onlychild</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>divorce</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>scr_h_cat</th>
  <td>0.000000</td>
</tr>

  </tbody>
</table>
</div>



<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/dtree_with_edu_ave_emo.png" alt="edu_ave_emo"></p>
<div>
<table border="1" class="dataframe">
  <thead>

<tr style="text-align: right;">
  <th></th>
  <th>Imp</th>
</tr>

  </thead>
  <tbody>

<tr>
  <th>scr_ave</th>
  <td>0.520711</td>
</tr>
<tr>
  <th>income_newcat</th>
  <td>0.155111</td>
</tr>
<tr>
  <th>medu_newcat</th>
  <td>0.146762</td>
</tr>
<tr>
  <th>scr_of_edu</th>
  <td>0.115745</td>
</tr>
<tr>
  <th>age_m</th>
  <td>0.023767</td>
</tr>
<tr>
  <th>female</th>
  <td>0.021924</td>
</tr>
<tr>
  <th>mediacontact</th>
  <td>0.011410</td>
</tr>
<tr>
  <th>mediacoview</th>
  <td>0.004571</td>
</tr>
<tr>
  <th>onlychild</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>divorce</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>scr_h_cat</th>
  <td>0.000000</td>
</tr>

  </tbody>
</table>
</div>

<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/dtree_with_scr_of_edu_emo.png" alt="scr_of_edu_emo"></p>
<h2 id="con-cat"><a href="#con-cat" class="headerlink" title="con_cat"></a>con_cat</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">dtree_with_edu_ave = tree.DecisionTreeClassifier(min_samples_leaf=<span class="number">500</span>)</div><div class="line">dtree_with_edu_ave = dtree_with_edu_ave.fit(data_feature_with_edu_ave, data_classes[<span class="string">'con_cat'</span>])</div><div class="line">pd.DataFrame(dtree_with_edu_ave.feature_importances_, columns = [<span class="string">"Imp"</span>], </div><div class="line">             index = data_feature_with_edu_ave.columns).sort_values(by=<span class="string">'Imp'</span>, ascending = <span class="keyword">False</span>)</div><div class="line"></div><div class="line">dtree_with_scr_of_edu = tree.DecisionTreeClassifier(min_samples_leaf=<span class="number">500</span>)</div><div class="line">dtree_with_scr_of_edu = dtree_with_scr_of_edu.fit(data_feature_with_scr_of_edu, data_classes[<span class="string">'con_cat'</span>])</div><div class="line">pd.DataFrame(dtree_with_scr_of_edu.feature_importances_, columns = [<span class="string">"Imp"</span>], </div><div class="line">             index = data_feature_with_scr_of_edu.columns).sort_values(by=<span class="string">'Imp'</span>, ascending = <span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="comment"># dtree_with_edu_ave_con.png</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'dtree_with_edu_ave_con.dot'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> dot_file:</div><div class="line">    tree.export_graphviz(dtree_with_edu_ave, out_file=dot_file, feature_names=data_feature_with_edu_ave.columns)</div><div class="line"><span class="comment"># dtree_with_scr_of_edu_con.png</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'dtree_with_scr_of_edu_con.dot'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> dot_file:</div><div class="line">    tree.export_graphviz(dtree_with_scr_of_edu, out_file=dot_file, feature_names=data_feature_with_scr_of_edu.columns)</div></pre></td></tr></table></figure>
<div>
<table border="1" class="dataframe">
  <thead>

<tr style="text-align: right;">
  <th></th>
  <th>Imp</th>
</tr>

  </thead>
  <tbody>

<tr>
  <th>scr_ave</th>
  <td>0.562325</td>
</tr>
<tr>
  <th>medu_newcat</th>
  <td>0.098819</td>
</tr>
<tr>
  <th>mediacontact</th>
  <td>0.095089</td>
</tr>
<tr>
  <th>edu_ave</th>
  <td>0.077572</td>
</tr>
<tr>
  <th>female</th>
  <td>0.064213</td>
</tr>
<tr>
  <th>income_newcat</th>
  <td>0.056334</td>
</tr>
<tr>
  <th>age_m</th>
  <td>0.023696</td>
</tr>
<tr>
  <th>onlychild</th>
  <td>0.013513</td>
</tr>
<tr>
  <th>mediacoview</th>
  <td>0.008440</td>
</tr>
<tr>
  <th>divorce</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>scr_h_cat</th>
  <td>0.000000</td>
</tr>

  </tbody>
</table>
</div>

<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/dtree_with_edu_ave_con.png" alt="edu_ave_con"></p>
<div>
<table border="1" class="dataframe">
  <thead>

<tr style="text-align: right;">
  <th></th>
  <th>Imp</th>
</tr>

  </thead>
  <tbody>

<tr>
  <th>scr_ave</th>
  <td>0.511282</td>
</tr>
<tr>
  <th>scr_of_edu</th>
  <td>0.110155</td>
</tr>
<tr>
  <th>medu_newcat</th>
  <td>0.097473</td>
</tr>
<tr>
  <th>mediacontact</th>
  <td>0.093793</td>
</tr>
<tr>
  <th>female</th>
  <td>0.082843</td>
</tr>
<tr>
  <th>income_newcat</th>
  <td>0.055566</td>
</tr>
<tr>
  <th>age_m</th>
  <td>0.035552</td>
</tr>
<tr>
  <th>onlychild</th>
  <td>0.013335</td>
</tr>
<tr>
  <th>divorce</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>scr_h_cat</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>mediacoview</th>
  <td>0.000000</td>
</tr>

  </tbody>
</table>
</div>

<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/dtree_with_scr_of_edu_con.png" alt="scr_of_edu_con"></p>
<h2 id="hyp-cat"><a href="#hyp-cat" class="headerlink" title="hyp_cat"></a>hyp_cat</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">dtree_with_edu_ave = tree.DecisionTreeClassifier(min_samples_leaf=<span class="number">500</span>)</div><div class="line">dtree_with_edu_ave = dtree_with_edu_ave.fit(data_feature_with_edu_ave, data_classes[<span class="string">'hyp_cat'</span>])</div><div class="line">pd.DataFrame(dtree_with_edu_ave.feature_importances_, columns = [<span class="string">"Imp"</span>], </div><div class="line">             index = data_feature_with_edu_ave.columns).sort_values(by=<span class="string">'Imp'</span>, ascending = <span class="keyword">False</span>)</div><div class="line"></div><div class="line">dtree_with_scr_of_edu = tree.DecisionTreeClassifier(min_samples_leaf=<span class="number">500</span>)</div><div class="line">dtree_with_scr_of_edu = dtree_with_scr_of_edu.fit(data_feature_with_scr_of_edu, data_classes[<span class="string">'hyp_cat'</span>])</div><div class="line">pd.DataFrame(dtree_with_scr_of_edu.feature_importances_, columns = [<span class="string">"Imp"</span>], </div><div class="line">             index = data_feature_with_scr_of_edu.columns).sort_values(by=<span class="string">'Imp'</span>, ascending = <span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="comment"># dtree_with_edu_ave_hyp.png</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'dtree_with_edu_ave_hyp.dot'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> dot_file:</div><div class="line">    tree.export_graphviz(dtree_with_edu_ave, out_file=dot_file, feature_names=data_feature_with_edu_ave.columns)</div><div class="line"><span class="comment"># dtree_with_scr_of_edu_hyp.png</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'dtree_with_scr_of_edu_hyp.dot'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> dot_file:</div><div class="line">    tree.export_graphviz(dtree_with_scr_of_edu, out_file=dot_file, feature_names=data_feature_with_scr_of_edu.columns)</div></pre></td></tr></table></figure>
<div>
<table border="1" class="dataframe">
  <thead>

<tr style="text-align: right;">
  <th></th>
  <th>Imp</th>
</tr>

  </thead>
  <tbody>

<tr>
  <th>medu_newcat</th>
  <td>0.343448</td>
</tr>
<tr>
  <th>scr_ave</th>
  <td>0.265652</td>
</tr>
<tr>
  <th>onlychild</th>
  <td>0.165487</td>
</tr>
<tr>
  <th>edu_ave</th>
  <td>0.076194</td>
</tr>
<tr>
  <th>income_newcat</th>
  <td>0.054466</td>
</tr>
<tr>
  <th>age_m</th>
  <td>0.046774</td>
</tr>
<tr>
  <th>mediacontact</th>
  <td>0.020992</td>
</tr>
<tr>
  <th>mediacoview</th>
  <td>0.015532</td>
</tr>
<tr>
  <th>female</th>
  <td>0.011454</td>
</tr>
<tr>
  <th>divorce</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>scr_h_cat</th>
  <td>0.000000</td>
</tr>

  </tbody>
</table>
</div>



<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/dtree_with_edu_ave_hyp.png" alt="edu_ave_hyp"></p>
<div>
<table border="1" class="dataframe">
  <thead>

<tr style="text-align: right;">
  <th></th>
  <th>Imp</th>
</tr>

  </thead>
  <tbody>

<tr>
  <th>medu_newcat</th>
  <td>0.335192</td>
</tr>
<tr>
  <th>scr_ave</th>
  <td>0.257218</td>
</tr>
<tr>
  <th>onlychild</th>
  <td>0.161509</td>
</tr>
<tr>
  <th>scr_of_edu</th>
  <td>0.105471</td>
</tr>
<tr>
  <th>age_m</th>
  <td>0.065618</td>
</tr>
<tr>
  <th>income_newcat</th>
  <td>0.033129</td>
</tr>
<tr>
  <th>mediacontact</th>
  <td>0.022542</td>
</tr>
<tr>
  <th>mediacoview</th>
  <td>0.012901</td>
</tr>
<tr>
  <th>female</th>
  <td>0.006421</td>
</tr>
<tr>
  <th>divorce</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>scr_h_cat</th>
  <td>0.000000</td>
</tr>

  </tbody>
</table>
</div>

<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/dtree_with_scr_of_edu_hyp.png" alt="scr_of_edu_hyp"></p>
<h2 id="pee-cat"><a href="#pee-cat" class="headerlink" title="pee_cat"></a>pee_cat</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">dtree_with_edu_ave = tree.DecisionTreeClassifier(min_samples_leaf=<span class="number">500</span>)</div><div class="line">dtree_with_edu_ave = dtree_with_edu_ave.fit(data_feature_with_edu_ave, data_classes[<span class="string">'pee_cat'</span>])</div><div class="line">pd.DataFrame(dtree_with_edu_ave.feature_importances_, columns = [<span class="string">"Imp"</span>], </div><div class="line">             index = data_feature_with_edu_ave.columns).sort_values(by=<span class="string">'Imp'</span>, ascending = <span class="keyword">False</span>)</div><div class="line"></div><div class="line">dtree_with_scr_of_edu = tree.DecisionTreeClassifier(min_samples_leaf=<span class="number">500</span>)</div><div class="line">dtree_with_scr_of_edu = dtree_with_scr_of_edu.fit(data_feature_with_scr_of_edu, data_classes[<span class="string">'pee_cat'</span>])</div><div class="line">pd.DataFrame(dtree_with_scr_of_edu.feature_importances_, columns = [<span class="string">"Imp"</span>], </div><div class="line">             index = data_feature_with_scr_of_edu.columns).sort_values(by=<span class="string">'Imp'</span>, ascending = <span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="comment"># dtree_with_edu_ave_pee.png</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'dtree_with_edu_ave_pee.dot'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> dot_file:</div><div class="line">    tree.export_graphviz(dtree_with_edu_ave, out_file=dot_file, feature_names=data_feature_with_edu_ave.columns)</div><div class="line"></div><div class="line"><span class="comment"># dtree_with_scr_of_edu_pee.png</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'dtree_with_scr_of_edu_pee.dot'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> dot_file:</div><div class="line">    tree.export_graphviz(dtree_with_scr_of_edu, out_file=dot_file, feature_names=data_feature_with_scr_of_edu.columns)</div></pre></td></tr></table></figure>
<div>
<table border="1" class="dataframe">
  <thead>

<tr style="text-align: right;">
  <th></th>
  <th>Imp</th>
</tr>

  </thead>
  <tbody>

<tr>
  <th>scr_ave</th>
  <td>0.441246</td>
</tr>
<tr>
  <th>income_newcat</th>
  <td>0.210646</td>
</tr>
<tr>
  <th>female</th>
  <td>0.152568</td>
</tr>
<tr>
  <th>age_m</th>
  <td>0.151888</td>
</tr>
<tr>
  <th>medu_newcat</th>
  <td>0.033530</td>
</tr>
<tr>
  <th>mediacoview</th>
  <td>0.009625</td>
</tr>
<tr>
  <th>edu_ave</th>
  <td>0.000498</td>
</tr>
<tr>
  <th>onlychild</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>divorce</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>scr_h_cat</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>mediacontact</th>
  <td>0.000000</td>
</tr>

  </tbody>
</table>
</div>



<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/dtree_with_edu_ave_pee.png" alt="edu_ave_pee"></p>
<div>
<table border="1" class="dataframe">
  <thead>

<tr style="text-align: right;">
  <th></th>
  <th>Imp</th>
</tr>

  </thead>
  <tbody>

<tr>
  <th>scr_ave</th>
  <td>0.430946</td>
</tr>
<tr>
  <th>income_newcat</th>
  <td>0.200188</td>
</tr>
<tr>
  <th>age_m</th>
  <td>0.151286</td>
</tr>
<tr>
  <th>female</th>
  <td>0.139104</td>
</tr>
<tr>
  <th>medu_newcat</th>
  <td>0.033289</td>
</tr>
<tr>
  <th>scr_of_edu</th>
  <td>0.033259</td>
</tr>
<tr>
  <th>mediacoview</th>
  <td>0.011927</td>
</tr>
<tr>
  <th>onlychild</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>divorce</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>scr_h_cat</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>mediacontact</th>
  <td>0.000000</td>
</tr>

  </tbody>
</table>
</div>

<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/dtree_with_scr_of_edu_pee.png" alt="scr_of_edu_pee"></p>
<h2 id="pro-cat"><a href="#pro-cat" class="headerlink" title="pro_cat"></a>pro_cat</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">dtree_with_edu_ave = tree.DecisionTreeClassifier(min_samples_leaf=<span class="number">500</span>)</div><div class="line">dtree_with_edu_ave = dtree_with_edu_ave.fit(data_feature_with_edu_ave, data_classes[<span class="string">'pro_cat'</span>])</div><div class="line">pd.DataFrame(dtree_with_edu_ave.feature_importances_, columns = [<span class="string">"Imp"</span>], </div><div class="line">             index = data_feature_with_edu_ave.columns).sort_values(by=<span class="string">'Imp'</span>, ascending = <span class="keyword">False</span>)</div><div class="line"></div><div class="line">dtree_with_scr_of_edu = tree.DecisionTreeClassifier(min_samples_leaf=<span class="number">500</span>)</div><div class="line">dtree_with_scr_of_edu = dtree_with_scr_of_edu.fit(data_feature_with_scr_of_edu, data_classes[<span class="string">'pro_cat'</span>])</div><div class="line">pd.DataFrame(dtree_with_scr_of_edu.feature_importances_, columns = [<span class="string">"Imp"</span>], </div><div class="line">             index = data_feature_with_scr_of_edu.columns).sort_values(by=<span class="string">'Imp'</span>, ascending = <span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="comment"># dtree_with_edu_ave_pro.png</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'dtree_with_edu_ave_pro.dot'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> dot_file:</div><div class="line">    tree.export_graphviz(dtree_with_edu_ave, out_file=dot_file, feature_names=data_feature_with_edu_ave.columns)</div><div class="line"><span class="comment"># dtree_with_scr_of_edu_pro.png</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'dtree_with_scr_of_edu_pro.dot'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> dot_file:</div><div class="line">    tree.export_graphviz(dtree_with_scr_of_edu, out_file=dot_file, feature_names=data_feature_with_scr_of_edu.columns)</div></pre></td></tr></table></figure>
<div>
<table border="1" class="dataframe">
  <thead>

<tr style="text-align: right;">
  <th></th>
  <th>Imp</th>
</tr>

  </thead>
  <tbody>

<tr>
  <th>female</th>
  <td>0.295389</td>
</tr>
<tr>
  <th>scr_ave</th>
  <td>0.252091</td>
</tr>
<tr>
  <th>mediacontact</th>
  <td>0.145010</td>
</tr>
<tr>
  <th>age_m</th>
  <td>0.137453</td>
</tr>
<tr>
  <th>income_newcat</th>
  <td>0.085421</td>
</tr>
<tr>
  <th>edu_ave</th>
  <td>0.062697</td>
</tr>
<tr>
  <th>medu_newcat</th>
  <td>0.021938</td>
</tr>
<tr>
  <th>onlychild</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>divorce</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>scr_h_cat</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>mediacoview</th>
  <td>0.000000</td>
</tr>

  </tbody>
</table>
</div>



<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/dtree_with_edu_ave_pro.png" alt="edu_ave_pro"></p>
<div>
<table border="1" class="dataframe">
  <thead>

<tr style="text-align: right;">
  <th></th>
  <th>Imp</th>
</tr>

  </thead>
  <tbody>

<tr>
  <th>female</th>
  <td>0.299316</td>
</tr>
<tr>
  <th>scr_ave</th>
  <td>0.204496</td>
</tr>
<tr>
  <th>mediacontact</th>
  <td>0.131972</td>
</tr>
<tr>
  <th>age_m</th>
  <td>0.125169</td>
</tr>
<tr>
  <th>scr_of_edu</th>
  <td>0.111909</td>
</tr>
<tr>
  <th>income_newcat</th>
  <td>0.080072</td>
</tr>
<tr>
  <th>medu_newcat</th>
  <td>0.047066</td>
</tr>
<tr>
  <th>onlychild</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>divorce</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>scr_h_cat</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>mediacoview</th>
  <td>0.000000</td>
</tr>

  </tbody>
</table>
</div>

<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/dtree_with_scr_of_edu_pro.png" alt="scr_of_edu_pro"></p>
<h2 id="Convert-continuous-variables-to-categorical-variables"><a href="#Convert-continuous-variables-to-categorical-variables" class="headerlink" title="Convert continuous variables to categorical variables"></a>Convert continuous variables to categorical variables</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">data_category = data.copy()</div><div class="line"><span class="keyword">for</span> column <span class="keyword">in</span> data_category.columns:</div><div class="line">    <span class="keyword">if</span> column <span class="keyword">in</span> float_columns:</div><div class="line">        data_category[column] = pd.cut(data_category[column], <span class="number">10</span>, labels=np.arange(<span class="number">10</span>))</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">data_cate_feature_with_edu_ave = data_category.ix[:, :<span class="string">'mediacontact'</span>].drop(<span class="string">'scr_of_edu'</span>, axis=<span class="number">1</span>)</div><div class="line">data_cate_feature_with_scr_of_edu = data_category.ix[:, :<span class="string">'mediacontact'</span>].drop(<span class="string">'edu_ave'</span>, axis=<span class="number">1</span>)</div><div class="line">data_cate_classes = data.ix[:, <span class="string">'emo_cat'</span>:]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dtree_cate = tree.DecisionTreeClassifier(min_samples_leaf=<span class="number">50</span>)</div><div class="line">cross_val_score(dtree_cate,data_cate_feature_with_edu_ave, data_cate_classes[<span class="string">'difficulties_cat'</span>], cv=<span class="number">10</span>).sum() / <span class="number">10</span></div></pre></td></tr></table></figure>
<pre><code>0.63948514409153423
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">dtree_cate_with_edu_ave = tree.DecisionTreeClassifier(min_samples_leaf=<span class="number">500</span>)</div><div class="line">dtree_cate_with_edu_ave = dtree_with_edu_ave.fit(data_cate_feature_with_edu_ave, data_cate_classes[<span class="string">'difficulties_cat'</span>])</div><div class="line">pd.DataFrame(dtree_cate_with_edu_ave.feature_importances_, columns = [<span class="string">"Imp"</span>], </div><div class="line">             index = data_cate_feature_with_edu_ave.columns).sort_values(by=<span class="string">'Imp'</span>, ascending = <span class="keyword">False</span>)</div><div class="line"></div><div class="line">dtree_cate_with_scr_of_edu = tree.DecisionTreeClassifier(min_samples_leaf=<span class="number">500</span>)</div><div class="line">dtree_cate_with_scr_of_edu = dtree_cate_with_scr_of_edu.fit(data_cate_feature_with_scr_of_edu, data_cate_classes[<span class="string">'difficulties_cat'</span>])</div><div class="line">pd.DataFrame(dtree_cate_with_scr_of_edu.feature_importances_, columns = [<span class="string">"Imp"</span>], </div><div class="line">             index = data_cate_feature_with_scr_of_edu.columns).sort_values(by=<span class="string">'Imp'</span>, ascending = <span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="comment"># dtree_cate_with_edu_ave_diff.png</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'dtree_cate_with_edu_ave_diff.dot'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> dot_file:</div><div class="line">    tree.export_graphviz(dtree_cate_with_edu_ave, out_file=dot_file, feature_names=data_cate_feature_with_edu_ave.columns)</div><div class="line"><span class="comment"># dtree_cate_with_scr_of_edu_diff.png</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'dtree_cate_with_scr_of_edu_diff.dot'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> dot_file:</div><div class="line">    tree.export_graphviz(dtree_cate_with_scr_of_edu, out_file=dot_file, feature_names=data_cate_feature_with_scr_of_edu.columns)</div></pre></td></tr></table></figure>
<div>
<table border="1" class="dataframe">
  <thead>

<tr style="text-align: right;">
  <th></th>
  <th>Imp</th>
</tr>

  </thead>
  <tbody>

<tr>
  <th>scr_h_cat</th>
  <td>0.528976</td>
</tr>
<tr>
  <th>medu_newcat</th>
  <td>0.221779</td>
</tr>
<tr>
  <th>age_m</th>
  <td>0.092168</td>
</tr>
<tr>
  <th>income_newcat</th>
  <td>0.057032</td>
</tr>
<tr>
  <th>onlychild</th>
  <td>0.034724</td>
</tr>
<tr>
  <th>mediacontact</th>
  <td>0.027193</td>
</tr>
<tr>
  <th>female</th>
  <td>0.021036</td>
</tr>
<tr>
  <th>scr_ave</th>
  <td>0.011653</td>
</tr>
<tr>
  <th>mediacoview</th>
  <td>0.005439</td>
</tr>
<tr>
  <th>divorce</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>edu_ave</th>
  <td>0.000000</td>
</tr>

  </tbody>
</table>
</div>






<div>
<table border="1" class="dataframe">
  <thead>

<tr style="text-align: right;">
  <th></th>
  <th>Imp</th>
</tr>

  </thead>
  <tbody>

<tr>
  <th>scr_h_cat</th>
  <td>0.507678</td>
</tr>
<tr>
  <th>medu_newcat</th>
  <td>0.215210</td>
</tr>
<tr>
  <th>age_m</th>
  <td>0.089438</td>
</tr>
<tr>
  <th>scr_of_edu</th>
  <td>0.042832</td>
</tr>
<tr>
  <th>mediacontact</th>
  <td>0.041463</td>
</tr>
<tr>
  <th>income_newcat</th>
  <td>0.035742</td>
</tr>
<tr>
  <th>onlychild</th>
  <td>0.033695</td>
</tr>
<tr>
  <th>female</th>
  <td>0.020413</td>
</tr>
<tr>
  <th>scr_ave</th>
  <td>0.013527</td>
</tr>
<tr>
  <th>divorce</th>
  <td>0.000000</td>
</tr>
<tr>
  <th>mediacoview</th>
  <td>0.000000</td>
</tr>

  </tbody>
</table>
</div>

<p><img src="http://o7ie0tcjk.bkt.clouddn.com/Correlation-Analysis/dtree_cate_with_scr_of_edu_diff.png" alt="cate_scr_of_edu_diff"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;最近有一个关于关联分析的小作业，问题描述如下：&lt;/p&gt;
&lt;p&gt;孩子的情感状况、品行症状、亲社会行为等等与很多因素相关，这个作
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Statistics" scheme="http://yoursite.com/tags/Statistics/"/>
    
  </entry>
  
  <entry>
    <title>Get Pois uses God-map apis</title>
    <link href="http://yoursite.com/2017/02/21/Get-Pois-uses-God-map-apis/"/>
    <id>http://yoursite.com/2017/02/21/Get-Pois-uses-God-map-apis/</id>
    <published>2017-02-21T04:13:20.000Z</published>
    <updated>2017-02-21T08:32:38.341Z</updated>
    
    <content type="html"><![CDATA[<p>伪代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">从Excel文件中读出数据</div><div class="line">对于每一个house:</div><div class="line">	提取出其location字段（经纬度）</div><div class="line">	将location字段作为输入参数传给map api</div><div class="line">	将返回值进行适当筛选最后存入原数据集中</div></pre></td></tr></table></figure>
<p>代码实现如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"><span class="keyword">import</span> pickle</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReadHousesInfoFromExcel</span><span class="params">(</span></span></div><div class="line">        file_name=<span class="string">'houses_nadrop.xls'</span>, sheet_name=<span class="string">'小区信息'</span>):</div><div class="line">    <span class="string">""" Read the houses detail information from the excel-type file.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        file_name: the name of the excel-type file.</div><div class="line">        sheet_name: the name of the sheet of the excel file.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        houses: A dict that contains the detail information of each house.</div><div class="line">    """</div><div class="line"></div><div class="line">    HOUSES_FILE_NAME = <span class="string">'houses.pkl'</span></div><div class="line">    HOUSES_DETAIL_TAB = [<span class="string">'name'</span>, <span class="string">'address'</span>, <span class="string">'property_category'</span>, <span class="string">'area'</span>,</div><div class="line">                         <span class="string">'avg_price'</span>, <span class="string">'location'</span>, <span class="string">'property_costs'</span>,</div><div class="line">                         <span class="string">'volume_rate'</span>, <span class="string">'green_rate'</span>]</div><div class="line"></div><div class="line">    houses = []</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (os.path.isfile(HOUSES_FILE_NAME)):</div><div class="line">        <span class="keyword">with</span> open(HOUSES_FILE_NAME, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</div><div class="line">            houses = pickle.load(f)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        workBook = xlrd.open_workbook(file_name)</div><div class="line">        bookSheet = workBook.sheet_by_name(sheet_name)</div><div class="line">        <span class="comment"># read from second row because of the first row has tabs</span></div><div class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">1</span>, bookSheet.nrows):</div><div class="line">            house = &#123;&#125;</div><div class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range(bookSheet.ncols):</div><div class="line">                cel = bookSheet.cell(row, col)</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    val = cel.value</div><div class="line">                <span class="keyword">except</span>:</div><div class="line">                    <span class="keyword">pass</span></div><div class="line">                val = str(val)</div><div class="line">                house[HOUSES_DETAIL_TAB[col]] = val</div><div class="line">            houses.append(house)</div><div class="line">        <span class="keyword">with</span> open(HOUSES_FILE_NAME, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">            pickle.dump(houses, f)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> houses</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Geocode</span><span class="params">(location, poi_type)</span>:</span></div><div class="line">    <span class="string">""" A tool that call the God-Map api.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        location: The location of house.</div><div class="line">        poi_type: The poi type.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        answer: The JSON-type data that contains pois infomation.</div><div class="line">    """</div><div class="line"></div><div class="line">    location = str(location).strip()</div><div class="line"></div><div class="line">    parameters = &#123;<span class="string">'location'</span>: location,</div><div class="line">                  <span class="string">'key'</span>: <span class="string">'e798a5bfb344a09977b79552ae415974'</span>,</div><div class="line">                  <span class="string">'types'</span>: poi_type,</div><div class="line">                  <span class="string">'offset'</span>: <span class="number">10</span>,</div><div class="line">                  <span class="string">'page'</span>: <span class="number">1</span>,</div><div class="line">                  <span class="string">'extensions'</span>: <span class="string">'base'</span>&#125;</div><div class="line">    base = <span class="string">'http://restapi.amap.com/v3/place/around'</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        response = requests.get(base, parameters)</div><div class="line">        answer = response.json()</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print(<span class="string">'error!'</span>, e)</div><div class="line">        answer = <span class="string">'null'</span></div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> answer</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetPOI</span><span class="params">(houses)</span>:</span></div><div class="line">    <span class="string">""" Get the pois information of the houses according to the location.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        houses: The house detail information.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        houses_with_pois: The house detail information</div><div class="line">                          that contains the pois information.</div><div class="line">    """</div><div class="line"></div><div class="line">    POI_TYPE_LAB = [<span class="string">'subway_station'</span>, <span class="string">'bus_station'</span>, <span class="string">'parking_lot'</span>,</div><div class="line">                    <span class="string">'primary_school'</span>, <span class="string">'secondary_school'</span>, <span class="string">'university'</span>,</div><div class="line">                    <span class="string">'mall'</span>, <span class="string">'park'</span>]</div><div class="line">    POI_TYPE_CODE = [<span class="string">'150500'</span>, <span class="string">'150700'</span>, <span class="string">'150904'</span>, <span class="string">'141203'</span>, <span class="string">'141202'</span>,</div><div class="line">                     <span class="string">'141201'</span>, <span class="string">'060100'</span>, <span class="string">'110101'</span>]</div><div class="line">    KEEP_INFO_LAB = [<span class="string">'name'</span>, <span class="string">'location'</span>, <span class="string">'distance'</span>]</div><div class="line">    NO_INFO_NOW = <span class="string">'-'</span></div><div class="line">    SIZE = len(houses)</div><div class="line"></div><div class="line">    houses_with_pois = houses.copy()</div><div class="line">    count = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> house <span class="keyword">in</span> houses_with_pois:</div><div class="line">        count = count + <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> count % <span class="number">100</span> == <span class="number">0</span>:</div><div class="line">            print(count, <span class="string">''</span>, SIZE)</div><div class="line"></div><div class="line">        house[<span class="string">'pois'</span>] = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> poi_type_index <span class="keyword">in</span> range(len(POI_TYPE_LAB)):</div><div class="line">            poi_info_json = Geocode(house[<span class="string">'location'</span>],</div><div class="line">                                    POI_TYPE_CODE[poi_type_index])</div><div class="line">            <span class="keyword">if</span> poi_info_json == <span class="string">'null'</span> <span class="keyword">or</span> poi_info_json[<span class="string">'pois'</span>] <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                house[<span class="string">'pois'</span>][POI_TYPE_LAB[poi_type_index]] = NO_INFO_NOW</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                house[<span class="string">'pois'</span>][POI_TYPE_LAB[poi_type_index]] = []</div><div class="line">                <span class="keyword">for</span> poi <span class="keyword">in</span> poi_info_json[<span class="string">'pois'</span>]:</div><div class="line">                    pois_without_useless = &#123;&#125;</div><div class="line">                    <span class="keyword">for</span> key <span class="keyword">in</span> poi.keys():</div><div class="line">                        <span class="keyword">if</span> key <span class="keyword">in</span> KEEP_INFO_LAB:</div><div class="line">                            pois_without_useless[key] = poi[key]</div><div class="line">                    house[<span class="string">'pois'</span>][POI_TYPE_LAB[poi_type_index]].append(</div><div class="line">                        pois_without_useless)</div><div class="line">        <span class="comment"># return houses_with_pois</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> houses_with_pois</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    houses = ReadHousesInfoFromExcel()</div><div class="line">    <span class="comment"># answer = Geocode(houses[0]['location'], '150905')</span></div><div class="line">    houses_with_pois = GetPOI(houses)</div></pre></td></tr></table></figure>
<p>总结一下有几个注意点：</p>
<ol>
<li>传给parameters的location参数的格式一定要规范，前后都不能有空格</li>
<li>for循环中不能改变字典的大小，这里的大小不仅指其元素的数目，也包括其总占用空间的大小</li>
<li>注意pickle的用法</li>
<li>从Excel中读出的内容要转成str格式</li>
</ol>
<p><strong>整个过程十分清晰明了，值得注意的是细节问题</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;伪代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div clas
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python data analysis-Learning note-Ch02</title>
    <link href="http://yoursite.com/2017/02/19/Python%20data%20analysis-Learning%20notes-ch02/"/>
    <id>http://yoursite.com/2017/02/19/Python data analysis-Learning notes-ch02/</id>
    <published>2017-02-19T13:09:19.000Z</published>
    <updated>2017-02-20T08:54:05.495Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用Python内置的JSON模块对数据进行解析并转化为字典"><a href="#利用Python内置的JSON模块对数据进行解析并转化为字典" class="headerlink" title="利用Python内置的JSON模块对数据进行解析并转化为字典"></a>利用Python内置的JSON模块对数据进行解析并转化为字典</h2><p>数据如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">'&#123; "a": "Mozilla\\/5.0 (Windows NT 6.1; WOW64) AppleWebKit\\/535.11 (KHTML, like Gecko)</div><div class="line">Chrome\\/17.0.963.78 Safari\\/535.11", "c": "US", "nk": 1, "tz": "America\\/New_York", "gr":</div><div class="line">"MA", "g": "A6qOVH", "h": "wfLQtf", "l": "orofrog", "al": "en-US,en;q=0.8", "hh": "1.usa.gov",</div><div class="line">"r": "http:\\/\\/www.facebook.com\\/l\\/7AQEFzjSi\\/1.usa.gov\\/wfLQtf", "u":</div><div class="line">"http:\\/\\/www.ncbi.nlm.nih.gov\\/pubmed\\/22415991", "t": 1331923247, "hc": 1331822918,</div><div class="line">"cy": "Danvers", "ll": [ 42.576698, -70.954903 ] &#125;\n'</div></pre></td></tr></table></figure>
<p>核心代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line">path = <span class="string">'ch02/usagov_bitly_data2012-03-16-1331923249.txt'</span></div><div class="line">records = [json.loads(line) <span class="keyword">for</span> line <span class="keyword">in</span> open(path)]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">records[<span class="number">0</span>]</div><div class="line">-----------------------------------</div><div class="line">&#123;<span class="string">'a'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.78 Safari/535.11'</span>,</div><div class="line"> <span class="string">'al'</span>: <span class="string">'en-US,en;q=0.8'</span>,</div><div class="line"> <span class="string">'c'</span>: <span class="string">'US'</span>,</div><div class="line"> <span class="string">'cy'</span>: <span class="string">'Danvers'</span>,</div><div class="line"> <span class="string">'g'</span>: <span class="string">'A6qOVH'</span>,</div><div class="line"> <span class="string">'gr'</span>: <span class="string">'MA'</span>,</div><div class="line"> <span class="string">'h'</span>: <span class="string">'wfLQtf'</span>,</div><div class="line"> <span class="string">'hc'</span>: <span class="number">1331822918</span>,</div><div class="line"> <span class="string">'hh'</span>: <span class="string">'1.usa.gov'</span>,</div><div class="line"> <span class="string">'l'</span>: <span class="string">'orofrog'</span>,</div><div class="line"> <span class="string">'ll'</span>: [<span class="number">42.576698</span>, <span class="number">-70.954903</span>],</div><div class="line"> <span class="string">'nk'</span>: <span class="number">1</span>,</div><div class="line"> <span class="string">'r'</span>: <span class="string">'http://www.facebook.com/l/7AQEFzjSi/1.usa.gov/wfLQtf'</span>,</div><div class="line"> <span class="string">'t'</span>: <span class="number">1331923247</span>,</div><div class="line"> <span class="string">'tz'</span>: <span class="string">'America/New_York'</span>,</div><div class="line"> <span class="string">'u'</span>: <span class="string">'http://www.ncbi.nlm.nih.gov/pubmed/22415991'</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="对时区字段进行计数（pure-python-vs-pandas）"><a href="#对时区字段进行计数（pure-python-vs-pandas）" class="headerlink" title="对时区字段进行计数（pure python vs. pandas）"></a>对时区字段进行计数（pure python vs. pandas）</h2><p>首先从记录中提取时区字段并且放入一个列表中</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">time_zones = [rec[<span class="string">'tz'</span>] <span class="keyword">for</span> rec <span class="keyword">in</span> records <span class="keyword">if</span> <span class="string">'tz'</span> <span class="keyword">in</span> rec]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">time_zones[:<span class="number">10</span>]</div><div class="line">-----------------------------------</div><div class="line">[<span class="string">'America/New_York'</span>,</div><div class="line"> <span class="string">'America/Denver'</span>,</div><div class="line"> <span class="string">'America/New_York'</span>,</div><div class="line"> <span class="string">'America/Sao_Paulo'</span>,</div><div class="line"> <span class="string">'America/New_York'</span>,</div><div class="line"> <span class="string">'America/New_York'</span>,</div><div class="line"> <span class="string">'Europe/Warsaw'</span>,</div><div class="line"> <span class="string">''</span>,</div><div class="line"> <span class="string">''</span>,</div><div class="line"> <span class="string">''</span>]</div></pre></td></tr></table></figure>
<p>使用纯粹的python进行计数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_counts</span><span class="params">(sequence)</span>:</span></div><div class="line">    counts = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> sequence:</div><div class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> counts:</div><div class="line">            counts[x] += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            counts[x] = <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> counts</div></pre></td></tr></table></figure>
<p><strong>使用下列方法更加简洁</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_counts2</span><span class="params">(sequence)</span>:</span></div><div class="line">    counts = defaultdict(int) <span class="comment"># values will initialize to 0</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> sequence:</div><div class="line">        counts[x] += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> counts</div></pre></td></tr></table></figure>
<p>如果需要返回前十位的时区及其计数值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">top_counts</span><span class="params">(count_dict, n=<span class="number">10</span>)</span>:</span></div><div class="line">    value_key_pairs = [(count, tz) <span class="keyword">for</span> tz, count <span class="keyword">in</span> count_dict.items()]</div><div class="line">    value_key_pairs.sort()</div><div class="line">    <span class="keyword">return</span> value_key_pairs[-n:]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">top_counts(counts)</div><div class="line">--------------------------------------</div><div class="line">[(<span class="number">33</span>, <span class="string">'America/Sao_Paulo'</span>),</div><div class="line"> (<span class="number">35</span>, <span class="string">'Europe/Madrid'</span>),</div><div class="line"> (<span class="number">36</span>, <span class="string">'Pacific/Honolulu'</span>),</div><div class="line"> (<span class="number">37</span>, <span class="string">'Asia/Tokyo'</span>),</div><div class="line"> (<span class="number">74</span>, <span class="string">'Europe/London'</span>),</div><div class="line"> (<span class="number">191</span>, <span class="string">'America/Denver'</span>),</div><div class="line"> (<span class="number">382</span>, <span class="string">'America/Los_Angeles'</span>),</div><div class="line"> (<span class="number">400</span>, <span class="string">'America/Chicago'</span>),</div><div class="line"> (<span class="number">521</span>, <span class="string">''</span>),</div><div class="line"> (<span class="number">1251</span>, <span class="string">'America/New_York'</span>)]</div></pre></td></tr></table></figure>
<p><strong>可以使用python自带的库</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">counts = Counter(time_zones)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">counts.most_common(<span class="number">10</span>)</div><div class="line">--------------------------------</div><div class="line">[(<span class="string">'America/New_York'</span>, <span class="number">1251</span>),</div><div class="line"> (<span class="string">''</span>, <span class="number">521</span>),</div><div class="line"> (<span class="string">'America/Chicago'</span>, <span class="number">400</span>),</div><div class="line"> (<span class="string">'America/Los_Angeles'</span>, <span class="number">382</span>),</div><div class="line"> (<span class="string">'America/Denver'</span>, <span class="number">191</span>),</div><div class="line"> (<span class="string">'Europe/London'</span>, <span class="number">74</span>),</div><div class="line"> (<span class="string">'Asia/Tokyo'</span>, <span class="number">37</span>),</div><div class="line"> (<span class="string">'Pacific/Honolulu'</span>, <span class="number">36</span>),</div><div class="line"> (<span class="string">'Europe/Madrid'</span>, <span class="number">35</span>),</div><div class="line"> (<span class="string">'America/Sao_Paulo'</span>, <span class="number">33</span>)]</div></pre></td></tr></table></figure>
<p><strong>使用pandas进行相同的任务</strong></p>
<p>pandas中主要的数据结构是DataFrame， 作用是将数据表示成表格</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame, Series</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"></div><div class="line">frame = DataFrame(records)</div><div class="line">frame</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/dataframe_data_repr.png" alt="dataframe_data_repr"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">frame[<span class="string">'tz'</span>][:<span class="number">10</span>]</div><div class="line">-------------------------------</div><div class="line"><span class="number">0</span>     America/New_York</div><div class="line"><span class="number">1</span>       America/Denver</div><div class="line"><span class="number">2</span>     America/New_York</div><div class="line"><span class="number">3</span>    America/Sao_Paulo</div><div class="line"><span class="number">4</span>     America/New_York</div><div class="line"><span class="number">5</span>     America/New_York</div><div class="line"><span class="number">6</span>        Europe/Warsaw</div><div class="line"><span class="number">7</span>                     </div><div class="line"><span class="number">8</span>                     </div><div class="line"><span class="number">9</span>                     </div><div class="line">Name: tz, dtype: object</div></pre></td></tr></table></figure>
<p>计数·</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">tz_counts = frame[<span class="string">'tz'</span>].value_counts()</div><div class="line">tz_counts[:<span class="number">10</span>]</div><div class="line">--------------------------------------------------</div><div class="line">America/New_York       <span class="number">1251</span></div><div class="line">                        <span class="number">521</span></div><div class="line">America/Chicago         <span class="number">400</span></div><div class="line">America/Los_Angeles     <span class="number">382</span></div><div class="line">America/Denver          <span class="number">191</span></div><div class="line">Europe/London            <span class="number">74</span></div><div class="line">Asia/Tokyo               <span class="number">37</span></div><div class="line">Pacific/Honolulu         <span class="number">36</span></div><div class="line">Europe/Madrid            <span class="number">35</span></div><div class="line">America/Sao_Paulo        <span class="number">33</span></div><div class="line">Name: tz, dtype: int64</div></pre></td></tr></table></figure>
<p>填补缺失值以及未知值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">clean_tz = frame[<span class="string">'tz'</span>].fillna(<span class="string">'Missing'</span>)</div><div class="line">clean_tz[clean_tz == <span class="string">''</span>] = <span class="string">'Unknown'</span></div><div class="line">tz_counts = clean_tz.value_counts()</div><div class="line">tz_counts[:<span class="number">10</span>]</div><div class="line">----------------------------------------------</div><div class="line">America/New_York       <span class="number">1251</span></div><div class="line">Unknown                 <span class="number">521</span></div><div class="line">America/Chicago         <span class="number">400</span></div><div class="line">America/Los_Angeles     <span class="number">382</span></div><div class="line">America/Denver          <span class="number">191</span></div><div class="line">Missing                 <span class="number">120</span></div><div class="line">Europe/London            <span class="number">74</span></div><div class="line">Asia/Tokyo               <span class="number">37</span></div><div class="line">Pacific/Honolulu         <span class="number">36</span></div><div class="line">Europe/Madrid            <span class="number">35</span></div><div class="line">Name: tz, dtype: int64</div></pre></td></tr></table></figure>
<p>画个图展示一下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">4</span>))</div><div class="line">tz_counts[:<span class="number">10</span>].plot(kind=<span class="string">'barh'</span>, rot=<span class="number">0</span>)</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/majority_tz.png" alt="majority_tz"></p>
<p>下面我们对用户使用的浏览器的信息做一些操作</p>
<p><strong>Series应该代表的是DataFrame中的一列</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">results = Series([x.split()[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> frame.a.dropna()])</div><div class="line">results[:<span class="number">5</span>]</div><div class="line">---------------------------------------------------</div><div class="line"><span class="number">0</span>               Mozilla/<span class="number">5.0</span></div><div class="line"><span class="number">1</span>    GoogleMaps/RochesterNY</div><div class="line"><span class="number">2</span>               Mozilla/<span class="number">4.0</span></div><div class="line"><span class="number">3</span>               Mozilla/<span class="number">5.0</span></div><div class="line"><span class="number">4</span>               Mozilla/<span class="number">5.0</span></div><div class="line">dtype: object</div></pre></td></tr></table></figure>
<p><strong>同样可以进行计数</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">results.value_counts()[:<span class="number">8</span>]</div><div class="line">-----------------------------------------</div><div class="line">Mozilla/<span class="number">5.0</span>                 <span class="number">2594</span></div><div class="line">Mozilla/<span class="number">4.0</span>                  <span class="number">601</span></div><div class="line">GoogleMaps/RochesterNY       <span class="number">121</span></div><div class="line">Opera/<span class="number">9.80</span>                    <span class="number">34</span></div><div class="line">TEST_INTERNET_AGENT           <span class="number">24</span></div><div class="line">GoogleProducer                <span class="number">21</span></div><div class="line">Mozilla/<span class="number">6.0</span>                    <span class="number">5</span></div><div class="line">BlackBerry8520/<span class="number">5.0</span><span class="number">.0</span><span class="number">.681</span>       <span class="number">4</span></div><div class="line">dtype: int64</div></pre></td></tr></table></figure>
<h2 id="根据Windows和Non-Windows用户进行时区的分组操作"><a href="#根据Windows和Non-Windows用户进行时区的分组操作" class="headerlink" title="根据Windows和Non-Windows用户进行时区的分组操作"></a><strong>根据Windows和Non-Windows用户进行时区的分组操作</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cframe = frame[frame.a.notnull()]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">operating_system = np.where(cframe[<span class="string">'a'</span>].str.contains(<span class="string">'Windows'</span>),</div><div class="line">                            <span class="string">'Windows'</span>, <span class="string">'Not Windows'</span>)</div><div class="line">operating_system[:<span class="number">5</span>]</div><div class="line">-----------------------------------------------------------------</div><div class="line">array([<span class="string">'Windows'</span>, <span class="string">'Not Windows'</span>, <span class="string">'Windows'</span>, <span class="string">'Not Windows'</span>, <span class="string">'Windows'</span>], </div><div class="line">      dtype=<span class="string">'&lt;U11'</span>)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">by_tz_os = cframe.groupby([<span class="string">'tz'</span>, operating_system])</div></pre></td></tr></table></figure>
<p>来看看这个by_tz_os长什么样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">by_tz_os.size()</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_group_by_data_pic.png" alt="pandas_group_by_data_pic"></p>
<p>再来看看<strong>unstack()</strong>的炫酷效果</p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_group_by_data_unstack.png" alt="pandas_group_by_data_unstack"></p>
<p><strong>排下序</strong>， 看看排名多少</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Use to sort in ascending order</span></div><div class="line">indexer = agg_counts.sum(<span class="number">1</span>).argsort()</div><div class="line">indexer[:<span class="number">10</span>]</div><div class="line">------------------------------------------------</div><div class="line">tz</div><div class="line">                                  <span class="number">24</span></div><div class="line">Africa/Cairo                      <span class="number">20</span></div><div class="line">Africa/Casablanca                 <span class="number">21</span></div><div class="line">Africa/Ceuta                      <span class="number">92</span></div><div class="line">Africa/Johannesburg               <span class="number">87</span></div><div class="line">Africa/Lusaka                     <span class="number">53</span></div><div class="line">America/Anchorage                 <span class="number">54</span></div><div class="line">America/Argentina/Buenos_Aires    <span class="number">57</span></div><div class="line">America/Argentina/Cordoba         <span class="number">26</span></div><div class="line">America/Argentina/Mendoza         <span class="number">55</span></div><div class="line">dtype: int64</div></pre></td></tr></table></figure>
<p>取出<strong>前十</strong>的来看看</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">count_subset = agg_counts.take(indexer)[<span class="number">-10</span>:]</div><div class="line">count_subset</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_group_by_data_sort_top10.png" alt="pandas_group_by_data_sort_top10"></p>
<p>同样画个图</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">count_subset.plot(kind=<span class="string">'barh'</span>, stacked=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_group_by_data_sort_top10_pic.png" alt="pandas_group_by_data_sort_top10_pic"></p>
<p>看看<strong>两个类别所占的比例</strong>是多少</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">normed_subset = count_subset.div(count_subset.sum(<span class="number">1</span>), axis=<span class="number">0</span>)</div><div class="line">normed_subset.plot(kind=<span class="string">'barh'</span>, stacked=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_group_by_data_sort_top10_percent.png" alt="pandas_group_by_data_sort_top10_percent"></p>
<h2 id="电影评分数据表连接操作"><a href="#电影评分数据表连接操作" class="headerlink" title="电影评分数据表连接操作"></a>电影评分数据表连接操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> os</div><div class="line">encoding = <span class="string">'latin1'</span></div><div class="line"></div><div class="line">upath = os.path.expanduser(<span class="string">'ch02/movielens/users.dat'</span>)</div><div class="line">rpath = os.path.expanduser(<span class="string">'ch02/movielens/ratings.dat'</span>)</div><div class="line">mpath = os.path.expanduser(<span class="string">'ch02/movielens/movies.dat'</span>)</div><div class="line"></div><div class="line">unames = [<span class="string">'user_id'</span>, <span class="string">'gender'</span>, <span class="string">'age'</span>, <span class="string">'occupation'</span>, <span class="string">'zip'</span>]</div><div class="line">rnames = [<span class="string">'user_id'</span>, <span class="string">'movie_id'</span>, <span class="string">'rating'</span>, <span class="string">'timestamp'</span>]</div><div class="line">mnames = [<span class="string">'movie_id'</span>, <span class="string">'title'</span>, <span class="string">'genres'</span>]</div><div class="line"></div><div class="line">users = pd.read_csv(upath, sep=<span class="string">'::'</span>, header=<span class="keyword">None</span>, names=unames, encoding=encoding)</div><div class="line">ratings = pd.read_csv(rpath, sep=<span class="string">'::'</span>, header=<span class="keyword">None</span>, names=rnames, encoding=encoding)</div><div class="line">movies = pd.read_csv(mpath, sep=<span class="string">'::'</span>, header=<span class="keyword">None</span>, names=mnames, encoding=encoding)</div></pre></td></tr></table></figure>
<p>看看数据长什么样</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">users[:<span class="number">5</span>]</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_users.png" alt="pandas_ch02_users"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ratings[:<span class="number">5</span>]</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_ratings.png" alt="pandas_ch02_ratings"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">movies[:<span class="number">5</span>]</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_movies.png" alt="pandas_ch02_movies"></p>
<p><strong>多表连接</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data = pd.merge(pd.merge(ratings, users), movies)</div><div class="line">data</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_multi_table_joint.png" alt="pandas_ch02_multi_table_joint"></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">data.ix[0]</div><div class="line">--------------------------------------------</div><div class="line">user_id                                            1</div><div class="line">movie_id                                        1193</div><div class="line">rating                                             5</div><div class="line">timestamp                                  978300760</div><div class="line">gender                                             F</div><div class="line">age                                                1</div><div class="line">occupation                                        10</div><div class="line">zip                                            48067</div><div class="line">title         One Flew Over the Cuckoo's Nest (1975)</div><div class="line">genres                                         Drama</div><div class="line">Name: 0, dtype: object</div></pre></td></tr></table></figure>
<h2 id="根据性别计算每部电影的平均评分"><a href="#根据性别计算每部电影的平均评分" class="headerlink" title="根据性别计算每部电影的平均评分"></a>根据性别计算每部电影的平均评分</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mean_ratings = data.pivot_table(<span class="string">'rating'</span>, index=<span class="string">'title'</span>,</div><div class="line">                                columns=<span class="string">'gender'</span>, aggfunc=<span class="string">'mean'</span>)</div><div class="line">mean_ratings[:<span class="number">5</span>]</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_movie_avg_score_by_gender.png" alt="pandas_ch02_movie_avg_score_by_gender"></p>
<p>过滤掉评分数小于250的电影</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ratings_by_title = data.groupby(<span class="string">'title'</span>).size()</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ratings_by_title[:5]</div><div class="line">-----------------------------------------</div><div class="line">title</div><div class="line">$1,000,000 Duck (1971)            37</div><div class="line">'Night Mother (1986)              70</div><div class="line">'Til There Was You (1997)         52</div><div class="line">'burbs, The (1989)               303</div><div class="line">...And Justice for All (1979)    199</div><div class="line">dtype: int64</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">active_titles = ratings_by_title.index[ratings_by_title &gt;= <span class="number">250</span>]</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">active_titles[:10]</div><div class="line">-----------------------------------------</div><div class="line">Index([''burbs, The (1989)', '10 Things I Hate About You (1999)',</div><div class="line">       '101 Dalmatians (1961)', '101 Dalmatians (1996)', '12 Angry Men (1957)',</div><div class="line">       '13th Warrior, The (1999)', '2 Days in the Valley (1996)',</div><div class="line">       '20,000 Leagues Under the Sea (1954)', '2001: A Space Odyssey (1968)',</div><div class="line">       '2010 (1984)'],</div><div class="line">      dtype='object', name='title')</div></pre></td></tr></table></figure>
<p>ix应该是一个交集操作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mean_ratings = mean_ratings.ix[active_titles]</div><div class="line">mean_ratings</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_movie_avg_score_by_gender_ratings_more_than_250.png" alt="pandas_ch02_movie_avg_score_by_gender_ratings_more_than_250"></p>
<p>按照女性最喜欢的电影进行降序排序</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">top_female_ratings = mean_ratings.sort_values(by=<span class="string">'F'</span>, ascending=<span class="keyword">False</span>)</div><div class="line">top_female_ratings[:<span class="number">10</span>]</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_movie_female_favor_top_10.png" alt="pandas_ch02_movie_female_favor_top_10"></p>
<p>​    </p>
<h2 id="US-Baby-Names-1880-2010"><a href="#US-Baby-Names-1880-2010" class="headerlink" title="US Baby Names 1880-2010"></a>US Baby Names 1880-2010</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line">names1880 = pd.read_csv(<span class="string">'ch02/names/yob1880.txt'</span>, names=[<span class="string">'name'</span>, <span class="string">'sex'</span>, <span class="string">'births'</span>])</div><div class="line">names1880</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_us_baby_name.png" alt="pandas_ch02_us_baby_name"></p>
<p>把所有年份的数据<strong>合并</strong>一下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 2010 is the last available year right now</span></div><div class="line">years = range(<span class="number">1880</span>, <span class="number">2011</span>)</div><div class="line"></div><div class="line">pieces = []</div><div class="line">columns = [<span class="string">'name'</span>, <span class="string">'sex'</span>, <span class="string">'births'</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> year <span class="keyword">in</span> years:</div><div class="line">    path = <span class="string">'ch02/names/yob%d.txt'</span> % year</div><div class="line">    frame = pd.read_csv(path, names=columns)</div><div class="line"></div><div class="line">    frame[<span class="string">'year'</span>] = year</div><div class="line">    pieces.append(frame)</div><div class="line"></div><div class="line"><span class="comment"># Concatenate everything into a single DataFrame</span></div><div class="line">names = pd.concat(pieces, ignore_index=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<p>进行<strong>聚合</strong>操作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">total_births = names.pivot_table(<span class="string">'births'</span>, index=<span class="string">'year'</span>,</div><div class="line">                                 columns=<span class="string">'sex'</span>, aggfunc=sum)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">total_births.tail()</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_us_baby_name_addition.png" alt="pandas_ch02_us_baby_name_addition"></p>
<p>计算一下<strong>每个名字的出生比例</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_prop</span><span class="params">(group)</span>:</span></div><div class="line">    <span class="comment"># Integer division floors</span></div><div class="line">    births = group.births.astype(float)</div><div class="line"></div><div class="line">    group[<span class="string">'prop'</span>] = births / births.sum()</div><div class="line">    <span class="keyword">return</span> group</div><div class="line">names = names.groupby([<span class="string">'year'</span>, <span class="string">'sex'</span>]).apply(add_prop)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">names</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_us_baby_name_prop.png" alt="pandas_ch02_us_baby_name_prop"></p>
<p>进行一下<strong>有效性检查</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">np.allclose(names.groupby([<span class="string">'year'</span>, <span class="string">'sex'</span>]).prop.sum(), <span class="number">1</span>)</div><div class="line">--------------------------------------------</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>筛选出每一对year/sex下总数前1000的名字</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_top1000</span><span class="params">(group)</span>:</span></div><div class="line">    <span class="keyword">return</span> group.sort_values(by=<span class="string">'births'</span>, ascending=<span class="keyword">False</span>)[:<span class="number">1000</span>]</div><div class="line">grouped = names.groupby([<span class="string">'year'</span>, <span class="string">'sex'</span>])</div><div class="line">top1000 = grouped.apply(get_top1000)</div></pre></td></tr></table></figure>
<p>加个索引，结合了numpy</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">top1000.index = np.arange(len(top1000))</div></pre></td></tr></table></figure>
<h2 id="Analyzing-naming-trends"><a href="#Analyzing-naming-trends" class="headerlink" title="Analyzing naming trends"></a>Analyzing naming trends</h2><p>将数据分为男女</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">boys = top1000[top1000.sex == <span class="string">'M'</span>]</div><div class="line">girls = top1000[top1000.sex == <span class="string">'F'</span>]</div></pre></td></tr></table></figure>
<p>计算<strong>每一年每个名字的出生总数</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">total_births = top1000.pivot_table(<span class="string">'births'</span>, index=<span class="string">'year'</span>, columns=<span class="string">'name'</span>,</div><div class="line">                                   aggfunc=sum)</div><div class="line">total_births</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_us_baby_name_counts_per_year.png" alt="pandas_ch02_us_baby_name_counts_per_year"></p>
<p>选出几个名字看看<strong>总数随年份的变化情况</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">subset = total_births[[<span class="string">'John'</span>, <span class="string">'Harry'</span>, <span class="string">'Mary'</span>, <span class="string">'Marilyn'</span>]]</div><div class="line">subset.plot(subplots=<span class="keyword">True</span>, figsize=(<span class="number">12</span>, <span class="number">10</span>), grid=<span class="keyword">False</span>,</div><div class="line">            title=<span class="string">"Number of births per year"</span>)</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_us_baby_name_trend.png" alt="pandas_ch02_us_baby_name_trend"></p>
<h2 id="Measuring-the-increase-in-naming-diversity"><a href="#Measuring-the-increase-in-naming-diversity" class="headerlink" title="Measuring the increase in naming diversity"></a>Measuring the increase in naming diversity</h2><p>通过统计<strong>前1000项名字所占的比例</strong>来判断多样性的变化</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">table = top1000.pivot_table(<span class="string">'prop'</span>, index=<span class="string">'year'</span>,</div><div class="line">                            columns=<span class="string">'sex'</span>, aggfunc=sum)</div><div class="line">table.plot(title=<span class="string">'Sum of table1000.prop by year and sex'</span>,</div><div class="line">           yticks=np.linspace(<span class="number">0</span>, <span class="number">1.2</span>, <span class="number">13</span>), xticks=range(<span class="number">1880</span>, <span class="number">2020</span>, <span class="number">10</span>))</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_us_baby_name_diversity.png" alt="pandas_ch02_us_baby_name_diversity"></p>
<p>另一种方法，计算占出生人数50%的名字的数量</p>
<p>也即从开始累加，看加到第几个名字时所占比例为50%</p>
<p>先来看看2010年的男孩</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df = boys[boys.year == <span class="number">2010</span>]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">prop_cumsum = df.sort_index(by=<span class="string">'prop'</span>, ascending=<span class="keyword">False</span>).prop.cumsum()</div><div class="line">prop_cumsum[:<span class="number">10</span>]</div><div class="line">--------------------------------------------------</div><div class="line"><span class="number">260877</span>    <span class="number">0.011523</span></div><div class="line"><span class="number">260878</span>    <span class="number">0.020934</span></div><div class="line"><span class="number">260879</span>    <span class="number">0.029959</span></div><div class="line"><span class="number">260880</span>    <span class="number">0.038930</span></div><div class="line"><span class="number">260881</span>    <span class="number">0.047817</span></div><div class="line"><span class="number">260882</span>    <span class="number">0.056579</span></div><div class="line"><span class="number">260883</span>    <span class="number">0.065155</span></div><div class="line"><span class="number">260884</span>    <span class="number">0.073414</span></div><div class="line"><span class="number">260885</span>    <span class="number">0.081528</span></div><div class="line"><span class="number">260886</span>    <span class="number">0.089621</span></div><div class="line">Name: prop, dtype: float64</div></pre></td></tr></table></figure>
<p>看来是第116个，不过序号从0开始，应该是117</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">prop_cumsum.values.searchsorted(<span class="number">0.5</span>)</div><div class="line">---------------------------------------------------</div><div class="line"><span class="number">116</span></div></pre></td></tr></table></figure>
<p>再来看看1900年的男孩儿</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">df = boys[boys.year == <span class="number">1900</span>]</div><div class="line">in1900 = df.sort_index(by=<span class="string">'prop'</span>, ascending=<span class="keyword">False</span>).prop.cumsum()</div><div class="line">in1900.values.searchsorted(<span class="number">0.5</span>) + <span class="number">1</span></div><div class="line">---------------------------------------------------</div><div class="line"><span class="number">25</span></div></pre></td></tr></table></figure>
<p>所以这样做是可行的</p>
<p>把相同的操作赋予整个数据集</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_quantile_count</span><span class="params">(group, q=<span class="number">0.5</span>)</span>:</span></div><div class="line">    group = group.sort_values(by=<span class="string">'prop'</span>, ascending=<span class="keyword">False</span>)</div><div class="line">    <span class="keyword">return</span> group.prop.cumsum().values.searchsorted(q) + <span class="number">1</span></div><div class="line">diversity = top1000.groupby([<span class="string">'year'</span>, <span class="string">'sex'</span>]).apply(get_quantile_count)</div><div class="line">diversity = diversity.unstack(<span class="string">'sex'</span>)</div><div class="line">diversity.head()</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_us_baby_name_number_in_half_percent.png" alt="pandas_ch02_us_baby_name_number_in_half_percent"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">diversity.plot(title=<span class="string">"Number of popular names in top 50%"</span>)</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_us_baby_name_diversity_2.png" alt="pandas_ch02_us_baby_name_diversity_2"></p>
<h2 id="The-“Last-letter”-Revolution"><a href="#The-“Last-letter”-Revolution" class="headerlink" title="The “Last letter” Revolution"></a>The “Last letter” Revolution</h2><p>取出每个名字对应的最后一个字母，同时<strong>序号对应</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># extract last letter from name column</span></div><div class="line">get_last_letter = <span class="keyword">lambda</span> x: x[<span class="number">-1</span>]</div><div class="line">last_letters = names.name.map(get_last_letter)</div><div class="line">last_letters.name = <span class="string">'last_letter'</span></div><div class="line"></div><div class="line">table = names.pivot_table(<span class="string">'births'</span>, index=last_letters,</div><div class="line">                          columns=[<span class="string">'sex'</span>, <span class="string">'year'</span>], aggfunc=sum)</div></pre></td></tr></table></figure>
<p>单独取出三年的来看看</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">subtable = table.reindex(columns=[<span class="number">1910</span>, <span class="number">1960</span>, <span class="number">2010</span>], level=<span class="string">'year'</span>)</div><div class="line">subtable.head()</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_us_baby_name_last_letter.png" alt="pandas_ch02_us_baby_name_last_letter"></p>
<p><strong>计算一下字母比例</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">subtable.sum()</div><div class="line">-------------------------------------</div><div class="line">sex  year</div><div class="line">F    <span class="number">1910</span>     <span class="number">396416.0</span></div><div class="line">     <span class="number">1960</span>    <span class="number">2022062.0</span></div><div class="line">     <span class="number">2010</span>    <span class="number">1759010.0</span></div><div class="line">M    <span class="number">1910</span>     <span class="number">194198.0</span></div><div class="line">     <span class="number">1960</span>    <span class="number">2132588.0</span></div><div class="line">     <span class="number">2010</span>    <span class="number">1898382.0</span></div><div class="line">dtype: float64</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">letter_prop = subtable / subtable.sum().astype(float)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line">fig, axes = plt.subplots(<span class="number">2</span>, <span class="number">1</span>, figsize=(<span class="number">10</span>, <span class="number">8</span>))</div><div class="line">letter_prop[<span class="string">'M'</span>].plot(kind=<span class="string">'bar'</span>, rot=<span class="number">0</span>, ax=axes[<span class="number">0</span>], title=<span class="string">'Male'</span>)</div><div class="line">letter_prop[<span class="string">'F'</span>].plot(kind=<span class="string">'bar'</span>, rot=<span class="number">0</span>, ax=axes[<span class="number">1</span>], title=<span class="string">'Female'</span>,</div><div class="line">                      legend=<span class="keyword">False</span>)</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_us_baby_name_last_letter_prop.png" alt="pandas_ch02_us_baby_name_last_letter_prop"></p>
<p>最后看一下所有的年份并生成一个趋势图</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">letter_prop = table / table.sum().astype(float)</div><div class="line">dny_ts = letter_prop.ix[[<span class="string">'d'</span>, <span class="string">'n'</span>, <span class="string">'y'</span>], <span class="string">'M'</span>].T</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dny_ts.plot()</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_us_baby_name_last_letter_prop_trend.png" alt="pandas_ch02_us_baby_name_last_letter_prop_trend"></p>
<h2 id="Boy-names-that-became-girl-names-and-vice-versa"><a href="#Boy-names-that-became-girl-names-and-vice-versa" class="headerlink" title="Boy names that became girl names (and vice versa)"></a>Boy names that became girl names (and vice versa)</h2><p>以lesl开头的名字为例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">all_names = top1000.name.unique()</div><div class="line">mask = np.array([<span class="string">'lesl'</span> <span class="keyword">in</span> x.lower() <span class="keyword">for</span> x <span class="keyword">in</span> all_names])</div><div class="line">lesley_like = all_names[mask]</div><div class="line">lesley_like</div><div class="line">----------------------------------------------</div><div class="line">array([<span class="string">'Leslie'</span>, <span class="string">'Lesley'</span>, <span class="string">'Leslee'</span>, <span class="string">'Lesli'</span>, <span class="string">'Lesly'</span>], dtype=object)</div></pre></td></tr></table></figure>
<p>从原数据集中筛选出来</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">filtered = top1000[top1000.name.isin(lesley_like)]</div><div class="line">filtered.groupby(<span class="string">'name'</span>).births.sum()</div><div class="line">----------------------------------------------</div><div class="line">name</div><div class="line">Leslee      <span class="number">1082</span></div><div class="line">Lesley     <span class="number">35022</span></div><div class="line">Lesli        <span class="number">929</span></div><div class="line">Leslie    <span class="number">370429</span></div><div class="line">Lesly      <span class="number">10067</span></div><div class="line">Name: births, dtype: int64</div></pre></td></tr></table></figure>
<p>做一下聚合操作并计算比例</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">table = filtered.pivot_table(<span class="string">'births'</span>, index=<span class="string">'year'</span>,</div><div class="line">                             columns=<span class="string">'sex'</span>, aggfunc=<span class="string">'sum'</span>)</div><div class="line">table = table.div(table.sum(<span class="number">1</span>), axis=<span class="number">0</span>)</div><div class="line">table.tail()</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_us_baby_name_b2g_prop.png" alt="pandas_ch02_us_baby_name_b2g_prop"></p>
<p>看一下趋势</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">table.plot(style=&#123;<span class="string">'M'</span>: <span class="string">'k-'</span>, <span class="string">'F'</span>: <span class="string">'k--'</span>&#125;)</div></pre></td></tr></table></figure>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/pandas_ch02_us_baby_name_b2g_prop_trend.png" alt="pandas_ch02_us_baby_name_b2g_prop_trend"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;利用Python内置的JSON模块对数据进行解析并转化为字典&quot;&gt;&lt;a href=&quot;#利用Python内置的JSON模块对数据进行解析并转化为字典&quot; class=&quot;headerlink&quot; title=&quot;利用Python内置的JSON模块对数据进行解析并转化为字典&quot;&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Spider the house infomation and save to excel file</title>
    <link href="http://yoursite.com/2017/02/18/Spider-the-house-infomation-and-save-to-excel-file/"/>
    <id>http://yoursite.com/2017/02/18/Spider-the-house-infomation-and-save-to-excel-file/</id>
    <published>2017-02-18T14:11:28.000Z</published>
    <updated>2017-02-19T13:12:35.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h2><p><a href="http://sh.fang.com/" target="_blank" rel="external">http://sh.fang.com/</a></p>
<h2 id="项目目标"><a href="#项目目标" class="headerlink" title="项目目标"></a>项目目标</h2><p>爬取二手房信息中的小区信息</p>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><p>【1】爬取小区信息（核心代码，下同）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="string">"""	&lt;A spider to crawl the house information.&gt;</span></div><div class="line">    Copyright (C) &lt;2017&gt;  Li W.H., Duan X</div><div class="line"></div><div class="line">    This program is free software: you can redistribute it and/or modify</div><div class="line">    it under the terms of the GNU General Public License as published by</div><div class="line">    the Free Software Foundation, either version 3 of the License, or</div><div class="line">    (at your option) any later version.</div><div class="line"></div><div class="line">    This program is distributed in the hope that it will be useful,</div><div class="line">    but WITHOUT ANY WARRANTY; without even the implied warranty of</div><div class="line">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</div><div class="line">    GNU General Public License for more details.</div><div class="line"></div><div class="line">    You should have received a copy of the GNU General Public License</div><div class="line">    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;. </div><div class="line">"""</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HouseSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"house"</span></div><div class="line">    head = <span class="string">"http://esf.sh.fang.com"</span></div><div class="line">    allowed_domains = [<span class="string">"sh.fang.com"</span>]</div><div class="line">    start_urls = [</div><div class="line">        <span class="string">"http://esf.sh.fang.com/housing/"</span></div><div class="line">    ]</div><div class="line">    <span class="comment"># 各区对应的编号（由于丧心病狂的url）</span></div><div class="line">    area_map = &#123;<span class="number">25</span>: <span class="string">'pudong'</span>, <span class="number">18</span>: <span class="string">'minhang'</span>, <span class="number">19</span>: <span class="string">'xuhui'</span>, <span class="number">30</span>: <span class="string">'baoshan'</span>,</div><div class="line">                <span class="number">28</span>: <span class="string">'putuo'</span>, <span class="number">20</span>: <span class="string">'changning'</span>, <span class="number">26</span>: <span class="string">'yangpu'</span>, <span class="number">586</span>: <span class="string">'songjiang'</span>,</div><div class="line">                <span class="number">29</span>: <span class="string">'jiading'</span>, <span class="number">23</span>: <span class="string">'hongkou'</span>, <span class="number">27</span>: <span class="string">'zhabei'</span>, <span class="number">21</span>: <span class="string">'jingan'</span>,</div><div class="line">                <span class="number">24</span>: <span class="string">'huangpu'</span>, <span class="number">22</span>: <span class="string">'luwan'</span>, <span class="number">31</span>: <span class="string">'qingpu'</span>, <span class="number">32</span>: <span class="string">'fengxian'</span>,</div><div class="line">                <span class="number">35</span>: <span class="string">'jinshan'</span>, <span class="number">996</span>: <span class="string">'chongming'</span>&#125;</div><div class="line">    estate_to_area_map = &#123;&#125;</div><div class="line">    seperator = <span class="string">'=\n'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> self.area_map.items():</div><div class="line">            self.estate_to_area_map[key] = []</div><div class="line">        <span class="comment"># print(self.estate_to_area_map)</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="comment"># 解析出上海市各区的地址</span></div><div class="line">        area_lis = response.xpath(<span class="string">'//*[@id="houselist_B03_02"]/div[1]'</span>)</div><div class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> area_lis.xpath(<span class="string">'./a'</span>):</div><div class="line">            <span class="comment"># areas = items.AreaItem()</span></div><div class="line">            <span class="comment"># areas['name'] = a.xpath('text()').extract()[0]</span></div><div class="line">            <span class="keyword">yield</span> Request(self.head + a.xpath(<span class="string">'@href'</span>).extract()[<span class="number">0</span>],</div><div class="line">                          callback=self.parse_area)</div><div class="line">            <span class="comment"># print(a.xpath('text()').extract()[0])</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_area</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="comment"># 确定response来源于哪一个区</span></div><div class="line">        area_index = str(response).split(<span class="string">'/'</span>)[<span class="number">-2</span>].split(<span class="string">'_'</span>)[<span class="number">0</span>]</div><div class="line">        <span class="keyword">if</span> area_index == <span class="string">''</span>:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># 解析出各区中小区的详情页面地址</span></div><div class="line">            detail_str = <span class="string">'xiangqing'</span></div><div class="line">            estate_list = response.xpath(<span class="string">'/html/body/div[4]/div[5]/div[4]'</span>)</div><div class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> estate_list.xpath(<span class="string">'.//a[@class="plotTit"]'</span>):</div><div class="line">                estate_url = a.xpath(<span class="string">'@href'</span>).extract()[<span class="number">0</span>]</div><div class="line">                <span class="keyword">if</span> estate_url.find(<span class="string">'esf'</span>) != <span class="number">-1</span>:</div><div class="line">                    estate_url = estate_url.replace(<span class="string">'esf'</span>, detail_str)</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    estate_url = estate_url + detail_str</div><div class="line">                <span class="keyword">if</span> estate_url.find(<span class="string">'http'</span>) != <span class="number">-1</span>:</div><div class="line">                    <span class="comment"># print(estate_url)</span></div><div class="line">                    self.estate_to_area_map[int(area_index)].append(estate_url)</div><div class="line">            <span class="comment"># print(len(self.estate_to_area_map[int(area_index)]))</span></div><div class="line">            next_page = response.xpath(<span class="string">'//*[@id="PageControl1_hlk_next"]'</span>)</div><div class="line">            <span class="keyword">if</span> len(next_page) != <span class="number">0</span>:</div><div class="line">                <span class="keyword">yield</span> Request(self.head +</div><div class="line">                              next_page.xpath(<span class="string">'@href'</span>).extract()[<span class="number">0</span>],</div><div class="line">                              callback=self.parse_area)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="comment"># print(len(self.estate_to_area_map[int(area_index)]))</span></div><div class="line">                <span class="keyword">for</span> url <span class="keyword">in</span> self.estate_to_area_map[int(area_index)]:</div><div class="line">                    request = Request(url, callback=self.parse_house,</div><div class="line">                                      dont_filter=<span class="keyword">True</span>)</div><div class="line">                    request.meta[<span class="string">'index'</span>] = int(area_index)</div><div class="line">                    <span class="keyword">yield</span> request</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_house</span><span class="params">(self, response)</span>:</span></div><div class="line">        flag = <span class="number">0</span></div><div class="line">        area_index = response.meta[<span class="string">'index'</span>]</div><div class="line">        area_name = self.area_map[area_index]</div><div class="line">        filename = area_name + <span class="string">'.txt'</span></div><div class="line">        <span class="comment"># print(response.xpath('/html'))</span></div><div class="line">        <span class="comment"># 详情页面存在两种，因此分情况讨论</span></div><div class="line">        house_name = response.xpath(</div><div class="line">            <span class="string">'/html/body/div[4]/div[2]/div[2]/h1/a/text()'</span>)</div><div class="line">        <span class="keyword">if</span> len(house_name) == <span class="number">0</span>:</div><div class="line">            <span class="comment"># house_name = response.xpath(</span></div><div class="line">            <span class="comment">#     '/html/body/div[1]/div[3]/div[2]/h1/a/text()')</span></div><div class="line">            <span class="comment"># flag = 1</span></div><div class="line">            <span class="keyword">return</span></div><div class="line">        house_name = house_name.extract()[<span class="number">0</span>]</div><div class="line">        <span class="comment"># 清洁小区名</span></div><div class="line">        house_name = re.sub(<span class="string">r'小区网'</span>, <span class="string">''</span>, house_name)</div><div class="line">        result_str = <span class="string">'【小区名称】'</span> + house_name + <span class="string">'\n'</span></div><div class="line">        <span class="keyword">if</span> flag == <span class="number">0</span>:</div><div class="line">            avg_price_xpath = response.xpath(</div><div class="line">                <span class="string">'/html/body/div[4]/div[4]/div[1]/div[1]/dl[1]/dd/span/text()'</span>)</div><div class="line">            avg_price = avg_price_xpath.extract()[<span class="number">0</span>]</div><div class="line">            result_str = result_str + <span class="string">'【平均价格】'</span> + avg_price + <span class="string">'\n'</span></div><div class="line">            detail_block_list = response.xpath(</div><div class="line">                <span class="string">'/html/body/div[4]/div[4]/div[1]'</span>)</div><div class="line">            <span class="keyword">for</span> headline <span class="keyword">in</span> detail_block_list.xpath(<span class="string">'.//h3'</span>):</div><div class="line">                head_str = headline.xpath(<span class="string">'./text()'</span>).extract()[<span class="number">0</span>]</div><div class="line">                <span class="keyword">if</span> head_str == <span class="string">'基本信息'</span>:</div><div class="line">                    result_str = result_str + \</div><div class="line">                        <span class="string">'【'</span> + \</div><div class="line">                        head_str + <span class="string">'】\n'</span></div><div class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> headline.xpath(</div><div class="line">                            <span class="string">'../../div[@class="inforwrap clearfix"]/dl/dd'</span>):</div><div class="line">                        <span class="keyword">if</span> len(item.xpath(<span class="string">'./strong/text()'</span>)) != <span class="number">0</span>:</div><div class="line">                            <span class="keyword">if</span> len(item.xpath(<span class="string">'./text()'</span>)) != <span class="number">0</span>:</div><div class="line">                                result_str = result_str + \</div><div class="line">                                    item.xpath(</div><div class="line">                                        <span class="string">'./strong/text()'</span>).extract()[<span class="number">0</span>]</div><div class="line">                                result_str = result_str + \</div><div class="line">                                    item.xpath(<span class="string">'./text()'</span>).extract()[<span class="number">0</span>] + <span class="string">'\n'</span></div><div class="line">                    <span class="comment"># print(result_str)</span></div><div class="line">                <span class="comment"># elif head_str == '交通状况':</span></div><div class="line">                <span class="comment">#     result_str = result_str + \</span></div><div class="line">                <span class="comment">#         '【' + \</span></div><div class="line">                <span class="comment">#         head_str + '】\n'</span></div><div class="line">                <span class="comment">#     tempstr = headline.xpath(</span></div><div class="line">                <span class="comment">#         '../../div[@class="inforwrap clearfix"]/dl/dt/text()').extract()[0]</span></div><div class="line">                <span class="comment">#     result_str = result_str + tempstr + '\n'</span></div><div class="line">                <span class="comment">#     # print(result_str)</span></div><div class="line">                <span class="comment"># elif head_str == '周边信息':</span></div><div class="line">                <span class="comment">#     result_str = result_str + \</span></div><div class="line">                <span class="comment">#         '【' + \</span></div><div class="line">                <span class="comment">#         head_str + '】\n'</span></div><div class="line">                <span class="comment">#     for item in headline.xpath(</span></div><div class="line">                <span class="comment">#             '../../div[@class="inforwrap clearfix"]/dl/dt'):</span></div><div class="line">                <span class="comment">#         result_str = result_str + \</span></div><div class="line">                <span class="comment">#             item.xpath('./text()').extract()[0] + '\n'</span></div><div class="line">                <span class="comment">#     # print(result_str)</span></div><div class="line">                <span class="keyword">elif</span> head_str == <span class="string">'就近楼群'</span>:</div><div class="line">                    result_str = result_str + \</div><div class="line">                        <span class="string">'【'</span> + \</div><div class="line">                        head_str + <span class="string">'】\n'</span></div><div class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> headline.xpath(</div><div class="line">                            <span class="string">'../../div[@class="inforwrap clearfix"]/dl/dd'</span>):</div><div class="line">                        result_str = result_str + \</div><div class="line">                            item.xpath(<span class="string">'./a/text()'</span>).extract()[<span class="number">0</span>] + <span class="string">'\n'</span></div><div class="line">            result_str = result_str + self.seperator</div><div class="line">            <span class="comment"># print(result_str)</span></div><div class="line">            <span class="keyword">with</span> open(filename, <span class="string">'a'</span>, errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</div><div class="line">                f.write(result_str)</div></pre></td></tr></table></figure>
<p>【2】格式化</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"><span class="string">""" &lt;A formatter&gt;</span></div><div class="line">    Copyright (C) &lt;2017&gt;  Li W.H., Duan X</div><div class="line"></div><div class="line">    This program is free software: you can redistribute it and/or modify</div><div class="line">    it under the terms of the GNU General Public License as published by</div><div class="line">    the Free Software Foundation, either version 3 of the License, or</div><div class="line">    (at your option) any later version.</div><div class="line"></div><div class="line">    This program is distributed in the hope that it will be useful,</div><div class="line">    but WITHOUT ANY WARRANTY; without even the implied warranty of</div><div class="line">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</div><div class="line">    GNU General Public License for more details.</div><div class="line"></div><div class="line">    You should have received a copy of the GNU General Public License</div><div class="line">    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetDataFileList</span><span class="params">(path=<span class="string">'.'</span>)</span>:</span></div><div class="line">    <span class="string">""" Get the houses file list.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        path: Dir path.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        file_list: the list of data file that find houses data.</div><div class="line"></div><div class="line">    """</div><div class="line"></div><div class="line">    file_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(path) <span class="keyword">if</span> os.path.isfile(</div><div class="line">        x) <span class="keyword">and</span> os.path.splitext(x)[<span class="number">1</span>] == <span class="string">'.txt'</span>]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> file_list</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Parse</span><span class="params">(file_list)</span>:</span></div><div class="line">    <span class="string">""" Parse the txt file that find houses data.</span></div><div class="line"></div><div class="line">    Extract some import infomation such as house name,</div><div class="line">    avarage price, address and so on.</div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        file_list: the list of data file that find houses data.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        houses_dict_list: the list that each item find the detail</div><div class="line">                          dict of each house.</div><div class="line">    """</div><div class="line"></div><div class="line">    HOUSE_NAME = <span class="string">'小区名称'</span></div><div class="line">    HOUSE_NAME_SPLITOR = <span class="string">'】'</span></div><div class="line">    HOUSE_ADDRESS = <span class="string">'小区地址'</span></div><div class="line">    HOUSE_ADDRESS_SPLITOR = <span class="string">'：'</span></div><div class="line">    HOUSE_AVG_PRICE = <span class="string">'平均价格'</span></div><div class="line">    HOUSE_AVG_PRICE_SPLITOR = <span class="string">'】'</span></div><div class="line">    AREA_OF_HOUSE_BELONGS_TO = <span class="string">'所属区域'</span></div><div class="line">    AREA_OF_HOUSE_BELONGS_TO_SPLITOR_1 = <span class="string">'：'</span></div><div class="line">    AREA_OF_HOUSE_BELONGS_TO_SPLITOR_2 = <span class="string">' '</span></div><div class="line">    PROPERTY_CATEGORY = <span class="string">'物业类别'</span></div><div class="line">    PROPERTY_CATEGORY_SPLITOR = <span class="string">'：'</span></div><div class="line">    GREEN_RATE = <span class="string">'绿 化 率'</span></div><div class="line">    GREEN_RATE_SPLITOR = <span class="string">'：'</span></div><div class="line">    VOLUME_RATE = <span class="string">'容 积 率'</span></div><div class="line">    VOLUME_RATE_SPLITOR = <span class="string">'：'</span></div><div class="line">    PROPERTY_COSTS = <span class="string">'物 业 费'</span></div><div class="line">    PROPERTY_COSTS_SPLITOR = <span class="string">'：'</span></div><div class="line">    NO_INFO_NOW = <span class="string">'暂无信息'</span></div><div class="line">    DETAIL_LIST = [HOUSE_NAME, HOUSE_AVG_PRICE, HOUSE_ADDRESS, AREA_OF_HOUSE_BELONGS_TO,</div><div class="line">                   PROPERTY_CATEGORY, GREEN_RATE, VOLUME_RATE, PROPERTY_COSTS]</div><div class="line"></div><div class="line">    houses_dict_list = []</div><div class="line">    <span class="keyword">for</span> file_name <span class="keyword">in</span> file_list:</div><div class="line">        raw_houses_string = <span class="string">''</span></div><div class="line">        <span class="comment"># read all lines as a string</span></div><div class="line">        <span class="keyword">with</span> open(file_name, <span class="string">'r'</span>, errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</div><div class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</div><div class="line">                raw_houses_string += line</div><div class="line">        <span class="comment"># split the string to the houses raw info list</span></div><div class="line">        raw_houses_list = raw_houses_string.split(<span class="string">'=\n'</span>)</div><div class="line"></div><div class="line">        raw_houses_details_list = []</div><div class="line">        <span class="keyword">for</span> raw_house <span class="keyword">in</span> raw_houses_list:</div><div class="line">            <span class="comment"># format house raw info to lines</span></div><div class="line">            raw_houses_details = raw_house.split(<span class="string">'\n'</span>)[:<span class="number">-1</span>]</div><div class="line">            <span class="keyword">if</span> len(raw_houses_details) == <span class="number">0</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="comment"># combine the all formated house raw info to a list</span></div><div class="line">            raw_houses_details_list.append(raw_houses_details)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> raw_house_details <span class="keyword">in</span> raw_houses_details_list:</div><div class="line">            house_details_dict = &#123;&#125;</div><div class="line">            <span class="keyword">for</span> raw_detail <span class="keyword">in</span> raw_house_details:</div><div class="line">                <span class="comment"># search house name</span></div><div class="line">                <span class="keyword">if</span> re.search(HOUSE_NAME, raw_detail):</div><div class="line">                    house_details_dict[HOUSE_NAME] = raw_detail.split(</div><div class="line">                        HOUSE_NAME_SPLITOR)[<span class="number">-1</span>]</div><div class="line">                <span class="comment"># search house avarage price</span></div><div class="line">                <span class="keyword">elif</span> re.search(HOUSE_AVG_PRICE, raw_detail):</div><div class="line">                    <span class="comment"># print(raw_detail)</span></div><div class="line">                    house_details_dict[HOUSE_AVG_PRICE] = raw_detail.split(</div><div class="line">                        HOUSE_AVG_PRICE_SPLITOR)[<span class="number">-1</span>]</div><div class="line">                <span class="comment"># search house address</span></div><div class="line">                <span class="keyword">elif</span> re.search(HOUSE_ADDRESS, raw_detail):</div><div class="line">                    house_details_dict[HOUSE_ADDRESS] = raw_detail.split(</div><div class="line">                        HOUSE_ADDRESS_SPLITOR)[<span class="number">-1</span>]</div><div class="line">                <span class="comment"># search the area of house belongs to</span></div><div class="line">                <span class="keyword">elif</span> re.search(AREA_OF_HOUSE_BELONGS_TO, raw_detail):</div><div class="line">                    temp_detail_value = raw_detail.split(</div><div class="line">                        AREA_OF_HOUSE_BELONGS_TO_SPLITOR_1)[<span class="number">-1</span>]</div><div class="line">                    detail_value = temp_detail_value.split(</div><div class="line">                        AREA_OF_HOUSE_BELONGS_TO_SPLITOR_2)[<span class="number">0</span>]</div><div class="line">                    house_details_dict[AREA_OF_HOUSE_BELONGS_TO] = detail_value</div><div class="line">                <span class="comment"># search the property category of house</span></div><div class="line">                <span class="keyword">elif</span> re.search(PROPERTY_CATEGORY, raw_detail):</div><div class="line">                    house_details_dict[PROPERTY_CATEGORY] = raw_detail.split(</div><div class="line">                        PROPERTY_CATEGORY_SPLITOR)[<span class="number">-1</span>]</div><div class="line">                <span class="comment"># search the green rate</span></div><div class="line">                <span class="keyword">elif</span> re.search(GREEN_RATE, raw_detail):</div><div class="line">                    house_details_dict[GREEN_RATE] = raw_detail.split(</div><div class="line">                        GREEN_RATE_SPLITOR)[<span class="number">-1</span>]</div><div class="line">                <span class="comment"># search the volume rate</span></div><div class="line">                <span class="keyword">elif</span> re.search(VOLUME_RATE, raw_detail):</div><div class="line">                    house_details_dict[VOLUME_RATE] = raw_detail.split(</div><div class="line">                        VOLUME_RATE_SPLITOR)[<span class="number">-1</span>]</div><div class="line">                <span class="comment"># search the property costs</span></div><div class="line">                <span class="keyword">elif</span> re.search(PROPERTY_COSTS, raw_detail):</div><div class="line">                    house_details_dict[PROPERTY_COSTS] = raw_detail.split(</div><div class="line">                        PROPERTY_COSTS_SPLITOR)[<span class="number">-1</span>]</div><div class="line">            <span class="comment"># Judge if all details are contained.</span></div><div class="line">            <span class="comment"># If not, set to null.</span></div><div class="line">            house_details_dict_keys = house_details_dict.keys()</div><div class="line">            <span class="keyword">for</span> detail_name <span class="keyword">in</span> DETAIL_LIST:</div><div class="line">                <span class="keyword">if</span> detail_name <span class="keyword">not</span> <span class="keyword">in</span> house_details_dict_keys:</div><div class="line">                    house_details_dict[detail_name] = NO_INFO_NOW</div><div class="line">            houses_dict_list.append(house_details_dict)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> houses_dict_list</div></pre></td></tr></table></figure>
<p>【3】通过高德地图api获取经纬度信息</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="string">""" &lt;A toolto transfer position.&gt;</span></div><div class="line">    Copyright (C) &lt;2017&gt;  Li W.H., Duan X</div><div class="line"></div><div class="line">    This program is free software: you can redistribute it and/or modify</div><div class="line">    it under the terms of the GNU General Public License as published by</div><div class="line">    the Free Software Foundation, either version 3 of the License, or</div><div class="line">    (at your option) any later version.</div><div class="line"></div><div class="line">    This program is distributed in the hope that it will be useful,</div><div class="line">    but WITHOUT ANY WARRANTY; without even the implied warranty of</div><div class="line">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</div><div class="line">    GNU General Public License for more details.</div><div class="line"></div><div class="line">    You should have received a copy of the GNU General Public License</div><div class="line">    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Geocode</span><span class="params">(address)</span>:</span></div><div class="line">    <span class="string">""" A tool that call the God-Map api.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        address: the address to transfer.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        location: the transfered location.</div><div class="line">    """</div><div class="line"></div><div class="line">    CITY_NAME = <span class="string">'上海'</span></div><div class="line"></div><div class="line">    parameters = &#123;<span class="string">'address'</span>: address,</div><div class="line">                  <span class="string">'key'</span>: <span class="string">'your key'</span>,</div><div class="line">                  <span class="string">'city'</span>: CITY_NAME&#125;</div><div class="line">    base = <span class="string">'http://restapi.amap.com/v3/geocode/geo'</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        response = requests.get(base, parameters)</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print(<span class="string">'error!'</span>, e)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    answer = response.json()</div><div class="line"></div><div class="line">    <span class="keyword">return</span> answer</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GETGodMapLocation</span><span class="params">(houses)</span>:</span></div><div class="line">    <span class="string">""" Get the location that corresponds to the house name.</span></div><div class="line"></div><div class="line">    Use the God-Map api to get the corresponding location.</div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        houses_dict_list: the houses info.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        houses_dict_list_contains_loc: the houses info that</div><div class="line">                                           contains the location info.</div><div class="line">    """</div><div class="line"></div><div class="line">    HOUSE_NAME = <span class="string">'小区名称'</span></div><div class="line">    HOUSE_LOCATION = <span class="string">'经纬度'</span></div><div class="line">    NO_INFO_NOW = <span class="string">'暂无信息'</span></div><div class="line"></div><div class="line">    houses_dict_list = houses.copy()</div><div class="line">    error_count = <span class="number">0</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    size = len(houses)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> house_dict <span class="keyword">in</span> houses_dict_list:</div><div class="line">        <span class="comment"># Count</span></div><div class="line">        count = count + <span class="number">1</span></div><div class="line">        <span class="comment"># Loading needs</span></div><div class="line">        <span class="keyword">if</span> count % <span class="number">1000</span> == <span class="number">0</span>:</div><div class="line">            print(count, <span class="string">'/'</span>, size)</div><div class="line">        address = house_dict[HOUSE_NAME]</div><div class="line">        answer = Geocode(address)</div><div class="line">        <span class="comment"># print(answer)</span></div><div class="line">        <span class="comment"># If find</span></div><div class="line">        <span class="keyword">if</span> len(answer[<span class="string">'geocodes'</span>]) != <span class="number">0</span>:</div><div class="line">            <span class="comment"># print(address + "的经纬度：", answer['geocodes'][0]['location'])</span></div><div class="line">            house_dict[HOUSE_LOCATION] = answer[<span class="string">'geocodes'</span>][<span class="number">0</span>][<span class="string">'location'</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># remaking the invalid address</span></div><div class="line">            <span class="comment"># print('address remaking...')</span></div><div class="line">            <span class="keyword">if</span> re.search(<span class="string">r'别墅'</span>, address):</div><div class="line">                re.sub(<span class="string">r'别墅'</span>, <span class="string">''</span>, address)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                address = address + <span class="string">'小区'</span></div><div class="line">            <span class="comment"># print('retransfering...')</span></div><div class="line">            <span class="comment"># transfer again</span></div><div class="line">            answer = Geocode(address)</div><div class="line">            <span class="keyword">if</span> len(answer[<span class="string">'geocodes'</span>]) != <span class="number">0</span>:</div><div class="line">                <span class="comment"># print(address + "的经纬度：", answer['geocodes'][0]['location'])</span></div><div class="line">                house_dict[HOUSE_LOCATION] = answer[<span class="string">'geocodes'</span>][<span class="number">0</span>][<span class="string">'location'</span>]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="comment"># print(address)</span></div><div class="line">                error_count += <span class="number">1</span></div><div class="line">                house_dict[HOUSE_LOCATION] = NO_INFO_NOW</div><div class="line"></div><div class="line">    print(<span class="string">'error counts: '</span>, error_count)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> houses_dict_list</div></pre></td></tr></table></figure>
<p>【4】存储成excel文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="string">""" &lt;A tool to save the excel file.&gt;</span></div><div class="line">    Copyright (C) &lt;2017&gt;  Li W.H., Duan X</div><div class="line"></div><div class="line">    This program is free software: you can redistribute it and/or modify</div><div class="line">    it under the terms of the GNU General Public License as published by</div><div class="line">    the Free Software Foundation, either version 3 of the License, or</div><div class="line">    (at your option) any later version.</div><div class="line"></div><div class="line">    This program is distributed in the hope that it will be useful,</div><div class="line">    but WITHOUT ANY WARRANTY; without even the implied warranty of</div><div class="line">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</div><div class="line">    GNU General Public License for more details.</div><div class="line"></div><div class="line">    You should have received a copy of the GNU General Public License</div><div class="line">    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</div><div class="line">"""</div><div class="line">        </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Save2ExcelFile</span><span class="params">(houses)</span>:</span></div><div class="line">    <span class="string">""" Save the python based list file to excel file.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        houses: the houses list.</div><div class="line"></div><div class="line">    """</div><div class="line"></div><div class="line">    houses_dict_list = houses.copy()</div><div class="line">    house_list = []</div><div class="line">    <span class="comment"># format the source data to fit the xlwt package</span></div><div class="line">    keys = houses[<span class="number">0</span>].keys()</div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> keys:</div><div class="line">        house = []</div><div class="line">        house.append(key)</div><div class="line">        <span class="keyword">for</span> house_dict <span class="keyword">in</span> houses_dict_list:</div><div class="line">            house.append(house_dict[key])</div><div class="line">        house_list.append(house)</div><div class="line">    <span class="comment"># return house_list</span></div><div class="line">    xls = ExcelWrite.Workbook()</div><div class="line">    sheet = xls.add_sheet(<span class="string">'小区信息'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(house_list)):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(house_list[<span class="number">0</span>])):</div><div class="line">            sheet.write(j, i, house_list[i][j])</div><div class="line"></div><div class="line">    xls.save(<span class="string">'houses.xls'</span>)</div></pre></td></tr></table></figure>
<h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p><img src="http://o7ie0tcjk.bkt.clouddn.com/spider_house_txt_result.png" alt="spider_house_txt_result"></p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/spider_house_excel_result.png" alt="spider_house_excel_result"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据来源&quot;&gt;&lt;a href=&quot;#数据来源&quot; class=&quot;headerlink&quot; title=&quot;数据来源&quot;&gt;&lt;/a&gt;数据来源&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://sh.fang.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;h
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="spider" scheme="http://yoursite.com/tags/spider/"/>
    
  </entry>
  
  <entry>
    <title>python_god_web_api</title>
    <link href="http://yoursite.com/2017/02/17/python-god-web-api/"/>
    <id>http://yoursite.com/2017/02/17/python-god-web-api/</id>
    <published>2017-02-17T14:08:35.000Z</published>
    <updated>2017-02-19T13:12:25.497Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><a href="http://lbs.amap.com/api/webservice/guide/api/search" target="_blank" rel="external">http://lbs.amap.com/api/webservice/guide/api/search</a></li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="string">'''</span></div><div class="line">利用高德地图api实现地址和经纬度的转换</div><div class="line">'''</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">geocode</span><span class="params">(address)</span>:</span></div><div class="line">        parameters = &#123;<span class="string">'address'</span>: address, <span class="string">'key'</span>: <span class="string">'e798a5bfb344a09977b79552ae415974'</span>&#125;</div><div class="line">        base = <span class="string">'http://restapi.amap.com/v3/geocode/geo'</span></div><div class="line">        response = requests.get(base, parameters)</div><div class="line">        answer = response.json()</div><div class="line">        print(address + <span class="string">"的经纬度："</span>, answer[<span class="string">'geocodes'</span>][<span class="number">0</span>][<span class="string">'location'</span>])</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</div><div class="line">        <span class="comment">#address = input("请输入地址:")</span></div><div class="line">        address = <span class="string">'北京市海淀区'</span></div><div class="line">        geocode(address)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> xlrd</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readXlsx</span><span class="params">(self, filename=<span class="string">'CenterBottom2013.xlsx'</span>, sheetname=<span class="string">'Sheet1'</span>)</span>:</span></div><div class="line">        rawData = []</div><div class="line">        <span class="keyword">if</span> (os.path.isfile(self.fn_rawDat)):</div><div class="line">            <span class="keyword">with</span> open(self.fn_rawDat, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</div><div class="line">                self.rawDat = np.load(f)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            workBook = xlrd.open_workbook(filename)</div><div class="line">            bookSheet = workBook.sheet_by_name(sheetname)</div><div class="line">            <span class="comment"># 从第二行开始读取，因为第一行有标签</span></div><div class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">1</span>, bookSheet.nrows):</div><div class="line">                rowData = []</div><div class="line">                <span class="keyword">for</span> col <span class="keyword">in</span> range(bookSheet.ncols):</div><div class="line">                    cel = bookSheet.cell(row, col)</div><div class="line">                    <span class="keyword">try</span>:</div><div class="line">                        val = cel.value</div><div class="line">                    <span class="keyword">except</span>:</div><div class="line">                        <span class="keyword">pass</span></div><div class="line"></div><div class="line">                    <span class="keyword">if</span> type(val) == float:</div><div class="line">                        val = float(val)</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        val = str(val)</div><div class="line"></div><div class="line">                    rowData.append(val)</div><div class="line">                rawData.append(rowData)</div><div class="line">            self.rawDat = np.array(rawData)</div><div class="line">            <span class="keyword">with</span> open(self.fn_rawDat, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">                np.save(f, self.rawDat)</div><div class="line">        <span class="keyword">return</span> self.rawDat</div></pre></td></tr></table></figure>
<ol>
<li>Read Excel files</li>
<li>Transfer the address to locaion info</li>
<li>Put back</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://lbs.amap.com/api/webservice/guide/api/search&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://lbs.amap.com/api/webservice/gui
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="map-api" scheme="http://yoursite.com/tags/map-api/"/>
    
  </entry>
  
  <entry>
    <title>Decision tree</title>
    <link href="http://yoursite.com/2017/02/15/Decision-tree/"/>
    <id>http://yoursite.com/2017/02/15/Decision-tree/</id>
    <published>2017-02-15T08:01:36.000Z</published>
    <updated>2017-02-17T11:23:51.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="决策树（ID3）"><a href="#决策树（ID3）" class="headerlink" title="决策树（ID3）"></a>决策树（ID3）</h1><h2 id="决策树的构建"><a href="#决策树的构建" class="headerlink" title="决策树的构建"></a>决策树的构建</h2><p>构造决策树时，所需要解决的第一个问题就是，每划分一个分支时，应该根据哪一维特征进行划分。这时候我们需要定义某种指标，然后对每一维特征进行该指标的评估，最后选择指标值最高的特征进行划分。</p>
<p>划分完毕之后，原始数据集就被划分为几个数据子集。如果某一个下的数据属于同一类型，则算法停止；否则，重复划分过程。</p>
<h3 id="伪代码（创建分支）"><a href="#伪代码（创建分支）" class="headerlink" title="伪代码（创建分支）"></a>伪代码（创建分支）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">createbranch()</div><div class="line"></div><div class="line">检测数据集中的每个子项是否属于同一分类:</div><div class="line">	If so <span class="keyword">return</span> 类标签;</div><div class="line">	Else</div><div class="line">		寻找划分数据集的最好特征</div><div class="line">		划分数据集</div><div class="line">		创建分支节点</div><div class="line">			<span class="keyword">for</span> 每个划分的子集</div><div class="line">				调用函数createBranch并增加返回结果到分支节点中</div><div class="line">		<span class="keyword">return</span> 分支节点</div></pre></td></tr></table></figure>
<p>那么接下来的重点便是如何寻找划分数据集的最好特征，在这里我们使用ID3算法中使用的划分数据集的方法，也即根据熵来划分。</p>
<h3 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h3><h4 id="熵"><a href="#熵" class="headerlink" title="熵"></a>熵</h4><p>划分数据的核心思想是<strong>将无序的数据变得更加有序</strong>。而一个数据有序程度可以进行量化表示，也就是<strong>信息</strong>，其度量方式就是<strong>熵</strong>。其显然，数据集划分前后其所含的信息会发生变化，这个变化便称为<strong>信息增益</strong>。</p>
<p>熵定义为信息的期望，其中信息的定义如下，<em>信息一般针对的对象为多个类别中的某一个类别</em>：</p>
<script type="math/tex; mode=display">l(x_i) = -log_{2}p(x_i)</script><p>其中$x_i$表示某一类别，$p(x_i)$表示从多个类别中选择该类别的概率。</p>
<p>接下来，熵的定义如下：</p>
<script type="math/tex; mode=display">H = \sum_{i=1}^{n}p(x_i)l(x_i)=-\sum_{i=1}^{n}p(x_i)log_{2}p(x_i)</script><p>信息增益定义如下：</p>
<script type="math/tex; mode=display">IG(S|T) = H(S) - \sum_{value(T)} \frac{|S_v|}{|S|} H(S_v)</script><p>其中$S$ 为全部样本集合，$value(T) $是属性 $T$所有取值的集合，$v$ 是 $T$ 的其中一个属性值，$S_v$是 $S$ 中属性 $T$ 的值为 $v$ 的样例集合，$|S_v|$ 为 $S_v$ 中所含样例数，$|S|$ 为 $S$ 中所含样例数。</p>
<p>代码实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CalcShannonEnt</span><span class="params">(data_set)</span>:</span></div><div class="line">    <span class="string">""" Calculate the Shannon Entropy.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        data_set: The object dataset.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        shannon_ent: The Shannon entropy of the object data set.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># Initiation</span></div><div class="line">    num_entries = len(data_set)</div><div class="line">    label_counts = &#123;&#125;</div><div class="line">    <span class="comment"># Statistics the frequency of each class in the dataset</span></div><div class="line">    <span class="keyword">for</span> feat_vec <span class="keyword">in</span> data_set:</div><div class="line">        current_label = feat_vec[<span class="number">-1</span>]</div><div class="line">        <span class="keyword">if</span> current_label <span class="keyword">not</span> <span class="keyword">in</span> label_counts.keys():</div><div class="line">            label_counts[current_label] = <span class="number">0</span></div><div class="line">        label_counts[current_label] += <span class="number">1</span></div><div class="line">    <span class="comment"># Calculates the Shannon entropy</span></div><div class="line">    shannon_ent = <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> label_counts:</div><div class="line">        prob = float(label_counts[key]) / num_entries</div><div class="line">        shannon_ent -= prob * log(prob, <span class="number">2</span>)</div><div class="line">    <span class="keyword">return</span> shannon_ent</div></pre></td></tr></table></figure>
<p>为了进行测试，以及之后的算法运行，我们写一个十分naive的数据生成方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CreateDataSet</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">""" A naive data generation method.</span></div><div class="line"></div><div class="line">    Returns:</div><div class="line">        data_set: The data set excepts label info.</div><div class="line">        labels: The data set only contains label info.</div><div class="line">    """</div><div class="line"></div><div class="line">    data_set = [[<span class="number">1</span>, <span class="number">1</span>, <span class="string">'yes'</span>],</div><div class="line">                [<span class="number">1</span>, <span class="number">1</span>, <span class="string">'yes'</span>],</div><div class="line">                [<span class="number">1</span>, <span class="number">0</span>, <span class="string">'no'</span>],</div><div class="line">                [<span class="number">0</span>, <span class="number">1</span>, <span class="string">'no'</span>],</div><div class="line">                [<span class="number">0</span>, <span class="number">1</span>, <span class="string">'no'</span>]]</div><div class="line">    labels = [<span class="string">'no surfacing'</span>, <span class="string">'flippers'</span>]</div><div class="line">    <span class="keyword">return</span> data_set, labels</div></pre></td></tr></table></figure>
<p><strong>注意，这里的labels并不代表分类标签，<em>yes</em>以及<em>no</em>才是，labels代表特征名。</strong></p>
<p>下面进行一个简单的demo:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">22</span>]: <span class="keyword">import</span> trees</div><div class="line"></div><div class="line">In [<span class="number">23</span>]: my_dat, labels = trees.CreateDataSet()</div><div class="line"></div><div class="line">In [<span class="number">24</span>]: my_dat</div><div class="line">Out[<span class="number">24</span>]: [[<span class="number">1</span>, <span class="number">1</span>, <span class="string">'yes'</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="string">'yes'</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="string">'no'</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="string">'no'</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="string">'no'</span>]]</div><div class="line"></div><div class="line">In [<span class="number">25</span>]: trees.CalcShannonEnt(my_dat)</div><div class="line">Out[<span class="number">25</span>]: <span class="number">0.9709505944546686</span></div></pre></td></tr></table></figure>
<p>熵越高，表明数据集中类别数越多。</p>
<p>另一个度量无序程度的方法是基尼不纯度（Gini impurity）。</p>
<h4 id="基尼不纯度"><a href="#基尼不纯度" class="headerlink" title="基尼不纯度"></a>基尼不纯度</h4><p>基尼不纯度的定义为，对于每一个节点，从所有类别标签中随机选择一个，选择出来的类别标签与其本身的类别标签不一致的概率之和。形式化地定义如下：</p>
<script type="math/tex; mode=display">G = \sum_{i \ne j}p(x_i)p(x_j) = \sum_{i}p(x_i)\sum_{j \ne i}p(x_j) = \sum_{i}p(x_i)(1-p(x_i)) = \sum_{i}p(x_i) - \sum_{i}(p(x_i))^2 = 1 - \sum_{i}(p(x_i))^2</script><p>代码实现如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CalcGiniImpurity</span><span class="params">(data_set)</span>:</span></div><div class="line">    <span class="string">""" Calculate the Gini impurity.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        data_set: The object dataset.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        gini_impurity: The Gini impurity of the object data set.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># Initiation</span></div><div class="line">    num_entries = len(data_set)</div><div class="line">    label_counts = &#123;&#125;</div><div class="line">    <span class="comment"># Statistics the frequency of each class in the dataset</span></div><div class="line">    <span class="keyword">for</span> feat_vec <span class="keyword">in</span> data_set:</div><div class="line">        current_label = feat_vec[<span class="number">-1</span>]</div><div class="line">        <span class="keyword">if</span> current_label <span class="keyword">not</span> <span class="keyword">in</span> label_counts.keys():</div><div class="line">            label_counts[current_label] = <span class="number">0</span></div><div class="line">        label_counts[current_label] += <span class="number">1</span></div><div class="line">    <span class="comment"># Calculates the Gini impurity</span></div><div class="line">    gini_impurity = <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> label_counts:</div><div class="line">        prob = float(label_counts[key]) / num_entries</div><div class="line">        gini_impurity += pow(prob, <span class="number">2</span>)</div><div class="line">    gini_impurity = <span class="number">1</span> - gini_impurity</div><div class="line">    <span class="keyword">return</span> gini_impurity</div></pre></td></tr></table></figure>
<p>同样进行一个简单的demo：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">4</span>]: <span class="keyword">import</span> trees</div><div class="line"></div><div class="line">In [<span class="number">5</span>]: my_dat, labels = trees.CreateDataSet()</div><div class="line"></div><div class="line">In [<span class="number">6</span>]: my_dat</div><div class="line">Out[<span class="number">6</span>]: [[<span class="number">1</span>, <span class="number">1</span>, <span class="string">'yes'</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="string">'yes'</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="string">'no'</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="string">'no'</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="string">'no'</span>]]</div><div class="line"></div><div class="line">In [<span class="number">7</span>]: trees.CalcGiniImpurity(my_dat)</div><div class="line">Out[<span class="number">7</span>]: <span class="number">0.48</span></div></pre></td></tr></table></figure>
<p>最后再介绍一种度量无序程度的方式，误分类不纯度。</p>
<h4 id="误分类不纯度"><a href="#误分类不纯度" class="headerlink" title="误分类不纯度"></a>误分类不纯度</h4><p>定义如下：</p>
<script type="math/tex; mode=display">M = 1 - \max_{i}(p(x_i))</script><p>代码实现如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CalcMisClassifyImpurity</span><span class="params">(data_set)</span>:</span></div><div class="line">    <span class="string">""" Calculate the misclassification impurity.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        data_set: The object dataset.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        mis_classify_impurity: The misclassification impurity of the object data set.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># Initiation</span></div><div class="line">    num_entries = len(data_set)</div><div class="line">    label_counts = &#123;&#125;</div><div class="line">    <span class="comment"># Statistics the frequency of each class in the dataset</span></div><div class="line">    <span class="keyword">for</span> feat_vec <span class="keyword">in</span> data_set:</div><div class="line">        current_label = feat_vec[<span class="number">-1</span>]</div><div class="line">        <span class="keyword">if</span> current_label <span class="keyword">not</span> <span class="keyword">in</span> label_counts.keys():</div><div class="line">            label_counts[current_label] = <span class="number">0</span></div><div class="line">        label_counts[current_label] += <span class="number">1</span></div><div class="line">    <span class="comment"># Calculates the misclassification impurity</span></div><div class="line">    mis_classify_impurity = <span class="number">0.0</span></div><div class="line">    max_prob = max(label_counts.values()) / num_entries</div><div class="line">    mis_classify_impurity = <span class="number">1</span> - max_prob</div><div class="line">    <span class="keyword">return</span> mis_classify_impurity</div></pre></td></tr></table></figure>
<p>进行一个简单的demo:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">25</span>]: reload(trees)</div><div class="line">Out[<span class="number">25</span>]: &lt;module <span class="string">'trees'</span> <span class="keyword">from</span> <span class="string">'C:\\Users\\Ewan\\Documents\\GitHub\\hexo\\public\\2017\\02\\15\\Decision-tree\\trees.py'</span>&gt;</div><div class="line"></div><div class="line">In [<span class="number">26</span>]: my_dat, labels = trees.CreateDataSet()</div><div class="line"></div><div class="line">In [<span class="number">27</span>]: my_dat</div><div class="line">Out[<span class="number">27</span>]: [[<span class="number">1</span>, <span class="number">1</span>, <span class="string">'yes'</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="string">'yes'</span>], [<span class="number">1</span>, <span class="number">0</span>, <span class="string">'no'</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="string">'no'</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="string">'no'</span>]]</div><div class="line"></div><div class="line">In [<span class="number">28</span>]: trees.CalcMisClassifyImpurity(my_dat)</div><div class="line">Out[<span class="number">28</span>]: <span class="number">0.4</span></div></pre></td></tr></table></figure>
<p>最后用一个图来总结一下这三种不纯度度量的函数图像（以二类情况为例）</p>
<p>[Ref: <a href="http://www.cse.msu.edu/~cse802/DecisionTrees.pdf]：" target="_blank" rel="external">http://www.cse.msu.edu/~cse802/DecisionTrees.pdf]：</a></p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/impurity_compare.png" alt="impurity_compare"></p>
<h3 id="数据划分"><a href="#数据划分" class="headerlink" title="数据划分"></a>数据划分</h3><p>根据以上，数据划分的思路是，基于每一维特征的每一个值进行划分，并计算划分前后的信息增益，最后选取增益最大的特征及其所对应的值进行划分，由于这里运用的是ID3算法，因此选择的信息度量方式是熵。</p>
<p>代码实现如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">SplitDataSet</span><span class="params">(data_set, axis, value)</span>:</span></div><div class="line">    <span class="string">""" Split the data set according to the given axis and correspond value.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        data_set: Object data set.</div><div class="line">        axis: The split-feature index.</div><div class="line">        value: The value of the split-feature.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        ret_data_set: The splited data set.</div><div class="line">    """</div><div class="line">    </div><div class="line">    ret_data_set = []</div><div class="line">    <span class="keyword">for</span> feat_vec <span class="keyword">in</span> data_set:</div><div class="line">        <span class="keyword">if</span> feat_vec[axis] == value:</div><div class="line">            reduced_feat_vec = feat_vec[:axis]</div><div class="line">            reduced_feat_vec.extend(feat_vec[axis + <span class="number">1</span>:])</div><div class="line">            ret_data_set.append(reduced_feat_vec)</div><div class="line">    <span class="keyword">return</span> ret_data_set</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ChooseBestFeatureToSplit</span><span class="params">(data_set)</span>:</span></div><div class="line">    <span class="string">""" Choose the best feature to split.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        data_set: Object data set.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        best_feature: The index of the feature to split.</div><div class="line">    """</div><div class="line">    </div><div class="line">    <span class="comment"># Initiation</span></div><div class="line">    <span class="comment"># Because the range() method excepts the lastest number</span></div><div class="line">    num_features = len(data_set[<span class="number">0</span>]) - <span class="number">1</span></div><div class="line">    base_entropy = CalcShannonEnt(data_set)</div><div class="line">    best_info_gain = <span class="number">0.0</span></div><div class="line">    best_feature = <span class="number">-1</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_features):</div><div class="line">        <span class="comment"># Choose the i-th feature of all data</span></div><div class="line">        feat_list = [example[i] <span class="keyword">for</span> example <span class="keyword">in</span> data_set]</div><div class="line">        <span class="comment"># Abandon the repeat feature value(s)</span></div><div class="line">        unique_vals = set(feat_list)</div><div class="line">        new_entropy = <span class="number">0.0</span></div><div class="line">        <span class="comment"># Calculates the Shannon entropy of the splited data set</span></div><div class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> unique_vals:</div><div class="line">            sub_data_set = SplitDataSet(data_set, i, value)</div><div class="line">            prob = len(sub_data_set) / len(data_set)</div><div class="line">            new_entropy += prob * CalcShannonEnt(sub_data_set)</div><div class="line">        <span class="comment"># base_entropy is equal or greatter than new_entropy</span></div><div class="line">        info_gain = base_entropy - new_entropy</div><div class="line">        <span class="keyword">if</span> info_gain &gt; best_info_gain:</div><div class="line">            best_info_gain = info_gain</div><div class="line">            best_feature = i</div><div class="line"></div><div class="line">    <span class="keyword">return</span> best_feature</div></pre></td></tr></table></figure>
<p><strong>由以上代码（ID3算法）可以看出，其计算熵的依据是根据最后一个特征，是否这种naive的选取方式能够达到平均的最好结果？另外，其划分依据仅仅根据划分一次后的子数据集的熵之和，属于一种贪心策略，这样是否可以达到最优解？</strong></p>
<h3 id="递归构建决策树"><a href="#递归构建决策树" class="headerlink" title="递归构建决策树"></a>递归构建决策树</h3><p>既然是递归算法，那么必须设定递归结束条件：</p>
<ol>
<li>遍历完所有属性</li>
<li>每个分支下的数据都属于相同的分类</li>
</ol>
<p>这里存在一个问题，如果遍历完所有属性后，某些分支下还是存在多个分类，这种情况下一般采用<strong>多数表决</strong>的方式，代码实现方式如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">majority_cnt</span><span class="params">(class_list)</span>:</span></div><div class="line">    <span class="string">""" Decided the final class.</span></div><div class="line"></div><div class="line">    When the splited data is not belongs to the same class</div><div class="line">    while all feature is handled, the final class is decided by</div><div class="line">    the majority class.</div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        class_list: The class list of the splited data set.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        sorted_class_count[0][0]: The majority class.</div><div class="line">    """</div><div class="line">    </div><div class="line">    class_count = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> vote <span class="keyword">in</span> class_list:</div><div class="line">        <span class="keyword">if</span> vote <span class="keyword">not</span> <span class="keyword">in</span> class_count.keys():</div><div class="line">            class_count[vote] = <span class="number">0</span></div><div class="line">        class_count[vote] += <span class="number">1</span></div><div class="line">    sorted_class_count = sorted(</div><div class="line">        class_count.iteritems(), key=operator.itemgetter(<span class="number">1</span>), reverse=<span class="keyword">True</span>)</div><div class="line">    <span class="keyword">return</span> sorted_class_count[<span class="number">0</span>][<span class="number">0</span>]</div></pre></td></tr></table></figure>
<p>下面进行树的创建：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CreateTree</span><span class="params">(data_set, labels)</span>:</span></div><div class="line">    <span class="string">""" Create decision tree.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        data_set: The object data set.</div><div class="line">        labels: The feature labels in the data_set.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        my_tree: A dict that represents the decision tree.</div><div class="line">    """</div><div class="line"></div><div class="line">    class_list = [example[<span class="number">-1</span>] <span class="keyword">for</span> example <span class="keyword">in</span> data_set]</div><div class="line">    <span class="comment"># If the classes are fully same</span></div><div class="line">    <span class="keyword">if</span> class_list.count(class_list[<span class="number">0</span>]) == len(class_list):</div><div class="line">        <span class="keyword">return</span> class_list[<span class="number">0</span>]</div><div class="line">    <span class="comment"># If all feature is handled</span></div><div class="line">    <span class="keyword">if</span> len(data_set[<span class="number">0</span>]) == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> majority_cnt(class_list)</div><div class="line">    <span class="comment"># Get the best split-feature and the correspond label</span></div><div class="line">    best_feat = ChooseBestFeatureToSplit(data_set)</div><div class="line">    best_feat_label = labels[best_feat]</div><div class="line">    <span class="comment"># Build a recurrence dict</span></div><div class="line">    my_tree = &#123;best_feat_label: &#123;&#125;&#125;</div><div class="line">    <span class="comment"># Get the next step labels parameter</span></div><div class="line">    <span class="keyword">del</span>(labels[best_feat])</div><div class="line">    <span class="comment"># Next step start</span></div><div class="line">    feat_values = [example[best_feat] <span class="keyword">for</span> example <span class="keyword">in</span> data_set]</div><div class="line">    unique_vals = set(feat_values)</div><div class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> unique_vals:</div><div class="line">        sub_labels = labels[:]</div><div class="line">        <span class="comment"># Recurrence calls</span></div><div class="line">        my_tree[best_feat_label][value] = CreateTree(</div><div class="line">            SplitDataSet(data_set, best_feat, value), sub_labels)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> my_tree</div></pre></td></tr></table></figure>
<p>下面进行一下简单的测试：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">27</span>]: reload(trees)</div><div class="line">Out[<span class="number">27</span>]: &lt;module <span class="string">'trees'</span> <span class="keyword">from</span> <span class="string">'C:\\Users\\Ewan\\Documents\\GitHub\\hexo\\public\\2017\\02\\15\\Decision-tree\\trees.py'</span>&gt;</div><div class="line"></div><div class="line">In [<span class="number">28</span>]: my_dat, labels = trees.CreateDataSet()</div><div class="line"></div><div class="line">In [<span class="number">29</span>]: my_tree = trees.CreateTree(my_dat, labels)</div><div class="line"></div><div class="line">In [<span class="number">30</span>]: my_tree</div><div class="line">Out[<span class="number">30</span>]: &#123;<span class="string">'no surfacing'</span>: &#123;<span class="number">0</span>: <span class="string">'no'</span>, <span class="number">1</span>: &#123;<span class="string">'flippers'</span>: &#123;<span class="number">0</span>: <span class="string">'no'</span>, <span class="number">1</span>: <span class="string">'yes'</span>&#125;&#125;&#125;&#125;</div></pre></td></tr></table></figure>
<p>可见决策树已经构造成功（图形化如下所示），但是这显然不够，我们需要的是用决策树进行分类。</p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/splitting_path.png" alt="splitting_path"></p>
<h2 id="决策树分类"><a href="#决策树分类" class="headerlink" title="决策树分类"></a>决策树分类</h2><p>demo如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">63</span>]: reload(trees)</div><div class="line">Out[<span class="number">63</span>]: &lt;module <span class="string">'trees'</span> <span class="keyword">from</span> <span class="string">'C:\\Users\\Ewan\\Documents\\GitHub\\hexo\\public\\2017\\02\\15\\Decision-tree\\trees.py'</span>&gt;</div><div class="line"></div><div class="line">In [<span class="number">64</span>]: my_dat, labels = trees.CreateDataSet()</div><div class="line"></div><div class="line">In [<span class="number">65</span>]: labels</div><div class="line">Out[<span class="number">65</span>]: [<span class="string">'no surfacing'</span>, <span class="string">'flippers'</span>]</div><div class="line"></div><div class="line">In [<span class="number">66</span>]: my_tree = trees.CreateTree(my_dat, labels)</div><div class="line"></div><div class="line">In [<span class="number">67</span>]: labels</div><div class="line">Out[<span class="number">67</span>]: [<span class="string">'no surfacing'</span>, <span class="string">'flippers'</span>]</div><div class="line"></div><div class="line">In [<span class="number">68</span>]: my_tree</div><div class="line">Out[<span class="number">68</span>]: &#123;<span class="string">'no surfacing'</span>: &#123;<span class="number">0</span>: <span class="string">'no'</span>, <span class="number">1</span>: &#123;<span class="string">'flippers'</span>: &#123;<span class="number">0</span>: <span class="string">'no'</span>, <span class="number">1</span>: <span class="string">'yes'</span>&#125;&#125;&#125;&#125;</div><div class="line"></div><div class="line">In [<span class="number">69</span>]: trees.Classify(my_tree, labels, [<span class="number">1</span>, <span class="number">0</span>])</div><div class="line">Out[<span class="number">69</span>]: <span class="string">'no'</span></div><div class="line"></div><div class="line">In [<span class="number">70</span>]: trees.Classify(my_tree, labels, [<span class="number">1</span>, <span class="number">1</span>])</div><div class="line">Out[<span class="number">70</span>]: <span class="string">'yes'</span></div></pre></td></tr></table></figure>
<h1 id="C4-5"><a href="#C4-5" class="headerlink" title="C4.5"></a>C4.5</h1><p>C4.5算法是由ID3算法引申而来，主要改进有以下两点：</p>
<ol>
<li>选取最优分裂属性时根据信息增益率 (IGR)</li>
<li>使算法对连续变量兼容</li>
</ol>
<p>下面分别对分裂信息以及信息增益率进行定义：</p>
<script type="math/tex; mode=display">IGR = \frac{IG}{IV}</script><p>因此只需对ID3算法的代码做一些改动即可，为了兼容ID3， 具体实现如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ChooseBestFeatureToSplit</span><span class="params">(data_set, flag=<span class="string">'ID3'</span>)</span>:</span></div><div class="line">    <span class="string">""" Choose the best feature to split.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        data_set: Object data set.</div><div class="line">        flag: Decide if use the infomation gain rate or not.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        best_feature: The index of the feature to split.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># Initiation</span></div><div class="line">    <span class="comment"># Because the range() method excepts the lastest number</span></div><div class="line">    num_features = len(data_set[<span class="number">0</span>]) - <span class="number">1</span></div><div class="line">    base_entropy = CalcShannon(data_set)</div><div class="line">    method = <span class="string">'ID3'</span></div><div class="line">    best_feature = <span class="number">-1</span></div><div class="line">    best_info_gain = <span class="number">0.0</span></div><div class="line">    best_info_gain_rate = <span class="number">0.0</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_features):</div><div class="line">        new_entropy = <span class="number">0.0</span></div><div class="line">        <span class="comment"># Choose the i-th feature of all data</span></div><div class="line">        feat_list = [example[i] <span class="keyword">for</span> example <span class="keyword">in</span> data_set]</div><div class="line">        <span class="comment"># Abandon the repeat feature value(s)</span></div><div class="line">        unique_vals = set(feat_list)</div><div class="line">        <span class="keyword">if</span> len(unique_vals) &gt; <span class="number">3</span>:</div><div class="line">            method = <span class="string">'C4.5'</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> method == <span class="string">'ID3'</span>:</div><div class="line">            <span class="comment"># Calculates the Shannon entropy of the splited data set</span></div><div class="line">            <span class="keyword">for</span> value <span class="keyword">in</span> unique_vals:</div><div class="line">                sub_data_set = SplitDataSet(data_set, i, value)</div><div class="line">                prob = len(sub_data_set) / len(data_set)</div><div class="line">                new_entropy += prob * CalcShannon(sub_data_set)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            data_set = np.array(data_set)</div><div class="line">            sorted_feat = np.argsort(feat_list)</div><div class="line"></div><div class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> range(len(sorted_feat) - <span class="number">1</span>):</div><div class="line">                pre_sorted_feat, post_sorted_feat = np.split(</div><div class="line">                    sorted_feat, [index + <span class="number">1</span>, ])</div><div class="line">                pre_data_set = data_set[pre_sorted_feat]</div><div class="line">                post_data_set = data_set[post_sorted_feat]</div><div class="line">                pre_coff = len(pre_sorted_feat) / len(sorted_feat)</div><div class="line">                post_coff = len(post_sorted_feat) / len(sorted_feat)</div><div class="line">                <span class="comment"># Calucate the split info</span></div><div class="line">                iv = pre_coff * CalcShannon(pre_data_set) + \</div><div class="line">                    post_coff * CalcShannon(post_data_set)</div><div class="line">                <span class="keyword">if</span> iv &gt; new_entropy:</div><div class="line">                    new_entropy = iv</div><div class="line">        <span class="comment"># base_entropy is equal or greatter than new_entropy</span></div><div class="line">        info_gain = base_entropy - new_entropy</div><div class="line">        <span class="keyword">if</span> flag == <span class="string">'C4.5'</span>:</div><div class="line">            info_gain_rate = info_gain / new_entropy</div><div class="line">            <span class="comment"># print('index', i, 'info_gain_rate', info_gain_rate)</span></div><div class="line">            <span class="keyword">if</span> info_gain_rate &gt; best_info_gain_rate:</div><div class="line">                best_info_gain_rate = info_gain_rate</div><div class="line">                best_feature = i</div><div class="line">        <span class="keyword">if</span> flag == <span class="string">'ID3'</span>:</div><div class="line">            <span class="keyword">if</span> info_gain &gt; best_info_gain:</div><div class="line">                best_info_gain = info_gain</div><div class="line">                best_feature = i</div><div class="line"></div><div class="line">    <span class="keyword">return</span> best_feature</div></pre></td></tr></table></figure>
<p>下面需要解决的问题是连续变量的问题，为了实验的方便，我们更改一下naive的数据生成方法（Ref: <a href="http://blog.csdn.net/lemon_tree12138/article/details/51840361" target="_blank" rel="external">http://blog.csdn.net/lemon_tree12138/article/details/51840361</a> ）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CreateDataSet</span><span class="params">(method=<span class="string">'ID3'</span>)</span>:</span></div><div class="line">    <span class="string">""" A naive data generation method.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        method: The algorithm class</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        data_set: The data set excepts label info.</div><div class="line">        labels: The data set only contains label info.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># Arguments check</span></div><div class="line">    <span class="keyword">if</span> method <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'ID3'</span>, <span class="string">'C4.5'</span>):</div><div class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'invalid value: %s'</span> % method)</div><div class="line">    <span class="keyword">if</span> method == <span class="string">'ID3'</span>:</div><div class="line">        data_set = [[<span class="number">1</span>, <span class="number">1</span>, <span class="string">'yes'</span>],</div><div class="line">                    [<span class="number">1</span>, <span class="number">1</span>, <span class="string">'yes'</span>],</div><div class="line">                    [<span class="number">1</span>, <span class="number">0</span>, <span class="string">'no'</span>],</div><div class="line">                    [<span class="number">0</span>, <span class="number">1</span>, <span class="string">'no'</span>],</div><div class="line">                    [<span class="number">0</span>, <span class="number">1</span>, <span class="string">'no'</span>]]</div><div class="line">        labels = [<span class="string">'no surfacing'</span>, <span class="string">'flippers'</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        data_set = [[<span class="number">85</span>, <span class="number">85</span>, <span class="string">'no'</span>],</div><div class="line">                    [<span class="number">80</span>, <span class="number">90</span>, <span class="string">'yes'</span>],</div><div class="line">                    [<span class="number">83</span>, <span class="number">78</span>, <span class="string">'no'</span>],</div><div class="line">                    [<span class="number">70</span>, <span class="number">96</span>, <span class="string">'no'</span>],</div><div class="line">                    [<span class="number">68</span>, <span class="number">80</span>, <span class="string">'no'</span>],</div><div class="line">                    [<span class="number">65</span>, <span class="number">70</span>, <span class="string">'yes'</span>],</div><div class="line">                    [<span class="number">64</span>, <span class="number">65</span>, <span class="string">'yes'</span>],</div><div class="line">                    [<span class="number">72</span>, <span class="number">95</span>, <span class="string">'no'</span>],</div><div class="line">                    [<span class="number">69</span>, <span class="number">70</span>, <span class="string">'no'</span>],</div><div class="line">                    [<span class="number">75</span>, <span class="number">80</span>, <span class="string">'no'</span>],</div><div class="line">                    [<span class="number">75</span>, <span class="number">70</span>, <span class="string">'yes'</span>],</div><div class="line">                    [<span class="number">72</span>, <span class="number">90</span>, <span class="string">'yes'</span>],</div><div class="line">                    [<span class="number">81</span>, <span class="number">75</span>, <span class="string">'no'</span>],</div><div class="line">                    [<span class="number">71</span>, <span class="number">80</span>, <span class="string">'yes'</span>]]</div><div class="line">        labels = [<span class="string">'temperature'</span>, <span class="string">'humidity'</span>]</div><div class="line">    <span class="keyword">return</span> data_set, labels</div></pre></td></tr></table></figure>
<p>假设我们选择了温度属性，则被提取的关键数据为：</p>
<p>[[85, No], [80, No], [83, Yes], [70, Yes], [68, Yes], [65, No], [64, Yes], [72, No], [69, Yes], [75, Yes], [75, Yes], [72, Yes], [81, Yes], [71, No]] </p>
<p>现在我们对这批数据进行从小到大进行排序，排序后数据集就变成： </p>
<p>[[64, Yes], [65, No], [68, Yes], [69, Yes], [70, Yes], [71, No], [72, No], [72, Yes], [75, Yes], [75, Yes], [80, No], [81, Yes], [83, Yes], [85, No]] </p>
<p>绘制成如下图例：</p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/c4_5_data_sorted.png" alt="c4.5_data_sorted"></p>
<p>当我们拿到一个已经排好序的（温度，结果）的列表之后，分别计算被某个单元分隔的左边和右边的分裂信息，比如现在计算 index = 4 时的分裂信息。则： </p>
<script type="math/tex; mode=display">IV(v_4) = IV([4, 1], [5, 4]) = \frac{5}{14}IV([4, 1]) + \frac{9}{14}IV([5, 4])</script><script type="math/tex; mode=display">IV(v_4) = \frac{5}{14}(-\frac{4}{5} \log_{2} \frac{4}{5} - \frac{1}{5} \log_{2} \frac{1}{5}) + \frac{9}{14}(-\frac{5}{9} \log_{2} \frac{5}{9} - \frac{4}{9} \log_{2} \frac{4}{9})</script><p>下图表示了不同分裂位置所得到的分裂信息：</p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/c4_5_data_split.png" alt="c4_5_data_split"></p>
<p>   最后给出完整的代码实现 (最后的Classify方法还需修改)：</p>
<p>trees.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log</div><div class="line"><span class="keyword">import</span> operator</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CalcShannon</span><span class="params">(data_set)</span>:</span></div><div class="line">    <span class="string">""" Calculate the Shan0n Entropy.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        data_set: The object dataset.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        shan0n_ent: The Shan0n entropy of the object data set.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># Initiation</span></div><div class="line">    num_entries = len(data_set)</div><div class="line">    label_counts = &#123;&#125;</div><div class="line">    <span class="comment"># Statistics the frequency of each class in the dataset</span></div><div class="line">    <span class="keyword">for</span> feat_vec <span class="keyword">in</span> data_set:</div><div class="line">        current_label = feat_vec[<span class="number">-1</span>]</div><div class="line">        <span class="keyword">if</span> current_label <span class="keyword">not</span> <span class="keyword">in</span> label_counts.keys():</div><div class="line">            label_counts[current_label] = <span class="number">0</span></div><div class="line">        label_counts[current_label] += <span class="number">1</span></div><div class="line">    <span class="comment"># print(label_counts)</span></div><div class="line">    <span class="comment"># Calculates the Shan0n entropy</span></div><div class="line">    shan0n_ent = <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> label_counts:</div><div class="line">        prob = float(label_counts[key]) / num_entries</div><div class="line">        shan0n_ent -= prob * log(prob, <span class="number">2</span>)</div><div class="line">    <span class="keyword">return</span> shan0n_ent</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CalcGiniImpurity</span><span class="params">(data_set)</span>:</span></div><div class="line">    <span class="string">""" Calculate the Gini impurity.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        data_set: The object dataset.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        gini_impurity: The Gini impurity of the object data set.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># Initiation</span></div><div class="line">    num_entries = len(data_set)</div><div class="line">    label_counts = &#123;&#125;</div><div class="line">    <span class="comment"># Statistics the frequency of each class in the dataset</span></div><div class="line">    <span class="keyword">for</span> feat_vec <span class="keyword">in</span> data_set:</div><div class="line">        current_label = feat_vec[<span class="number">-1</span>]</div><div class="line">        <span class="keyword">if</span> current_label <span class="keyword">not</span> <span class="keyword">in</span> label_counts.keys():</div><div class="line">            label_counts[current_label] = <span class="number">0</span></div><div class="line">        label_counts[current_label] += <span class="number">1</span></div><div class="line">    <span class="comment"># Calculates the Gini impurity</span></div><div class="line">    gini_impurity = <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> label_counts:</div><div class="line">        prob = float(label_counts[key]) / num_entries</div><div class="line">        gini_impurity += pow(prob, <span class="number">2</span>)</div><div class="line">    gini_impurity = <span class="number">1</span> - gini_impurity</div><div class="line">    <span class="keyword">return</span> gini_impurity</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CalcMisClassifyImpurity</span><span class="params">(data_set)</span>:</span></div><div class="line">    <span class="string">""" Calculate the misclassification impurity.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        data_set: The object dataset.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        mis_classify_impurity:</div><div class="line">            The misclassification impurity of the object data set.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># Initiation</span></div><div class="line">    num_entries = len(data_set)</div><div class="line">    label_counts = &#123;&#125;</div><div class="line">    <span class="comment"># Statistics the frequency of each class in the dataset</span></div><div class="line">    <span class="keyword">for</span> feat_vec <span class="keyword">in</span> data_set:</div><div class="line">        current_label = feat_vec[<span class="number">-1</span>]</div><div class="line">        <span class="keyword">if</span> current_label <span class="keyword">not</span> <span class="keyword">in</span> label_counts.keys():</div><div class="line">            label_counts[current_label] = <span class="number">0</span></div><div class="line">        label_counts[current_label] += <span class="number">1</span></div><div class="line">    <span class="comment"># Calculates the misclassification impurity</span></div><div class="line">    mis_classify_impurity = <span class="number">0.0</span></div><div class="line">    max_prob = max(label_counts.values()) / num_entries</div><div class="line">    mis_classify_impurity = <span class="number">1</span> - max_prob</div><div class="line">    <span class="keyword">return</span> mis_classify_impurity</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CreateDataSet</span><span class="params">(method=<span class="string">'ID3'</span>)</span>:</span></div><div class="line">    <span class="string">""" A naive data generation method.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        method: The algorithm class</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        data_set: The data set excepts label info.</div><div class="line">        labels: The data set only contains label info.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># Arguments check</span></div><div class="line">    <span class="keyword">if</span> method <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'ID3'</span>, <span class="string">'C4.5'</span>):</div><div class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'invalid value: %s'</span> % method)</div><div class="line">    <span class="keyword">if</span> method == <span class="string">'ID3'</span>:</div><div class="line">        data_set = [[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</div><div class="line">                    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</div><div class="line">                    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">                    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</div><div class="line">                    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]</div><div class="line">        labels = [<span class="string">'0 surfacing'</span>, <span class="string">'flippers'</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        data_set = [[<span class="number">1</span>, <span class="number">85</span>, <span class="number">85</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">                    [<span class="number">1</span>, <span class="number">80</span>, <span class="number">90</span>, <span class="number">1</span>, <span class="number">0</span>],</div><div class="line">                    [<span class="number">2</span>, <span class="number">83</span>, <span class="number">78</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">                    [<span class="number">3</span>, <span class="number">70</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">                    [<span class="number">3</span>, <span class="number">68</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">                    [<span class="number">3</span>, <span class="number">65</span>, <span class="number">70</span>, <span class="number">1</span>, <span class="number">0</span>],</div><div class="line">                    [<span class="number">2</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">1</span>, <span class="number">1</span>],</div><div class="line">                    [<span class="number">1</span>, <span class="number">72</span>, <span class="number">95</span>, <span class="number">0</span>, <span class="number">0</span>],</div><div class="line">                    [<span class="number">1</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">                    [<span class="number">3</span>, <span class="number">75</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">                    [<span class="number">1</span>, <span class="number">75</span>, <span class="number">70</span>, <span class="number">1</span>, <span class="number">1</span>],</div><div class="line">                    [<span class="number">2</span>, <span class="number">72</span>, <span class="number">90</span>, <span class="number">1</span>, <span class="number">1</span>],</div><div class="line">                    [<span class="number">2</span>, <span class="number">81</span>, <span class="number">75</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">                    [<span class="number">3</span>, <span class="number">71</span>, <span class="number">80</span>, <span class="number">1</span>, <span class="number">0</span>]]</div><div class="line">        labels = [<span class="string">'outlook'</span>, <span class="string">'temperature'</span>, <span class="string">'humidity'</span>, <span class="string">'windy'</span>]</div><div class="line">    <span class="keyword">return</span> data_set, labels</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">SplitDataSet</span><span class="params">(data_set, axis, value)</span>:</span></div><div class="line">    <span class="string">""" Split the data set according to the given axis and correspond value.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        data_set: Object data set.</div><div class="line">        axis: The split-feature index.</div><div class="line">        value: The value of the split-feature.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        ret_data_set: The splited data set.</div><div class="line">    """</div><div class="line"></div><div class="line">    ret_data_set = []</div><div class="line">    <span class="keyword">for</span> feat_vec <span class="keyword">in</span> data_set:</div><div class="line">        <span class="keyword">if</span> feat_vec[axis] == value:</div><div class="line">            reduced_feat_vec = feat_vec[:axis]</div><div class="line">            reduced_feat_vec.extend(feat_vec[axis + <span class="number">1</span>:])</div><div class="line">            ret_data_set.append(reduced_feat_vec)</div><div class="line">    <span class="keyword">return</span> ret_data_set</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ChooseBestFeatureToSplit</span><span class="params">(data_set, flag=<span class="string">'ID3'</span>)</span>:</span></div><div class="line">    <span class="string">""" Choose the best feature to split.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        data_set: Object data set.</div><div class="line">        flag: Decide if use the infomation gain rate or not.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        best_feature: The index of the feature to split.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># Initiation</span></div><div class="line">    <span class="comment"># Because the range() method excepts the lastest number</span></div><div class="line">    num_features = len(data_set[<span class="number">0</span>]) - <span class="number">1</span></div><div class="line">    base_entropy = CalcShannon(data_set)</div><div class="line">    method = <span class="string">'ID3'</span></div><div class="line">    best_feature = <span class="number">-1</span></div><div class="line">    best_info_gain = <span class="number">0.0</span></div><div class="line">    best_info_gain_rate = <span class="number">0.0</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_features):</div><div class="line">        new_entropy = <span class="number">0.0</span></div><div class="line">        <span class="comment"># Choose the i-th feature of all data</span></div><div class="line">        feat_list = [example[i] <span class="keyword">for</span> example <span class="keyword">in</span> data_set]</div><div class="line">        <span class="comment"># Abandon the repeat feature value(s)</span></div><div class="line">        unique_vals = set(feat_list)</div><div class="line">        <span class="keyword">if</span> len(unique_vals) &gt; <span class="number">3</span>:</div><div class="line">            method = <span class="string">'C4.5'</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> method == <span class="string">'ID3'</span>:</div><div class="line">            <span class="comment"># Calculates the Shannon entropy of the splited data set</span></div><div class="line">            <span class="keyword">for</span> value <span class="keyword">in</span> unique_vals:</div><div class="line">                sub_data_set = SplitDataSet(data_set, i, value)</div><div class="line">                prob = len(sub_data_set) / len(data_set)</div><div class="line">                new_entropy += prob * CalcShannon(sub_data_set)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            data_set = np.array(data_set)</div><div class="line">            sorted_feat = np.argsort(feat_list)</div><div class="line"></div><div class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> range(len(sorted_feat) - <span class="number">1</span>):</div><div class="line">                pre_sorted_feat, post_sorted_feat = np.split(</div><div class="line">                    sorted_feat, [index + <span class="number">1</span>, ])</div><div class="line">                pre_data_set = data_set[pre_sorted_feat]</div><div class="line">                post_data_set = data_set[post_sorted_feat]</div><div class="line">                pre_coff = len(pre_sorted_feat) / len(sorted_feat)</div><div class="line">                post_coff = len(post_sorted_feat) / len(sorted_feat)</div><div class="line">                <span class="comment"># Calucate the split info</span></div><div class="line">                iv = pre_coff * CalcShannon(pre_data_set) + \</div><div class="line">                    post_coff * CalcShannon(post_data_set)</div><div class="line">                <span class="keyword">if</span> iv &gt; new_entropy:</div><div class="line">                    new_entropy = iv</div><div class="line">        <span class="comment"># base_entropy is equal or greatter than new_entropy</span></div><div class="line">        info_gain = base_entropy - new_entropy</div><div class="line">        <span class="keyword">if</span> flag == <span class="string">'C4.5'</span>:</div><div class="line">            info_gain_rate = info_gain / new_entropy</div><div class="line">            <span class="comment"># print('index', i, 'info_gain_rate', info_gain_rate)</span></div><div class="line">            <span class="keyword">if</span> info_gain_rate &gt; best_info_gain_rate:</div><div class="line">                best_info_gain_rate = info_gain_rate</div><div class="line">                best_feature = i</div><div class="line">        <span class="keyword">if</span> flag == <span class="string">'ID3'</span>:</div><div class="line">            <span class="keyword">if</span> info_gain &gt; best_info_gain:</div><div class="line">                best_info_gain = info_gain</div><div class="line">                best_feature = i</div><div class="line"></div><div class="line">    <span class="keyword">return</span> best_feature</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">majority_cnt</span><span class="params">(class_list)</span>:</span></div><div class="line">    <span class="string">""" Decided the final class.</span></div><div class="line"></div><div class="line">    When the splited data is 0t belongs to the same class</div><div class="line">    while all feature is handled, the final class is decided by</div><div class="line">    the majority class.</div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        class_list: The class list of the splited data set.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        sorted_class_count[0][0]: The majority class.</div><div class="line">    """</div><div class="line"></div><div class="line">    class_count = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> vote <span class="keyword">in</span> class_list:</div><div class="line">        <span class="keyword">if</span> vote <span class="keyword">not</span> <span class="keyword">in</span> class_count.keys():</div><div class="line">            class_count[vote] = <span class="number">0</span></div><div class="line">        class_count[vote] += <span class="number">1</span></div><div class="line">    sorted_class_count = sorted(</div><div class="line">        class_count.</div><div class="line"></div><div class="line">        items(), key=operator.itemgetter(<span class="number">1</span>), reverse=<span class="keyword">True</span>)</div><div class="line">    <span class="keyword">return</span> sorted_class_count[<span class="number">0</span>][<span class="number">0</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CreateTree</span><span class="params">(data_set, feat_labels, method=<span class="string">'ID3'</span>)</span>:</span></div><div class="line">    <span class="string">""" Create decision tree.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        data_set: The object data set.</div><div class="line">        labels: The feature labels in the data_set.</div><div class="line">        method: The algorithm class.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        my_tree: A dict that represents the decision tree.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># Arguments check</span></div><div class="line">    <span class="keyword">if</span> method <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'ID3'</span>, <span class="string">'C4.5'</span>):</div><div class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'invalid value: %s'</span> % method)</div><div class="line"></div><div class="line">    labels = feat_labels.copy()</div><div class="line">    class_list = [example[<span class="number">-1</span>] <span class="keyword">for</span> example <span class="keyword">in</span> data_set]</div><div class="line">    <span class="comment"># print(class_list)</span></div><div class="line">    <span class="comment"># If the classes are fully same</span></div><div class="line">    print(<span class="string">'class_list'</span>, class_list)</div><div class="line">    <span class="keyword">if</span> class_list.count(class_list[<span class="number">0</span>]) == len(class_list):</div><div class="line">        <span class="keyword">return</span> class_list[<span class="number">0</span>]</div><div class="line">    <span class="comment"># If all feature is handled</span></div><div class="line">    <span class="keyword">if</span> len(data_set[<span class="number">0</span>]) == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> majority_cnt(class_list)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> method == <span class="string">'ID3'</span>:</div><div class="line">        <span class="comment"># Get the best split-feature and the correspond label</span></div><div class="line">        best_feat = ChooseBestFeatureToSplit(data_set)</div><div class="line">        best_feat_label = labels[best_feat]</div><div class="line">        <span class="comment"># print(best_feat_label)</span></div><div class="line">        <span class="comment"># Build a recurrence dict</span></div><div class="line">        my_tree = &#123;best_feat_label: &#123;&#125;&#125;</div><div class="line">        <span class="comment"># Next step start</span></div><div class="line">        feat_values = [example[best_feat] <span class="keyword">for</span> example <span class="keyword">in</span> data_set]</div><div class="line">        <span class="comment"># Get the next step labels parameter</span></div><div class="line">        <span class="keyword">del</span>(labels[best_feat])</div><div class="line">        unique_vals = set(feat_values)</div><div class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> unique_vals:</div><div class="line">            sub_labels = labels[:]</div><div class="line">            <span class="comment"># Recurrence calls</span></div><div class="line">            my_tree[best_feat_label][value] = CreateTree(</div><div class="line">                SplitDataSet(data_set, best_feat, value), sub_labels)</div><div class="line">        <span class="keyword">return</span> my_tree</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        flag = <span class="string">'ID3'</span></div><div class="line">        <span class="comment"># Get the best split-feature and the correspond label</span></div><div class="line">        best_feat = ChooseBestFeatureToSplit(data_set, <span class="string">'C4.5'</span>)</div><div class="line">        best_feat_label = labels[best_feat]</div><div class="line">        print(best_feat_label)</div><div class="line">        <span class="comment"># Build a recurrence dict</span></div><div class="line">        my_tree = &#123;best_feat_label: &#123;&#125;&#125;</div><div class="line">        <span class="comment"># Next step start</span></div><div class="line">        feat_values = [example[best_feat] <span class="keyword">for</span> example <span class="keyword">in</span> data_set]</div><div class="line">        <span class="keyword">del</span>(labels[best_feat])</div><div class="line">        unique_vals = set(feat_values)</div><div class="line">        <span class="keyword">if</span> len(unique_vals) &gt; <span class="number">3</span>:</div><div class="line">            flag = <span class="string">'C4.5'</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> flag == <span class="string">'ID3'</span>:</div><div class="line">            <span class="keyword">for</span> value <span class="keyword">in</span> unique_vals:</div><div class="line">                sub_labels = labels[:]</div><div class="line">                <span class="comment"># Recurrence calls</span></div><div class="line">                my_tree[best_feat_label][value] = CreateTree(</div><div class="line">                    SplitDataSet(data_set, best_feat, value),</div><div class="line">                    sub_labels, <span class="string">'C4.5'</span>)</div><div class="line">            <span class="keyword">return</span> my_tree</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            data_set = np.array(data_set)</div><div class="line">            best_iv = <span class="number">0.0</span></div><div class="line">            best_split_value = <span class="number">-1</span></div><div class="line">            sorted_feat = np.argsort(feat_values)</div><div class="line"></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(sorted_feat) - <span class="number">1</span>):</div><div class="line">                pre_sorted_feat, post_sorted_feat = np.split(</div><div class="line">                    sorted_feat, [i + <span class="number">1</span>, ])</div><div class="line">                pre_data_set = data_set[pre_sorted_feat]</div><div class="line">                post_data_set = data_set[post_sorted_feat]</div><div class="line">                pre_coff = len(pre_sorted_feat) / len(sorted_feat)</div><div class="line">                post_coff = len(post_sorted_feat) / len(sorted_feat)</div><div class="line">                <span class="comment"># Calucate the split info</span></div><div class="line">                iv = pre_coff * CalcShannon(pre_data_set) + \</div><div class="line">                    post_coff * CalcShannon(post_data_set)</div><div class="line">                <span class="keyword">if</span> iv &gt; best_iv:</div><div class="line">                    best_iv = iv</div><div class="line">                    best_split_value = feat_values[sorted_feat[i]]</div><div class="line">            print(best_feat, best_split_value)</div><div class="line"></div><div class="line">            <span class="comment"># print(best_split_value)</span></div><div class="line"></div><div class="line">            left_data_set = data_set[</div><div class="line">                data_set[:, best_feat] &lt;= best_split_value]</div><div class="line">            left_data_set = np.delete(left_data_set, best_feat, axis=<span class="number">1</span>)</div><div class="line">            <span class="comment"># if len(left_data_set) == 1:</span></div><div class="line">            <span class="comment">#     return left_data_set[0][-1]</span></div><div class="line">            right_data_set = data_set[</div><div class="line">                data_set[:, best_feat] &gt; best_split_value]</div><div class="line">            right_data_set = np.delete(right_data_set, best_feat, axis=<span class="number">1</span>)</div><div class="line">            <span class="comment"># if len(right_data_set) == 1:</span></div><div class="line">            <span class="comment">#     return right_data_set[0][-1]</span></div><div class="line">            sub_labels = labels[:]</div><div class="line">            my_tree[best_feat_label][</div><div class="line">                <span class="string">'&lt;='</span> + str(best_split_value)] = CreateTree(</div><div class="line">                    left_data_set.tolist(), sub_labels, <span class="string">'C4.5'</span>)</div><div class="line">            my_tree[best_feat_label][</div><div class="line">                <span class="string">'&gt;'</span> + str(best_split_value)] = CreateTree(</div><div class="line">                    right_data_set.tolist(), sub_labels, <span class="string">'C4.5'</span>)</div><div class="line">            <span class="comment"># print('continious tree', my_tree)</span></div><div class="line">            <span class="keyword">return</span> my_tree</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Classify</span><span class="params">(input_tree, feat_labels, test_vec)</span>:</span></div><div class="line">    <span class="string">""" Classify that uses the given decision tree.</span></div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        input_tree: The Given decision tree.</div><div class="line">        feat_labels: The labels of correspond feature.</div><div class="line">        test_vec: The test data.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        class_label: The class label that corresponds to the test data.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># Get the start feature label to split</span></div><div class="line">    first_str = list(input_tree.keys())[<span class="number">0</span>]</div><div class="line">    <span class="comment"># Get the sub-tree that corresponds to the start feature to split</span></div><div class="line">    second_dict = input_tree[first_str]</div><div class="line">    <span class="comment"># Get the feature index that the label is the start feature label</span></div><div class="line">    feat_index = feat_labels.index(first_str)</div><div class="line"></div><div class="line">    <span class="comment"># Start recurrence search</span></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> second_dict.keys():</div><div class="line">        <span class="keyword">if</span> test_vec[feat_index] == key:</div><div class="line">            <span class="keyword">if</span> type(second_dict[key]).__name__ == <span class="string">'dict'</span>:</div><div class="line">                <span class="comment"># Recurrence calls</span></div><div class="line">                class_label = Classify(second_dict[key], feat_labels, test_vec)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                class_label = second_dict[key]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> class_label</div></pre></td></tr></table></figure>
<p>一个小demo：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">108</span>]: reload(trees)</div><div class="line">Out[<span class="number">108</span>]: &lt;module <span class="string">'trees'</span> <span class="keyword">from</span> <span class="string">'C:\\Users\\Ewan\\Documents\\GitHub\\hexo\\public\\2017\\02\\15\\Decision-tree\\trees.py'</span>&gt;</div><div class="line"></div><div class="line">In [<span class="number">109</span>]: my_dat, labels = trees.CreateDataSet(<span class="string">'C4.5'</span>)</div><div class="line"></div><div class="line">In [<span class="number">110</span>]: my_tree_c = trees.CreateTree(my_dat, labels, <span class="string">'C4.5'</span>)</div><div class="line">class_list [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]</div><div class="line">outlook</div><div class="line">class_list [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</div><div class="line">humidity</div><div class="line"><span class="number">1</span> <span class="number">90</span></div><div class="line">class_list [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</div><div class="line">temperature</div><div class="line"><span class="number">0</span> <span class="number">69</span></div><div class="line">class_list [<span class="number">1</span>]</div><div class="line">class_list [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</div><div class="line">windy</div><div class="line">class_list [<span class="number">0</span>]</div><div class="line">class_list [<span class="number">0</span>, <span class="number">1</span>]</div><div class="line">class_list [<span class="number">0</span>]</div><div class="line">class_list [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</div><div class="line">class_list [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</div><div class="line">windy</div><div class="line">class_list [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</div><div class="line">class_list [<span class="number">0</span>, <span class="number">0</span>]</div><div class="line"></div><div class="line">In [<span class="number">111</span>]: my_tree_c</div><div class="line">Out[<span class="number">111</span>]:</div><div class="line">&#123;<span class="string">'outlook'</span>: &#123;<span class="number">1</span>: &#123;<span class="string">'humidity'</span>: &#123;<span class="string">'&lt;=90'</span>: &#123;<span class="string">'temperature'</span>: &#123;<span class="string">'&lt;=69'</span>: <span class="number">1</span>,</div><div class="line">      <span class="string">'&gt;69'</span>: &#123;<span class="string">'windy'</span>: &#123;<span class="number">0</span>: <span class="number">0</span>, <span class="number">1</span>: <span class="number">0</span>&#125;&#125;&#125;&#125;,</div><div class="line">    <span class="string">'&gt;90'</span>: <span class="number">0</span>&#125;&#125;,</div><div class="line">  <span class="number">2</span>: <span class="number">1</span>,</div><div class="line">  <span class="number">3</span>: &#123;<span class="string">'windy'</span>: &#123;<span class="number">0</span>: <span class="number">1</span>, <span class="number">1</span>: <span class="number">0</span>&#125;&#125;&#125;&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;决策树（ID3）&quot;&gt;&lt;a href=&quot;#决策树（ID3）&quot; class=&quot;headerlink&quot; title=&quot;决策树（ID3）&quot;&gt;&lt;/a&gt;决策树（ID3）&lt;/h1&gt;&lt;h2 id=&quot;决策树的构建&quot;&gt;&lt;a href=&quot;#决策树的构建&quot; class=&quot;headerli
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>kNN and kd-tree</title>
    <link href="http://yoursite.com/2017/02/15/kNN-and-kd-tree/"/>
    <id>http://yoursite.com/2017/02/15/kNN-and-kd-tree/</id>
    <published>2017-02-15T07:53:55.000Z</published>
    <updated>2017-02-18T14:45:17.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="k-近邻算法"><a href="#k-近邻算法" class="headerlink" title="k-近邻算法"></a>k-近邻算法</h1><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>存在一组带标签的训练集[1]，每当有新的不带标签的样本[2]出现时，将训练集中数据的特征与测试集的特征逐个比较，通过某种测度来提取出与测试集最相似的k个训练集样本，然后将这k个样本中占大多数[4]的标签赋予测试集样本。</p>
<h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p>对测试集中的每个点依次执行如下操作：</p>
<ol>
<li><p>计算训练集中的每个点与当前点的距离</p>
</li>
<li><p>按照距离递增次序排序</p>
</li>
<li><p>在排序好的点中选取前k个点</p>
</li>
<li><p>统计出k个点中不同类别的出现频率</p>
</li>
<li><p>选择频率最高的类别为当前点的预测分类</p>
<p>​</p>
</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>首先创建测试数据集</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDataset</span><span class="params">()</span>:</span></div><div class="line">    group = array([[<span class="number">1.0</span>, <span class="number">1.1</span>], [<span class="number">1.0</span>, <span class="number">1.0</span>], [<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0.1</span>]])</div><div class="line">    labels = [<span class="string">'A'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>]</div><div class="line">    <span class="keyword">return</span> group, labels</div></pre></td></tr></table></figure>
<p>返回预测分类</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify0</span><span class="params">(inX, dataSet, labels, k)</span>:</span></div><div class="line">    dataSetSize = dataSet.shape[<span class="number">0</span>]</div><div class="line">    diffMat = tile(inX, (dataSetSize, <span class="number">1</span>)) - dataSet</div><div class="line">    sqDiffMat = diffMat ** <span class="number">2</span></div><div class="line">    sqDistances = sqDiffMat.sum(axis=<span class="number">1</span>)</div><div class="line">    distances = sqDistances**<span class="number">0.5</span></div><div class="line">    sortedDistIndices = distances.argsort()</div><div class="line">    classCount = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</div><div class="line">        voteIlabel = labels[sortedDistIndices[i]]</div><div class="line">        classCount[voteIlabel] = classCount.get(voteIlabel, <span class="number">0</span>) + <span class="number">1</span></div><div class="line">    <span class="comment"># the return of sorted() is a list and its item is a tuple</span></div><div class="line">    sortedClassCount = sorted(classCount.items(),</div><div class="line">                             key=operator.itemgetter(<span class="number">1</span>),reverse=<span class="keyword">True</span>)</div><div class="line">    <span class="keyword">return</span> sortedClassCount[<span class="number">0</span>][<span class="number">0</span>] <span class="comment"># returns the predict class label</span></div></pre></td></tr></table></figure>
<h2 id="进一步探索"><a href="#进一步探索" class="headerlink" title="进一步探索"></a>进一步探索</h2><p>k-近邻算法的缺点在于当数据量很大时，拥有不可接受的空间复杂度以及时间复杂度</p>
<p>其次该算法最关键的地方在与超参k的选取。当k选取的过小时容易造成过拟合，反之容易造成欠拟合。考虑两个极端情况，当k=1时，该算法又叫最近邻算法；当k=N[3]时，表示直接从原始数据中选取占比最大的类别，显然这个算法太naive了。</p>
<p>为了解决kNN算法时间复杂度的问题，最关键的便是在于如何对数据进行快速的k近邻搜索，一种解决方法是引入kd树来进行加速。</p>
<h3 id="kd树"><a href="#kd树" class="headerlink" title="kd树"></a>kd树</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>以二维空间为例，假设有6个二维数据点{(2, 3), (5, 4), (9, 6), (4, 7), (8, 1), (7, 2)}，可以用下图来表明kd树所能达到的效果:</p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/kd-overview" alt="kd-overview"></p>
<p>kd树算法主要分为两个部分：</p>
<ol>
<li>kd树数据结构的建立</li>
<li>在kd树上进行查找</li>
</ol>
<p>kd树是一种对k维空间上的数据点进行存储以便进行高效查找的树形数据结构，属于二叉树。构造kd树相当于不断用垂直于坐标轴的超平面对k维空间进行划分，构成一系列k维超矩形区域。kd树的每一个结点对应一个超矩形区域，表示一个空间范围。</p>
<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>下表给出每个结点主要包含的数据结构:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">域名</th>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Node-data</td>
<td style="text-align:center">数据矢量</td>
<td style="text-align:center">数据集中的某个数据点，k维矢量</td>
</tr>
<tr>
<td style="text-align:center">Split</td>
<td style="text-align:center">整数</td>
<td style="text-align:center">垂直于分割超平面的方向轴序号</td>
</tr>
<tr>
<td style="text-align:center">Left</td>
<td style="text-align:center">kd树</td>
<td style="text-align:center">由位于该节点分割超平面左子空间内所有数据点构成的kd树</td>
</tr>
<tr>
<td style="text-align:center">Right</td>
<td style="text-align:center">kd树</td>
<td style="text-align:center">由位于该节点分割超平面右子空间内所有数据点构成的kd树</td>
</tr>
</tbody>
</table>
</div>
<h5 id="建立树伪代码"><a href="#建立树伪代码" class="headerlink" title="建立树伪代码"></a>建立树伪代码</h5><p>下面给出构建kd树的伪代码：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>算法：构建k-d树（createKDTree）</th>
</tr>
</thead>
<tbody>
<tr>
<td>输入：数据点集Data-set</td>
</tr>
<tr>
<td>输出：Kd，类型为k-d tree</td>
</tr>
<tr>
<td>1. If Data-set为空，则返回空的k-d tree</td>
</tr>
<tr>
<td>2. 调用节点生成程序：                                                                                                                                                 （1）确定split域：对于所有描述子数据（特征矢量），统计它们在每个维上的数据方差。以SURF特征为例，描述子为64维，可计算64个方差。挑选出最大值，对应的维就是split域的值。数据方差大表明沿该坐标轴方向上的数据分散得比较开，在这个方向上进行数据分割有较好的分辨率；                                                                           （2）确定Node-data域：数据点集Data-set按其第split域的值排序。位于正中间的那个数据点被选为Node-data。此时新的Data-set’ = Data-set\Node-data（除去其中Node-data这一点）。</td>
</tr>
<tr>
<td>3. dataleft = {d属于Data-set’ &amp;&amp; d[split] ≤ Node-data[split]}                                                                                                                        dataright = {d属于Data-set’ &amp;&amp; d[split] &gt; Node-data[split]}</td>
</tr>
<tr>
<td>4. left = 由（dataleft）建立的k-d tree，即递归调用createKDTree（dataleft）并设置left的parent域为Kd；                                                                                                                                                               right = 由（dataright）建立的k-d tree，即调用createKDTree（dataleft）并设置right的parent域为Kd。</td>
</tr>
</tbody>
</table>
</div>
<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>用最开始的6个二维数据点的例子，来具体化这个过程：</p>
<ol>
<li><p>确定split域的首先该取的值。分别计算x，y方向上数据的方差得知x方向上的方差最大，所以split域值首先取0，也就是x轴方向；</p>
</li>
<li><p>确定Node-data的域值。根据x轴方向的值2,5,9,4,8,7排序选出中值为7，所以Node-data = (7, 2)。这样，该节点的分割超平面就是通过(7, 2)并垂直于split = 0（x轴）的直线x = 7；</p>
</li>
<li><p>确定左子空间和右子空间。分割超平面x = 7将整个空间分为两部分，如下图所示。x &lt; = 7的部分为左子空间，包含3个节点{(2, 3), (5, 4), (4, 7)}；另一部分为右子空间，包含2个节点{(9, 6), (8, 1)}。</p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/kd-construct-step1" alt="kd-construct-step1"></p>
</li>
</ol>
<p>如算法所述，k-d树的构建是一个递归的过程。然后对左子空间和右子空间内的数据重复根节点的过程就可以得到下一级子节点（5,4）和（9,6）（也就是左右子空间的’根’节点），同时将空间和数据集进一步细分。如此反复直到空间中只包含一个数据点，如图1所示。最后生成的k-d树如下图所示。</p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/kd-construct-step2" alt="kd-construct-step2"></p>
<p>注意：每一级节点旁边的’x’和’y’表示以该节点分割左右子空间时split所取的值。</p>
<p><strong>这里进行一点补充说明，kd树其实就是二叉树，其与普通的二叉查找树不同之处在于，其每一层根据split的维度进行二叉拆分。具体来说，根据上图，第一层的拆分是根据x，那么其左孩子的x值就小于根结点的x值，右孩子则反之。y值则没有规定（这里出现的左大右小只是纯粹的巧合）。第二层是根据y值来进行split，因此第三层的规律显而易见。</strong></p>
<h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><p><strong><em>运行环境：Windows 10 Pro 64-bit x64-based(Ver. 10.0.14393), Python 3.5.2, Anaconda 4.1.1(64-bit), IPython 5.0.0, Windows CMD</em></strong>, </p>
<p><em>kdTreeCreate.py</em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> kdTreeNode <span class="keyword">import</span> *</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDataSet</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">""" Create the test dataset.</span></div><div class="line"></div><div class="line">    Returns:</div><div class="line">        A numpy array that contains the test data.</div><div class="line">    """</div><div class="line"></div><div class="line">    dataSet = np.array([[<span class="number">2</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">4</span>], [<span class="number">9</span>, <span class="number">6</span>],</div><div class="line">                        [<span class="number">4</span>, <span class="number">7</span>], [<span class="number">8</span>, <span class="number">1</span>], [<span class="number">7</span>, <span class="number">2</span>]])</div><div class="line">    <span class="keyword">return</span> dataSet</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">(dataSet)</span>:</span></div><div class="line">    <span class="string">""" Split the given dataset.</span></div><div class="line"></div><div class="line">    Returns:</div><div class="line">        LeftDataSet: A kdTreeNode object.</div><div class="line">        RightDataSet: A kdTreeNode object.</div><div class="line">        NodeData: A tuple.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># Ensure the dimension to split</span></div><div class="line">    dimenIndex = np.var(dataSet, axis=<span class="number">0</span>).argmax()</div><div class="line">    partitionDataSet = dataSet[:, dimenIndex]</div><div class="line">    <span class="comment"># print(partitionDataSet)</span></div><div class="line"></div><div class="line">    <span class="comment"># Ensure the position to split</span></div><div class="line">    partitionDataSetArgSort = partitionDataSet.argsort()</div><div class="line">    <span class="comment"># print(partitionDataSetArgSort)</span></div><div class="line">    lenOfPartitionDataSetArgSort = len(partitionDataSetArgSort)</div><div class="line">    <span class="keyword">if</span> lenOfPartitionDataSetArgSort % <span class="number">2</span> == <span class="number">0</span>:</div><div class="line">        posIndex = lenOfPartitionDataSetArgSort // <span class="number">2</span></div><div class="line">        splitIndex = partitionDataSetArgSort[posIndex]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        posIndex = (lenOfPartitionDataSetArgSort - <span class="number">1</span>) // <span class="number">2</span></div><div class="line">        splitIndex = partitionDataSetArgSort[posIndex]</div><div class="line">    <span class="comment"># print(splitIndex)</span></div><div class="line"></div><div class="line">    <span class="comment"># Split</span></div><div class="line">    nodeData = dataSet[splitIndex]</div><div class="line">    leftIndeies = partitionDataSetArgSort[:posIndex]</div><div class="line">    rightIndeies = partitionDataSetArgSort[posIndex + <span class="number">1</span>:]</div><div class="line">    leftDataSet = dataSet[leftIndeies]</div><div class="line">    rightDataSet = dataSet[rightIndeies]</div><div class="line">    <span class="keyword">return</span> nodeData, dimenIndex, leftDataSet, rightDataSet</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">createKDTree</span><span class="params">(dataSet)</span>:</span></div><div class="line">    <span class="string">""" Create the KD tree.</span></div><div class="line"></div><div class="line">    Returns:</div><div class="line">        A kdTreeNode object.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="keyword">if</span> len(dataSet) == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span></div><div class="line">    nodeData, dimenIndex, leftDataSet, rightDataSet = split(dataSet)</div><div class="line">    <span class="comment"># print(nodeData, dimenIndex, leftDataSet, rightDataSet)</span></div><div class="line">    node = kdTreeNode(nodeData, dimenIndex)</div><div class="line">    node.setLeft(createKDTree(leftDataSet))</div><div class="line">    node.setRight(createKDTree(rightDataSet))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> node</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">midTravel</span><span class="params">(node)</span>:</span></div><div class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span></div><div class="line">    midTravel(node.getLeft())</div><div class="line">    print(node.getData())</div><div class="line">    midTravel(node.getRight())</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    dataSet = createDataSet()</div><div class="line">    node = createKDTree(dataSet)</div><div class="line">    midTravel(node)</div></pre></td></tr></table></figure>
<p><em>kdTreeNode.py</em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">kdTreeNode</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">""" Class of k-d tree nodes</span></div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data=None, split=None, left=None, right=None)</span>:</span></div><div class="line">        self.__data = data</div><div class="line">        self.__split = split</div><div class="line">        self.__left = left</div><div class="line">        self.__right = right</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getData</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__data</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setData</span><span class="params">(self, data)</span>:</span></div><div class="line">        self.__data = data</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSplit</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__split</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setSplit</span><span class="params">(self, split)</span>:</span></div><div class="line">        self.__split = split</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getLeft</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__left</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setLeft</span><span class="params">(self, left)</span>:</span></div><div class="line">        self.__left = left</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getRight</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__right</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setRight</span><span class="params">(self, right)</span>:</span></div><div class="line">        self.__right = right</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">In [1]: run kdTreeCreate.py</div><div class="line">-------------------------------------</div><div class="line">[2 3]</div><div class="line">[5 4]</div><div class="line">[4 7]</div><div class="line">[7 2]</div><div class="line">[8 1]</div><div class="line">[9 6]</div></pre></td></tr></table></figure>
<p>时间复杂度：</p>
<p>N个K维数据进行查找操作时时间复杂度为 $t=O(KN^{2})$</p>
<p>下面就要在已经建立好的kd树上进行查找操作。</p>
<h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p>kd树中进行的查找与普通的查找操作存在较大的差异，其目的是为了找出与查询点距离最近的点。</p>
<p>星号表示要查询的点(2.1, 3.1)。通过二叉搜索，顺着搜索路径很快就能找到最邻近的近似点，也就是叶子节点(2, 3)。而找到的叶子节点并不一定就是最邻近的，最邻近肯定距离查询点更近，应该位于以查询点为圆心且通过叶子节点的圆域内。为了找到真正的最近邻，还需要进行’回溯’操作：算法沿搜索路径反向查找是否有距离查询点更近的数据点。此例中先从(7, 2)点开始进行二叉查找，然后到达(5, 4)，最后到达(2, 3)，此时搜索路径中的节点为&lt;(7, 2), (5, 4), (2, 3)&gt;，首先以(2, 3)作为当前最近邻点，计算其到查询点(2.1, 3.1)的距离为0.1414，然后回溯到其父节点(5, 4)，并判断在该父节点的其他子节点空间中是否有距离查询点更近的数据点。以(2.1, 3.1)为圆心，以0.1414为半径画圆，如图4所示。发现该圆并不和超平面y = 4交割，因此不用进入(5, 4)节点右子空间中去搜索。</p>
<p>再回溯到(7, 2)，以(2.1, 3.1)为圆心，以0.1414为半径的圆更不会与x = 7超平面交割，因此不用进入(7, 2)右子空间进行查找。至此，搜索路径中的节点已经全部回溯完，结束整个搜索，返回最近邻点(2, 3)，最近距离为0.1414。</p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/kd-tree-search-1.png" alt="kd-tree-search-1"></p>
<p>一个复杂点了例子如查找点为(2, 4.5)。同样先进行二叉查找，先从(7, 2)查找到(5, 4)节点，在进行查找时是由y = 4为分割超平面的，由于查找点为y值为4.5，因此进入右子空间查找到(4, 7)，形成搜索路径&lt;(7, 2), (5, 4), (4, 7)&gt;，取(4, 7)为当前最近邻点，计算其与目标查找点的距离为3.202。然后回溯到(5, 4)，计算其与查找点之间的距离为3.041。以(2, 4.5)为圆心，以3.041为半径作圆。</p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/kd-tree-search-2.png" alt="kd-tree-search-2"></p>
<p>可见该圆和y = 4超平面交割，所以需要进入(5, 4)左子空间进行查找。此时需将(2, 3)节点加入搜索路径中得&lt;(7, 2), (2, 3)&gt;。回溯至(2, 3)叶子节点，(2, 3)距离(2, 4.5)比(5, 4)要近，所以最近邻点更新为(2, 3)，最近距离更新为1.5。回溯至(7, 2)，以(2, 4.5)为圆心1.5为半径作圆，并不和x = 7分割超平面交割。至此，搜索路径回溯完。返回最近邻点(2, 3)，最近距离1.5。</p>
<p><img src="http://o7ie0tcjk.bkt.clouddn.com/kd-tree-search-3.png" alt="kd-tree-search-2"></p>
<p>k-d树查询算法的伪代码如下所示。</p>
<h5 id="查找伪代码"><a href="#查找伪代码" class="headerlink" title="查找伪代码"></a>查找伪代码</h5><div class="table-container">
<table>
<thead>
<tr>
<th>算法： k-d树最邻近查找</th>
</tr>
</thead>
<tbody>
<tr>
<td>输入：Kd，    //k-d tree类型</td>
</tr>
<tr>
<td>target  //查询数据点</td>
</tr>
<tr>
<td>输出：nearest， //最邻近数据点</td>
</tr>
<tr>
<td>dist      //最邻近数据点和查询点间的距离</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">1. If Kd为NULL，则设dist为infinite并返回</div><div class="line"></div><div class="line">2. //进行二叉查找，生成搜索路径</div><div class="line">   Kd_point = &amp;Kd；                   //Kd-point中保存k-d tree根节点地址</div><div class="line">   nearest = Kd_point -&gt; Node-data；  //初始化最近邻点</div><div class="line">   while（Kd_point）</div><div class="line">   　　push（Kd_point）到search_path中； //search_path是一个堆栈结构，存储着搜索路径节点指针</div><div class="line"> /*** If Dist（nearest，target） &gt; Dist（Kd_point -&gt; Node-data，target）</div><div class="line">   　　　　nearest  = Kd_point -&gt; Node-data；    //更新最近邻点</div><div class="line">   　　　　Max_dist = Dist(Kd_point，target）；  //更新最近邻点与查询点间的距离  ***/</div><div class="line">   　　s = Kd_point -&gt; split；                       //确定待分割的方向</div><div class="line">   　　If target[s] &lt;= Kd_point -&gt; Node-data[s]     //进行二叉查找</div><div class="line">   　　　　Kd_point = Kd_point -&gt; left；</div><div class="line">   　　else</div><div class="line">   　　　　Kd_point = Kd_point -&gt;right；</div><div class="line">   nearest = search_path中最后一个叶子节点； //注意：二叉搜索时不比计算选择搜索路径中的最邻近点，这部分已被注释</div><div class="line">   Max_dist = Dist（nearest，target）；    //直接取最后叶子节点作为回溯前的初始最近邻点</div><div class="line">   </div><div class="line">3. //回溯查找</div><div class="line">   while（search_path != NULL）</div><div class="line">   　　back_point = 从search_path取出一个节点指针；   //从search_path堆栈弹栈</div><div class="line">   　　s = back_point -&gt; split；                   //确定分割方向</div><div class="line">   　　If Dist（target[s]，back_point -&gt; Node-data[s]） &lt; Max_dist   //判断还需进入的子空间</div><div class="line">   　　　　If target[s] &lt;= back_point -&gt; Node-data[s]</div><div class="line">   　　　　　　Kd_point = back_point -&gt; right；  //如果target位于左子空间，就应进入右子空间</div><div class="line">   　　　　else</div><div class="line">   　　　　　　Kd_point = back_point -&gt; left;    //如果target位于右子空间，就应进入左子空间</div><div class="line">   　　　　将Kd_point压入search_path堆栈；</div><div class="line">   　　If Dist（nearest，target） &gt; Dist（Kd_Point -&gt; Node-data，target）</div><div class="line">   　　　　nearest  = Kd_point -&gt; Node-data；                 //更新最近邻点</div><div class="line">   　　　　Min_dist = Dist（Kd_point -&gt; Node-data,target）；  //更新最近邻点与查询点间的距离</div></pre></td></tr></table></figure>
<h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><p><em>kdTreeSearch.py</em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_dist</span><span class="params">(node, target)</span>:</span></div><div class="line">    <span class="string">""" Calculate the distance between the node</span></div><div class="line">    and the target.</div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        node: The kd-tree's one node.</div><div class="line">        target: Search target.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        dist: The distance between the two nodes.</div><div class="line">    """</div><div class="line"></div><div class="line">    node_data = np.array(node)</div><div class="line">    target_data = np.array(target)</div><div class="line"></div><div class="line">    square_dist_vector = (node_data - target_data) ** <span class="number">2</span></div><div class="line">    square_dist = np.sum(square_dist_vector)</div><div class="line">    dist = square_dist ** <span class="number">0.5</span></div><div class="line">    <span class="keyword">return</span> dist</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(root_node, target)</span>:</span></div><div class="line">    <span class="string">""" Search the nearest node of the target node</span></div><div class="line">    in the kd-tree that root node is the root_node</div><div class="line"></div><div class="line">    Arguments:</div><div class="line">        root_node: The kd-tree's root node.</div><div class="line">        target: Search target.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        nearest: The nearest node of the target node in the kd-tree.</div><div class="line">        min_dist: The nearest distance.</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> root_node <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        min_dist = float(<span class="string">'inf'</span>)</div><div class="line">        <span class="keyword">return</span> min_dist</div><div class="line"></div><div class="line">    <span class="comment"># Two-fork search</span></div><div class="line">    kd_point = root_node    <span class="comment"># Save the root node</span></div><div class="line">    nearest = kd_point.getData()    <span class="comment"># Initial the nearest node</span></div><div class="line">    search_path = []    <span class="comment"># Initial the search stack</span></div><div class="line">    <span class="keyword">while</span> kd_point:</div><div class="line">        search_path.append(kd_point)</div><div class="line">        split_index = kd_point.getSplit()   <span class="comment"># Ensure the split path</span></div><div class="line">        <span class="keyword">if</span> target[split_index] &lt;= kd_point.getData()[split_index]:</div><div class="line">            kd_point = kd_point.getLeft()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            kd_point = kd_point.getRight()</div><div class="line">    nearest = search_path.pop().getData()</div><div class="line">    min_dist = cal_dist(nearest, target)</div><div class="line"></div><div class="line">    <span class="comment"># Retrospect search</span></div><div class="line">    <span class="keyword">while</span> search_path:</div><div class="line">        back_point = search_path.pop()</div><div class="line">        <span class="comment"># Ensure the back-split path</span></div><div class="line">        back_split_index = back_point.getSplit()</div><div class="line">        <span class="comment"># Judge if needs to enter the subspace</span></div><div class="line">        <span class="keyword">if</span> cal_dist(target[back_split_index],</div><div class="line">                back_point.getData()[back_split_index]) &lt; min_dist:</div><div class="line">            <span class="comment"># If the target is in the left subspace, then enter the right</span></div><div class="line">            <span class="keyword">if</span> target[back_split_index] &lt;= back_point.getData()[back_split_index]:</div><div class="line">                kd_point = back_point.getRight()</div><div class="line">            <span class="comment"># Otherwise enter the left</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                kd_point = back_point.getLeft()</div><div class="line">            <span class="comment"># Add the node to the search path</span></div><div class="line">            <span class="keyword">if</span> kd_point <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">                search_path.append(kd_point)</div><div class="line">                <span class="keyword">if</span> cal_dist(nearest, target) &gt; cal_dist(kd_point.getData(), target):</div><div class="line">                    <span class="comment"># Update the nearest node</span></div><div class="line">                    nearest = kd_point.getData()</div><div class="line">                    <span class="comment"># Update the maximum distance</span></div><div class="line">                    min_dist = cal_dist(kd_point.getData(), target)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> nearest, min_dist</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">In [1]: run kdTreeCreate.py</div><div class="line">-------------------------------------</div><div class="line">[2 3]</div><div class="line">[5 4]</div><div class="line">[4 7]</div><div class="line">[7 2]</div><div class="line">[8 1]</div><div class="line">[9 6]</div><div class="line"></div><div class="line">In [2]: node</div><div class="line">-------------------------------------</div><div class="line">Out [2]: &lt;kdTreeNode.kdTreeNode at 0x26bff22f160&gt;</div><div class="line"></div><div class="line">In [3]: import kdTreeSearch</div><div class="line"></div><div class="line">In [4]: nearest, min_dist = kdTreeSearch.search(node, [2.1, 3.1])</div><div class="line"></div><div class="line">In [5]: nearest</div><div class="line">-------------------------------------</div><div class="line">Out [5]: array([2, 3])</div><div class="line"></div><div class="line">In [6]: min_dist</div><div class="line">-------------------------------------</div><div class="line">Out [6]: 0.14142135623730964</div><div class="line"></div><div class="line">In [7]: nearest, min_dist = kdTreeSearch.search(node, [2, 4.5])</div><div class="line"></div><div class="line">In [8]: nearest</div><div class="line">-------------------------------------</div><div class="line">Out [8]: array([2, 3])</div><div class="line"></div><div class="line">In [9]: min_dist</div><div class="line">-------------------------------------</div><div class="line">Out [9]: 1.5</div></pre></td></tr></table></figure>
<p>时间复杂度：</p>
<p>N个结点的K维kd树进行查找操作时最坏时间复杂度为 $t_{worst}=O(KN^{1-1/k})$</p>
<p><strong>根据相关研究，当数据维度为K时，只有当数据量N满足 $N&gt;&gt;2^K$ 时，才能达到高效的搜索（K&lt;20，超过20维时可采用ball-tree算法），所以引出了一系列的改进算法（BBF算法，和一系列M树、VP树、MVP树等高维空间索引树），留待后续补充。</strong></p>
<h3 id="采用kd树的k-近邻算法"><a href="#采用kd树的k-近邻算法" class="headerlink" title="采用kd树的k-近邻算法"></a>采用kd树的k-近邻算法</h3><p>接下来便是将两者相结合。</p>
<p>[1] 说是训练集其实是不准确的，因为k-近邻算法是一个无参数方法，只存在一个超参k，因此其不存在一个训练的过程</p>
<p>[2] 测试集</p>
<p>[3] N代表训练集的数目</p>
<p>[4] 多数表决</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;k-近邻算法&quot;&gt;&lt;a href=&quot;#k-近邻算法&quot; class=&quot;headerlink&quot; title=&quot;k-近邻算法&quot;&gt;&lt;/a&gt;k-近邻算法&lt;/h1&gt;&lt;h2 id=&quot;工作原理&quot;&gt;&lt;a href=&quot;#工作原理&quot; class=&quot;headerlink&quot; title=&quot;工
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/02/15/hello-world/"/>
    <id>http://yoursite.com/2017/02/15/hello-world/</id>
    <published>2017-02-15T07:44:56.195Z</published>
    <updated>2017-02-15T07:44:56.195Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
