<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Abracdabra</title>
  <subtitle>Do it yourself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-27T04:58:47.200Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ewan Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>k-Armed Bandit Problem</title>
    <link href="http://yoursite.com/2017/05/27/k-Armed-Bandit-Problem/"/>
    <id>http://yoursite.com/2017/05/27/k-Armed-Bandit-Problem/</id>
    <published>2017-05-27T04:27:49.000Z</published>
    <updated>2017-05-27T04:58:47.200Z</updated>
    
    <content type="html"><![CDATA[<p>Consider the following learning problem. You are faced repeatedly with a choice among $k$ different options, or actions. After each choice you receive a numerical reward chosen from a stationary probability distribution that depends on the action you selected. Your objective is to maximize the expected total reward over some time period, for example, over 1000 action selections, or <em>time steps</em>.</p><p>This is the original form of the <em>k-armed bandit problem</em>. Each of the <em>k</em> actions has an excepted or mean reward given that action is selected; let us call this <em>value</em> of that action. We denote the action selected on time step <em>t</em> as $A<em>{t}$, and the corresponding reward as $R</em>{t}$. The value then of an arbitrary action <em>a</em>, denoted $q_{\star}(a)$, is the excepted reward given that <em>a</em> is selected:</p><script type="math/tex;mode=display">q_*(a) = \mathbb{E}[R_t|A_t=a]</script><p>If you knew the value of each action, then it would be trivial to solve the <em>k</em>-armed bandit problem: you would always select the action with highest value. We assume that you do not know the action values with certainty, although you may have estimates. We denote the estimated value of action <em>a</em> at time <em>t</em> as $Q<em>{t}(a) \approx q</em>{\star}(a)$.</p><p>We begin by looking more closely at some simple methods for estimating the values of actions and for using the estimates to make action selection decisions. Recall that the true value of an action is the mean reward when action is selected. One natural way to estimate this is by averaging the rewards actually received:</p><script type="math/tex;mode=display">Q_t(a) \doteq \frac{\text{sum of rewards when a taken prior to t}}{\text{number of times a taken prior to t}} = \frac{\sum_{i=1}^{t-1}R_i \cdot \mathbf{1}_{A_i=a}}{\sum_{i=1}^{t-1}\mathbf{1}_{A_i=a}}</script><p>where $\mathbf{1}<em>{\text{predicate}}$ denotes the random variable that is 1 if <em>predicate</em> is true and 0 if it is not. If the denominator is zero, then we instead define $Q_t(a)$ as some default value, such as $Q_1(a) = 0$. As the denominator goes to infinity, by the law of large numbers, $Q_t(a)$ converges to $q</em>{\star} (a)$. We call this the <strong><em>sample-average</em></strong> method for estimating action values because each estimate is an average of the sample of relevant rewards.</p><p>The simplest action selection rule is to select the action (or one of the actions) with highest estimated action value, that is, to select at step <em>t</em> one of the greedy actions, $A_t^\star$ for which $Q_t(A_t^\star) = \max_a Q_t(a)$. This <em>greedy</em> action selection method can be written as</p><script type="math/tex;mode=display">A_t \doteq argmax_a Q_t(a)</script><p>Naturally, we could use the <em>$\epsilon$-greedy</em> method rather the <em>greedy</em> method. We’ll show their difference on the performance. Now, let’s jump into the implementation details. In order to be able to see the results quickly, we set to <em>k</em> to be <em>10</em>. The first, we generate 10 stationary probability distributions that we’ll sample from to generate action values. The generate method is below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data=np.random.randn(<span class="number">200</span>,<span class="number">10</span>) + np.random.randn(<span class="number">10</span>)</div></pre></td></tr></table></figure><p>We first generate randomly 10 true excepted values by <code>np.random.randn(10)</code>, then I’m going to change the variance to 1. So we get 10 stationary probability distributions. The visualizations are as follows:</p><p><img src="http://o7ie0tcjk.bkt.clouddn.com/rl/k-armed-bandit/action_value_distributions.png" alt="action_value_distributions"></p><p>We’re going to compare how different $\epsilon$ values affect the end result.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">epsilonGreedy</span><span class="params">(nBandits, time)</span>:</span></div><div class="line">    epsilons = [<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0.01</span>]</div><div class="line">    bandits = []</div><div class="line">    <span class="keyword">for</span> epsInd, eps <span class="keyword">in</span> enumerate(epsilons):</div><div class="line">        bandits.append([Bandit(epsilon=eps, sampleAverages=<span class="keyword">True</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">0</span>, nBandits)])</div><div class="line">    bestActionCounts, averageRewards = banditSimulation(nBandits, time, bandits)</div><div class="line">    <span class="keyword">global</span> figureIndex</div><div class="line">    plt.figure(figureIndex)</div><div class="line">    figureIndex += <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> eps, counts <span class="keyword">in</span> zip(epsilons, bestActionCounts):</div><div class="line">        plt.plot(counts, label=<span class="string">'epsilon = '</span>+str(eps))</div><div class="line">    plt.xlabel(<span class="string">'Steps'</span>)</div><div class="line">    plt.ylabel(<span class="string">'% optimal action'</span>)</div><div class="line">    plt.legend()</div><div class="line">    plt.figure(figureIndex)</div><div class="line">    figureIndex += <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> eps, rewards <span class="keyword">in</span> zip(epsilons, averageRewards):</div><div class="line">        plt.plot(rewards, label=<span class="string">'epsilon = '</span>+str(eps))</div><div class="line">    plt.xlabel(<span class="string">'Steps'</span>)</div><div class="line">    plt.ylabel(<span class="string">'average reward'</span>)</div><div class="line">    plt.legend()</div></pre></td></tr></table></figure><p>Before we go into the details, we introduce the <strong>Bandit</strong> object first.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bandit</span>:</span></div><div class="line">    <span class="comment"># @kArm: # of arms</span></div><div class="line">    <span class="comment"># @epsilon: probability for exploration in epsilon-greedy algorithm</span></div><div class="line">    <span class="comment"># @initial: initial estimation for each action</span></div><div class="line">    <span class="comment"># @stepSize: constant step size for updating estimations</span></div><div class="line">    <span class="comment"># @sampleAverages: if True, use sample averages to update estimations instead of constant step size</span></div><div class="line">    <span class="comment"># @UCB: if not None, use UCB algorithm to select action</span></div><div class="line">    <span class="comment"># @gradient: if True, use gradient based bandit algorithm</span></div><div class="line">    <span class="comment"># @gradientBaseline: if True, use average reward as baseline for gradient based bandit algorithm</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, kArm=<span class="number">10</span>, epsilon=<span class="number">0.</span>, initial=<span class="number">0.</span>, stepSize=<span class="number">0.1</span>, sampleAverages=False, UCBParam=None, gradient=False, gradientBaseline=False, trueReward=<span class="number">0.</span>)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAction</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">takeAction</span><span class="params">(self, action)</span>:</span></div></pre></td></tr></table></figure><p>For now we just introduce <em>sample-average</em> method, so skip other methods parameters. Let us see the initialization method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, kArm=<span class="number">10</span>, epsilon=<span class="number">0.</span>, initial=<span class="number">0.</span>, stepSize=<span class="number">0.1</span>, sampleAverages=False, UCBParam=None,</span></span></div><div class="line">             gradient=False, gradientBaseline=False, trueReward=<span class="number">0.</span>):</div><div class="line">    self.k = kArm</div><div class="line">    self.stepSize = stepSize</div><div class="line">    self.sampleAverages = sampleAverages</div><div class="line">    self.indices = np.arange(self.k)</div><div class="line">    self.time = <span class="number">0</span></div><div class="line">    self.UCBParam = UCBParam</div><div class="line">    self.gradient = gradient</div><div class="line">    self.gradientBaseline = gradientBaseline</div><div class="line">    self.averageReward = <span class="number">0</span></div><div class="line">    self.trueReward = trueReward</div><div class="line"></div><div class="line">    <span class="comment"># real reward for each action</span></div><div class="line">    self.qTrue = []</div><div class="line"></div><div class="line">    <span class="comment"># estimation for each action</span></div><div class="line">    self.qEst = np.zeros(self.k)</div><div class="line"></div><div class="line">    <span class="comment"># # of chosen times for each action</span></div><div class="line">    self.actionCount = []</div><div class="line"></div><div class="line">    self.epsilon = epsilon</div><div class="line"></div><div class="line">    <span class="comment"># initialize real rewards with N(0,1) distribution and estimations with desired initial value</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, self.k):</div><div class="line">        self.qTrue.append(np.random.randn() + trueReward)</div><div class="line">        self.qEst[i] = initial</div><div class="line">        self.actionCount.append(<span class="number">0</span>)</div><div class="line"></div><div class="line">    self.bestAction = np.argmax(self.qTrue)</div></pre></td></tr></table></figure><p>There are some important attributes. <strong>time</strong> is a number that represents the time steps now. <strong>actionCount</strong> is the times that correspond actions have been taken prior to current time steps. <strong>qTrue</strong> is a list. And each item is the true excepted value corresponding to each action. <strong>qEst</strong> is the estimate value of each action. It’s initialized to zero. <strong>epsilon</strong> is the $\epsilon$. Next, in the for loop, we initialize real rewards with N(0, 1) distribution and estimations with desired initial value. At last, the <strong>bestAction</strong> store the current best action will be take.</p><p>The next method tell us how to get the next action should be take:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAction</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="comment"># explore</span></div><div class="line">    <span class="keyword">if</span> self.epsilon &gt; <span class="number">0</span>:</div><div class="line">        <span class="keyword">if</span> np.random.binomial(<span class="number">1</span>, self.epsilon) == <span class="number">1</span>:</div><div class="line">            np.random.shuffle(self.indices)</div><div class="line">            <span class="keyword">return</span> self.indices[<span class="number">0</span>]</div><div class="line"></div><div class="line">    <span class="comment"># exploit</span></div><div class="line">    <span class="keyword">if</span> self.UCBParam <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        UCBEst = self.qEst + \</div><div class="line">                 self.UCBParam * np.sqrt(np.log(self.time + <span class="number">1</span>) / (np.asarray(self.actionCount) + <span class="number">1</span>))</div><div class="line">        <span class="keyword">return</span> np.argmax(UCBEst)</div><div class="line">    <span class="keyword">if</span> self.gradient:</div><div class="line">        expEst = np.exp(self.qEst)</div><div class="line">        self.actionProb = expEst / np.sum(expEst)</div><div class="line">        <span class="keyword">return</span> np.random.choice(self.indices, p=self.actionProb)</div><div class="line">    <span class="keyword">return</span> np.argmax(self.qEst)</div></pre></td></tr></table></figure><p>We can skip the second and the third if statements (we’ll introduce this two methods later). If we use <em>greedy</em> method, we just return the action that has highest value. Otherwise, we’re choosing randomly at $\epsilon$ probability.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">takeAction</span><span class="params">(self, action)</span>:</span></div><div class="line">    <span class="comment"># generate the reward under N(real reward, 1)</span></div><div class="line">    reward = np.random.randn() + self.qTrue[action]</div><div class="line">    self.time += <span class="number">1</span></div><div class="line">    self.averageReward = (self.time - <span class="number">1.0</span>) / self.time * self.averageReward + reward / self.time</div><div class="line">    self.actionCount[action] += <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> self.sampleAverages:</div><div class="line">        <span class="comment"># update estimation using sample averages</span></div><div class="line">        self.qEst[action] += <span class="number">1.0</span> / self.actionCount[action] * (reward - self.qEst[action])</div><div class="line">    <span class="keyword">elif</span> self.gradient:</div><div class="line">        oneHot = np.zeros(self.k)</div><div class="line">        oneHot[action] = <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> self.gradientBaseline:</div><div class="line">            baseline = self.averageReward</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            baseline = <span class="number">0</span></div><div class="line">        self.qEst = self.qEst + self.stepSize * (reward - baseline) * (oneHot - self.actionProb)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment"># update estimation with constant step size</span></div><div class="line">        self.qEst[action] += self.stepSize * (reward - self.qEst[action])</div><div class="line">    <span class="keyword">return</span> reward</div></pre></td></tr></table></figure><p>Similarly, we just skip other if statements and focus on this row:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.qEst[action] += <span class="number">1.0</span> / self.actionCount[action] * (reward - self.qEst[action])</div></pre></td></tr></table></figure><p>This formula seems different with the earlier one. The action-value methods we have discussed so far all estimate action values as sample averages of observed rewards. We now turn to the question of how these averages can be computed in a computationally efficient manner, in particular, with constant memory and per-time-step computation.</p><p>To simplify notation we concentrate on a single action. Let $R_i$ now denote the reward received after <em>i</em>th selection of <em>this action</em>, and let $Q_n$ denote the estimate of its action value after it has been select $n-1$ times, which we can now write simply as</p><script type="math/tex;mode=display">Q_n \doteq \frac{R_1 + R_2 + \cdots + R_{n-1}}{n-1}</script><p>The obvious implementation would be to maintain a record of all the rewards and then perform this computation whenever the estimated value was needed. However, in this case the memory and computational requirements would grow over time as more rewards are seen.</p><p>It is easy to devise incremental formulas for updating averages with small, constant computation required to process each new reward. Given $Q_n$ and the <em>n</em>th reward, $R_n$, the new average of all <em>n</em> rewards can be computed by</p><script type="math/tex;mode=display">\begin{align}
    Q_{n+1} &\doteq \frac{1}{n}\sum_{i=1}^{n} R_i \\
              &= \frac{1}{n}(R_n + \sum_{i=1}^{n-1} R_i) \\
              &= \frac{1}{n}(R_n + (n-1) \frac{1}{n-1}\sum_{i=1}^{n-1} R_i) \\
              &= \frac{1}{n}(R_n + (n-1) Q_n) \\
              &= \frac{1}{n}(R_n + n Q_n - Q_n) \\
              &= Q_n + \frac{1}{n}[R_n - Q_n]
\end{align}</script><p>So this is why the code is look like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.qEst[action] += <span class="number">1.0</span> / self.actionCount[action] * (reward - self.qEst[action])</div></pre></td></tr></table></figure><p>Back to <strong>epsilonGreedy()</strong> method:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">epsilonGreedy</span><span class="params">(nBandits, time)</span>:</span></div><div class="line">    epsilons = [<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0.01</span>]</div><div class="line">    bandits = []</div><div class="line">    <span class="keyword">for</span> epsInd, eps <span class="keyword">in</span> enumerate(epsilons):</div><div class="line">        bandits.append([Bandit(epsilon=eps, sampleAverages=<span class="keyword">True</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">0</span>, nBandits)])</div><div class="line">    bestActionCounts, averageRewards = banditSimulation(nBandits, time, bandits)</div><div class="line">    <span class="keyword">global</span> figureIndex</div><div class="line">    plt.figure(figureIndex)</div><div class="line">    figureIndex += <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> eps, counts <span class="keyword">in</span> zip(epsilons, bestActionCounts):</div><div class="line">        plt.plot(counts, label=<span class="string">'epsilon = '</span>+str(eps))</div><div class="line">    plt.xlabel(<span class="string">'Steps'</span>)</div><div class="line">    plt.ylabel(<span class="string">'% optimal action'</span>)</div><div class="line">    plt.legend()</div><div class="line">    plt.figure(figureIndex)</div><div class="line">    figureIndex += <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> eps, rewards <span class="keyword">in</span> zip(epsilons, averageRewards):</div><div class="line">        plt.plot(rewards, label=<span class="string">'epsilon = '</span>+str(eps))</div><div class="line">    plt.xlabel(<span class="string">'Steps'</span>)</div><div class="line">    plt.ylabel(<span class="string">'average reward'</span>)</div><div class="line">    plt.legend()</div></pre></td></tr></table></figure><p>Now, we get <strong>nBandits</strong> bandits and each bandit has 10 arm. Then we use a bandit simulation to simulate this process.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">banditSimulation</span><span class="params">(nBandits, time, bandits)</span>:</span></div><div class="line">    bestActionCounts = [np.zeros(time, dtype=<span class="string">'float'</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">0</span>, len(bandits))]</div><div class="line">    averageRewards = [np.zeros(time, dtype=<span class="string">'float'</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">0</span>, len(bandits))]</div><div class="line">    <span class="keyword">for</span> banditInd, bandit <span class="keyword">in</span> enumerate(bandits):</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, nBandits):</div><div class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">0</span>, time):</div><div class="line">                action = bandit[i].getAction()</div><div class="line">                reward = bandit[i].takeAction(action)</div><div class="line">                averageRewards[banditInd][t] += reward</div><div class="line">                <span class="keyword">if</span> action == bandit[i].bestAction:</div><div class="line">                    bestActionCounts[banditInd][t] += <span class="number">1</span></div><div class="line">        bestActionCounts[banditInd] /= nBandits</div><div class="line">        averageRewards[banditInd] /= nBandits</div><div class="line">    <span class="keyword">return</span> bestActionCounts, averageRewards</div></pre></td></tr></table></figure><p>The <strong>bandits</strong> is a list that has three item. Each item is a list that contains <strong>nBandits</strong> bandits that has a corresponding epsilon value. We calculate the average total reward of 2000 bandits is to eliminate the effect of noise. Ok, let us see the final result.</p><p><img src="http://o7ie0tcjk.bkt.clouddn.com/rl/k-armed-bandit/epsilon_greedy_optimal_action.png" alt="epsilon_greedy_optimal_action"><img src="http://o7ie0tcjk.bkt.clouddn.com/rl/k-armed-bandit/epsilon_greedy_average_reward.png" alt="epsilon_greedy_average_reward"></p><p>We can see the algorithm reaches the best performance when epsilon is set to 0.1.</p><p>The averaging methods discussed so far are appropriate in a stationary environment, but not if the bandit is changing over time. As noted earlier, we often encounter reinforcement learning problems that are effectively nonstationary. In such cases it makes sense to weight recent rewards more heavily than long-past ones. One of the most popular ways of doing this is to use a constant step-size parameter. For example, the incremental update rule for updating an average $Q_n$ of the $n-1$ past rewards is modified to be</p><script type="math/tex;mode=display">Q_{n+1} \doteq Q_n + \alpha [R_n - Q_n]</script><p>where the step-size parameter $\alpha \in (0, 1]$ is constant. This results in $Q_{n+1}$ being a weighted average of past rewards and the initial estimate $Q_1$:</p><script type="math/tex;mode=display">\begin{align}
Q_{n+1} &\doteq Q_n + \alpha [R_n - Q_n] \\
          &= \alpha R_n + (1 - \alpha) Q_n \\
          &= \alpha R_n + (1 - \alpha) [\alpha R_{n-1} + (1 - \alpha) Q_{n-1}] \\
          &= \alpha R_n + (1 - \alpha) \alpha R_{n-1} + (1 - \alpha) ^2 Q_{n-1} \\
          &= \alpha R_n + (1 - \alpha) \alpha R_{n-1} + (1 - \alpha) ^2 R_{n-1} + \cdots + (1 - \alpha) ^ {n-1} \alpha R_1 + (1 - \alpha) ^ n Q_1 \\
          &= (1 - \alpha) ^ n Q_1 + \sum_{i=1}^{n} \alpha (1 - \alpha) ^ {n-i} R_i
\end{align}</script><p>We call this a <em>weighted average</em> because the sum of the weights is 1. In fact, the weight decays exponentially according to the exponent on $1-\alpha$. According, this is sometimes called an <em>exponential, recency-weighted average</em>.</p><p>Sometimes it is convenient to vary the step-size parameter from step to step. Let $\alpha_n(a)$ denote the step-size parameter used to process the reward received after <em>n</em>th selection of action <em>a</em>. As we noted, the choice $\alpha_n(a)=\frac{1}{n}$ results in the sample-average method, which is guaranteed to converge to the true action values by the law of the large numbers. A well-known result in stochastic approximation theory gives us the conditions required to assure convergence with probability 1:</p><script type="math/tex;mode=display">\sum_{n=1}^{\infty}\alpha_{n}(a) = \infty \; \text{and} \; \sum_{n=1}^{\infty}\alpha_{n}^{2}(a) < \infty</script><p>All the methods we have discussed so far are dependent to some extent on the initial action-value estimates, $Q_1(a)$. <strong>In the language of statistics, these methods are <em>biased</em> by their initial estimates. For the sample-average methods, the bias disappears once all actions have been selected at least once, but for methods with constant $\alpha$ (weighted avetrage), the bias is permanent, though decreasing over time. In practice, this kind of bias is usually not a problem and can sometimes be very helpful.</strong> The downside is that the initial estimates become, in effect, a set of parameters that must be picked by the user, if only to set them all to zero. The upside is that they provide an easy way to supply some prior knowledge about what level of rewards can be excepted. So, let us do a experiment. The first we set them all to zero and the we set them all to a constant, 5.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">optimisticInitialValues</span><span class="params">(nBandits, time)</span>:</span></div><div class="line">    bandits = [[], []]</div><div class="line">    bandits[<span class="number">0</span>] = [Bandit(epsilon=<span class="number">0</span>, initial=<span class="number">5</span>, stepSize=<span class="number">0.1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">0</span>, nBandits)]</div><div class="line">    bandits[<span class="number">1</span>] = [Bandit(epsilon=<span class="number">0.1</span>, initial=<span class="number">0</span>, stepSize=<span class="number">0.1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">0</span>, nBandits)]</div><div class="line">    bestActionCounts, averageRewards = banditSimulation(nBandits, time, bandits)</div><div class="line">    <span class="keyword">global</span> figureIndex</div><div class="line">    plt.figure(figureIndex)</div><div class="line">    figureIndex += <span class="number">1</span></div><div class="line">    plt.plot(bestActionCounts[<span class="number">0</span>], label=<span class="string">'epsilon = 0, q = 5'</span>)</div><div class="line">    plt.plot(bestActionCounts[<span class="number">1</span>], label=<span class="string">'epsilon = 0.1, q = 0'</span>)</div><div class="line">    plt.xlabel(<span class="string">'Steps'</span>)</div><div class="line">    plt.ylabel(<span class="string">'% optimal action'</span>)</div><div class="line">    plt.legend()</div><div class="line">    plt.figure(figureIndex)</div><div class="line">    figureIndex += <span class="number">1</span></div><div class="line">    plt.plot(averageRewards[<span class="number">0</span>], label=<span class="string">'epsilon=0, initial=5, stepSize=0.1'</span>)</div><div class="line">    plt.plot(averageRewards[<span class="number">1</span>], label=<span class="string">'epsilon=0.1, initial=0, stepSize=0.1'</span>)</div><div class="line">    plt.xlabel(<span class="string">'Steps'</span>)</div><div class="line">    plt.ylabel(<span class="string">'average reward'</span>)</div><div class="line">    plt.legend()</div></pre></td></tr></table></figure><p>The <strong>Bandit</strong> object’s <strong>takeAction()</strong> has a little difference:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.qEst[action] += self.stepSize * (reward - self.qEst[action])</div></pre></td></tr></table></figure><p>The result is as follows:</p><p><img src="http://o7ie0tcjk.bkt.clouddn.com/rl/k-armed-bandit/optimistic_initial_values.png" alt="optimistic_initial_value_optimal_action"><img src="http://o7ie0tcjk.bkt.clouddn.com/rl/k-armed-bandit/optimistic_initial_values_average_reward.png" alt="optimistic_initial_value_optimal_action"></p><p>We can see it reaches the better performance than the $\epsilon$-greedy method, when they are all used the weighted average method. Notice that the $\epsilon$-greedy with weighted-average method is worsen than the $\epsilon$-greedy with sample-average method.</p><p>We regard it as a simple trick that can be quite effective on stationary problems, but it is far from being a generally useful approach to encouraging exploration. For example, it is not well suited to nonstationary problems because its drive for exploration is inherently temporary. If the task changes, creating a renewed need for exploration, this method cannot help. Indeed, any method that focuses on the initial state in any special way is unlikely to help with the general nonstationary case.</p><p>Exploration is needed because the estimates of the action values are uncertain. The greedy actions are those that look best at present, but some of the other actions may actually be better. $\epsilon$-greedy action selection forces the non-greedy actions to be tried, but indiscriminately, with no preference for those that are nearly greedy or particularly uncertain. It would be better to select among the non-greedy actions according to their potential for actually being optimal, taking into account both how close their estimates are to being maximal and the uncertainties in those estimates. One effective way of doing this is to select actions as</p><script type="math/tex;mode=display">A_t \doteq argmax_a \left [Q_t(a) + c\sqrt{\frac{\ln{t}}{N_t(a)}}\ \right]</script><p>where $N_t(a)$ denotes the number of times that action <em>a</em> has been selected prior to time <em>t</em>, and the number $c&gt;0$ controls the degree of exploration. If $N_t(a)=0$, then <em>a</em> is considered to be a maximizing action. The idea of this is called <em>upper confidence bound</em> (UCB). Let us implement it.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ucb</span><span class="params">(nBandits, time)</span>:</span></div><div class="line">    bandits = [[], []]</div><div class="line">    bandits[<span class="number">0</span>] = [Bandit(epsilon=<span class="number">0</span>, stepSize=<span class="number">0.1</span>, UCBParam=<span class="number">2</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">0</span>, nBandits)]</div><div class="line">    bandits[<span class="number">1</span>] = [Bandit(epsilon=<span class="number">0.1</span>, stepSize=<span class="number">0.1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">0</span>, nBandits)]</div><div class="line">    _, averageRewards = banditSimulation(nBandits, time, bandits)</div><div class="line">    <span class="keyword">global</span> figureIndex</div><div class="line">    plt.figure(figureIndex)</div><div class="line">    figureIndex += <span class="number">1</span></div><div class="line">    plt.plot(averageRewards[<span class="number">0</span>], label=<span class="string">'UCB c = 2'</span>)</div><div class="line">    plt.plot(averageRewards[<span class="number">1</span>], label=<span class="string">'epsilon greedy epsilon = 0.1'</span>)</div><div class="line">    plt.xlabel(<span class="string">'Steps'</span>)</div><div class="line">    plt.ylabel(<span class="string">'Average reward'</span>)</div><div class="line">    plt.legend()</div></pre></td></tr></table></figure><p>We note that the <strong>UCBParam=2</strong>. The Bandit object explains this. The <strong>getAction()</strong> method and <strong>takeAction()</strong> method are as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAction</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="comment"># explore</span></div><div class="line">    <span class="keyword">if</span> self.epsilon &gt; <span class="number">0</span>:</div><div class="line">        <span class="keyword">if</span> np.random.binomial(<span class="number">1</span>, self.epsilon) == <span class="number">1</span>:</div><div class="line">            np.random.shuffle(self.indices)</div><div class="line">            <span class="keyword">return</span> self.indices[<span class="number">0</span>]</div><div class="line"></div><div class="line">    <span class="comment"># exploit</span></div><div class="line">    <span class="keyword">if</span> self.UCBParam <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        UCBEst = self.qEst + \</div><div class="line">                 self.UCBParam * np.sqrt(np.log(self.time + <span class="number">1</span>) / (np.asarray(self.actionCount) + <span class="number">1</span>))</div><div class="line">        <span class="keyword">return</span> np.argmax(UCBEst)</div><div class="line">    <span class="keyword">if</span> self.gradient:</div><div class="line">        expEst = np.exp(self.qEst)</div><div class="line">        self.actionProb = expEst / np.sum(expEst)</div><div class="line">        <span class="keyword">return</span> np.random.choice(self.indices, p=self.actionProb)</div><div class="line">    <span class="keyword">return</span> np.argmax(self.qEst)</div><div class="line"></div><div class="line"><span class="comment"># take an action, update estimation for this action</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">takeAction</span><span class="params">(self, action)</span>:</span></div><div class="line">    <span class="comment"># generate the reward under N(real reward, 1)</span></div><div class="line">    reward = np.random.randn() + self.qTrue[action]</div><div class="line">    self.time += <span class="number">1</span></div><div class="line">    self.averageReward = (self.time - <span class="number">1.0</span>) / self.time * self.averageReward + reward / self.time</div><div class="line">    self.actionCount[action] += <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> self.sampleAverages:</div><div class="line">        <span class="comment"># update estimation using sample averages</span></div><div class="line">        self.qEst[action] += <span class="number">1.0</span> / self.actionCount[action] * (reward - self.qEst[action])</div><div class="line">    <span class="keyword">elif</span> self.gradient:</div><div class="line">        oneHot = np.zeros(self.k)</div><div class="line">        oneHot[action] = <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> self.gradientBaseline:</div><div class="line">            baseline = self.averageReward</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            baseline = <span class="number">0</span></div><div class="line">        self.qEst = self.qEst + self.stepSize * (reward - baseline) * (oneHot - self.actionProb)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment"># update estimation with constant step size</span></div><div class="line">        self.qEst[action] += self.stepSize * (reward - self.qEst[action])</div><div class="line">    <span class="keyword">return</span> reward</div></pre></td></tr></table></figure><p>We can see the policy get next action has changed but the update policy has not changed. The result is here:<img src="http://o7ie0tcjk.bkt.clouddn.com/rl/k-armed-bandit/ucb_average_reward.png" alt="ucb_average_reward"></p><p>We omit the figure about the optimal action because the trend of this two figures are the same. UCB will often perform well, but is more difficult than $\epsilon$-greedy to extend beyond bandits to the more general reinforcement learning setting considered in the more advanced problems. In these more advanced settings there is currently no known practical way of utilizing the idea of UCB action selection.</p><p>So far we have considered methods that estimate action values and use those estimates to select actions. This is often a good approach, but it is not the only one possible. Now, we consider learning a numerical <em>preference</em> $H_t(a)$ for each action <em>a</em>. The larger the preference, the more often that action is taken, but the preference has no interpretation in terms of reward. Only the relative preference of one action over another is important; if we add 1000 to all the preferences there is no effect on the action probabilities, which are determined according to a softmax distribution as follows:</p><script type="math/tex;mode=display">Pr\{A_t=a\} \doteq \frac{e^{H_t(a)}}{\sum_{b=1}^{k}e^{H_t(b)}} \doteq \pi_t(a)</script><p>where here we have also introduced a useful new notation $\pi_t(a)$ for the probability of taking action <em>a</em> at time <em>t</em>. Initially all preferences are the same (e.g., $H_1(a)=0, \forall a$) so that all actions have an equal probability of being selected.</p><p>There is a natural learning algorithm for this setting based on the idea of stochastic gradient ascent. On each step, after selection the action $A_t$ and receiving the reward $R_t$, the preferences are updated by:</p><script type="math/tex;mode=display">\begin{align}
H_{t+1}(A_t) \doteq H_t(A_t) + \alpha (R_t - \overline{R_t}) (1 - \pi_t(A_t)), \; \text{and} \\
H_{t+1}(a) \doteq H_t(a) - \alpha (R_t - \overline{R_t}) \pi_t(a), \;\;\;\;\;\; \forall{a \neq A_t}
\end{align}</script><p>where $\alpha&gt;0$ is a ste-size parameter, and $\overline{R_t} \in \mathbb{R}$ is the average of all the rewards up through and including time <em>t</em>, which can be computed incrementally. The $\overline{R_t}$ term serves as a <strong><em>baseline</em></strong> with which the reward is compared. Let us see the implement details (takeAction() method and getAction() method).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> self.gradient:</div><div class="line">	expEst = np.exp(self.qEst)</div><div class="line">	self.actionProb = expEst / np.sum(expEst)</div><div class="line">	<span class="keyword">return</span> np.random.choice(self.indices, p=self.actionProb)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">elif</span> self.gradient:</div><div class="line">	oneHot = np.zeros(self.k)</div><div class="line">	oneHot[action] = <span class="number">1</span></div><div class="line">	<span class="keyword">if</span> self.gradientBaseline:</div><div class="line">		baseline = self.averageReward</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		baseline = <span class="number">0</span></div><div class="line">	self.qEst = self.qEst + self.stepSize * (reward - baseline) * (oneHot self.actionProb)</div></pre></td></tr></table></figure><p>The below figure shows results with the gradient bandit algorithm on a variant of the 10-armed testbed in which the true excepted rewards were selected according to a normal distribution with a mean of +4 instead of zero (and with unit variance as before).</p><p><img src="http://o7ie0tcjk.bkt.clouddn.com/rl/k-armed-bandit/gradient_bandit_optimal_action.png" alt="gradient_bandit_optimal_action"></p><p>Despite their simplicity, in our opinion the methods presented in here can fairly be considered the state of the art. Finally, we do a parameter study of the various bandit algorithms presented in here.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">figure2_6</span><span class="params">(nBandits, time)</span>:</span></div><div class="line">    labels = [<span class="string">'epsilon-greedy'</span>, <span class="string">'gradient bandit'</span>,</div><div class="line">              <span class="string">'UCB'</span>, <span class="string">'optimistic initialization'</span>]</div><div class="line">    generators = [<span class="keyword">lambda</span> epsilon: Bandit(epsilon=epsilon, sampleAverages=<span class="keyword">True</span>),</div><div class="line">                  <span class="keyword">lambda</span> alpha: Bandit(gradient=<span class="keyword">True</span>, stepSize=alpha, gradientBaseline=<span class="keyword">True</span>),</div><div class="line">                  <span class="keyword">lambda</span> coef: Bandit(epsilon=<span class="number">0</span>, stepSize=<span class="number">0.1</span>, UCBParam=coef),</div><div class="line">                  <span class="keyword">lambda</span> initial: Bandit(epsilon=<span class="number">0</span>, initial=initial, stepSize=<span class="number">0.1</span>)]</div><div class="line">    parameters = [np.arange(<span class="number">-7</span>, <span class="number">-1</span>),</div><div class="line">                  np.arange(<span class="number">-5</span>, <span class="number">2</span>),</div><div class="line">                  np.arange(<span class="number">-4</span>, <span class="number">3</span>),</div><div class="line">                  np.arange(<span class="number">-2</span>, <span class="number">3</span>)]</div><div class="line"></div><div class="line">    bandits = [[generator(math.pow(<span class="number">2</span>, param)) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">0</span>, nBandits)] <span class="keyword">for</span> generator, parameter <span class="keyword">in</span> zip(generators, parameters) <span class="keyword">for</span> param <span class="keyword">in</span> parameter]</div><div class="line">    _, averageRewards = banditSimulation(nBandits, time, bandits)</div><div class="line">    rewards = np.sum(averageRewards, axis=<span class="number">1</span>)/time</div><div class="line"></div><div class="line">    <span class="keyword">global</span> figureIndex</div><div class="line">    plt.figure(figureIndex)</div><div class="line">    figureIndex += <span class="number">1</span></div><div class="line">    i = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> label, parameter <span class="keyword">in</span> zip(labels, parameters):</div><div class="line">        l = len(parameter)</div><div class="line">        plt.plot(parameter, rewards[i:i+l], label=label)</div><div class="line">        i += l</div><div class="line">    plt.xlabel(<span class="string">'Parameter(2^x)'</span>)</div><div class="line">    plt.ylabel(<span class="string">'Average reward'</span>)</div><div class="line">    plt.legend()</div></pre></td></tr></table></figure><p>The results as follows:</p><p><img src="http://o7ie0tcjk.bkt.clouddn.com/rl/k-armed-bandit/bandit_algorithms_parameter_study.png" alt="parameters_study"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Consider the following learning problem. You are faced repeatedly with a choice among $k$ different options, or actions. After each choic
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="reinforcement learning" scheme="http://yoursite.com/tags/reinforcement-learning/"/>
    
  </entry>
  
  <entry>
    <title>Tic-Tac-Toe Game</title>
    <link href="http://yoursite.com/2017/05/26/Tic-tac-toe/"/>
    <id>http://yoursite.com/2017/05/26/Tic-tac-toe/</id>
    <published>2017-05-26T04:16:54.000Z</published>
    <updated>2017-05-26T04:17:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>What is the Tic-Tac-Toe game? Two players take turns playing on a three-by-three board. One player plays Xs and the other Os until one player wins by placing three marks in a row, horizontally, vertically, or diagonally, as the X player has in the game shown to the blew. If the board fills up with neither player getting three in a row, the game is a draw.</p><p>There have three steps. Train, compete and play.</p><p>The first, let’s to see the train period. Follow is the train() method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(epochs=<span class="number">20000</span>)</span>:</span></div><div class="line">    player1 = Player()</div><div class="line">    player2 = Player()</div><div class="line">    judger = Judger(player1, player2)</div><div class="line">    player1Win = <span class="number">0.0</span></div><div class="line">    player2Win = <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, epochs):</div><div class="line">        print(<span class="string">"Epoch"</span>, i)</div><div class="line">        winner = judger.play()</div><div class="line">        <span class="keyword">if</span> winner == <span class="number">1</span>:</div><div class="line">            player1Win += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> winner == <span class="number">-1</span>:</div><div class="line">            player2Win += <span class="number">1</span></div><div class="line">        judger.reset()</div><div class="line">    print(player1Win / epochs)</div><div class="line">    print(player2Win / epochs)</div><div class="line">    player1.savePolicy()</div><div class="line">    player2.savePolicy()</div></pre></td></tr></table></figure><p>Train() method create two Player objects first, and then let them to play the tic-tac-toe through a Judger object. It’s a very simple process.</p><p>Next. let to get into the Player object.</p><p>Follow is the code of the Player object. For understand easily, I omitted the implementation details of each method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span>:</span></div><div class="line">    <span class="comment"># @stepSize: step size to update estimations</span></div><div class="line">    <span class="comment"># @exploreRate: possibility to explore</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, stepSize=<span class="number">0.1</span>, exploreRate=<span class="number">0.1</span>)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setSymbol</span><span class="params">(self, symbol)</span>:</span></div><div class="line">    <span class="comment"># accept a state</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedState</span><span class="params">(self, state)</span>:</span></div><div class="line">    <span class="comment"># update estimation according to reward</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedReward</span><span class="params">(self, reward)</span>:</span></div><div class="line">    <span class="comment"># determine next action</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">takeAction</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">savePolicy</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loadPolicy</span><span class="params">(self)</span>:</span></div></pre></td></tr></table></figure><p>As a Player, the important thing during the train process is to learn a policy. The policy is a selection when the player faces a state. So there are two method savePolicy() and loadPolicy(). When the train process end, the player save its learned policy and load the same policy when the player compete with someone else later.</p><p>Follow is the implementation details:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">savePolicy</span><span class="params">(self)</span>:</span></div><div class="line">    fw = open(<span class="string">'optimal_policy_'</span> + str(self.symbol), <span class="string">'wb'</span>)</div><div class="line">    pickle.dump(self.estimations, fw)</div><div class="line">    fw.close()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadPolicy</span><span class="params">(self)</span>:</span></div><div class="line">    fr = open(<span class="string">'optimal_policy_'</span> + str(self.symbol), <span class="string">'rb'</span>)</div><div class="line">    self.estimations = pickle.load(fr)</div><div class="line">    fr.close()</div></pre></td></tr></table></figure><p>And, let’s to jump into the initialization method, the below is its source code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, stepSize=<span class="number">0.1</span>, exploreRate=<span class="number">0.1</span>)</span>:</span></div><div class="line">        self.allStates = allStates</div><div class="line">        self.estimations = dict()</div><div class="line">        self.stepSize = stepSize</div><div class="line">        self.exploreRate = exploreRate</div><div class="line">        self.states = []</div></pre></td></tr></table></figure><p>Every player hold a dictionary. For each item in the dictionary, the key is the state, and the value is the estimation of the probability to win from this state. We use the TD(0) method to solve the problem. That is, we need to update .the state-value function step by step. The update rule is below:</p><script type="math/tex;mode=display">V(s) = V(s) + \alpha [V(s') - V(s)]</script><p>The $\alpha$ is the step size, and the $s’$ is the next state, $s$ is the current state. $V(<em>)$ is the estimation of the probability to win from $</em>$ state.</p><p>So, what is the explore rate. We need to know how to choose the next action at current state if we want to understand the explore rate. For every state, first we find the every state it can transfer to. Then we look up the dictionary to find the state that has the highest estimation value. This state is our action will take. The method called <strong>greedy policy</strong>. But, the value of each state is our estimation, so we can’t say it’s the true probability. So the greedy policy has some error. There is a method to solve this problem. At every state, we not only select the next state that has the highest probability but also choose the next state randomly by <strong>explore rate</strong> probability. Formerly, if we use the symbol $\epsilon$ represents the explore rate, then the method is called <strong>$\epsilon$-greedy</strong> method.</p><p>Next, let’s see what is the <strong>allStates</strong> variable.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.allStates = allStates</div></pre></td></tr></table></figure><p>we can see</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># all possible board configurations</span></div><div class="line">allStates = getAllStates()</div></pre></td></tr></table></figure><p>So what is the <strong>getAllStates()</strong> look like?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAllStates</span><span class="params">()</span>:</span></div><div class="line">    currentSymbol = <span class="number">1</span></div><div class="line">    currentState = State()</div><div class="line">    allStates = dict()</div><div class="line">    allStates[currentState.getHash()] = (currentState, currentState.isEnd())</div><div class="line">    getAllStatesImpl(currentState, currentSymbol, allStates)</div><div class="line">    <span class="keyword">return</span> allStates</div></pre></td></tr></table></figure><p>Until now you may ask what is the STATE? Below is the definition:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getHash</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEnd</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextState</span><span class="params">(self, i, j, symbol)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></div></pre></td></tr></table></figure><p>One state is one arrangement of pieces on the board. So one state has some extra attributions. Such as who is the winner at current state, if the state is the terminal state or not and so on. Specially, each state has a hash value for representation convenient. The board is represented by a n by n array, that is, one state is a n by n array.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="comment"># the board is represented by a n * n array,</span></div><div class="line">    <span class="comment"># 1 represents chessman of the player who moves first,</span></div><div class="line">    <span class="comment"># -1 represents chessman of another player</span></div><div class="line">    <span class="comment"># 0 represents empty position</span></div><div class="line">    self.data = np.zeros((BOARD_ROWS, BOARD_COLS))</div><div class="line">    self.winner = <span class="keyword">None</span></div><div class="line">    self.hashVal = <span class="keyword">None</span></div><div class="line">    self.end = <span class="keyword">None</span></div></pre></td></tr></table></figure><p>Below is how to calculate the hash value of a state:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># calculate the hash value for one state, it's unique</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHash</span><span class="params">(self)</span>:</span></div><div class="line">	<span class="keyword">if</span> self.hashVal <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">		self.hashVal = <span class="number">0</span></div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> self.data.reshape(BOARD_ROWS * BOARD_COLS):</div><div class="line">			<span class="keyword">if</span> i == <span class="number">-1</span>:</div><div class="line">				i = <span class="number">2</span></div><div class="line">            self.hashVal = self.hashVal * <span class="number">3</span> + i</div><div class="line">    <span class="keyword">return</span> int(self.hashVal)</div></pre></td></tr></table></figure><p>Below is how to judge if a state is end or not:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># determine whether a player has won the game, or it's a tie</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isEnd</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">if</span> self.end <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> self.end</div><div class="line">    results = []</div><div class="line">    <span class="comment"># check row</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">        results.append(np.sum(self.data[i, :]))</div><div class="line">    <span class="comment"># check columns</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_COLS):</div><div class="line">        results.append(np.sum(self.data[:, i]))</div><div class="line"></div><div class="line">    <span class="comment"># check diagonals</span></div><div class="line">    results.append(<span class="number">0</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">        results[<span class="number">-1</span>] += self.data[i, i]</div><div class="line">    results.append(<span class="number">0</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">        results[<span class="number">-1</span>] += self.data[i, BOARD_ROWS - <span class="number">1</span> - i]</div><div class="line"></div><div class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> results:</div><div class="line">        <span class="keyword">if</span> result == <span class="number">3</span>:</div><div class="line">            self.winner = <span class="number">1</span></div><div class="line">            self.end = <span class="keyword">True</span></div><div class="line">            <span class="keyword">return</span> self.end</div><div class="line">        <span class="keyword">if</span> result == <span class="number">-3</span>:</div><div class="line">            self.winner = <span class="number">-1</span></div><div class="line">            self.end = <span class="keyword">True</span></div><div class="line">            <span class="keyword">return</span> self.end</div><div class="line"></div><div class="line">    <span class="comment"># whether it's a tie</span></div><div class="line">    sum = np.sum(np.abs(self.data))</div><div class="line">    <span class="keyword">if</span> sum == BOARD_ROWS * BOARD_COLS:</div><div class="line">        self.winner = <span class="number">0</span></div><div class="line">        self.end = <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> self.end</div><div class="line"></div><div class="line">    <span class="comment"># game is still going on</span></div><div class="line">    self.end = <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> self.end</div></pre></td></tr></table></figure><p>There are two scenarios for the end of the game: Someone wins or ties. Because player A’s chessman is represents by 1 and play B is -1. So if A wins, then one row ‘s sum is n or one column’s sum is n or one diagnose’s sum is n. Otherwise is -n. And the state’s winner attribute is 1 or -1, that is, player A or player B. if the sum of the absolute value of the all chessman in the board is n by n, then the game is tie, winner is 0 (that is no one wins).</p><p>When someone put a chessman in the board, then the state is change and transfer to another state. How to get the state?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nextState</span><span class="params">(self, i, j, symbol)</span>:</span></div><div class="line">    newState = State()</div><div class="line">    newState.data = np.copy(self.data)</div><div class="line">    newState.data[i, j] = symbol</div><div class="line">    <span class="keyword">return</span> newState</div></pre></td></tr></table></figure><p>And the last, we are play a game so we need a GUI. This is what the <strong>show()</strong> to do.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># print the board</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">        print(<span class="string">'-------------'</span>)</div><div class="line">        out = <span class="string">'| '</span></div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_COLS):</div><div class="line">            <span class="keyword">if</span> self.data[i, j] == <span class="number">1</span>:</div><div class="line">                token = <span class="string">'*'</span></div><div class="line">            <span class="keyword">if</span> self.data[i, j] == <span class="number">0</span>:</div><div class="line">                token = <span class="string">'0'</span></div><div class="line">            <span class="keyword">if</span> self.data[i, j] == <span class="number">-1</span>:</div><div class="line">                token = <span class="string">'x'</span></div><div class="line">            out += token + <span class="string">' | '</span></div><div class="line">        print(out)</div><div class="line">    print(<span class="string">'-------------'</span>)</div></pre></td></tr></table></figure><p>Let’s come back to the <strong>getAllStates()</strong> method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAllStates</span><span class="params">()</span>:</span></div><div class="line">    currentSymbol = <span class="number">1</span></div><div class="line">    currentState = State()</div><div class="line">    allStates = dict()</div><div class="line">    allStates[currentState.getHash()] = (currentState, currentState.isEnd())</div><div class="line">    getAllStatesImpl(currentState, currentSymbol, allStates)</div><div class="line">    <span class="keyword">return</span> allStates</div></pre></td></tr></table></figure><p>Now we know what is a state and the next we need to generate all possible state. The first, we need build a data structure to store the all states. So we define a dictionary <strong>allStates</strong>. It’s key is the hash value of the state, and it’s value is a tuple. The first item of the tuple is the state (a n by n array) and the second item is a flag that represent the state whether is a terminal state or not. For generate the all states, we jump into the <strong>getAllStatesImpl()</strong> method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAllStatesImpl</span><span class="params">(currentState, currentSymbol, allStates)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_COLS):</div><div class="line">            <span class="keyword">if</span> currentState.data[i][j] == <span class="number">0</span>:</div><div class="line">                newState = currentState.nextState(i, j, currentSymbol)</div><div class="line">                newHash = newState.getHash()</div><div class="line">                <span class="keyword">if</span> newHash <span class="keyword">not</span> <span class="keyword">in</span> allStates.keys():</div><div class="line">                    isEnd = newState.isEnd()</div><div class="line">                    allStates[newHash] = (newState, isEnd)</div><div class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> isEnd:</div><div class="line">                        getAllStatesImpl(newState, -currentSymbol, allStates)</div></pre></td></tr></table></figure><p>The <strong>getAllStatesImpl()</strong> method start with a empty board (currentState), and generate the states step by step (because it recursive calls itself). Because the game is very simple, so we could generate all possible states. But for the larger game, this is impossible.</p><p>Tada~Let’s come back to the Player object. We put the code here again for convenience.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span>:</span></div><div class="line">    <span class="comment"># @stepSize: step size to update estimations</span></div><div class="line">    <span class="comment"># @exploreRate: possibility to explore</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, stepSize=<span class="number">0.1</span>, exploreRate=<span class="number">0.1</span>)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setSymbol</span><span class="params">(self, symbol)</span>:</span></div><div class="line">    <span class="comment"># accept a state</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedState</span><span class="params">(self, state)</span>:</span></div><div class="line">    <span class="comment"># update estimation according to reward</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedReward</span><span class="params">(self, reward)</span>:</span></div><div class="line">    <span class="comment"># determine next action</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">takeAction</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">savePolicy</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loadPolicy</span><span class="params">(self)</span>:</span></div></pre></td></tr></table></figure><p>We has explained the initialization method. It’s worth to notice that the Player object has a attribute <strong>states</strong>. We’ll explain it later. Below is the <strong>setSymbol()</strong> method:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">setSymbol</span><span class="params">(self, symbol)</span>:</span></div><div class="line">    self.symbol = symbol</div><div class="line">    <span class="keyword">for</span> hash <span class="keyword">in</span> self.allStates.keys():</div><div class="line">        (state, isEnd) = self.allStates[hash]</div><div class="line">        <span class="keyword">if</span> isEnd:</div><div class="line">            <span class="keyword">if</span> state.winner == self.symbol:</div><div class="line">                self.estimations[hash] = <span class="number">1.0</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self.estimations[hash] = <span class="number">0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.estimations[hash] = <span class="number">0.5</span></div></pre></td></tr></table></figure><p>We know that every player’s chessman in the board has a symbol (1 or -1). This method is set a symbol to the player. Furthermore, this method initialize the estimate state-value dictionary (we mentioned it earlier).</p><p>And the <strong>feedState()</strong> method:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">feedState</span><span class="params">(self, state)</span>:</span></div><div class="line">        self.states.append(state)</div></pre></td></tr></table></figure><p>The same as the <strong>states</strong> variable, we’ll explain it later.</p><p>Go on, below is the <strong>feedForward()</strong> method.This method not only the core of the Player object, but also it’s the core of the method that solve this game. That is, it’s the core of the TD(0) method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">feedReward</span><span class="params">(self, reward)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(self.states) == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span></div><div class="line">    self.states = [state.getHash() <span class="keyword">for</span> state <span class="keyword">in</span> self.states]</div><div class="line">    target = reward</div><div class="line">    <span class="keyword">for</span> latestState <span class="keyword">in</span> reversed(self.states):</div><div class="line">        value = self.estimations[</div><div class="line">            latestState] + self.stepSize * (target - self.estimations[latestState])</div><div class="line">        self.estimations[latestState] = value</div><div class="line">        target = value</div><div class="line">    self.states = []</div></pre></td></tr></table></figure><p>We mentioned the update rule earlier. Below is it’s implementation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">value = self.estimations[</div><div class="line">            latestState] + self.stepSize * (target - self.estimations[latestState])</div></pre></td></tr></table></figure><p>Notice that we can see there are two row in the code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">self.estimations[latestState] = value</div><div class="line">target = value</div></pre></td></tr></table></figure><p>So the update rule is a chain-like update rule. Specially, the <strong>states</strong> variable is set to empty (In the same way, we’ll explain it later).</p><p>The next method (implement the <strong>$\epsilon$-greedy</strong> policy) also is very important, because it tells the player how to take the next action:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">takeAction</span><span class="params">(self)</span>:</span></div><div class="line">    state = self.states[<span class="number">-1</span>]</div><div class="line">    nextStates = []</div><div class="line">    nextPositions = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(BOARD_ROWS):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(BOARD_COLS):</div><div class="line">            <span class="keyword">if</span> state.data[i, j] == <span class="number">0</span>:</div><div class="line">                nextPositions.append([i, j])</div><div class="line">                nextStates.append(state.nextState(</div><div class="line">                    i, j, self.symbol).getHash())</div><div class="line">    <span class="keyword">if</span> np.random.binomial(<span class="number">1</span>, self.exploreRate):</div><div class="line">        np.random.shuffle(nextPositions)</div><div class="line">        <span class="comment"># Not sure if truncating is the best way to deal with exploratory step</span></div><div class="line">        <span class="comment"># Maybe it's better to only skip this step rather than forget all</span></div><div class="line">        <span class="comment"># the history</span></div><div class="line">        self.states = []</div><div class="line">        action = nextPositions[<span class="number">0</span>]</div><div class="line">        action.append(self.symbol)</div><div class="line">        <span class="keyword">return</span> action</div><div class="line"></div><div class="line">    values = []</div><div class="line">    <span class="keyword">for</span> hash, pos <span class="keyword">in</span> zip(nextStates, nextPositions):</div><div class="line">        values.append((self.estimations[hash], pos))</div><div class="line">    np.random.shuffle(values)</div><div class="line">    values.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>], reverse=<span class="keyword">True</span>)</div><div class="line">    action = values[<span class="number">0</span>][<span class="number">1</span>]</div><div class="line">    action.append(self.symbol)</div><div class="line">    <span class="keyword">return</span> action</div></pre></td></tr></table></figure><p>We’ll see that the return action is a list that the first item is a list contains the next position and the second item is the symbol that represents the player.</p><p>Ok, the travel about the Player object is over. Then, we’ll look into the Judger object. Before that, let’s recall the <strong>train()</strong> process.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(epochs=<span class="number">20000</span>)</span>:</span></div><div class="line">    player1 = Player()</div><div class="line">    player2 = Player()</div><div class="line">    judger = Judger(player1, player2)</div><div class="line">    player1Win = <span class="number">0.0</span></div><div class="line">    player2Win = <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, epochs):</div><div class="line">        print(<span class="string">"Epoch"</span>, i)</div><div class="line">        winner = judger.play()</div><div class="line">        <span class="keyword">if</span> winner == <span class="number">1</span>:</div><div class="line">            player1Win += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> winner == <span class="number">-1</span>:</div><div class="line">            player2Win += <span class="number">1</span></div><div class="line">        judger.reset()</div><div class="line">    print(player1Win / epochs)</div><div class="line">    print(player2Win / epochs)</div><div class="line">    player1.savePolicy()</div><div class="line">    player2.savePolicy()</div></pre></td></tr></table></figure><p>We can see that the Judger object accept two parameters, that is, two player object. The definition of Judger is below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Judger</span>:</span></div><div class="line">    <span class="comment"># @player1: player who will move first, its chessman will be 1</span></div><div class="line">    <span class="comment"># @player2: another player with chessman -1</span></div><div class="line">    <span class="comment"># @feedback: if True, both players will receive rewards when game is end</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, player1, player2, feedback=True)</span>:</span></div><div class="line">    <span class="comment"># give reward to two players</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">giveReward</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedCurrentState</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="comment"># @show: if True, print each board during the game</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self, show=False)</span>:</span></div></pre></td></tr></table></figure><p>Notice that the rewards only receive at the end of the game. The first, let’s see the initialization method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, player1, player2, feedback=True)</span>:</span></div><div class="line">    self.p1 = player1</div><div class="line">    self.p2 = player2</div><div class="line">    self.feedback = feedback</div><div class="line">    self.currentPlayer = <span class="keyword">None</span></div><div class="line">    self.p1Symbol = <span class="number">1</span></div><div class="line">    self.p2Symbol = <span class="number">-1</span></div><div class="line">    self.p1.setSymbol(self.p1Symbol)</div><div class="line">    self.p2.setSymbol(self.p2Symbol)</div><div class="line">    self.currentState = State()</div><div class="line">    self.allStates = allStates</div></pre></td></tr></table></figure><p>p1 and p2 is the two player that play the game. The feedback represents if the reward propagation back or not. On the train process the feedback is true and on the compete process and play process the feedback is false. currentPlayer represents who should move next. and next the judger set symbol for each player. The currentState is the start state (the board is empty).</p><p>Go on. Below is the <strong>giveReward()</strong> method:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">giveReward</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">if</span> self.currentState.winner == self.p1Symbol:</div><div class="line">        self.p1.feedReward(<span class="number">1</span>)</div><div class="line">        self.p2.feedReward(<span class="number">0</span>)</div><div class="line">    <span class="keyword">elif</span> self.currentState.winner == self.p2Symbol:</div><div class="line">        self.p1.feedReward(<span class="number">0</span>)</div><div class="line">        self.p2.feedReward(<span class="number">1</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        self.p1.feedReward(<span class="number">0</span>)</div><div class="line">        self.p2.feedReward(<span class="number">0</span>)</div></pre></td></tr></table></figure><p>Just like we say earlier, the rewards only receive at the end of the game. So if player A wins, then we give him a reward 1 and otherwise we give him a reward 0. If ties, then all reward is 0. We explain the <strong>feedCurrentState()</strong> later. Now we explain <strong>reset()</strong> method first.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></div><div class="line">    self.p1.reset()</div><div class="line">    self.p2.reset()</div><div class="line">    self.currentState = State()</div><div class="line">    self.currentPlayer = <span class="keyword">None</span></div></pre></td></tr></table></figure><p>It’s simple right? Let’s skip it and go to the core method:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self, show=False)</span>:</span></div><div class="line">    self.reset()</div><div class="line">    self.feedCurrentState()</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="comment"># set current player</span></div><div class="line">        <span class="keyword">if</span> self.currentPlayer == self.p1:</div><div class="line">            self.currentPlayer = self.p2</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.currentPlayer = self.p1</div><div class="line">        <span class="keyword">if</span> show:</div><div class="line">            self.currentState.show()</div><div class="line">        [i, j, symbol] = self.currentPlayer.takeAction()</div><div class="line">        self.currentState = self.currentState.nextState(i, j, symbol)</div><div class="line">        hashValue = self.currentState.getHash()</div><div class="line">        self.currentState, isEnd = self.allStates[hashValue]</div><div class="line">        self.feedCurrentState()</div><div class="line">        <span class="keyword">if</span> isEnd:</div><div class="line">            <span class="keyword">if</span> self.feedback:</div><div class="line">                self.giveReward()</div><div class="line">            <span class="keyword">return</span> self.currentState.winner</div></pre></td></tr></table></figure><p>We can see the two player alternate to play chess. Each reached state on the game will feed to the players’ states attribute.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.feedCurrentState()</div></pre></td></tr></table></figure><p>So below is the method like:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">feedCurrentState</span><span class="params">(self)</span>:</span></div><div class="line">    self.p1.feedState(self.currentState)</div><div class="line">    self.p2.feedState(self.currentState)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">feedState</span><span class="params">(self, state)</span>:</span></div><div class="line">    self.states.append(state)</div></pre></td></tr></table></figure><p>Let’s explain the states now. Each player only update the states that the game reached in one game. Each reached state on the game will feed to the players’ states attribute.</p><p>Ouch! Finally three core objects are explained. Now we’ll clear about the three process: train, compete and play.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(epochs=<span class="number">20000</span>)</span>:</span></div><div class="line">    player1 = Player()</div><div class="line">    player2 = Player()</div><div class="line">    judger = Judger(player1, player2)</div><div class="line">    player1Win = <span class="number">0.0</span></div><div class="line">    player2Win = <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, epochs):</div><div class="line">        print(<span class="string">"Epoch"</span>, i)</div><div class="line">        winner = judger.play()</div><div class="line">        <span class="keyword">if</span> winner == <span class="number">1</span>:</div><div class="line">            player1Win += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> winner == <span class="number">-1</span>:</div><div class="line">            player2Win += <span class="number">1</span></div><div class="line">        judger.reset()</div><div class="line">    print(player1Win / epochs)</div><div class="line">    print(player2Win / epochs)</div><div class="line">    player1.savePolicy()</div><div class="line">    player2.savePolicy()</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compete</span><span class="params">(turns=<span class="number">500</span>)</span>:</span></div><div class="line">    player1 = Player(exploreRate=<span class="number">0</span>)</div><div class="line">    player2 = Player(exploreRate=<span class="number">0</span>)</div><div class="line">    judger = Judger(player1, player2, <span class="keyword">False</span>)</div><div class="line">    player1.loadPolicy()</div><div class="line">    player2.loadPolicy()</div><div class="line">    player1Win = <span class="number">0.0</span></div><div class="line">    player2Win = <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, turns):</div><div class="line">        print(<span class="string">"Epoch"</span>, i)</div><div class="line">        winner = judger.play()</div><div class="line">        <span class="keyword">if</span> winner == <span class="number">1</span>:</div><div class="line">            player1Win += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> winner == <span class="number">-1</span>:</div><div class="line">            player2Win += <span class="number">1</span></div><div class="line">        judger.reset()</div><div class="line">    print(player1Win / turns)</div><div class="line">    print(player2Win / turns)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        player1 = Player(exploreRate=<span class="number">0</span>)</div><div class="line">        player2 = HumanPlayer()</div><div class="line">        judger = Judger(player1, player2, <span class="keyword">False</span>)</div><div class="line">        player1.loadPolicy()</div><div class="line">        winner = judger.play(<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">if</span> winner == player2.symbol:</div><div class="line">            print(<span class="string">"Win!"</span>)</div><div class="line">        <span class="keyword">elif</span> winner == player1.symbol:</div><div class="line">            print(<span class="string">"Lose!"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"Tie!"</span>)</div></pre></td></tr></table></figure><p>It’s worth noting that there is a <strong>HumanPlayer</strong> object.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanPlayer</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, stepSize=<span class="number">0.1</span>, exploreRate=<span class="number">0.1</span>)</span>:</span></div><div class="line">        self.symbol = <span class="keyword">None</span></div><div class="line">        self.currentState = <span class="keyword">None</span></div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setSymbol</span><span class="params">(self, symbol)</span>:</span></div><div class="line">        self.symbol = symbol</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedState</span><span class="params">(self, state)</span>:</span></div><div class="line">        self.currentState = state</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedReward</span><span class="params">(self, reward)</span>:</span></div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">takeAction</span><span class="params">(self)</span>:</span></div><div class="line">        data = int(input(<span class="string">"Input your position:"</span>))</div><div class="line">        data -= <span class="number">1</span></div><div class="line">        i = data // int(BOARD_COLS)</div><div class="line">        j = data % BOARD_COLS</div><div class="line">        <span class="keyword">if</span> self.currentState.data[i, j] != <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> self.takeAction()</div><div class="line">        <span class="keyword">return</span> (i, j, self.symbol)</div></pre></td></tr></table></figure><p>We’ll see that this object do nothing. It just put a chess to on the board.</p><p>OK, you’re done! Finally, we put the complete code here.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#######################################################################</span></div><div class="line"><span class="comment"># Copyright (C)                                                       #</span></div><div class="line"><span class="comment"># 2016 Shangtong Zhang(zhangshangtong.cpp@gmail.com)                  #</span></div><div class="line"><span class="comment"># 2016 Jan Hakenberg(jan.hakenberg@gmail.com)                         #</span></div><div class="line"><span class="comment"># 2016 Tian Jun(tianjun.cpp@gmail.com)                                #</span></div><div class="line"><span class="comment"># Permission given to modify the code as long as you keep this        #</span></div><div class="line"><span class="comment"># declaration at the top                                              #</span></div><div class="line"><span class="comment">#######################################################################</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pickle</div><div class="line"></div><div class="line">BOARD_ROWS = <span class="number">3</span></div><div class="line">BOARD_COLS = <span class="number">3</span></div><div class="line">BOARD_SIZE = BOARD_ROWS * BOARD_COLS</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># the board is represented by a n * n array,</span></div><div class="line">        <span class="comment"># 1 represents chessman of the player who moves first,</span></div><div class="line">        <span class="comment"># -1 represents chessman of another player</span></div><div class="line">        <span class="comment"># 0 represents empty position</span></div><div class="line">        self.data = np.zeros((BOARD_ROWS, BOARD_COLS))</div><div class="line">        self.winner = <span class="keyword">None</span></div><div class="line">        self.hashVal = <span class="keyword">None</span></div><div class="line">        self.end = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="comment"># calculate the hash value for one state, it's unique</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getHash</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.hashVal <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self.hashVal = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> self.data.reshape(BOARD_ROWS * BOARD_COLS):</div><div class="line">                <span class="keyword">if</span> i == <span class="number">-1</span>:</div><div class="line">                    i = <span class="number">2</span></div><div class="line">                self.hashVal = self.hashVal * <span class="number">3</span> + i</div><div class="line">        <span class="keyword">return</span> int(self.hashVal)</div><div class="line"></div><div class="line">	<span class="comment"># determine whether a player has won the game, or it's a tie</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">isEnd</span><span class="params">(self)</span>:</span></div><div class="line">	    <span class="keyword">if</span> self.end <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">	        <span class="keyword">return</span> self.end</div><div class="line">	    results = []</div><div class="line">	    <span class="comment"># check row</span></div><div class="line">	    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">	        results.append(np.sum(self.data[i, :]))</div><div class="line">	    <span class="comment"># check columns</span></div><div class="line">	    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_COLS):</div><div class="line">	        results.append(np.sum(self.data[:, i]))</div><div class="line"></div><div class="line">	    <span class="comment"># check diagonals</span></div><div class="line">	    results.append(<span class="number">0</span>)</div><div class="line">	    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">	        results[<span class="number">-1</span>] += self.data[i, i]</div><div class="line">	    results.append(<span class="number">0</span>)</div><div class="line">	    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">	        results[<span class="number">-1</span>] += self.data[i, BOARD_ROWS - <span class="number">1</span> - i]</div><div class="line"></div><div class="line">	    <span class="keyword">for</span> result <span class="keyword">in</span> results:</div><div class="line">	        <span class="keyword">if</span> result == <span class="number">3</span>:</div><div class="line">	            self.winner = <span class="number">1</span></div><div class="line">	            self.end = <span class="keyword">True</span></div><div class="line">	            <span class="keyword">return</span> self.end</div><div class="line">	        <span class="keyword">if</span> result == <span class="number">-3</span>:</div><div class="line">	            self.winner = <span class="number">-1</span></div><div class="line">	            self.end = <span class="keyword">True</span></div><div class="line">	            <span class="keyword">return</span> self.end</div><div class="line"></div><div class="line">	    <span class="comment"># whether it's a tie</span></div><div class="line">	    sum = np.sum(np.abs(self.data))</div><div class="line">	    <span class="keyword">if</span> sum == BOARD_ROWS * BOARD_COLS:</div><div class="line">	        self.winner = <span class="number">0</span></div><div class="line">	        self.end = <span class="keyword">True</span></div><div class="line">	        <span class="keyword">return</span> self.end</div><div class="line"></div><div class="line">	    <span class="comment"># game is still going on</span></div><div class="line">	    self.end = <span class="keyword">False</span></div><div class="line">	    <span class="keyword">return</span> self.end</div><div class="line"></div><div class="line">    <span class="comment"># @symbol 1 or -1</span></div><div class="line">    <span class="comment"># put chessman symbol in position (i, j)</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">nextState</span><span class="params">(self, i, j, symbol)</span>:</span></div><div class="line">	    newState = State()</div><div class="line">	    newState.data = np.copy(self.data)</div><div class="line">	    newState.data[i, j] = symbol</div><div class="line">	    <span class="keyword">return</span> newState</div><div class="line"></div><div class="line">	<span class="comment"># print the board</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></div><div class="line">	    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">	        print(<span class="string">'-------------'</span>)</div><div class="line">	        out = <span class="string">'| '</span></div><div class="line">	        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_COLS):</div><div class="line">	            <span class="keyword">if</span> self.data[i, j] == <span class="number">1</span>:</div><div class="line">	                token = <span class="string">'*'</span></div><div class="line">	            <span class="keyword">if</span> self.data[i, j] == <span class="number">0</span>:</div><div class="line">	                token = <span class="string">'0'</span></div><div class="line">	            <span class="keyword">if</span> self.data[i, j] == <span class="number">-1</span>:</div><div class="line">	                token = <span class="string">'x'</span></div><div class="line">	            out += token + <span class="string">' | '</span></div><div class="line">	        print(out)</div><div class="line">	    print(<span class="string">'-------------'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAllStatesImpl</span><span class="params">(currentState, currentSymbol, allStates)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_COLS):</div><div class="line">            <span class="keyword">if</span> currentState.data[i][j] == <span class="number">0</span>:</div><div class="line">                newState = currentState.nextState(i, j, currentSymbol)</div><div class="line">                newHash = newState.getHash()</div><div class="line">                <span class="keyword">if</span> newHash <span class="keyword">not</span> <span class="keyword">in</span> allStates.keys():</div><div class="line">                    isEnd = newState.isEnd()</div><div class="line">                    allStates[newHash] = (newState, isEnd)</div><div class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> isEnd:</div><div class="line">                        getAllStatesImpl(newState, -currentSymbol, allStates)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAllStates</span><span class="params">()</span>:</span></div><div class="line">    currentSymbol = <span class="number">1</span></div><div class="line">    currentState = State()</div><div class="line">    allStates = dict()</div><div class="line">    allStates[currentState.getHash()] = (currentState, currentState.isEnd())</div><div class="line">    getAllStatesImpl(currentState, currentSymbol, allStates)</div><div class="line">    <span class="keyword">return</span> allStates</div><div class="line"></div><div class="line"><span class="comment"># all possible board configurations</span></div><div class="line">allStates = getAllStates()</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Judger</span>:</span></div><div class="line">    <span class="comment"># @player1: player who will move first, its chessman will be 1</span></div><div class="line">    <span class="comment"># @player2: another player with chessman -1</span></div><div class="line">    <span class="comment"># @feedback: if True, both players will receive rewards when game is end</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, player1, player2, feedback=True)</span>:</span></div><div class="line">	    self.p1 = player1</div><div class="line">	    self.p2 = player2</div><div class="line">	    self.feedback = feedback</div><div class="line">	    self.currentPlayer = <span class="keyword">None</span></div><div class="line">	    self.p1Symbol = <span class="number">1</span></div><div class="line">	    self.p2Symbol = <span class="number">-1</span></div><div class="line">	    self.p1.setSymbol(self.p1Symbol)</div><div class="line">	    self.p2.setSymbol(self.p2Symbol)</div><div class="line">	    self.currentState = State()</div><div class="line">	    self.allStates = allStates</div><div class="line"></div><div class="line">    <span class="comment"># give reward to two players</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">giveReward</span><span class="params">(self)</span>:</span></div><div class="line">	    <span class="keyword">if</span> self.currentState.winner == self.p1Symbol:</div><div class="line">	        self.p1.feedReward(<span class="number">1</span>)</div><div class="line">	        self.p2.feedReward(<span class="number">0</span>)</div><div class="line">	    <span class="keyword">elif</span> self.currentState.winner == self.p2Symbol:</div><div class="line">	        self.p1.feedReward(<span class="number">0</span>)</div><div class="line">	        self.p2.feedReward(<span class="number">1</span>)</div><div class="line">	    <span class="keyword">else</span>:</div><div class="line">	        self.p1.feedReward(<span class="number">0</span>)</div><div class="line">	        self.p2.feedReward(<span class="number">0</span>)</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">feedCurrentState</span><span class="params">(self)</span>:</span></div><div class="line">	    self.p1.feedState(self.currentState)</div><div class="line">	    self.p2.feedState(self.currentState)</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></div><div class="line">	    self.p1.reset()</div><div class="line">	    self.p2.reset()</div><div class="line">	    self.currentState = State()</div><div class="line">	    self.currentPlayer = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="comment"># @show: if True, print each board during the game</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self, show=False)</span>:</span></div><div class="line">	    self.reset()</div><div class="line">	    self.feedCurrentState()</div><div class="line">	    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">	        <span class="comment"># set current player</span></div><div class="line">	        <span class="keyword">if</span> self.currentPlayer == self.p1:</div><div class="line">	            self.currentPlayer = self.p2</div><div class="line">	        <span class="keyword">else</span>:</div><div class="line">	            self.currentPlayer = self.p1</div><div class="line">	        <span class="keyword">if</span> show:</div><div class="line">	            self.currentState.show()</div><div class="line">	        [i, j, symbol] = self.currentPlayer.takeAction()</div><div class="line">	        self.currentState = self.currentState.nextState(i, j, symbol)</div><div class="line">	        hashValue = self.currentState.getHash()</div><div class="line">	        self.currentState, isEnd = self.allStates[hashValue]</div><div class="line">	        self.feedCurrentState()</div><div class="line">	        <span class="keyword">if</span> isEnd:</div><div class="line">	            <span class="keyword">if</span> self.feedback:</div><div class="line">	                self.giveReward()</div><div class="line">	            <span class="keyword">return</span> self.currentState.winner</div><div class="line"></div><div class="line"><span class="comment"># AI player</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span>:</span></div><div class="line">    <span class="comment"># @stepSize: step size to update estimations</span></div><div class="line">    <span class="comment"># @exploreRate: possibility to explore</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, stepSize=<span class="number">0.1</span>, exploreRate=<span class="number">0.1</span>)</span>:</span></div><div class="line">        self.allStates = allStates</div><div class="line">        self.estimations = dict()</div><div class="line">        self.stepSize = stepSize</div><div class="line">        self.exploreRate = exploreRate</div><div class="line">        self.states = []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></div><div class="line">        self.states = []</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">setSymbol</span><span class="params">(self, symbol)</span>:</span></div><div class="line">	    self.symbol = symbol</div><div class="line">	    <span class="keyword">for</span> hash <span class="keyword">in</span> self.allStates.keys():</div><div class="line">	        (state, isEnd) = self.allStates[hash]</div><div class="line">	        <span class="keyword">if</span> isEnd:</div><div class="line">	            <span class="keyword">if</span> state.winner == self.symbol:</div><div class="line">	                self.estimations[hash] = <span class="number">1.0</span></div><div class="line">	            <span class="keyword">else</span>:</div><div class="line">	                self.estimations[hash] = <span class="number">0</span></div><div class="line">	        <span class="keyword">else</span>:</div><div class="line">	            self.estimations[hash] = <span class="number">0.5</span></div><div class="line"></div><div class="line">    <span class="comment"># accept a state</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedState</span><span class="params">(self, state)</span>:</span></div><div class="line">        self.states.append(state)</div><div class="line"></div><div class="line">    <span class="comment"># update estimation according to reward</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">feedReward</span><span class="params">(self, reward)</span>:</span></div><div class="line">	    <span class="keyword">if</span> len(self.states) == <span class="number">0</span>:</div><div class="line">	        <span class="keyword">return</span></div><div class="line">	    self.states = [state.getHash() <span class="keyword">for</span> state <span class="keyword">in</span> self.states]</div><div class="line">	    target = reward</div><div class="line">	    <span class="keyword">for</span> latestState <span class="keyword">in</span> reversed(self.states):</div><div class="line">	        value = self.estimations[</div><div class="line">	            latestState] + self.stepSize * (target - self.estimations[latestState])</div><div class="line">	        self.estimations[latestState] = value</div><div class="line">	        target = value</div><div class="line">	    self.states = []</div><div class="line"></div><div class="line">    <span class="comment"># determine next action</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">takeAction</span><span class="params">(self)</span>:</span></div><div class="line">	    state = self.states[<span class="number">-1</span>]</div><div class="line">	    nextStates = []</div><div class="line">	    nextPositions = []</div><div class="line">	    <span class="keyword">for</span> i <span class="keyword">in</span> range(BOARD_ROWS):</div><div class="line">	        <span class="keyword">for</span> j <span class="keyword">in</span> range(BOARD_COLS):</div><div class="line">	            <span class="keyword">if</span> state.data[i, j] == <span class="number">0</span>:</div><div class="line">	                nextPositions.append([i, j])</div><div class="line">	                nextStates.append(state.nextState(</div><div class="line">	                    i, j, self.symbol).getHash())</div><div class="line">	    <span class="keyword">if</span> np.random.binomial(<span class="number">1</span>, self.exploreRate):</div><div class="line">	        np.random.shuffle(nextPositions)</div><div class="line">	        <span class="comment"># Not sure if truncating is the best way to deal with exploratory step</span></div><div class="line">	        <span class="comment"># Maybe it's better to only skip this step rather than forget all</span></div><div class="line">	        <span class="comment"># the history</span></div><div class="line">	        self.states = []</div><div class="line">	        action = nextPositions[<span class="number">0</span>]</div><div class="line">	        action.append(self.symbol)</div><div class="line">	        <span class="keyword">return</span> action</div><div class="line"></div><div class="line">	    values = []</div><div class="line">	    <span class="keyword">for</span> hash, pos <span class="keyword">in</span> zip(nextStates, nextPositions):</div><div class="line">	        values.append((self.estimations[hash], pos))</div><div class="line">	    np.random.shuffle(values)</div><div class="line">	    values.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>], reverse=<span class="keyword">True</span>)</div><div class="line">	    action = values[<span class="number">0</span>][<span class="number">1</span>]</div><div class="line">	    action.append(self.symbol)</div><div class="line">	    <span class="keyword">return</span> action</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">savePolicy</span><span class="params">(self)</span>:</span></div><div class="line">        fw = open(<span class="string">'optimal_policy_'</span> + str(self.symbol), <span class="string">'wb'</span>)</div><div class="line">        pickle.dump(self.estimations, fw)</div><div class="line">        fw.close()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loadPolicy</span><span class="params">(self)</span>:</span></div><div class="line">        fr = open(<span class="string">'optimal_policy_'</span> + str(self.symbol), <span class="string">'rb'</span>)</div><div class="line">        self.estimations = pickle.load(fr)</div><div class="line">        fr.close()</div><div class="line"></div><div class="line"><span class="comment"># human interface</span></div><div class="line"><span class="comment"># input a number to put a chessman</span></div><div class="line"><span class="comment"># | 1 | 2 | 3 |</span></div><div class="line"><span class="comment"># | 4 | 5 | 6 |</span></div><div class="line"><span class="comment"># | 7 | 8 | 9 |</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanPlayer</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, stepSize=<span class="number">0.1</span>, exploreRate=<span class="number">0.1</span>)</span>:</span></div><div class="line">        self.symbol = <span class="keyword">None</span></div><div class="line">        self.currentState = <span class="keyword">None</span></div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setSymbol</span><span class="params">(self, symbol)</span>:</span></div><div class="line">        self.symbol = symbol</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedState</span><span class="params">(self, state)</span>:</span></div><div class="line">        self.currentState = state</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedReward</span><span class="params">(self, reward)</span>:</span></div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">takeAction</span><span class="params">(self)</span>:</span></div><div class="line">        data = int(input(<span class="string">"Input your position:"</span>))</div><div class="line">        data -= <span class="number">1</span></div><div class="line">        i = data // int(BOARD_COLS)</div><div class="line">        j = data % BOARD_COLS</div><div class="line">        <span class="keyword">if</span> self.currentState.data[i, j] != <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> self.takeAction()</div><div class="line">        <span class="keyword">return</span> (i, j, self.symbol)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(epochs=<span class="number">20000</span>)</span>:</span></div><div class="line">    player1 = Player()</div><div class="line">    player2 = Player()</div><div class="line">    judger = Judger(player1, player2)</div><div class="line">    player1Win = <span class="number">0.0</span></div><div class="line">    player2Win = <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, epochs):</div><div class="line">        print(<span class="string">"Epoch"</span>, i)</div><div class="line">        winner = judger.play()</div><div class="line">        <span class="keyword">if</span> winner == <span class="number">1</span>:</div><div class="line">            player1Win += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> winner == <span class="number">-1</span>:</div><div class="line">            player2Win += <span class="number">1</span></div><div class="line">        judger.reset()</div><div class="line">    print(player1Win / epochs)</div><div class="line">    print(player2Win / epochs)</div><div class="line">    player1.savePolicy()</div><div class="line">    player2.savePolicy()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compete</span><span class="params">(turns=<span class="number">500</span>)</span>:</span></div><div class="line">    player1 = Player(exploreRate=<span class="number">0</span>)</div><div class="line">    player2 = Player(exploreRate=<span class="number">0</span>)</div><div class="line">    judger = Judger(player1, player2, <span class="keyword">False</span>)</div><div class="line">    player1.loadPolicy()</div><div class="line">    player2.loadPolicy()</div><div class="line">    player1Win = <span class="number">0.0</span></div><div class="line">    player2Win = <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, turns):</div><div class="line">        print(<span class="string">"Epoch"</span>, i)</div><div class="line">        winner = judger.play()</div><div class="line">        <span class="keyword">if</span> winner == <span class="number">1</span>:</div><div class="line">            player1Win += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> winner == <span class="number">-1</span>:</div><div class="line">            player2Win += <span class="number">1</span></div><div class="line">        judger.reset()</div><div class="line">    print(player1Win / turns)</div><div class="line">    print(player2Win / turns)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        player1 = Player(exploreRate=<span class="number">0</span>)</div><div class="line">        player2 = HumanPlayer()</div><div class="line">        judger = Judger(player1, player2, <span class="keyword">False</span>)</div><div class="line">        player1.loadPolicy()</div><div class="line">        winner = judger.play(<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">if</span> winner == player2.symbol:</div><div class="line">            print(<span class="string">"Win!"</span>)</div><div class="line">        <span class="keyword">elif</span> winner == player1.symbol:</div><div class="line">            print(<span class="string">"Lose!"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"Tie!"</span>)</div><div class="line">train()</div><div class="line">compete()</div><div class="line">play()</div></pre></td></tr></table></figure><p>The result are as follows.</p><p>The train process:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">Epoch <span class="number">19981</span></div><div class="line">Epoch <span class="number">19982</span></div><div class="line">Epoch <span class="number">19983</span></div><div class="line">Epoch <span class="number">19984</span></div><div class="line">Epoch <span class="number">19985</span></div><div class="line">Epoch <span class="number">19986</span></div><div class="line">Epoch <span class="number">19987</span></div><div class="line">Epoch <span class="number">19988</span></div><div class="line">Epoch <span class="number">19989</span></div><div class="line">Epoch <span class="number">19990</span></div><div class="line">Epoch <span class="number">19991</span></div><div class="line">Epoch <span class="number">19992</span></div><div class="line">Epoch <span class="number">19993</span></div><div class="line">Epoch <span class="number">19994</span></div><div class="line">Epoch <span class="number">19995</span></div><div class="line">Epoch <span class="number">19996</span></div><div class="line">Epoch <span class="number">19997</span></div><div class="line">Epoch <span class="number">19998</span></div><div class="line">Epoch <span class="number">19999</span></div><div class="line"><span class="number">0.8616</span></div><div class="line"><span class="number">0.0653</span></div></pre></td></tr></table></figure><p>compete:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">Epoch <span class="number">479</span></div><div class="line">Epoch <span class="number">480</span></div><div class="line">Epoch <span class="number">481</span></div><div class="line">Epoch <span class="number">482</span></div><div class="line">Epoch <span class="number">483</span></div><div class="line">Epoch <span class="number">484</span></div><div class="line">Epoch <span class="number">485</span></div><div class="line">Epoch <span class="number">486</span></div><div class="line">Epoch <span class="number">487</span></div><div class="line">Epoch <span class="number">488</span></div><div class="line">Epoch <span class="number">489</span></div><div class="line">Epoch <span class="number">490</span></div><div class="line">Epoch <span class="number">491</span></div><div class="line">Epoch <span class="number">492</span></div><div class="line">Epoch <span class="number">493</span></div><div class="line">Epoch <span class="number">494</span></div><div class="line">Epoch <span class="number">495</span></div><div class="line">Epoch <span class="number">496</span></div><div class="line">Epoch <span class="number">497</span></div><div class="line">Epoch <span class="number">498</span></div><div class="line">Epoch <span class="number">499</span></div><div class="line"><span class="number">1.0</span></div><div class="line"><span class="number">0.0</span></div></pre></td></tr></table></figure><p>play:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">-------------</div><div class="line">| <span class="number">0</span> | <span class="number">0</span> | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">| <span class="number">0</span> | <span class="number">0</span> | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">| <span class="number">0</span> | <span class="number">0</span> | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">-------------</div><div class="line">| <span class="number">0</span> | <span class="number">0</span> | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">| <span class="number">0</span> | * | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">| <span class="number">0</span> | <span class="number">0</span> | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">Input your position:<span class="number">1</span></div><div class="line">-------------</div><div class="line">| x | <span class="number">0</span> | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">| <span class="number">0</span> | * | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">| <span class="number">0</span> | <span class="number">0</span> | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">-------------</div><div class="line">| x | * | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">| <span class="number">0</span> | * | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">| <span class="number">0</span> | <span class="number">0</span> | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">Input your position:<span class="number">8</span></div><div class="line">-------------</div><div class="line">| x | * | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">| <span class="number">0</span> | * | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">| <span class="number">0</span> | x | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">-------------</div><div class="line">| x | * | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">| * | * | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">| <span class="number">0</span> | x | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">Input your position:<span class="number">6</span></div><div class="line">-------------</div><div class="line">| x | * | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">| * | * | x | </div><div class="line">-------------</div><div class="line">| <span class="number">0</span> | x | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">-------------</div><div class="line">| x | * | * | </div><div class="line">-------------</div><div class="line">| * | * | x | </div><div class="line">-------------</div><div class="line">| <span class="number">0</span> | x | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">Input your position:<span class="number">7</span></div><div class="line">-------------</div><div class="line">| x | * | * | </div><div class="line">-------------</div><div class="line">| * | * | x | </div><div class="line">-------------</div><div class="line">| x | x | <span class="number">0</span> | </div><div class="line">-------------</div><div class="line">Tie!</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What is the Tic-Tac-Toe game? Two players take turns playing on a three-by-three board. One player plays Xs and the other Os until one pl
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="reinforcement learning" scheme="http://yoursite.com/tags/reinforcement-learning/"/>
    
      <category term="TD" scheme="http://yoursite.com/tags/TD/"/>
    
  </entry>
  
  <entry>
    <title>How to generate a unique ID in a distribute system</title>
    <link href="http://yoursite.com/2017/05/25/How-to-generate-a-unique-ID-in-a-distribute-system/"/>
    <id>http://yoursite.com/2017/05/25/How-to-generate-a-unique-ID-in-a-distribute-system/</id>
    <published>2017-05-25T05:03:40.000Z</published>
    <updated>2017-05-25T07:22:01.461Z</updated>
    
    <content type="html"><![CDATA[<p>现今所有的企业级应用都需要处理海量的数据对象，这些对象都需要一个唯一的ID与其他的对象区分开来。在关系型数据库中，我们一般是创建主键来达到这个目的。一些数据库支持内建的列类型（AUTO_INCREMENT/AUTO_NUMBER）来产生一个单调递增的64位长的数。有些人喜欢在他们的应用层中生成id，以便获得对这代人的更多控制，然后使用数据层保存记录。但是，第二种方法通过缓存最新生成的数字，并且通过某种持久性技术保存已经生成的id的轨迹来避免主键冲突。</p><p>上述两种方法本身都有各自的优点和缺点，但它们都有一个共同的缺点，即在分布式架构的情况下，这些都不具有弹性。那么需要考虑数据分片在多个数据库节点之间时，第一个技术如何确保不同节点中的表不会产生相同的auto_increment数或想象一个拓扑，在多个节点上运行应用程序，那么第二种技术如何满足所有节点的需求。</p><p>没有一种方法可以满足所有的需求，下面是在许多大型应用程序中使用的最流行的方法。</p><h2 id="1-数据库自增长序列或字段"><a href="#1-数据库自增长序列或字段" class="headerlink" title="1. 数据库自增长序列或字段"></a><strong>1. 数据库自增长序列或字段</strong></h2><p>最常见的方式。利用数据库，全数据库唯一。</p><p>优点：</p><p>1）简单，代码方便，性能可以接受。</p><p>2）数字ID天然排序，对分页或者需要排序的结果很有帮助。</p><p>缺点：</p><p>1）不同数据库语法和实现不同，数据库迁移的时候或多数据库版本支持的时候需要处理。</p><p>2）在单个数据库或读写分离或一主多从的情况下，只有一个主库可以生成。有单点故障的风险。</p><p>3）在性能达不到要求的情况下，比较难于扩展。</p><p>4）如果遇见多个系统需要合并或者涉及到数据迁移会相当痛苦。</p><p>5）分表分库的时候会有麻烦。</p><p>优化方案：</p><p>1）针对主库单点，如果有多个Master库，则每个Master库设置的起始数字不一样，步长一样，可以是Master的个数。比如：Master1 生成的是 1，4，7，10，Master2生成的是2,5,8,11 Master3生成的是 3,6,9,12。这样就可以有效生成集群中的唯一ID，也可以大大降低ID生成数据库操作的负载。</p><h2 id="2-UUID"><a href="#2-UUID" class="headerlink" title="2. UUID"></a><strong>2. UUID</strong></h2><p>常见的方式。可以利用数据库也可以利用程序生成，一般来说全球唯一。</p><p>优点：</p><p>1）简单，代码方便。</p><p>2）生成ID性能非常好，基本不会有性能问题。</p><p>3）全球唯一，在遇见数据迁移，系统数据合并，或者数据库变更等情况下，可以从容应对。</p><p>缺点：</p><p>1）没有排序，无法保证趋势递增。</p><p>2）UUID往往是使用字符串存储，查询的效率比较低。</p><p>3）存储空间比较大，如果是海量数据库，就需要考虑存储量的问题。</p><p>4）传输数据量大</p><p>5）不可读。</p><h2 id="3-UUID的变种"><a href="#3-UUID的变种" class="headerlink" title="3. UUID的变种"></a><strong>3. UUID的变种</strong></h2><p>1）为了解决UUID不可读，可以使用UUID to Int64的方法。及</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// &lt;summary&gt;</span></div><div class="line"><span class="comment">/// 根据GUID获取唯一数字序列</span></div><div class="line"><span class="comment">/// &lt;/summary&gt;</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">GuidToInt64</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">byte</span>[] bytes = Guid.NewGuid().ToByteArray();</div><div class="line">    <span class="keyword">return</span> BitConverter.ToInt64(bytes, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2）为了解决UUID无序的问题，NHibernate在其主键生成方式中提供了Comb算法（combined guid/timestamp）。保留GUID的10个字节，用另6个字节表示GUID生成的时间（DateTime）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// &lt;summary&gt; </span></div><div class="line"><span class="comment">/// Generate a new &lt;see cref="Guid"/&gt; using the comb algorithm. </span></div><div class="line"><span class="comment">/// &lt;/summary&gt; </span></div><div class="line"><span class="function"><span class="keyword">private</span> Guid <span class="title">GenerateComb</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">byte</span>[] guidArray = Guid.NewGuid().ToByteArray();</div><div class="line"> </div><div class="line">    DateTime baseDate = <span class="keyword">new</span> DateTime(<span class="number">1900</span>, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    DateTime now = DateTime.Now;</div><div class="line"> </div><div class="line">    <span class="comment">// Get the days and milliseconds which will be used to build    </span></div><div class="line">    <span class="comment">//the byte string    </span></div><div class="line">    TimeSpan days = <span class="keyword">new</span> TimeSpan(now.Ticks - baseDate.Ticks);</div><div class="line">    TimeSpan msecs = now.TimeOfDay;</div><div class="line"> </div><div class="line">    <span class="comment">// Convert to a byte array        </span></div><div class="line">    <span class="comment">// Note that SQL Server is accurate to 1/300th of a    </span></div><div class="line">    <span class="comment">// millisecond so we divide by 3.333333    </span></div><div class="line">    <span class="keyword">byte</span>[] daysArray = BitConverter.GetBytes(days.Days);</div><div class="line">    <span class="keyword">byte</span>[] msecsArray = BitConverter.GetBytes((<span class="keyword">long</span>)</div><div class="line">      (msecs.TotalMilliseconds / <span class="number">3.333333</span>));</div><div class="line"> </div><div class="line">    <span class="comment">// Reverse the bytes to match SQL Servers ordering    </span></div><div class="line">    Array.Reverse(daysArray);</div><div class="line">    Array.Reverse(msecsArray);</div><div class="line"> </div><div class="line">    <span class="comment">// Copy the bytes into the guid    </span></div><div class="line">    Array.Copy(daysArray, daysArray.Length - <span class="number">2</span>, guidArray,</div><div class="line">      guidArray.Length - <span class="number">6</span>, <span class="number">2</span>);</div><div class="line">    Array.Copy(msecsArray, msecsArray.Length - <span class="number">4</span>, guidArray,</div><div class="line">      guidArray.Length - <span class="number">4</span>, <span class="number">4</span>);</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Guid(guidArray);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>用上面的算法测试一下，得到如下的结果：作为比较，前面3个是使用COMB算法得出的结果，最后12个字符串是时间序（统一毫秒生成的3个UUID），过段时间如果再次生成，则12个字符串会比图示的要大。后面3个是直接生成的GUID。</p><p><a href="http://images2015.cnblogs.com/blog/15700/201602/15700-20160227213048174-1443183768.png" target="_blank" rel="external"><img src="http://images2015.cnblogs.com/blog/15700/201602/15700-20160227213048721-177386520.png" alt="ODX}_`4N5X$F93OAS~`8Z)C"></a></p><p>如果想把时间序放在前面，可以生成后改变12个字符串的位置，也可以修改算法类的最后两个Array.Copy。</p><h2 id="4-Redis生成ID"><a href="#4-Redis生成ID" class="headerlink" title="4. Redis生成ID"></a><strong>4. Redis生成ID</strong></h2><p>当使用数据库来生成ID性能不够要求的时候，我们可以尝试使用Redis来生成ID。这主要依赖于Redis是单线程的，所以也可以用生成全局唯一的ID。可以用Redis的原子操作 INCR和INCRBY来实现。</p><p>可以使用Redis集群来获取更高的吞吐量。假如一个集群中有5台Redis。可以初始化每台Redis的值分别是1,2,3,4,5，然后步长都是5。各个Redis生成的ID为：</p><p>A：1,6,11,16,21</p><p>B：2,7,12,17,22</p><p>C：3,8,13,18,23</p><p>D：4,9,14,19,24</p><p>E：5,10,15,20,25</p><p>这个，随便负载到哪个机确定好，未来很难做修改。但是3-5台服务器基本能够满足器上，都可以获得不同的ID。但是步长和初始值一定需要事先需要了。使用Redis集群也可以方式单点故障的问题。</p><p>另外，比较适合使用Redis来生成每天从0开始的流水号。比如订单号=日期+当日自增长号。可以每天在Redis中生成一个Key，使用INCR进行累加。</p><p>优点：</p><p>1）不依赖于数据库，灵活方便，且性能优于数据库。</p><p>2）数字ID天然排序，对分页或者需要排序的结果很有帮助。</p><p>缺点：</p><p>1）如果系统中没有Redis，还需要引入新的组件，增加系统复杂度。</p><p>2）需要编码和配置的工作量比较大。</p><h2 id="5-Twitter的snowflake算法"><a href="#5-Twitter的snowflake算法" class="headerlink" title="5. Twitter的snowflake算法"></a><strong>5. Twitter的snowflake算法</strong></h2><p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。</p><p>C#代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// &lt;summary&gt;</span></div><div class="line">    <span class="comment">/// From: https://github.com/twitter/snowflake</span></div><div class="line">    <span class="comment">/// An object that generates IDs.</span></div><div class="line">    <span class="comment">/// This is broken into a separate class in case</span></div><div class="line">    <span class="comment">/// we ever want to support multiple worker threads</span></div><div class="line">    <span class="comment">/// per process</span></div><div class="line">    <span class="comment">/// &lt;/summary&gt;</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdWorker</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">long</span> workerId;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">long</span> datacenterId;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> twepoch = <span class="number">1288834974657L</span>;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> workerIdBits = <span class="number">5L</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> datacenterIdBits = <span class="number">5L</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> maxWorkerId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; (<span class="keyword">int</span>)workerIdBits);</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> maxDatacenterId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; (<span class="keyword">int</span>)datacenterIdBits);</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> sequenceBits = <span class="number">12L</span>;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">long</span> workerIdShift = sequenceBits;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">long</span> datacenterIdShift = sequenceBits + workerIdBits;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">long</span> sequenceMask = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; (<span class="keyword">int</span>)sequenceBits);</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">long</span> lastTimestamp = -<span class="number">1L</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> object syncRoot = <span class="keyword">new</span> object();</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IdWorker</span><span class="params">(<span class="keyword">long</span> workerId, <span class="keyword">long</span> datacenterId)</span></span></div><div class="line">        &#123;</div><div class="line"></div><div class="line">            <span class="comment">// sanity check for workerId</span></div><div class="line">            <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(string.Format(<span class="string">"worker Id can't be greater than %d or less than 0"</span>, maxWorkerId));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(string.Format(<span class="string">"datacenter Id can't be greater than %d or less than 0"</span>, maxDatacenterId));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">this</span>.workerId = workerId;</div><div class="line">            <span class="keyword">this</span>.datacenterId = datacenterId;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span></span></div><div class="line">        &#123;</div><div class="line">            lock (syncRoot)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">long</span> timestamp = timeGen();</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (timestamp &lt; lastTimestamp)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationException(string.Format(<span class="string">"Clock moved backwards.  Refusing to generate id for %d milliseconds"</span>, lastTimestamp - timestamp));</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (lastTimestamp == timestamp)</div><div class="line">                &#123;</div><div class="line">                    sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</div><div class="line">                    <span class="keyword">if</span> (sequence == <span class="number">0</span>)</div><div class="line">                    &#123;</div><div class="line">                        timestamp = tilNextMillis(lastTimestamp);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    sequence = <span class="number">0L</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                lastTimestamp = timestamp;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> ((timestamp - twepoch) &lt;&lt; (<span class="keyword">int</span>)timestampLeftShift) | (datacenterId &lt;&lt; (<span class="keyword">int</span>)datacenterIdShift) | (workerId &lt;&lt; (<span class="keyword">int</span>)workerIdShift) | sequence;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">tilNextMillis</span><span class="params">(<span class="keyword">long</span> lastTimestamp)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">long</span> timestamp = timeGen();</div><div class="line">            <span class="keyword">while</span> (timestamp &lt;= lastTimestamp)</div><div class="line">            &#123;</div><div class="line">                timestamp = timeGen();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> timestamp;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">timeGen</span><span class="params">()</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> (<span class="keyword">long</span>)(DateTime.UtcNow - <span class="keyword">new</span> DateTime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, DateTimeKind.Utc)).TotalMilliseconds;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TestIdWorker</span><span class="params">()</span></span></div><div class="line">        &#123;</div><div class="line">            HashSet&lt;<span class="keyword">long</span>&gt; set = <span class="keyword">new</span> HashSet&lt;<span class="keyword">long</span>&gt;();</div><div class="line">            IdWorker idWorker1 = <span class="keyword">new</span> IdWorker(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            IdWorker idWorker2 = <span class="keyword">new</span> IdWorker(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">            Thread t1 = <span class="keyword">new</span> Thread(() =&gt; DoTestIdWoker(idWorker1, set));</div><div class="line">            Thread t2 = <span class="keyword">new</span> Thread(() =&gt; DoTestIdWoker(idWorker2, set));</div><div class="line">            t1.IsBackground = <span class="keyword">true</span>;</div><div class="line">            t2.IsBackground = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">            t1.Start();</div><div class="line">            t2.Start();</div><div class="line">            <span class="keyword">try</span></div><div class="line">            &#123;</div><div class="line">                Thread.Sleep(<span class="number">30000</span>);</div><div class="line">                t1.Abort();</div><div class="line">                t2.Abort();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span> (Exception e)</div><div class="line">            &#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            Console.WriteLine(<span class="string">"done"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DoTestIdWoker</span><span class="params">(IdWorker idWorker, HashSet&lt;<span class="keyword">long</span>&gt; set)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">long</span> id = idWorker.nextId();</div><div class="line">                <span class="keyword">if</span> (!set.Add(id))</div><div class="line">                &#123;</div><div class="line">                    Console.WriteLine(<span class="string">"duplicate:"</span> + id);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                Thread.Sleep(<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure><p>snowflake算法可以根据自身项目的需要进行一定的修改。比如估算未来的数据中心个数，每个数据中心的机器数以及统一毫秒可以能的并发数来调整在算法中所需要的bit数。</p><p>优点：</p><p>1）不依赖于数据库，灵活方便，且性能优于数据库。</p><p>2）ID按照时间在单机上是递增的。</p><p>缺点：</p><p>1）在单机上是递增的，但是由于涉及到分布式环境，每台机器上的时钟不可能完全同步，也许有时候也会出现不是全局递增的情况。</p><p>Snowflake 的其他变种</p><p>Snowflake 有一些变种, 各个应用结合自己的实际场景对 Snowflake 做了一些改动. 这里主要介绍 3 种.</p><h3 id="5-1-Boundary-flake"><a href="#5-1-Boundary-flake" class="headerlink" title="5.1 Boundary flake"></a><strong>5.1 Boundary flake</strong></h3><p>变化:</p><ul><li>ID 长度扩展到 128 bits:</li><li>最高 64 bits 时间戳;</li><li>然后是 48 bits 的 Worker 号 (和 Mac 地址一样长);</li><li>最后是 16 bits 的 Seq Number</li><li>由于它用 48 bits 作为 Worker ID, 和 Mac 地址的长度一样, 这样启动时不需要和 Zookeeper 通讯获取 Worker ID. 做到了完全的去中心化</li><li>基于 Erlang</li></ul><p>它这样做的目的是用更多的 bits 实现更小的冲突概率, 这样就支持更多的 Worker 同时工作. 同时, 每毫秒能分配出更多的 ID</p><h3 id="5-2-Simpleflake"><a href="#5-2-Simpleflake" class="headerlink" title="5.2 Simpleflake"></a><strong>5.2 Simpleflake</strong></h3><p>Simpleflake 的思路是取消 Worker 号, 保留 41 bits 的 Timestamp, 同时把 sequence number 扩展到 22 bits;</p><p>Simpleflake 的特点:</p><ul><li>sequence number 完全靠随机产生 (这样也导致了生成的 ID 可能出现重复)</li><li>没有 Worker 号, 也就不需要和 Zookeeper 通讯, 实现了完全去中心化</li><li>Timestamp 保持和 Snowflake 一致, 今后可以无缝升级到 Snowflake</li></ul><p>Simpleflake 的问题就是 sequence number 完全随机生成, 会导致生成的 ID 重复的可能. 这个生成 ID 重复的概率随着每秒生成的 ID 数的增长而增长.</p><p>所以, Simpleflake 的限制就是每秒生成的 ID 不能太多 (最好小于 100次/秒, 如果大于 100次/秒的场景, Simpleflake 就不适用了, 建议切换回 Snowflake).</p><h3 id="5-3-instagram-的做法"><a href="#5-3-instagram-的做法" class="headerlink" title="5.3  instagram 的做法"></a><strong>5.3 instagram 的做法</strong></h3><p>先简单介绍一下 instagram 的分布式存储方案:</p><ul><li>先把每个 Table 划分为多个逻辑分片 (logic Shard), 逻辑分片的数量可以很大, 例如 2000 个逻辑分片</li><li>然后制定一个规则, 规定每个逻辑分片被存储到哪个数据库实例上面; 数据库实例不需要很多. 例如, 对有 2 个 PostgreSQL 实例的系统 (instagram 使用 PostgreSQL); 可以使用奇数逻辑分片存放到第一个数据库实例, 偶数逻辑分片存放到第二个数据库实例的规则</li><li>每个 Table 指定一个字段作为分片字段 (例如, 对用户表, 可以指定 uid 作为分片字段)</li><li>插入一个新的数据时, 先根据分片字段的值, 决定数据被分配到哪个逻辑分片 (logic Shard)</li><li>然后再根据 logic Shard 和 PostgreSQL 实例的对应关系, 确定这条数据应该被存放到哪台 PostgreSQL 实例上</li></ul><p>instagram unique ID 的组成:</p><ul><li>41 bits: Timestamp (毫秒)</li><li>13 bits: 每个 logic Shard 的代号 (最大支持 8 x 1024 个 logic Shards)</li><li>10 bits: sequence number; 每个 Shard 每毫秒最多可以生成 1024 个 ID</li></ul><p>生成 unique ID 时, 41 bits 的 Timestamp 和 Snowflake 类似, 这里就不细说了.</p><p>主要介绍一下 13 bits 的 logic Shard 代号 和 10 bits 的 sequence number 怎么生成.</p><p>logic Shard 代号:</p><ul><li>假设插入一条新的用户记录, 插入时, 根据 uid 来判断这条记录应该被插入到哪个 logic Shard 中.</li><li>假设当前要插入的记录会被插入到第 1341 号 logic Shard 中 (假设当前的这个 Table 一共有 2000 个 logic Shard)</li><li>新生成 ID 的 13 bits 段要填的就是 1341 这个数字</li></ul><p>sequence number 利用 PostgreSQL 每个 Table 上的 auto-increment sequence 来生成:</p><ul><li>如果当前表上已经有 5000 条记录, 那么这个表的下一个 auto-increment sequence 就是 5001 (直接调用 PL/PGSQL 提供的方法可以获取到)</li><li>然后把 这个 5001 对 1024 取模就得到了 10 bits 的 sequence number</li></ul><p>instagram 这个方案的优势在于:</p><ul><li>利用 logic Shard 号来替换 Snowflake 使用的 Worker 号, 就不需要到中心节点获取 Worker 号了. 做到了完全去中心化</li><li>另外一个附带的好处就是, 可以通过 ID 直接知道这条记录被存放在哪个 logic Shard 上</li></ul><p>同时, 今后做数据迁移的时候, 也是按 logic Shard 为单位做数据迁移的, 所以这种做法也不会影响到今后的数据迁移</p><h2 id="6-利用zookeeper生成唯一ID"><a href="#6-利用zookeeper生成唯一ID" class="headerlink" title="6. 利用zookeeper生成唯一ID"></a><strong>6. 利用zookeeper生成唯一ID</strong></h2><p>zookeeper主要通过其znode数据版本来生成序列号，可以生成32位和64位的数据版本号，客户端可以使用这个版本号来作为唯一的序列号。很少会使用zookeeper来生成唯一ID。主要是由于需要依赖zookeeper，并且是多步调用API，如果在竞争较大的情况下，需要考虑使用分布式锁。因此，性能在高并发的分布式环境下，也不甚理想。</p><h2 id="7-MongoDB的ObjectId"><a href="#7-MongoDB的ObjectId" class="headerlink" title="7. MongoDB的ObjectId"></a><strong>7. MongoDB的ObjectId</strong></h2><p>MongoDB的ObjectId和snowflake算法类似。它设计成轻量型的，不同的机器都能用全局唯一的同种方法方便地生成它。MongoDB 从一开始就设计用来作为分布式数据库，处理多个节点是一个核心要求。使其在分片环境中要容易生成得多。</p><p>其格式如下：</p><p><img src="http://images.blogjava.net/blogjava_net/dongbule/46046/o_111.PNG?_=5208136" alt="mogonDB"></p><p>前4 个字节是从标准纪元开始的时间戳，单位为秒。时间戳，与随后的5 个字节组合起来，提供了秒级别的唯一性。由于时间戳在前，这意味着ObjectId 大致会按照插入的顺序排列。这对于某些方面很有用，如将其作为索引提高效率。这4 个字节也隐含了文档创建的时间。绝大多数客户端类库都会公开一个方法从ObjectId 获取这个信息。<br>接下来的3 字节是所在主机的唯一标识符。通常是机器主机名的散列值。这样就可以确保不同主机生成不同的ObjectId，不产生冲突。<br>为了确保在同一台机器上并发的多个进程产生的ObjectId 是唯一的，接下来的两字节来自产生ObjectId 的进程标识符（PID）。<br>前9 字节保证了同一秒钟不同机器不同进程产生的ObjectId 是唯一的。后3 字节就是一个自动增加的计数器，确保相同进程同一秒产生的ObjectId 也是不一样的。同一秒钟最多允许每个进程拥有2563（16 777 216）个不同的ObjectId。</p><h2 id="8-Flickr-的全局主键生成方案"><a href="#8-Flickr-的全局主键生成方案" class="headerlink" title="8. Flickr 的全局主键生成方案"></a><strong>8. Flickr 的全局主键生成方案</strong></h2><p><a href="http://code.flickr.net/2010/02/08/ticket-servers-distributed-unique-primary-keys-on-the-cheap/" target="_blank" rel="external">flickr</a>巧妙地使用了MySQL的自增ID，及replace into语法，十分简洁地实现了分片ID生成功能。</p><p>比如创建64位的自增id：<br>首先，创建一个表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`uid_sequence`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</div><div class="line">  <span class="string">`stub`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">default</span> <span class="string">''</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`id`</span>),</div><div class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`stub`</span> (<span class="string">`stub`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=MyISAM;123456123456</div></pre></td></tr></table></figure><p>SELECT * from uid_sequence 输出：<br>+——————-+——+<br>| id | stub |<br>+——————-+——+<br>| 72157623227190423 | a |</p><p>如果我需要一个全局的唯一的64位uid，则执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">REPLACE</span> <span class="keyword">INTO</span> uid_sequence (stub) <span class="keyword">VALUES</span> (<span class="string">'a'</span>);</div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">LAST_INSERT_ID</span>();1212</div></pre></td></tr></table></figure><p>说明：</p><ul><li>用 REPLACE INTO 代替 INSERT INTO 的好处是避免表行数太大，还要另外定期清理。</li><li>stub 字段要设为唯一索引，这个 sequence 表只有一条纪录，但也可以同时为多张表生成全局主键，例如user_order_id。除非你需要表的主键是连续的，那么就另建一个 user_order_id_sequence 表。</li><li>经过实际对比测试，使用 MyISAM 比 Innodb 有更高的性能。</li></ul><p>这里flickr使用两台数据库（也可以更多）作为自增序列生成，通过这两台机器做主备和负载均衡。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">TicketServer1:</div><div class="line">auto-increment-increment = 2</div><div class="line">auto-increment-offset = 1</div><div class="line"></div><div class="line">TicketServer2:</div><div class="line">auto-increment-increment = 2</div><div class="line">auto-increment-offset = 212345671234567</div></pre></td></tr></table></figure><p>优点：</p><ul><li>简单可靠。</li></ul><p>缺点：</p><ul><li>id只是一个ID，没有带入时间，shardingId等信息。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现今所有的企业级应用都需要处理海量的数据对象，这些对象都需要一个唯一的ID与其他的对象区分开来。在关系型数据库中，我们一般是创建主键来达到这个目的。一些数据库支持内建的列类型（AUTO_INCREMENT/AUTO_NUMBER）来产生一个单调递增的64位长的数。有些人喜欢
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Reproduce DQN result</title>
    <link href="http://yoursite.com/2017/05/24/Reproduce-DQN-result/"/>
    <id>http://yoursite.com/2017/05/24/Reproduce-DQN-result/</id>
    <published>2017-05-24T04:56:51.000Z</published>
    <updated>2017-05-24T05:25:38.411Z</updated>
    
    <content type="html"><![CDATA[<p>论文链接：<a href="https://www.nature.com/nature/journal/v518/n7540/full/nature14236.html" target="_blank" rel="external">https://www.nature.com/nature/journal/v518/n7540/full/nature14236.html</a></p><p>源代码地址：<a href="https://sites.google.com/a/deepmind.com/dqn/" target="_blank" rel="external">https://sites.google.com/a/deepmind.com/dqn/</a></p><p>由于源代码中只有训练阶段，没有测试阶段，因此我才用了这个<a href="https://github.com/kuz/DeepMind-Atari-Deep-Q-Learner" target="_blank" rel="external">项目</a>的测试脚本，并且生成游戏动图。</p><p>实验复现的步骤如下（这里引用作者原文）：</p><h2 id="DQN-3-0"><a href="#DQN-3-0" class="headerlink" title="DQN 3.0"></a>DQN 3.0</h2><p>This project contains the source code of DQN 3.0, a Lua-based deep reinforcement learning architecture, necessary to reproduce the experiments described in the paper “Human-level control through deep reinforcement learning”, Nature 518, 529–533 (26 February 2015) doi:10.1038/nature14236.</p><p>To replicate the experiment results, a number of dependencies need to be installed, namely:</p><ul><li>LuaJIT and Torch 7.0</li><li>nngraph</li><li>Xitari (fork of the Arcade Learning Environment (Bellemare et al., 2013))</li><li>AleWrap (a lua interface to Xitari) An install script for these dependencies is provided.</li></ul><p>Two run scripts are provided: run_cpu and run_gpu. As the names imply, the former trains the DQN network using regular CPUs, while the latter uses GPUs (CUDA), which typically results in a significant speed-up.</p><h2 id="Installation-instructions"><a href="#Installation-instructions" class="headerlink" title="Installation instructions"></a>Installation instructions</h2><p>The installation requires Linux with apt-get.</p><p>Note: In order to run the GPU version of DQN, you should additionally have the NVIDIA® CUDA® (version 5.5 or later) toolkit installed prior to the Torch installation below. This can be downloaded from <a href="https://developer.nvidia.com/cuda-toolkit" target="_blank" rel="external">https://developer.nvidia.com/cuda-toolkit</a> and installation instructions can be found in <a href="http://docs.nvidia.com/cuda/cuda-getting-started-guide-for-linux" target="_blank" rel="external">http://docs.nvidia.com/cuda/cuda-getting-started-guide-for-linux</a></p><p>To train DQN on Atari games, the following components must be installed:</p><ul><li>LuaJIT and Torch 7.0</li><li>nngraph</li><li>Xitari</li><li>AleWrap</li></ul><p>To install all of the above in a subdirectory called ‘torch’, it should be enough to run</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./install_dependencies.sh</div></pre></td></tr></table></figure><p>from the base directory of the package.</p><p>Note: The above install script will install the following packages via apt-get: build-essential, gcc, g++, cmake, curl, libreadline-dev, git-core, libjpeg-dev, libpng-dev, ncurses-dev, imagemagick, unzip</p><h2 id="Training-DQN-on-Atari-games"><a href="#Training-DQN-on-Atari-games" class="headerlink" title="Training DQN on Atari games"></a>Training DQN on Atari games</h2><p>Prior to running DQN on a game, you should copy its ROM in the ‘roms’ subdirectory. It should then be sufficient to run the script</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./run_cpu &lt;game name&gt;</div></pre></td></tr></table></figure><p>Or, if GPU support is enabled,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./run_gpu &lt;game name&gt;</div></pre></td></tr></table></figure><p>Note: On a system with more than one GPU, DQN training can be launched on a specified GPU by setting the environment variable GPU_ID, e.g. by</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GPU_ID=2 ./run_gpu &lt;game name&gt;</div></pre></td></tr></table></figure><p>If GPU_ID is not specified, the first available GPU (ID 0) will be used by default.</p><p>这之后是我采用另一个项目的测试步骤：</p><h2 id="Storing-a-gif-for-a-trained-network"><a href="#Storing-a-gif-for-a-trained-network" class="headerlink" title="Storing a .gif for a trained network"></a>Storing a .gif for a trained network</h2><p>Once you have a snapshot of a network you can run</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./test_gpu &lt;game name&gt; &lt;snapshopt filename&gt;</div></pre></td></tr></table></figure><p>to make it play one game and store the .gif under <code>gifs</code>. For example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./test_gpu breakout DQN3_0_1_breakout_FULL_Y.t7</div></pre></td></tr></table></figure><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><p>Options to DQN are set within run_cpu (respectively, run_gpu). You may, for example, want to change the frequency at which information is output to stdout by setting ‘prog_freq’ to a different value.</p><p>我在实验过程中碰到了一系列的问题，实验环境为Windows 10 Vmware Workstation中运行的Ubuntu 16.04 LTS虚拟机。需要声明的是，我才用原始代码并没有运行成功，经分析应该是虚拟机的问题，但以下碰到的问题应当是具有一般性地，下一步准备采用测试项目代码运行。</p><h2 id="Some-Problem"><a href="#Some-Problem" class="headerlink" title="Some Problem"></a>Some Problem</h2><h3 id="run-cpu之后出现Segmentation-fault错误"><a href="#run-cpu之后出现Segmentation-fault错误" class="headerlink" title="./run_cpu之后出现Segmentation fault错误"></a>./run_cpu之后出现Segmentation fault错误</h3><ol><li>可能是因为其后参数名中出现大写字母</li><li>可能是因为内存不足，可以尝试换一个游戏运行</li></ol><h3 id="test-cpu之后提示找不到gd"><a href="#test-cpu之后提示找不到gd" class="headerlink" title="./test_cpu之后提示找不到gd"></a>./test_cpu之后提示找不到gd</h3><p>这个时候需要手动安装gd，具体安装方法如下：</p><p>下载地址：<a href="https://ittner.github.io/lua-gd/manual.html#download" target="_blank" rel="external">https://ittner.github.io/lua-gd/manual.html#download</a></p><p>我下载的是这个版本<a href="http://files.luaforge.net/releases/lua-gd/lua-gd/lua-gd-2.0.33r2forLua5.1/lua-gd-2.0.33r2.tar.gz" target="_blank" rel="external">http://files.luaforge.net/releases/lua-gd/lua-gd/lua-gd-2.0.33r2forLua5.1/lua-gd-2.0.33r2.tar.gz</a></p><p>下载解压后，进到对应的目录，</p><p>执行命令：</p><p><code>make</code></p><p>make成功后，执行：</p><p><code>sudo make install</code></p><p>如果中间出现错误的话，请把下面的几个包都安装上：</p><p><code>sudo apt-get install lua5.1</code><br><code>sudo apt-get install lua5.1-0-dev</code><br><code>sudo apt-get install liblua5.1-0-dev</code><br><code>sudo apt-get install libgd2-dev</code></p><p>安装成功之后会有如下提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">gcc -o gd.so `gdlib-config --features |sed -e &quot;s/GD_/-DGD_/g&quot;`</div><div class="line">`gdlib-config --cflags` `pkg-config lua5.1 --cflags` -O3 -Wall -shared</div><div class="line">`gdlib-config --ldflags` `gdlib-config --libs` `pkg-config lua5.1 --libs`</div><div class="line">-lgd luagd.c</div><div class="line">lua test_features.lua</div><div class="line">Lua-GD version: lua-gd 2.0.33r2</div><div class="line">Lua-GD features:</div><div class="line">    PNG support ..................... Enabled</div><div class="line">    GIF support ..................... Enabled</div><div class="line">    JPEG support .................... Enabled</div><div class="line">    XPM/XBM support ................. Enabled</div><div class="line">    FreeType support ................ Enabled</div><div class="line">    Fontconfig support .............. Enabled</div></pre></td></tr></table></figure><h3 id="安装gd时进行make的时候出现gd-h-No-such-file-or-directory"><a href="#安装gd时进行make的时候出现gd-h-No-such-file-or-directory" class="headerlink" title="安装gd时进行make的时候出现gd.h: No such file or directory"></a>安装gd时进行make的时候出现gd.h: No such file or directory</h3><p>Try to install this package if you are in debian : libgd2-noxpm-dev</p><h3 id="安装gd时进行make的时候出现srlua-makefile-error-lua-h-No-such-file-or-directory"><a href="#安装gd时进行make的时候出现srlua-makefile-error-lua-h-No-such-file-or-directory" class="headerlink" title="安装gd时进行make的时候出现srlua makefile error lua.h No such file or directory"></a>安装gd时进行make的时候出现srlua makefile error lua.h No such file or directory</h3><p><code>sudo apt-get install liblua5.1-0-dev</code></p><h3 id="在解决以上问题后依然通不过编译"><a href="#在解决以上问题后依然通不过编译" class="headerlink" title="在解决以上问题后依然通不过编译"></a>在解决以上问题后依然通不过编译</h3><p>这里引用了<a href="https://groups.google.com/forum/#!topic/bamboo-cn/myYzVk5XLgc" target="_blank" rel="external">https://groups.google.com/forum/#!topic/bamboo-cn/myYzVk5XLgc</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;论文链接：&lt;a href=&quot;https://www.nature.com/nature/journal/v518/n7540/full/nature14236.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.nature.c
    
    </summary>
    
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
      <category term="reinforcement learning" scheme="http://yoursite.com/tags/reinforcement-learning/"/>
    
  </entry>
  
  <entry>
    <title>Question Answering: A Very Brief Introduction</title>
    <link href="http://yoursite.com/2017/05/13/Question-Answering-A-Very-Brief-Introduction/"/>
    <id>http://yoursite.com/2017/05/13/Question-Answering-A-Very-Brief-Introduction/</id>
    <published>2017-05-13T05:07:06.000Z</published>
    <updated>2017-05-13T07:18:22.688Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Find answers to (natual language) questions by machine</p></li><li><p>Types of questions</p><ul><li>Factoid</li><li>Definition</li><li>Yes-No</li><li>Opinion</li><li>Comparison</li></ul></li><li><p>Multiple Intelligences in Modern in QA Systems</p><ul><li><p>Knowledge-QA</p><p>结构化的，基于知识库，其实就是一个图，结点是实体，边是语义关系。关键是能够提取中问题中的实体以及实体之间的语义关系</p></li><li><p>Document-QA</p><p>非结构化的</p></li><li><p>Social-QA</p><p>类似Quora, Zhihu, Stackoverflow等</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;&lt;li&gt;&lt;p&gt;Find answers to (natual language) questions by machine&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Types of questions&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Factoid&lt;/li&gt;&lt;li&gt;Definition&lt;/l
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="QA" scheme="http://yoursite.com/tags/QA/"/>
    
  </entry>
  
  <entry>
    <title>Bot Sample: MultiDialog</title>
    <link href="http://yoursite.com/2017/05/12/Bot-Sample-MultiDialog/"/>
    <id>http://yoursite.com/2017/05/12/Bot-Sample-MultiDialog/</id>
    <published>2017-05-12T02:32:20.000Z</published>
    <updated>2017-05-12T14:12:56.112Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o7ie0tcjk.bkt.clouddn.com/bot/multi_dialog/BotMultiDialogFlow.png" alt="flow"></p><h2 id="MessageController-cs"><a href="#MessageController-cs" class="headerlink" title="MessageController.cs"></a>MessageController.cs</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">MultiDialogsBot</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">using</span> System.Net;</div><div class="line">    <span class="keyword">using</span> System.Net.Http;</div><div class="line">    <span class="keyword">using</span> System.Threading.Tasks;</div><div class="line">    <span class="keyword">using</span> System.Web.Http;</div><div class="line">    <span class="keyword">using</span> Dialogs;</div><div class="line">    <span class="keyword">using</span> Microsoft.Bot.Builder.Dialogs;</div><div class="line">    <span class="keyword">using</span> Microsoft.Bot.Connector;</div><div class="line"></div><div class="line">    [BotAuthentication]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MessagesController</span> : <span class="title">ApiController</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line">        <span class="comment"><span class="doctag">///</span> POST: api/Messages</span></div><div class="line">        <span class="comment"><span class="doctag">///</span> Receive a message from a user and reply to it</span></div><div class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;HttpResponseMessage&gt; <span class="title">Post</span>(<span class="params">[FromBody]Activity activity</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (activity.Type == ActivityTypes.Message)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">await</span> Conversation.SendAsync(activity, () =&gt; <span class="keyword">new</span> RootDialog());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">this</span>.HandleSystemMessage(activity);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> response = Request.CreateResponse(HttpStatusCode.OK);</div><div class="line">            <span class="keyword">return</span> response;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> Activity <span class="title">HandleSystemMessage</span>(<span class="params">Activity message</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (message.Type == ActivityTypes.DeleteUserData)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Implement user deletion here</span></div><div class="line">                <span class="comment">// If we handle user deletion, return a real message</span></div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">message.Type == ActivityTypes.ConversationUpdate</span>)</span></div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Handle conversation state changes, like members being added and removed</span></div><div class="line">                <span class="comment">// Use Activity.MembersAdded and Activity.MembersRemoved and Activity.Action for info</span></div><div class="line">                <span class="comment">// Not available in all channels</span></div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">message.Type == ActivityTypes.ContactRelationUpdate</span>)</span></div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Handle add/remove from contact lists</span></div><div class="line">                <span class="comment">// Activity.From + Activity.Action represent what happened</span></div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">message.Type == ActivityTypes.Typing</span>)</span></div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Handle knowing tha the user is typing</span></div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">message.Type == ActivityTypes.Ping</span>)</span></div><div class="line">            &#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="RootDialog-cs"><a href="#RootDialog-cs" class="headerlink" title="RootDialog.cs"></a>RootDialog.cs</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">namespace MultiDialogsBot.Dialogs</div><div class="line">&#123;</div><div class="line">    using System;</div><div class="line">    using System.Collections.Generic;</div><div class="line">    using System.Threading;</div><div class="line">    using System.Threading.Tasks;</div><div class="line">    using Microsoft.Bot.Builder.Dialogs;</div><div class="line">    using Microsoft.Bot.Connector;</div><div class="line"></div><div class="line">    [Serializable]</div><div class="line">    public class RootDialog : IDialog&lt;object&gt;</div><div class="line">    &#123;</div><div class="line">        private const string FlightsOption = "Flights";</div><div class="line"></div><div class="line">        private const string HotelsOption = "Hotels";</div><div class="line"></div><div class="line">        public async Task StartAsync(IDialogContext context)</div><div class="line">        &#123;</div><div class="line">            context.Wait(this.MessageReceivedAsync);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public virtual async Task MessageReceivedAsync(IDialogContext context, IAwaitable&lt;IMessageActivity&gt; result)</div><div class="line">        &#123;</div><div class="line">            var message = await result;</div><div class="line"></div><div class="line">            if (message.Text.ToLower().Contains("help") || message.Text.ToLower().Contains("support") || message.Text.ToLower().Contains("problem"))</div><div class="line">            &#123;</div><div class="line">                await context.Forward(new SupportDialog(), this.ResumeAfterSupportDialog, message, CancellationToken.None);</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">                this.ShowOptions(context);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private void ShowOptions(IDialogContext context)</div><div class="line">        &#123;</div><div class="line">            PromptDialog.Choice(context, this.OnOptionSelected, new List&lt;string&gt;() &#123; FlightsOption, HotelsOption &#125;, "Are you looking for a flight or a hotel?", "Not a valid option", 3);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private async Task OnOptionSelected(IDialogContext context, IAwaitable&lt;string&gt; result)</div><div class="line">        &#123;</div><div class="line">            try</div><div class="line">            &#123;</div><div class="line">                string optionSelected = await result;</div><div class="line"></div><div class="line">                switch (optionSelected)</div><div class="line">                &#123;</div><div class="line">                    case FlightsOption:</div><div class="line">                        context.Call(new FlightsDialog(), this.ResumeAfterOptionDialog);</div><div class="line">                        break;</div><div class="line"></div><div class="line">                    case HotelsOption:</div><div class="line">                        context.Call(new HotelsDialog(), this.ResumeAfterOptionDialog);</div><div class="line">                        break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            catch (TooManyAttemptsException ex)</div><div class="line">            &#123;</div><div class="line">                await context.PostAsync($"Ooops! Too many attemps :(. But don't worry, I'm handling that exception and you can try again!");</div><div class="line"></div><div class="line">                context.Wait(this.MessageReceivedAsync);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private async Task ResumeAfterSupportDialog(IDialogContext context, IAwaitable&lt;int&gt; result)</div><div class="line">        &#123;</div><div class="line">            var ticketNumber = await result;</div><div class="line"></div><div class="line">            await context.PostAsync($"Thanks for contacting our support team. Your ticket number is &#123;ticketNumber&#125;.");</div><div class="line">            context.Wait(this.MessageReceivedAsync);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private async Task ResumeAfterOptionDialog(IDialogContext context, IAwaitable&lt;object&gt; result)</div><div class="line">        &#123;</div><div class="line">            try</div><div class="line">            &#123;</div><div class="line">                var message = await result;</div><div class="line">            &#125;</div><div class="line">            catch (Exception ex)</div><div class="line">            &#123;</div><div class="line">                await context.PostAsync($"Failed with message: &#123;ex.Message&#125;");</div><div class="line">            &#125;</div><div class="line">            finally</div><div class="line">            &#123;</div><div class="line">                context.Wait(this.MessageReceivedAsync);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="SupportDialog-cs"><a href="#SupportDialog-cs" class="headerlink" title="SupportDialog.cs"></a>SupportDialog.cs</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">namespace MultiDialogsBot.Dialogs</div><div class="line">&#123;</div><div class="line">    using System;</div><div class="line">    using System.Threading.Tasks;</div><div class="line">    using Microsoft.Bot.Builder.Dialogs;</div><div class="line">    using Microsoft.Bot.Connector;</div><div class="line"></div><div class="line">    [Serializable]</div><div class="line">    public class SupportDialog : IDialog&lt;int&gt;</div><div class="line">    &#123;</div><div class="line">        public async Task StartAsync(IDialogContext context)</div><div class="line">        &#123;</div><div class="line">            context.Wait(this.MessageReceivedAsync);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public virtual async Task MessageReceivedAsync(IDialogContext context, IAwaitable&lt;IMessageActivity&gt; result)</div><div class="line">        &#123;</div><div class="line">            var message = await result;</div><div class="line"></div><div class="line">            var ticketNumber = new Random().Next(0, 20000);</div><div class="line"></div><div class="line">            await context.PostAsync($"Your message '&#123;message.Text&#125;' was registered. Once we resolve it; we will get back to you.");</div><div class="line"></div><div class="line">            context.Done(ticketNumber);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="FlightsDialog-cs"><a href="#FlightsDialog-cs" class="headerlink" title="FlightsDialog.cs"></a>FlightsDialog.cs</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">namespace MultiDialogsBot.Dialogs</div><div class="line">&#123;</div><div class="line">    using System;</div><div class="line">    using System.Threading.Tasks;</div><div class="line">    using Microsoft.Bot.Builder.Dialogs;</div><div class="line">    using Microsoft.Bot.Connector;</div><div class="line"></div><div class="line">    [Serializable]</div><div class="line">    public class FlightsDialog : IDialog&lt;object&gt;</div><div class="line">    &#123;</div><div class="line">        public async Task StartAsync(IDialogContext context)</div><div class="line">        &#123;</div><div class="line">            context.Fail(new NotImplementedException("Flights Dialog is not implemented and is instead being used to show context.Fail"));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="HotelsDialog-cs"><a href="#HotelsDialog-cs" class="headerlink" title="HotelsDialog.cs"></a>HotelsDialog.cs</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line">namespace MultiDialogsBot.Dialogs</div><div class="line">&#123;</div><div class="line">    using System;</div><div class="line">    using System.Collections.Generic;</div><div class="line">    using System.Linq;</div><div class="line">    using System.Threading.Tasks;</div><div class="line">    using System.Web;</div><div class="line">    using Microsoft.Bot.Builder.Dialogs;</div><div class="line">    using Microsoft.Bot.Builder.FormFlow;</div><div class="line">    using Microsoft.Bot.Connector;</div><div class="line"></div><div class="line">    [Serializable]</div><div class="line">    public class HotelsDialog : IDialog&lt;object&gt;</div><div class="line">    &#123;</div><div class="line">        public async Task StartAsync(IDialogContext context)</div><div class="line">        &#123;</div><div class="line">            await context.PostAsync("Welcome to the Hotels finder!");</div><div class="line"></div><div class="line">            var hotelsFormDialog = FormDialog.FromForm(this.BuildHotelsForm, FormOptions.PromptInStart);</div><div class="line"></div><div class="line">            context.Call(hotelsFormDialog, this.ResumeAfterHotelsFormDialog);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private IForm&lt;HotelsQuery&gt; BuildHotelsForm()</div><div class="line">        &#123;</div><div class="line">            OnCompletionAsyncDelegate&lt;HotelsQuery&gt; processHotelsSearch = async (context, state) =&gt;</div><div class="line">            &#123;</div><div class="line">                await context.PostAsync($"Ok. Searching for Hotels in &#123;state.Destination&#125; from &#123;state.CheckIn.ToString("MM/dd")&#125; to &#123;state.CheckIn.AddDays(state.Nights).ToString("MM/dd")&#125;...");</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            return new FormBuilder&lt;HotelsQuery&gt;()</div><div class="line">                .Field(nameof(HotelsQuery.Destination))</div><div class="line">                .Message("Looking for hotels in &#123;Destination&#125;...")</div><div class="line">                .AddRemainingFields()</div><div class="line">                .OnCompletion(processHotelsSearch)</div><div class="line">                .Build();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private async Task ResumeAfterHotelsFormDialog(IDialogContext context, IAwaitable&lt;HotelsQuery&gt; result)</div><div class="line">        &#123;</div><div class="line">            try</div><div class="line">            &#123;</div><div class="line">                var searchQuery = await result;</div><div class="line"></div><div class="line">                var hotels = await this.GetHotelsAsync(searchQuery);</div><div class="line"></div><div class="line">                await context.PostAsync($"I found in total &#123;hotels.Count()&#125; hotels for your dates:");</div><div class="line"></div><div class="line">                var resultMessage = context.MakeMessage();</div><div class="line">                resultMessage.AttachmentLayout = AttachmentLayoutTypes.Carousel;</div><div class="line">                resultMessage.Attachments = new List&lt;Attachment&gt;();</div><div class="line"></div><div class="line">                foreach (var hotel in hotels)</div><div class="line">                &#123;</div><div class="line">                    HeroCard heroCard = new HeroCard()</div><div class="line">                    &#123;</div><div class="line">                        Title = hotel.Name,</div><div class="line">                        Subtitle = $"&#123;hotel.Rating&#125; starts. &#123;hotel.NumberOfReviews&#125; reviews. From $&#123;hotel.PriceStarting&#125; per night.",</div><div class="line">                        Images = new List&lt;CardImage&gt;()</div><div class="line">                        &#123;</div><div class="line">                            new CardImage() &#123; Url = hotel.Image &#125;</div><div class="line">                        &#125;,</div><div class="line">                        Buttons = new List&lt;CardAction&gt;()</div><div class="line">                        &#123;</div><div class="line">                            new CardAction()</div><div class="line">                            &#123;</div><div class="line">                                Title = "More details",</div><div class="line">                                Type = ActionTypes.OpenUrl,</div><div class="line">                                Value = $"https://www.bing.com/search?q=hotels+in+" + HttpUtility.UrlEncode(hotel.Location)</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;;</div><div class="line"></div><div class="line">                    resultMessage.Attachments.Add(heroCard.ToAttachment());</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                await context.PostAsync(resultMessage);</div><div class="line">            &#125;</div><div class="line">            catch (FormCanceledException ex)</div><div class="line">            &#123;</div><div class="line">                string reply;</div><div class="line"></div><div class="line">                if (ex.InnerException == null)</div><div class="line">                &#123;</div><div class="line">                    reply = "You have canceled the operation. Quitting from the HotelsDialog";</div><div class="line">                &#125;</div><div class="line">                else</div><div class="line">                &#123;</div><div class="line">                    reply = $"Oops! Something went wrong :( Technical Details: &#123;ex.InnerException.Message&#125;";</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                await context.PostAsync(reply);</div><div class="line">            &#125;</div><div class="line">            finally</div><div class="line">            &#123;</div><div class="line">                context.Done&lt;object&gt;(null);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private async Task&lt;IEnumerable&lt;Hotel&gt;&gt; GetHotelsAsync(HotelsQuery searchQuery)</div><div class="line">        &#123;</div><div class="line">            var hotels = new List&lt;Hotel&gt;();</div><div class="line"></div><div class="line">            // Filling the hotels results manually just for demo purposes</div><div class="line">            for (int i = 1; i &lt;= 5; i++)</div><div class="line">            &#123;</div><div class="line">                var random = new Random(i);</div><div class="line">                Hotel hotel = new Hotel()</div><div class="line">                &#123;</div><div class="line">                    Name = $"&#123;searchQuery.Destination&#125; Hotel &#123;i&#125;",</div><div class="line">                    Location = searchQuery.Destination,</div><div class="line">                    Rating = random.Next(1, 5),</div><div class="line">                    NumberOfReviews = random.Next(0, 5000),</div><div class="line">                    PriceStarting = random.Next(80, 450),</div><div class="line">                    Image = $"https://placeholdit.imgix.net/~text?txtsize=35&amp;txt=Hotel+&#123;i&#125;&amp;w=500&amp;h=260"</div><div class="line">                &#125;;</div><div class="line"></div><div class="line">                hotels.Add(hotel);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            hotels.Sort((h1, h2) =&gt; h1.PriceStarting.CompareTo(h2.PriceStarting));</div><div class="line"></div><div class="line">            return hotels;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Hotel-cs"><a href="#Hotel-cs" class="headerlink" title="Hotel.cs"></a>Hotel.cs</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">MultiDialogsBot</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">using</span> System;</div><div class="line"></div><div class="line">    [Serializable]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hotel</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Rating &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> NumberOfReviews &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> PriceStarting &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Image &#123; <span class="keyword">get</span>;  <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Location &#123; <span class="keyword">get</span>;  <span class="keyword">set</span>; &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="HotelsQuery-cs"><a href="#HotelsQuery-cs" class="headerlink" title="HotelsQuery.cs"></a>HotelsQuery.cs</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">MultiDialogsBot</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">using</span> System;</div><div class="line">    <span class="keyword">using</span> Microsoft.Bot.Builder.FormFlow;</div><div class="line"></div><div class="line">    [Serializable]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HotelsQuery</span></div><div class="line">    &#123;</div><div class="line">        [Prompt(<span class="string">"Please enter your &#123;&amp;&#125;"</span>)]</div><div class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Destination &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">        </div><div class="line">        [Prompt(<span class="string">"When do you want to &#123;&amp;&#125;?"</span>)]</div><div class="line">        <span class="keyword">public</span> DateTime CheckIn &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">        [Numeric(<span class="number">1</span>, <span class="keyword">int</span>.MaxValue)]</div><div class="line">        [Prompt(<span class="string">"How many &#123;&amp;&#125; do you want to stay?"</span>)]</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Nights &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o7ie0tcjk.bkt.clouddn.com/bot/multi_dialog/BotMultiDialogFlow.png&quot; alt=&quot;flow&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;MessageController-cs&quot;&gt;&lt;a href=
    
    </summary>
    
    
      <category term="Bot" scheme="http://yoursite.com/tags/Bot/"/>
    
  </entry>
  
  <entry>
    <title>The First Course of C#</title>
    <link href="http://yoursite.com/2017/05/10/The-First-Course-of-C/"/>
    <id>http://yoursite.com/2017/05/10/The-First-Course-of-C/</id>
    <published>2017-05-10T11:08:14.000Z</published>
    <updated>2017-05-11T04:48:53.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子:"></a><strong>一个例子:</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">namespace HelloWorldApplication</div><div class="line">&#123;</div><div class="line">    /* 类名为 HelloWorld */</div><div class="line">    class HelloWorld</div><div class="line">    &#123;</div><div class="line">        /* main函数 */</div><div class="line">        static void Main(string[] args)</div><div class="line">        &#123;</div><div class="line">            /* 我的第一个 C# 程序 */</div><div class="line">            Console.WriteLine(&quot;Hello World!&quot;);</div><div class="line">            Console.ReadKey();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a><strong>对象类型</strong></h3><p>是 C# 通用类型系统（Common Type System - CTS）中所有数据类型的终极基类。Object 是 System.Object 类的别名。所以对象（Object）类型可以被分配任何其他类型（值类型、引用类型、预定义类型或用户自定义类型）的值。但是，在分配值之前，需要先进行类型转换。</p><p>当一个值类型转换为对象类型时，则被称为 <strong>装箱</strong>；另一方面，当一个对象类型转换为值类型时，则被称为 <strong>拆箱</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">object obj;</div><div class="line">obj = 100; // 这是装箱</div></pre></td></tr></table></figure><h3 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a><strong>动态类型</strong></h3><p>您可以存储任何类型的值在动态数据类型变量中。这些变量的类型检查是在运行时发生的。</p><p>声明动态类型的语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dynamic &lt;variable_name&gt; = value;</div></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dynamic d = 20;</div></pre></td></tr></table></figure><p>动态类型与对象类型相似，但是对象类型变量的类型检查是在编译时发生的，而动态类型变量的类型检查是在运行时发生的。</p><h3 id="字符串的特殊定义方式"><a href="#字符串的特殊定义方式" class="headerlink" title="字符串的特殊定义方式"></a><strong>字符串的特殊定义方式</strong></h3><p>字符串（String）类型允许您给变量分配任何字符串值。字符串（String）类型是 System.String 类的别名。它是从对象（Object）类型派生的。字符串（String）类型的值可以通过两种形式进行分配：引号和 @引号。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String str = &quot;runoob.com&quot;;</div></pre></td></tr></table></figure><p>一个 @引号字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@&quot;runoob.com&quot;;</div></pre></td></tr></table></figure><p>C# string 字符串的前面可以加 @（称作”逐字字符串”）将转义字符（\）当作普通字符对待，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string str = @&quot;C:\Windows&quot;;</div></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string str = &quot;C:\\Windows&quot;;</div></pre></td></tr></table></figure><p>@ 字符串中可以任意换行，换行符及缩进空格都计算在字符串长度之内。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">string str = @&quot;&lt;script type=&quot;&quot;text/javascript&quot;&quot;&gt;</div><div class="line">    &lt;!--</div><div class="line">    --&gt;</div><div class="line">&lt;/script&gt;&quot;;</div></pre></td></tr></table></figure><h3 id="显式类型转换方式"><a href="#显式类型转换方式" class="headerlink" title="显式类型转换方式"></a><strong>显式类型转换方式</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">namespace TypeConversionApplication</div><div class="line">&#123;</div><div class="line">    class StringConversion</div><div class="line">    &#123;</div><div class="line">        static void Main(string[] args)</div><div class="line">        &#123;</div><div class="line">            int i = 75;</div><div class="line">            float f = 53.005f;</div><div class="line">            double d = 2345.7652;</div><div class="line">            bool b = true;</div><div class="line"></div><div class="line">            Console.WriteLine(i.ToString());</div><div class="line">            Console.WriteLine(f.ToString());</div><div class="line">            Console.WriteLine(d.ToString());</div><div class="line">            Console.WriteLine(b.ToString());</div><div class="line">            Console.ReadKey();</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="命令行输入"><a href="#命令行输入" class="headerlink" title="命令行输入"></a><strong>命令行输入</strong></h3><p><code>System</code>命名空间中的<code>Console</code>类提供了一个函数 <code>ReadLine()</code>，用于接收来自用户的输入，并把它存储到一个变量中。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int num;</div><div class="line">num = Convert.ToInt32(Console.ReadLine());</div></pre></td></tr></table></figure><p>函数 <code>Convert.ToInt32()</code>把用户输入的数据转换为<code>int</code> 数据类型，因为 <code>Console.ReadLine()</code>只接受字符串格式的数据。</p><h3 id="特殊运算符"><a href="#特殊运算符" class="headerlink" title="特殊运算符"></a><strong>特殊运算符</strong></h3><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>sizeof()</td><td>返回数据类型的大小。</td><td>sizeof(int)，将返回 4.</td></tr><tr><td>typeof()</td><td>返回 class 的类型。</td><td>typeof(StreamReader);</td></tr><tr><td>&amp;</td><td>返回变量的地址。</td><td>&a; 将得到变量的实际地址。</td></tr><tr><td>*</td><td>变量的指针。</td><td>*a; 将指向一个变量。</td></tr><tr><td>? :</td><td>条件表达式</td><td>如果条件为真 ? 则为 X : 否则为 Y</td></tr><tr><td>is</td><td>判断对象是否为某一类型。</td><td>If( Ford is Car) // 检查 Ford 是否是 Car 类的一个对象。</td></tr><tr><td>as</td><td>强制转换，即使转换失败也不会抛出异常。</td><td>Object obj = new StringReader(“Hello”);StringReader r = obj as StringReader;</td></tr></tbody></table></div><h3 id="特殊访问修饰符"><a href="#特殊访问修饰符" class="headerlink" title="特殊访问修饰符"></a><strong>特殊访问修饰符</strong></h3><h4 id="Internal-访问修饰符"><a href="#Internal-访问修饰符" class="headerlink" title="Internal 访问修饰符"></a><em>Internal 访问修饰符</em></h4><p>Internal 访问说明符允许一个类将其成员变量和成员函数暴露给当前程序中的其他函数和对象。换句话说，带有 internal 访问修饰符的任何成员可以被定义在该成员所定义的应用程序内的任何类或方法访问。</p><p>类的默认访问标识符是 <strong>internal</strong>，成员的默认访问标识符是 <strong>private</strong>。</p><p>下面的实例说明了这点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line"></div><div class="line">namespace RectangleApplication</div><div class="line">&#123;</div><div class="line">    class Rectangle</div><div class="line">    &#123;</div><div class="line">        //成员变量</div><div class="line">        internal double length;</div><div class="line">        internal double width;</div><div class="line">        </div><div class="line">        double GetArea()</div><div class="line">        &#123;</div><div class="line">            return length * width;</div><div class="line">        &#125;</div><div class="line">       public void Display()</div><div class="line">        &#123;</div><div class="line">            Console.WriteLine(&quot;长度： &#123;0&#125;&quot;, length);</div><div class="line">            Console.WriteLine(&quot;宽度： &#123;0&#125;&quot;, width);</div><div class="line">            Console.WriteLine(&quot;面积： &#123;0&#125;&quot;, GetArea());</div><div class="line">        &#125;</div><div class="line">    &#125;//end class Rectangle    </div><div class="line">    class ExecuteRectangle</div><div class="line">    &#123;</div><div class="line">        static void Main(string[] args)</div><div class="line">        &#123;</div><div class="line">            Rectangle r = new Rectangle();</div><div class="line">            r.length = 4.5;</div><div class="line">            r.width = 3.5;</div><div class="line">            r.Display();</div><div class="line">            Console.ReadLine();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">长度： 4.5</div><div class="line">宽度： 3.5</div><div class="line">面积： 15.75</div></pre></td></tr></table></figure><p>在上面的实例中，请注意成员函数 <em>GetArea()</em> 声明的时候不带有任何访问修饰符。如果没有指定访问修饰符，则使用类成员的默认访问修饰符，即为 <strong>private</strong>。</p><h4 id="Protected-Internal-访问修饰符"><a href="#Protected-Internal-访问修饰符" class="headerlink" title="Protected Internal 访问修饰符"></a><em>Protected Internal 访问修饰符</em></h4><p>Protected Internal 访问修饰符允许在本类,派生类或者包含该类的程序集中访问。这也被用于实现继承。</p><h3 id="按引用传递参数"><a href="#按引用传递参数" class="headerlink" title="按引用传递参数"></a><strong>按引用传递参数</strong></h3><p>引用参数是一个对变量的内存位置的引用。当按引用传递参数时，与值参数不同的是，它不会为这些参数创建一个新的存储位置。引用参数表示与提供给方法的实际参数具有相同的内存位置。</p><p>在 <code>C#</code> 中，使用 <code>ref</code> 关键字声明引用参数。下面的实例演示了这点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">namespace CalculatorApplication</div><div class="line">&#123;</div><div class="line">   class NumberManipulator</div><div class="line">   &#123;</div><div class="line">      public void swap(ref int x, ref int y)</div><div class="line">      &#123;</div><div class="line">         int temp;</div><div class="line"></div><div class="line">         temp = x; /* 保存 x 的值 */</div><div class="line">         x = y;    /* 把 y 赋值给 x */</div><div class="line">         y = temp; /* 把 temp 赋值给 y */</div><div class="line">       &#125;</div><div class="line">   </div><div class="line">      static void Main(string[] args)</div><div class="line">      &#123;</div><div class="line">         NumberManipulator n = new NumberManipulator();</div><div class="line">         /* 局部变量定义 */</div><div class="line">         int a = 100;</div><div class="line">         int b = 200;</div><div class="line"></div><div class="line">         Console.WriteLine(&quot;在交换之前，a 的值： &#123;0&#125;&quot;, a);</div><div class="line">         Console.WriteLine(&quot;在交换之前，b 的值： &#123;0&#125;&quot;, b);</div><div class="line"></div><div class="line">         /* 调用函数来交换值 */</div><div class="line">         n.swap(ref a, ref b);</div><div class="line"></div><div class="line">         Console.WriteLine(&quot;在交换之后，a 的值： &#123;0&#125;&quot;, a);</div><div class="line">         Console.WriteLine(&quot;在交换之后，b 的值： &#123;0&#125;&quot;, b);</div><div class="line"> </div><div class="line">         Console.ReadLine();</div><div class="line"></div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">在交换之前，a 的值：100</div><div class="line">在交换之前，b 的值：200</div><div class="line">在交换之后，a 的值：200</div><div class="line">在交换之后，b 的值：100</div></pre></td></tr></table></figure><p>结果表明，<em><code>swap</code></em> 函数内的值改变了，且这个改变可以在 <em><code>Main</code></em> 函数中反映出来。</p><a id="more"></a><h3 id="按输出传递参数"><a href="#按输出传递参数" class="headerlink" title="按输出传递参数"></a><strong>按输出传递参数</strong></h3><p><code>return</code> 语句可用于只从函数中返回一个值。但是，可以使用 输出参数 来从函数中返回两个值。输出参数会把方法输出的数据赋给自己，其他方面与引用参数相似。</p><p>下面的实例演示了这点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line"></div><div class="line">namespace CalculatorApplication</div><div class="line">&#123;</div><div class="line">   class NumberManipulator</div><div class="line">   &#123;</div><div class="line">      public void getValue(out int x )</div><div class="line">      &#123;</div><div class="line">         int temp = 5;</div><div class="line">         x = temp;</div><div class="line">      &#125;</div><div class="line">   </div><div class="line">      static void Main(string[] args)</div><div class="line">      &#123;</div><div class="line">         NumberManipulator n = new NumberManipulator();</div><div class="line">         /* 局部变量定义 */</div><div class="line">         int a = 100;</div><div class="line">         </div><div class="line">         Console.WriteLine(&quot;在方法调用之前，a 的值： &#123;0&#125;&quot;, a);</div><div class="line">         </div><div class="line">         /* 调用函数来获取值 */</div><div class="line">         n.getValue(out a);</div><div class="line"></div><div class="line">         Console.WriteLine(&quot;在方法调用之后，a 的值： &#123;0&#125;&quot;, a);</div><div class="line">         Console.ReadLine();</div><div class="line"></div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">在方法调用之前，a 的值： 100</div><div class="line">在方法调用之后，a 的值： 5</div></pre></td></tr></table></figure><p>提供给输出参数的变量不需要赋值。当需要从一个参数没有指定初始值的方法中返回值时，输出参数特别有用。请看下面的实例，来理解这一点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line"></div><div class="line">namespace CalculatorApplication</div><div class="line">&#123;</div><div class="line">   class NumberManipulator</div><div class="line">   &#123;</div><div class="line">      public void getValues(out int x, out int y )</div><div class="line">      &#123;</div><div class="line">          Console.WriteLine(&quot;请输入第一个值： &quot;);</div><div class="line">          x = Convert.ToInt32(Console.ReadLine());</div><div class="line">          Console.WriteLine(&quot;请输入第二个值： &quot;);</div><div class="line">          y = Convert.ToInt32(Console.ReadLine());</div><div class="line">      &#125;</div><div class="line">   </div><div class="line">      static void Main(string[] args)</div><div class="line">      &#123;</div><div class="line">         NumberManipulator n = new NumberManipulator();</div><div class="line">         /* 局部变量定义 */</div><div class="line">         int a , b;</div><div class="line">         </div><div class="line">         /* 调用函数来获取值 */</div><div class="line">         n.getValues(out a, out b);</div><div class="line"></div><div class="line">         Console.WriteLine(&quot;在方法调用之后，a 的值： &#123;0&#125;&quot;, a);</div><div class="line">         Console.WriteLine(&quot;在方法调用之后，b 的值： &#123;0&#125;&quot;, b);</div><div class="line">         Console.ReadLine();</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果（取决于用户输入）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">请输入第一个值：</div><div class="line">7</div><div class="line">请输入第二个值：</div><div class="line">8</div><div class="line">在方法调用之后，a 的值： 7</div><div class="line">在方法调用之后，b 的值： 8</div></pre></td></tr></table></figure><h3 id="可空类型"><a href="#可空类型" class="headerlink" title="可空类型"></a><strong>可空类型</strong></h3><p><code>C#</code> 提供了一个特殊的数据类型，<code>nullable</code> 类型（可空类型），可空类型可以表示其基础值类型正常范围内的值，再加上一个 <code>null</code> 值。</p><p>例如，<code>Nullable&lt; Int32 &gt;</code>，读作”<code>可空的 Int32</code>“，可以被赋值为 <code>-2,147,483,648</code> 到 <code>2,147,483,647</code> 之间的任意值，也可以被赋值为 <code>null</code> 值。类似的，<code>Nullable&lt; bool &gt;</code> 变量可以被赋值为 <code>true</code> 或 <code>false</code> 或 <code>null</code>。</p><p>在处理数据库和其他包含可能未赋值的元素的数据类型时，将 <code>null</code> 赋值给数值类型或布尔型的功能特别有用。例如，数据库中的布尔型字段可以存储值 <code>true</code> 或 <code>false</code>，或者，该字段也可以未定义。</p><p>声明一个 <code>nullable</code>类型（可空类型）的语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt; data_type&gt; ? &lt;variable_name&gt; = null;</div></pre></td></tr></table></figure><p>下面的实例演示了可空数据类型的用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">namespace CalculatorApplication</div><div class="line">&#123;</div><div class="line">   class NullablesAtShow</div><div class="line">   &#123;</div><div class="line">      static void Main(string[] args)</div><div class="line">      &#123;</div><div class="line">         int? num1 = null;</div><div class="line">         int? num2 = 45;</div><div class="line">         double? num3 = new double?();</div><div class="line">         double? num4 = 3.14157;</div><div class="line">         </div><div class="line">         bool? boolval = new bool?();</div><div class="line"></div><div class="line">         // 显示值</div><div class="line">         </div><div class="line">         Console.WriteLine(&quot;显示可空类型的值： &#123;0&#125;, &#123;1&#125;, &#123;2&#125;, &#123;3&#125;&quot;, </div><div class="line">                            num1, num2, num3, num4);</div><div class="line">         Console.WriteLine(&quot;一个可空的布尔值： &#123;0&#125;&quot;, boolval);</div><div class="line">         Console.ReadLine();</div><div class="line"></div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">显示可空类型的值： , 45,  , 3.14157</div><div class="line">一个可空的布尔值：</div></pre></td></tr></table></figure><h3 id="Null合并运算符"><a href="#Null合并运算符" class="headerlink" title="Null合并运算符"></a><strong>Null合并运算符</strong></h3><p><code>Null</code> 合并运算符用于定义可空类型和引用类型的默认值。<code>Null</code> 合并运算符为类型转换定义了一个预设值，以防可空类型的值为 <code>Null</code>。<code>Null</code> 合并运算符把操作数类型隐式转换为另一个可空（或不可空）的值类型的操作数的类型。</p><p>如果第一个操作数的值为 <code>null</code>，则运算符返回第二个操作数的值，否则返回第一个操作数的值。下面的实例演示了这点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">namespace CalculatorApplication</div><div class="line">&#123;</div><div class="line">   class NullablesAtShow</div><div class="line">   &#123;</div><div class="line">         </div><div class="line">      static void Main(string[] args)</div><div class="line">      &#123;</div><div class="line">         </div><div class="line">         double? num1 = null;</div><div class="line">         double? num2 = 3.14157;</div><div class="line">         double num3;</div><div class="line">         num3 = num1 ?? 5.34;      </div><div class="line">         Console.WriteLine(&quot;num3 的值： &#123;0&#125;&quot;, num3);</div><div class="line">         num3 = num2 ?? 5.34;</div><div class="line">         Console.WriteLine(&quot;num3 的值： &#123;0&#125;&quot;, num3);</div><div class="line">         Console.ReadLine();</div><div class="line"></div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">num3 的值： 5.34</div><div class="line">num3 的值： 3.14157</div></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a><strong>foreach</strong></h3><p>在前面的实例中，我们使用一个 for 循环来访问每个数组元素。您也可以使用一个 <code>foreach</code> 语句来遍历数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line"></div><div class="line">namespace ArrayApplication</div><div class="line">&#123;</div><div class="line">   class MyArray</div><div class="line">   &#123;</div><div class="line">      static void Main(string[] args)</div><div class="line">      &#123;</div><div class="line">         int []  n = new int[10]; /* n 是一个带有 10 个整数的数组, 赋值时初始化需要用大括号*/</div><div class="line"></div><div class="line"></div><div class="line">         /* 初始化数组 n 中的元素 */         </div><div class="line">         for ( int i = 0; i &lt; 10; i++ )</div><div class="line">         &#123;</div><div class="line">            n[i] = i + 100;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         /* 输出每个数组元素的值 */</div><div class="line">         foreach (int j in n )</div><div class="line">         &#123;</div><div class="line">            int i = j-100;</div><div class="line">            Console.WriteLine(&quot;Element[&#123;0&#125;] = &#123;1&#125;&quot;, i, j);</div><div class="line">         &#125;</div><div class="line">         Console.ReadKey();</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Element[0] = 100</div><div class="line">Element[1] = 101</div><div class="line">Element[2] = 102</div><div class="line">Element[3] = 103</div><div class="line">Element[4] = 104</div><div class="line">Element[5] = 105</div><div class="line">Element[6] = 106</div><div class="line">Element[7] = 107</div><div class="line">Element[8] = 108</div><div class="line">Element[9] = 109</div></pre></td></tr></table></figure><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a><strong>多维数组</strong></h3><p>您可以声明一个 string 变量的二维数组，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string [,] names;</div></pre></td></tr></table></figure><p>或者，您可以声明一个 int 变量的三维数组，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int [ , , ] m;</div></pre></td></tr></table></figure><p>多维数组可以通过在括号内为每行指定值来进行初始化。下面是一个带有 3 行 4 列的数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int [,] a = new int [3,4] &#123;</div><div class="line"> &#123;0, 1, 2, 3&#125; ,   /*  初始化索引号为 0 的行 */</div><div class="line"> &#123;4, 5, 6, 7&#125; ,   /*  初始化索引号为 1 的行 */</div><div class="line"> &#123;8, 9, 10, 11&#125;   /*  初始化索引号为 2 的行 */</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>二维数组中的元素是通过使用下标（即数组的行索引和列索引）来访问的。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int val = a[2,3];</div></pre></td></tr></table></figure><h3 id="交错数组"><a href="#交错数组" class="headerlink" title="交错数组"></a><strong>交错数组</strong></h3><p>交错数组是数组的数组。您可以声明一个带有 <code>int</code> 值的交错数组 <code>scores</code>，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int [][] scores;</div></pre></td></tr></table></figure><p>声明一个数组不会在内存中创建数组。创建上面的数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int[][] scores = new int[5][];</div><div class="line">for (int i = 0; i &lt; scores.Length; i++) </div><div class="line">&#123;</div><div class="line">   scores[i] = new int[4];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>您可以初始化一个交错数组，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int[][] scores = new int[2][]&#123;new int[]&#123;92,93,94&#125;,new int[]&#123;85,66,87,88&#125;&#125;;</div></pre></td></tr></table></figure><p>其中，scores 是一个由两个整型数组组成的数组 — scores[0] 是一个带有 3 个整数的数组，scores[1] 是一个带有 4 个整数的数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">下面的实例演示了如何使用交错数组：</div><div class="line">using System;</div><div class="line"></div><div class="line">namespace ArrayApplication</div><div class="line">&#123;</div><div class="line">    class MyArray</div><div class="line">    &#123;</div><div class="line">        static void Main(string[] args)</div><div class="line">        &#123;</div><div class="line">            /* 一个由 5 个整型数组组成的交错数组 */</div><div class="line">            int[][] a = new int[][]&#123;new int[]&#123;0,0&#125;,new int[]&#123;1,2&#125;, </div><div class="line">            new int[]&#123;2,4&#125;,new int[]&#123; 3, 6 &#125;, new int[]&#123; 4, 8 &#125; &#125;; </div><div class="line"></div><div class="line">            int i, j;</div><div class="line"></div><div class="line">            /* 输出数组中每个元素的值 */</div><div class="line">            for (i = 0; i &lt; 5; i++)</div><div class="line">            &#123;</div><div class="line">                for (j = 0; j &lt; 2; j++)</div><div class="line">                &#123;</div><div class="line">                    Console.WriteLine(&quot;a[&#123;0&#125;][&#123;1&#125;] = &#123;2&#125;&quot;, i, j, a[i][j]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">           Console.ReadKey();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="参数数组"><a href="#参数数组" class="headerlink" title="参数数组"></a><strong>参数数组</strong></h3><p>有时，当声明一个方法时，您不能确定要传递给函数作为参数的参数数目。C# 参数数组解决了这个问题，参数数组通常用于传递未知数量的参数给函数。</p><h4 id="params-关键字"><a href="#params-关键字" class="headerlink" title="params 关键字"></a><em>params 关键字</em></h4><p>在使用数组作为形参时，C# 提供了 params 关键字，使调用数组为形参的方法时，既可以传递数组实参，也可以只传递一组数组。params 的使用格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public 返回类型 方法名称( params 类型名称[] 数组名称 )</div></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a><em>实例</em></h4><p>下面的实例演示了如何使用参数数组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line"></div><div class="line">namespace ArrayApplication</div><div class="line">&#123;</div><div class="line">   class ParamArray</div><div class="line">   &#123;</div><div class="line">      public int AddElements(params int[] arr)</div><div class="line">      &#123;</div><div class="line">         int sum = 0;</div><div class="line">         foreach (int i in arr)</div><div class="line">         &#123;</div><div class="line">            sum += i;</div><div class="line">         &#125;</div><div class="line">         return sum;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">      </div><div class="line">   class TestClass</div><div class="line">   &#123;</div><div class="line">      static void Main(string[] args)</div><div class="line">      &#123;</div><div class="line">         ParamArray app = new ParamArray();</div><div class="line">         int sum = app.AddElements(512, 720, 250, 567, 889);</div><div class="line">         Console.WriteLine(&quot;总和是： &#123;0&#125;&quot;, sum);</div><div class="line">         Console.ReadKey();</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">总和是： 2938</div></pre></td></tr></table></figure><h3 id="Array类"><a href="#Array类" class="headerlink" title="Array类"></a><strong>Array类</strong></h3><p>Array 类是 C# 中所有数组的基类，它是在 System 命名空间中定义。Array 类提供了各种用于数组的属性和方法。</p><p>下面的程序演示了 Array 类的一些方法的用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">namespace ArrayApplication</div><div class="line">&#123;</div><div class="line">    class MyArray</div><div class="line">    &#123;</div><div class="line">        </div><div class="line">        static void Main(string[] args)</div><div class="line">        &#123;</div><div class="line">            int[] list = &#123; 34, 72, 13, 44, 25, 30, 10 &#125;;</div><div class="line">            int[] temp = list;</div><div class="line"></div><div class="line">            Console.Write(&quot;原始数组： &quot;);</div><div class="line">            foreach (int i in list)</div><div class="line">            &#123;</div><div class="line">                Console.Write(i + &quot; &quot;);</div><div class="line">            &#125;</div><div class="line">            Console.WriteLine();</div><div class="line">           </div><div class="line">            // 逆转数组</div><div class="line">            Array.Reverse(temp);</div><div class="line">            Console.Write(&quot;逆转数组： &quot;);</div><div class="line">            foreach (int i in temp)</div><div class="line">            &#123;</div><div class="line">                Console.Write(i + &quot; &quot;);</div><div class="line">            &#125;</div><div class="line">            Console.WriteLine();</div><div class="line">            </div><div class="line">            // 排序数组</div><div class="line">            Array.Sort(list);</div><div class="line">            Console.Write(&quot;排序数组： &quot;);</div><div class="line">            foreach (int i in list)</div><div class="line">            &#123;</div><div class="line">                Console.Write(i + &quot; &quot;);</div><div class="line">            &#125;</div><div class="line">            Console.WriteLine();</div><div class="line"></div><div class="line">           Console.ReadKey();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">原始数组： 34 72 13 44 25 30 10</div><div class="line">逆转数组： 10 30 25 44 13 72 34</div><div class="line">排序数组： 10 13 25 30 34 44 72</div></pre></td></tr></table></figure><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a><strong>结构体</strong></h3><p>在 C# 中，结构是值类型数据结构。它使得一个单一变量可以存储各种数据类型的相关数据。<code>struct</code> 关键字用于创建结构。</p><p>结构是用来代表一个记录。假设您想跟踪图书馆中书的动态。您可能想跟踪每本书的以下属性：</p><ul><li>Title</li><li>Author</li><li>Subject</li><li>Book ID</li></ul><p><em>定义结构</em></p><p>为了定义一个结构，您必须使用 struct 语句。struct 语句为程序定义了一个带有多个成员的新的数据类型。</p><p>例如，您可以按照如下的方式声明 Book 结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">struct Books</div><div class="line">&#123;</div><div class="line">   public string title;</div><div class="line">   public string author;</div><div class="line">   public string subject;</div><div class="line">   public int book_id;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>下面的程序演示了结构的用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">     </div><div class="line">struct Books</div><div class="line">&#123;</div><div class="line">   public string title;</div><div class="line">   public string author;</div><div class="line">   public string subject;</div><div class="line">   public int book_id;</div><div class="line">&#125;;  </div><div class="line"></div><div class="line">public class testStructure</div><div class="line">&#123;</div><div class="line">   public static void Main(string[] args)</div><div class="line">   &#123;</div><div class="line"></div><div class="line">      Books Book1;        /* 声明 Book1，类型为 Book */</div><div class="line">      Books Book2;        /* 声明 Book2，类型为 Book */</div><div class="line"></div><div class="line">      /* book 1 详述 */</div><div class="line">      Book1.title = &quot;C Programming&quot;;</div><div class="line">      Book1.author = &quot;Nuha Ali&quot;; </div><div class="line">      Book1.subject = &quot;C Programming Tutorial&quot;;</div><div class="line">      Book1.book_id = 6495407;</div><div class="line"></div><div class="line">      /* book 2 详述 */</div><div class="line">      Book2.title = &quot;Telecom Billing&quot;;</div><div class="line">      Book2.author = &quot;Zara Ali&quot;;</div><div class="line">      Book2.subject =  &quot;Telecom Billing Tutorial&quot;;</div><div class="line">      Book2.book_id = 6495700;</div><div class="line"></div><div class="line">      /* 打印 Book1 信息 */</div><div class="line">      Console.WriteLine( &quot;Book 1 title : &#123;0&#125;&quot;, Book1.title);</div><div class="line">      Console.WriteLine(&quot;Book 1 author : &#123;0&#125;&quot;, Book1.author);</div><div class="line">      Console.WriteLine(&quot;Book 1 subject : &#123;0&#125;&quot;, Book1.subject);</div><div class="line">      Console.WriteLine(&quot;Book 1 book_id :&#123;0&#125;&quot;, Book1.book_id);</div><div class="line"></div><div class="line">      /* 打印 Book2 信息 */</div><div class="line">      Console.WriteLine(&quot;Book 2 title : &#123;0&#125;&quot;, Book2.title);</div><div class="line">      Console.WriteLine(&quot;Book 2 author : &#123;0&#125;&quot;, Book2.author);</div><div class="line">      Console.WriteLine(&quot;Book 2 subject : &#123;0&#125;&quot;, Book2.subject);</div><div class="line">      Console.WriteLine(&quot;Book 2 book_id : &#123;0&#125;&quot;, Book2.book_id);       </div><div class="line"></div><div class="line">      Console.ReadKey();</div><div class="line"></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Book 1 title : C Programming</div><div class="line">Book 1 author : Nuha Ali</div><div class="line">Book 1 subject : C Programming Tutorial</div><div class="line">Book 1 book_id : 6495407</div><div class="line">Book 2 title : Telecom Billing</div><div class="line">Book 2 author : Zara Ali</div><div class="line">Book 2 subject : Telecom Billing Tutorial</div><div class="line">Book 2 book_id : 6495700</div></pre></td></tr></table></figure><h4 id="C-结构的特点"><a href="#C-结构的特点" class="headerlink" title="C# 结构的特点"></a><em>C# 结构的特点</em></h4><p>您已经用了一个简单的名为 Books 的结构。在 C# 中的结构与传统的 C 或 C++ 中的结构不同。C# 中的结构有以下特点：</p><ul><li>结构可带有方法、字段、索引、属性、运算符方法和事件。</li><li>结构可定义构造函数，但不能定义析构函数。但是，您不能为结构定义默认的构造函数。默认的构造函数是自动定义的，且不能被改变。</li><li>与类不同，结构不能继承其他的结构或类。</li><li>结构不能作为其他结构或类的基础结构。</li><li>结构可实现一个或多个接口。</li><li>结构成员不能指定为 abstract、virtual 或 protected。</li><li>当您使用 <strong>New</strong> 操作符创建一个结构对象时，会调用适当的构造函数来创建结构。与类不同，结构可以不使用 New 操作符即可被实例化。</li><li>如果不使用 New 操作符，只有在所有的字段都被初始化之后，字段才被赋值，对象才被使用。</li></ul><h4 id="类-vs-结构"><a href="#类-vs-结构" class="headerlink" title="类 vs 结构"></a><em>类 vs 结构</em></h4><p>类和结构有以下几个基本的不同点：</p><ul><li>类是引用类型，结构是值类型。</li><li>结构不支持继承。</li><li>结构不能声明默认的构造函数。</li></ul><p>针对上述讨论，让我们重写前面的实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">     </div><div class="line">struct Books</div><div class="line">&#123;</div><div class="line">   private string title;</div><div class="line">   private string author;</div><div class="line">   private string subject;</div><div class="line">   private int book_id;</div><div class="line">   public void getValues(string t, string a, string s, int id)</div><div class="line">   &#123;</div><div class="line">      title = t;</div><div class="line">      author = a;</div><div class="line">      subject = s;</div><div class="line">      book_id = id;</div><div class="line">   &#125;</div><div class="line">   public void display()</div><div class="line">   &#123;</div><div class="line">      Console.WriteLine(&quot;Title : &#123;0&#125;&quot;, title);</div><div class="line">      Console.WriteLine(&quot;Author : &#123;0&#125;&quot;, author);</div><div class="line">      Console.WriteLine(&quot;Subject : &#123;0&#125;&quot;, subject);</div><div class="line">      Console.WriteLine(&quot;Book_id :&#123;0&#125;&quot;, book_id);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">&#125;;  </div><div class="line"></div><div class="line">public class testStructure</div><div class="line">&#123;</div><div class="line">   public static void Main(string[] args)</div><div class="line">   &#123;</div><div class="line"></div><div class="line">      Books Book1 = new Books(); /* 声明 Book1，类型为 Book */</div><div class="line">      Books Book2 = new Books(); /* 声明 Book2，类型为 Book */</div><div class="line"></div><div class="line">      /* book 1 详述 */</div><div class="line">      Book1.getValues(&quot;C Programming&quot;,</div><div class="line">      &quot;Nuha Ali&quot;, &quot;C Programming Tutorial&quot;,6495407);</div><div class="line"></div><div class="line">      /* book 2 详述 */</div><div class="line">      Book2.getValues(&quot;Telecom Billing&quot;,</div><div class="line">      &quot;Zara Ali&quot;, &quot;Telecom Billing Tutorial&quot;, 6495700);</div><div class="line"></div><div class="line">      /* 打印 Book1 信息 */</div><div class="line">      Book1.display();</div><div class="line"></div><div class="line">      /* 打印 Book2 信息 */</div><div class="line">      Book2.display(); </div><div class="line"></div><div class="line">      Console.ReadKey();</div><div class="line"></div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Title : C Programming</div><div class="line">Author : Nuha Ali</div><div class="line">Subject : C Programming Tutorial</div><div class="line">Book_id : 6495407</div><div class="line">Title : Telecom Billing</div><div class="line">Author : Zara Ali</div><div class="line">Subject : Telecom Billing Tutorial</div><div class="line">Book_id : 6495700</div></pre></td></tr></table></figure><h3 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h3><p><strong>多态：</strong>一个接口多个功能。</p><p><strong>静态多态性：</strong>编译时发生函数响应（调用）；</p><p><strong>动态多态性：</strong>运行时发生函数响应。</p><p><strong>静态绑定（早期绑定）：</strong>编译时函数和对象的连接机制。</p><p>两种技术实现静态多态性：函数重载/运算符重载。</p><p><strong>函数重载：</strong>在同一范围内对相同函数名有多个定义，可以是参数类型或参数个数的不同，但不许只有返回值类型不同。</p><p><strong>运算符重载：</strong></p><p>关键字 <code>abstract</code> 声明抽象类：用于接口部分类的实现（派生类继承抽象类时，实现完成）。抽象类包含抽象方法，抽象方法可被派生类实现。</p><p>抽象类规则：</p><ul><li>1.不能创建抽象类的实例</li><li>2.不能在抽象类外定义抽象方法</li><li>3.不能把抽象类声明为<code>sealed</code>（类前带关键字<code>sealed</code>代表该类是密封类，不能被继承）</li></ul><p>关键字<code>virtual</code>声明虚方法:用于方法在继承类中的实现（在不同的继承类中有不同的实现）。</p><p>抽象类和虚方法共同实现动态多态性。</p><p>注：继承类中的重写虚函数需要声明关键字 <code>override</code>，在方法参数传入中写（类名 形参名）例如 <code>public void CallArea(Shape sh)</code>，意思是传入一个 <code>shape</code> 类型的类。</p><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a><strong>运算符重载</strong></h3><p>您可以重定义或重载 C# 中内置的运算符。因此，程序员也可以使用用户自定义类型的运算符。重载运算符是具有特殊名称的函数，是通过关键字 <strong>operator</strong> 后跟运算符的符号来定义的。与其他函数一样，重载运算符有返回类型和参数列表。</p><p>例如，请看下面的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static Box operator+ (Box b, Box c)</div><div class="line">&#123;</div><div class="line">   Box box = new Box();</div><div class="line">   box.length = b.length + c.length;</div><div class="line">   box.breadth = b.breadth + c.breadth;</div><div class="line">   box.height = b.height + c.height;</div><div class="line">   return box;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面的函数为用户自定义的类 Box 实现了加法运算符（+）。它把两个 Box 对象的属性相加，并返回相加后的 Box 对象。</p><h4 id="运算符重载的实现"><a href="#运算符重载的实现" class="headerlink" title="运算符重载的实现"></a>运算符重载的实现</h4><p>下面的程序演示了完整的实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line"></div><div class="line">namespace OperatorOvlApplication</div><div class="line">&#123;</div><div class="line">   class Box</div><div class="line">   &#123;</div><div class="line">      private double length;      // 长度</div><div class="line">      private double breadth;     // 宽度</div><div class="line">      private double height;      // 高度</div><div class="line"></div><div class="line">      public double getVolume()</div><div class="line">      &#123;</div><div class="line">         return length * breadth * height;</div><div class="line">      &#125;</div><div class="line">      public void setLength( double len )</div><div class="line">      &#123;</div><div class="line">         length = len;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      public void setBreadth( double bre )</div><div class="line">      &#123;</div><div class="line">         breadth = bre;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      public void setHeight( double hei )</div><div class="line">      &#123;</div><div class="line">         height = hei;</div><div class="line">      &#125;</div><div class="line">      // 重载 + 运算符来把两个 Box 对象相加</div><div class="line">      public static Box operator+ (Box b, Box c)</div><div class="line">      &#123;</div><div class="line">         Box box = new Box();</div><div class="line">         box.length = b.length + c.length;</div><div class="line">         box.breadth = b.breadth + c.breadth;</div><div class="line">         box.height = b.height + c.height;</div><div class="line">         return box;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   class Tester</div><div class="line">   &#123;</div><div class="line">      static void Main(string[] args)</div><div class="line">      &#123;</div><div class="line">         Box Box1 = new Box();         // 声明 Box1，类型为 Box</div><div class="line">         Box Box2 = new Box();         // 声明 Box2，类型为 Box</div><div class="line">         Box Box3 = new Box();         // 声明 Box3，类型为 Box</div><div class="line">         double volume = 0.0;          // 体积</div><div class="line"></div><div class="line">         // Box1 详述</div><div class="line">         Box1.setLength(6.0);</div><div class="line">         Box1.setBreadth(7.0);</div><div class="line">         Box1.setHeight(5.0);</div><div class="line"></div><div class="line">         // Box2 详述</div><div class="line">         Box2.setLength(12.0);</div><div class="line">         Box2.setBreadth(13.0);</div><div class="line">         Box2.setHeight(10.0);</div><div class="line"></div><div class="line">         // Box1 的体积</div><div class="line">         volume = Box1.getVolume();</div><div class="line">         Console.WriteLine(&quot;Box1 的体积： &#123;0&#125;&quot;, volume);</div><div class="line"></div><div class="line">         // Box2 的体积</div><div class="line">         volume = Box2.getVolume();</div><div class="line">         Console.WriteLine(&quot;Box2 的体积： &#123;0&#125;&quot;, volume);</div><div class="line"></div><div class="line">         // 把两个对象相加</div><div class="line">         Box3 = Box1 + Box2;</div><div class="line"></div><div class="line">         // Box3 的体积</div><div class="line">         volume = Box3.getVolume();</div><div class="line">         Console.WriteLine(&quot;Box3 的体积： &#123;0&#125;&quot;, volume);</div><div class="line">         Console.ReadKey();</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Box1 的体积： 210</div><div class="line">Box2 的体积： 1560</div><div class="line">Box3 的体积： 5400</div></pre></td></tr></table></figure><h4 id="可重载和不可重载运算符"><a href="#可重载和不可重载运算符" class="headerlink" title="可重载和不可重载运算符"></a>可重载和不可重载运算符</h4><p>下表描述了 C# 中运算符重载的能力：</p><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+, -, !, ~, ++, —</td><td>这些一元运算符只有一个操作数，且可以被重载。</td></tr><tr><td>+, -, *, /, %</td><td>这些二元运算符带有两个操作数，且可以被重载。</td></tr><tr><td>==, !=, &lt;, &gt;, &lt;=, &gt;=</td><td>这些比较运算符可以被重载。</td></tr><tr><td>&amp;&amp;, \</td><td>\</td><td></td><td>这些条件逻辑运算符不能被直接重载。</td></tr><tr><td>+=, -=, *=, /=, %=</td><td>这些赋值运算符不能被重载。</td></tr><tr><td>=, ., ?:, -&gt;, new, is, sizeof, typeof</td><td>这些运算符不能被重载。</td></tr></tbody></table></div><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>针对上述讨论，让我们扩展上面的实例，重载更多的运算符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line"></div><div class="line">namespace OperatorOvlApplication</div><div class="line">&#123;</div><div class="line">    class Box</div><div class="line">    &#123;</div><div class="line">       private double length;      // 长度</div><div class="line">       private double breadth;     // 宽度</div><div class="line">       private double height;      // 高度</div><div class="line">      </div><div class="line">       public double getVolume()</div><div class="line">       &#123;</div><div class="line">         return length * breadth * height;</div><div class="line">       &#125;</div><div class="line">      public void setLength( double len )</div><div class="line">      &#123;</div><div class="line">          length = len;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      public void setBreadth( double bre )</div><div class="line">      &#123;</div><div class="line">          breadth = bre;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      public void setHeight( double hei )</div><div class="line">      &#123;</div><div class="line">          height = hei;</div><div class="line">      &#125;</div><div class="line">      // 重载 + 运算符来把两个 Box 对象相加</div><div class="line">      public static Box operator+ (Box b, Box c)</div><div class="line">      &#123;</div><div class="line">          Box box = new Box();</div><div class="line">          box.length = b.length + c.length;</div><div class="line">          box.breadth = b.breadth + c.breadth;</div><div class="line">          box.height = b.height + c.height;</div><div class="line">          return box;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      public static bool operator == (Box lhs, Box rhs)</div><div class="line">      &#123;</div><div class="line">          bool status = false;</div><div class="line">          if (lhs.length == rhs.length &amp;&amp; lhs.height == rhs.height </div><div class="line">             &amp;&amp; lhs.breadth == rhs.breadth)</div><div class="line">          &#123;</div><div class="line">              status = true;</div><div class="line">          &#125;</div><div class="line">          return status;</div><div class="line">      &#125;</div><div class="line">      public static bool operator !=(Box lhs, Box rhs)</div><div class="line">      &#123;</div><div class="line">          bool status = false;</div><div class="line">          if (lhs.length != rhs.length || lhs.height != rhs.height </div><div class="line">              || lhs.breadth != rhs.breadth)</div><div class="line">          &#123;</div><div class="line">              status = true;</div><div class="line">          &#125;</div><div class="line">          return status;</div><div class="line">      &#125;</div><div class="line">      public static bool operator &lt;(Box lhs, Box rhs)</div><div class="line">      &#123;</div><div class="line">          bool status = false;</div><div class="line">          if (lhs.length &lt; rhs.length &amp;&amp; lhs.height </div><div class="line">              &lt; rhs.height &amp;&amp; lhs.breadth &lt; rhs.breadth)</div><div class="line">          &#123;</div><div class="line">              status = true;</div><div class="line">          &#125;</div><div class="line">          return status;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      public static bool operator &gt;(Box lhs, Box rhs)</div><div class="line">      &#123;</div><div class="line">          bool status = false;</div><div class="line">          if (lhs.length &gt; rhs.length &amp;&amp; lhs.height </div><div class="line">              &gt; rhs.height &amp;&amp; lhs.breadth &gt; rhs.breadth)</div><div class="line">          &#123;</div><div class="line">              status = true;</div><div class="line">          &#125;</div><div class="line">          return status;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      public static bool operator &lt;=(Box lhs, Box rhs)</div><div class="line">      &#123;</div><div class="line">          bool status = false;</div><div class="line">          if (lhs.length &lt;= rhs.length &amp;&amp; lhs.height </div><div class="line">              &lt;= rhs.height &amp;&amp; lhs.breadth &lt;= rhs.breadth)</div><div class="line">          &#123;</div><div class="line">              status = true;</div><div class="line">          &#125;</div><div class="line">          return status;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      public static bool operator &gt;=(Box lhs, Box rhs)</div><div class="line">      &#123;</div><div class="line">          bool status = false;</div><div class="line">          if (lhs.length &gt;= rhs.length &amp;&amp; lhs.height </div><div class="line">             &gt;= rhs.height &amp;&amp; lhs.breadth &gt;= rhs.breadth)</div><div class="line">          &#123;</div><div class="line">              status = true;</div><div class="line">          &#125;</div><div class="line">          return status;</div><div class="line">      &#125;</div><div class="line">      public override string ToString()</div><div class="line">      &#123;</div><div class="line">          return String.Format(&quot;(&#123;0&#125;, &#123;1&#125;, &#123;2&#125;)&quot;, length, breadth, height);</div><div class="line">      &#125;</div><div class="line">   </div><div class="line">   &#125;</div><div class="line">    </div><div class="line">   class Tester</div><div class="line">   &#123;</div><div class="line">      static void Main(string[] args)</div><div class="line">      &#123;</div><div class="line">        Box Box1 = new Box();          // 声明 Box1，类型为 Box</div><div class="line">        Box Box2 = new Box();          // 声明 Box2，类型为 Box</div><div class="line">        Box Box3 = new Box();          // 声明 Box3，类型为 Box</div><div class="line">        Box Box4 = new Box();</div><div class="line">        double volume = 0.0;   // 体积</div><div class="line"></div><div class="line">        // Box1 详述</div><div class="line">        Box1.setLength(6.0);</div><div class="line">        Box1.setBreadth(7.0);</div><div class="line">        Box1.setHeight(5.0);</div><div class="line"></div><div class="line">        // Box2 详述</div><div class="line">        Box2.setLength(12.0);</div><div class="line">        Box2.setBreadth(13.0);</div><div class="line">        Box2.setHeight(10.0);</div><div class="line"></div><div class="line">       // 使用重载的 ToString() 显示两个盒子</div><div class="line">        Console.WriteLine(&quot;Box1： &#123;0&#125;&quot;, Box1.ToString());</div><div class="line">        Console.WriteLine(&quot;Box2： &#123;0&#125;&quot;, Box2.ToString());</div><div class="line">        </div><div class="line">        // Box1 的体积</div><div class="line">        volume = Box1.getVolume();</div><div class="line">        Console.WriteLine(&quot;Box1 的体积： &#123;0&#125;&quot;, volume);</div><div class="line"></div><div class="line">        // Box2 的体积</div><div class="line">        volume = Box2.getVolume();</div><div class="line">        Console.WriteLine(&quot;Box2 的体积： &#123;0&#125;&quot;, volume);</div><div class="line"></div><div class="line">        // 把两个对象相加</div><div class="line">        Box3 = Box1 + Box2;</div><div class="line">        Console.WriteLine(&quot;Box3： &#123;0&#125;&quot;, Box3.ToString());</div><div class="line">        // Box3 的体积</div><div class="line">        volume = Box3.getVolume();</div><div class="line">        Console.WriteLine(&quot;Box3 的体积： &#123;0&#125;&quot;, volume);</div><div class="line"></div><div class="line">        //comparing the boxes</div><div class="line">        if (Box1 &gt; Box2)</div><div class="line">          Console.WriteLine(&quot;Box1 大于 Box2&quot;);</div><div class="line">        else</div><div class="line">          Console.WriteLine(&quot;Box1 不大于 Box2&quot;);</div><div class="line">        if (Box1 &lt; Box2)</div><div class="line">          Console.WriteLine(&quot;Box1 小于 Box2&quot;);</div><div class="line">        else</div><div class="line">          Console.WriteLine(&quot;Box1 不小于 Box2&quot;);</div><div class="line">        if (Box1 &gt;= Box2)</div><div class="line">          Console.WriteLine(&quot;Box1 大于等于 Box2&quot;);</div><div class="line">        else</div><div class="line">          Console.WriteLine(&quot;Box1 不大于等于 Box2&quot;);</div><div class="line">        if (Box1 &lt;= Box2)</div><div class="line">          Console.WriteLine(&quot;Box1 小于等于 Box2&quot;);</div><div class="line">        else</div><div class="line">          Console.WriteLine(&quot;Box1 不小于等于 Box2&quot;);</div><div class="line">        if (Box1 != Box2)</div><div class="line">          Console.WriteLine(&quot;Box1 不等于 Box2&quot;);</div><div class="line">        else</div><div class="line">          Console.WriteLine(&quot;Box1 等于 Box2&quot;);</div><div class="line">        Box4 = Box3;</div><div class="line">        if (Box3 == Box4)</div><div class="line">          Console.WriteLine(&quot;Box3 等于 Box4&quot;);</div><div class="line">        else</div><div class="line">          Console.WriteLine(&quot;Box3 不等于 Box4&quot;);</div><div class="line"></div><div class="line">        Console.ReadKey();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Box1： (6, 7, 5)</div><div class="line">Box2： (12, 13, 10)</div><div class="line">Box1 的体积： 210</div><div class="line">Box2 的体积： 1560</div><div class="line">Box3： (18, 20, 15)</div><div class="line">Box3 的体积： 5400</div><div class="line">Box1 不大于 Box2</div><div class="line">Box1 小于 Box2</div><div class="line">Box1 不大于等于 Box2</div><div class="line">Box1 小于等于 Box2</div><div class="line">Box1 不等于 Box2</div><div class="line">Box3 等于 Box4</div></pre></td></tr></table></figure><h3 id="FileStream"><a href="#FileStream" class="headerlink" title="FileStream"></a>FileStream</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.IO;</div><div class="line"></div><div class="line">namespace FileIOApplication</div><div class="line">&#123;</div><div class="line">    class Program</div><div class="line">    &#123;</div><div class="line">        static void Main(string[] args)</div><div class="line">        &#123;</div><div class="line">            FileStream F = new FileStream(&quot;test.dat&quot;, </div><div class="line">            FileMode.OpenOrCreate, FileAccess.ReadWrite);</div><div class="line"></div><div class="line">            for (int i = 1; i &lt;= 20; i++)</div><div class="line">            &#123;</div><div class="line">                F.WriteByte((byte)i);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            F.Position = 0;</div><div class="line"></div><div class="line">            for (int i = 0; i &lt;= 20; i++)</div><div class="line">            &#123;</div><div class="line">                Console.Write(F.ReadByte() + &quot; &quot;);</div><div class="line">            &#125;</div><div class="line">            F.Close();</div><div class="line">            Console.ReadKey();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 -1</div></pre></td></tr></table></figure><h3 id="StreamReader-和-StreamWriter"><a href="#StreamReader-和-StreamWriter" class="headerlink" title="StreamReader 和 StreamWriter"></a><strong>StreamReader</strong> 和 <strong>StreamWriter</strong></h3><h4 id="StreamReader-类"><a href="#StreamReader-类" class="headerlink" title="StreamReader 类"></a>StreamReader 类</h4><p>下面的实例演示了读取名为 Jamaica.txt 的文件。文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">Down the way where the nights are gay</div><div class="line">And the sun shines daily on the mountain top</div><div class="line">I took a trip on a sailing ship</div><div class="line">And when I reached Jamaica</div><div class="line">I made a stop</div><div class="line">using System;</div><div class="line">using System.IO;</div><div class="line"></div><div class="line">namespace FileApplication</div><div class="line">&#123;</div><div class="line">    class Program</div><div class="line">    &#123;</div><div class="line">        static void Main(string[] args)</div><div class="line">        &#123;</div><div class="line">            try</div><div class="line">            &#123;</div><div class="line">                // 创建一个 StreamReader 的实例来读取文件 </div><div class="line">                // using 语句也能关闭 StreamReader</div><div class="line">                using (StreamReader sr = new StreamReader(&quot;c:/jamaica.txt&quot;))</div><div class="line">                &#123;</div><div class="line">                    string line;</div><div class="line">                   </div><div class="line">                    // 从文件读取并显示行，直到文件的末尾 </div><div class="line">                    while ((line = sr.ReadLine()) != null)</div><div class="line">                    &#123;</div><div class="line">                        Console.WriteLine(line);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            catch (Exception e)</div><div class="line">            &#123;</div><div class="line">                // 向用户显示出错消息</div><div class="line">                Console.WriteLine(&quot;The file could not be read:&quot;);</div><div class="line">                Console.WriteLine(e.Message);</div><div class="line">            &#125;</div><div class="line">            Console.ReadKey();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当您编译和执行上面的程序时，它会显示文件的内容。</p><h4 id="StreamWriter-类"><a href="#StreamWriter-类" class="headerlink" title="StreamWriter 类"></a>StreamWriter 类</h4><p>下面的实例演示了使用 StreamWriter 类向文件写入文本数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.IO;</div><div class="line"></div><div class="line">namespace FileApplication</div><div class="line">&#123;</div><div class="line">    class Program</div><div class="line">    &#123;</div><div class="line">        static void Main(string[] args)</div><div class="line">        &#123;</div><div class="line"></div><div class="line">            string[] names = new string[] &#123;&quot;Zara Ali&quot;, &quot;Nuha Ali&quot;&#125;;</div><div class="line">            using (StreamWriter sw = new StreamWriter(&quot;names.txt&quot;))</div><div class="line">            &#123;</div><div class="line">                foreach (string s in names)</div><div class="line">                &#123;</div><div class="line">                    sw.WriteLine(s);</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 从文件中读取并显示每行</div><div class="line">            string line = &quot;&quot;;</div><div class="line">            using (StreamReader sr = new StreamReader(&quot;names.txt&quot;))</div><div class="line">            &#123;</div><div class="line">                while ((line = sr.ReadLine()) != null)</div><div class="line">                &#123;</div><div class="line">                    Console.WriteLine(line);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            Console.ReadKey();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Zara Ali</div><div class="line">Nuha Ali</div></pre></td></tr></table></figure><h3 id="BinaryReader-和-BinaryWriter"><a href="#BinaryReader-和-BinaryWriter" class="headerlink" title="BinaryReader 和 BinaryWriter"></a><strong>BinaryReader</strong> 和 <strong>BinaryWriter</strong></h3><p>下面的实例演示了读取和写入二进制数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.IO;</div><div class="line"></div><div class="line">namespace BinaryFileApplication</div><div class="line">&#123;</div><div class="line">    class Program</div><div class="line">    &#123;</div><div class="line">        static void Main(string[] args)</div><div class="line">        &#123;</div><div class="line">            BinaryWriter bw;</div><div class="line">            BinaryReader br;</div><div class="line">            int i = 25;</div><div class="line">            double d = 3.14157;</div><div class="line">            bool b = true;</div><div class="line">            string s = &quot;I am happy&quot;;</div><div class="line">            // 创建文件</div><div class="line">            try</div><div class="line">            &#123;</div><div class="line">                bw = new BinaryWriter(new FileStream(&quot;mydata&quot;,</div><div class="line">				FileMode.Create));</div><div class="line">            &#125;</div><div class="line">            catch (IOException e)</div><div class="line">            &#123;</div><div class="line">                Console.WriteLine(e.Message + &quot;\n Cannot create file.&quot;);</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            // 写入文件</div><div class="line">            try</div><div class="line">            &#123;</div><div class="line">                bw.Write(i);</div><div class="line">                bw.Write(d);</div><div class="line">                bw.Write(b);</div><div class="line">                bw.Write(s);</div><div class="line">            &#125;</div><div class="line">            catch (IOException e)</div><div class="line">            &#123;</div><div class="line">                Console.WriteLine(e.Message + &quot;\n Cannot write to file.&quot;);</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            bw.Close();</div><div class="line">            // 读取文件</div><div class="line">            try</div><div class="line">            &#123;</div><div class="line">                br = new BinaryReader(new FileStream(&quot;mydata&quot;,</div><div class="line">				FileMode.Open));</div><div class="line">            &#125;</div><div class="line">            catch (IOException e)</div><div class="line">            &#123;</div><div class="line">                Console.WriteLine(e.Message + &quot;\n Cannot open file.&quot;);</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            try</div><div class="line">            &#123;</div><div class="line">                i = br.ReadInt32();</div><div class="line">                Console.WriteLine(&quot;Integer data: &#123;0&#125;&quot;, i);</div><div class="line">                d = br.ReadDouble();</div><div class="line">                Console.WriteLine(&quot;Double data: &#123;0&#125;&quot;, d);</div><div class="line">                b = br.ReadBoolean();</div><div class="line">                Console.WriteLine(&quot;Boolean data: &#123;0&#125;&quot;, b);</div><div class="line">                s = br.ReadString();</div><div class="line">                Console.WriteLine(&quot;String data: &#123;0&#125;&quot;, s);</div><div class="line">            &#125;</div><div class="line">            catch (IOException e)</div><div class="line">            &#123;</div><div class="line">                Console.WriteLine(e.Message + &quot;\n Cannot read from file.&quot;);</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            br.Close();</div><div class="line">            Console.ReadKey();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Integer data: 25</div><div class="line">Double data: 3.14157</div><div class="line">Boolean data: True</div><div class="line">String data: I am happy</div></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p><strong>属性（Property）</strong> 是类（class）、结构（structure）和接口（interface）的命名（named）成员。类或结构中的成员变量或方法称为 <strong>域（Field）</strong>。属性（Property）是域（Field）的扩展，且可使用相同的语法来访问。它们使用 <strong>访问器（accessors）</strong> 让私有域的值可被读写或操作。</p><p>属性（Property）不会确定存储位置。相反，它们具有可读写或计算它们值的 <strong>访问器（accessors）</strong>。</p><p>例如，有一个名为 Student 的类，带有 age、name 和 code 的私有域。我们不能在类的范围以外直接访问这些域，但是我们可以拥有访问这些私有域的属性。</p><h4 id="访问器（Accessors）"><a href="#访问器（Accessors）" class="headerlink" title="访问器（Accessors）"></a>访问器（Accessors）</h4><p>属性（Property）的<strong>访问器（accessor）</strong>包含有助于获取（读取或计算）或设置（写入）属性的可执行语句。访问器（accessor）声明可包含一个 get 访问器、一个 set 访问器，或者同时包含二者。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">// 声明类型为 string 的 Code 属性</div><div class="line">public string Code</div><div class="line">&#123;</div><div class="line">   get</div><div class="line">   &#123;</div><div class="line">      return code;</div><div class="line">   &#125;</div><div class="line">   set</div><div class="line">   &#123;</div><div class="line">      code = value;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 声明类型为 string 的 Name 属性</div><div class="line">public string Name</div><div class="line">&#123;</div><div class="line">   get</div><div class="line">   &#123;</div><div class="line">     return name;</div><div class="line">   &#125;</div><div class="line">   set</div><div class="line">   &#123;</div><div class="line">     name = value;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 声明类型为 int 的 Age 属性</div><div class="line">public int Age</div><div class="line">&#123; </div><div class="line">   get</div><div class="line">   &#123;</div><div class="line">      return age;</div><div class="line">   &#125;</div><div class="line">   set</div><div class="line">   &#123;</div><div class="line">      age = value;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><p>下面的实例演示了属性（Property）的用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">namespace tutorialspoint</div><div class="line">&#123;</div><div class="line">   class Student</div><div class="line">   &#123;</div><div class="line"></div><div class="line">      private string code = &quot;N.A&quot;;</div><div class="line">      private string name = &quot;not known&quot;;</div><div class="line">      private int age = 0;</div><div class="line"></div><div class="line">      // 声明类型为 string 的 Code 属性</div><div class="line">      public string Code</div><div class="line">      &#123;</div><div class="line">         get</div><div class="line">         &#123;</div><div class="line">            return code;</div><div class="line">         &#125;</div><div class="line">         set</div><div class="line">         &#123;</div><div class="line">            code = value;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   </div><div class="line">      // 声明类型为 string 的 Name 属性</div><div class="line">      public string Name</div><div class="line">      &#123;</div><div class="line">         get</div><div class="line">         &#123;</div><div class="line">            return name;</div><div class="line">         &#125;</div><div class="line">         set</div><div class="line">         &#123;</div><div class="line">            name = value;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      // 声明类型为 int 的 Age 属性</div><div class="line">      public int Age</div><div class="line">      &#123;</div><div class="line">         get</div><div class="line">         &#123;</div><div class="line">            return age;</div><div class="line">         &#125;</div><div class="line">         set</div><div class="line">         &#123;</div><div class="line">            age = value;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">      public override string ToString()</div><div class="line">      &#123;</div><div class="line">         return &quot;Code = &quot; + Code +&quot;, Name = &quot; + Name + &quot;, Age = &quot; + Age;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    class ExampleDemo</div><div class="line">    &#123;</div><div class="line">      public static void Main()</div><div class="line">      &#123;</div><div class="line">         // 创建一个新的 Student 对象</div><div class="line">         Student s = new Student();</div><div class="line">            </div><div class="line">         // 设置 student 的 code、name 和 age</div><div class="line">         s.Code = &quot;001&quot;;</div><div class="line">         s.Name = &quot;Zara&quot;;</div><div class="line">         s.Age = 9;</div><div class="line">         Console.WriteLine(&quot;Student Info: &#123;0&#125;&quot;, s);</div><div class="line">         // 增加年龄</div><div class="line">         s.Age += 1;</div><div class="line">         Console.WriteLine(&quot;Student Info: &#123;0&#125;&quot;, s);</div><div class="line">         Console.ReadKey();</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Student Info: Code = 001, Name = Zara, Age = 9</div><div class="line">Student Info: Code = 001, Name = Zara, Age = 10</div></pre></td></tr></table></figure><h4 id="抽象属性（Abstract-Properties）"><a href="#抽象属性（Abstract-Properties）" class="headerlink" title="抽象属性（Abstract Properties）"></a>抽象属性（Abstract Properties）</h4><p>抽象类可拥有抽象属性，这些属性应在派生类中被实现。下面的程序说明了这点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">namespace tutorialspoint</div><div class="line">&#123;</div><div class="line">   public abstract class Person</div><div class="line">   &#123;</div><div class="line">      public abstract string Name</div><div class="line">      &#123;</div><div class="line">         get;</div><div class="line">         set;</div><div class="line">      &#125;</div><div class="line">      public abstract int Age</div><div class="line">      &#123;</div><div class="line">         get;</div><div class="line">         set;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   class Student : Person</div><div class="line">   &#123;</div><div class="line"></div><div class="line">      private string code = &quot;N.A&quot;;</div><div class="line">      private string name = &quot;N.A&quot;;</div><div class="line">      private int age = 0;</div><div class="line"></div><div class="line">      // 声明类型为 string 的 Code 属性</div><div class="line">      public string Code</div><div class="line">      &#123;</div><div class="line">         get</div><div class="line">         &#123;</div><div class="line">            return code;</div><div class="line">         &#125;</div><div class="line">         set</div><div class="line">         &#123;</div><div class="line">            code = value;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   </div><div class="line">      // 声明类型为 string 的 Name 属性</div><div class="line">      public override string Name</div><div class="line">      &#123;</div><div class="line">         get</div><div class="line">         &#123;</div><div class="line">            return name;</div><div class="line">         &#125;</div><div class="line">         set</div><div class="line">         &#123;</div><div class="line">            name = value;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      // 声明类型为 int 的 Age 属性</div><div class="line">      public override int Age</div><div class="line">      &#123;</div><div class="line">         get</div><div class="line">         &#123;</div><div class="line">            return age;</div><div class="line">         &#125;</div><div class="line">         set</div><div class="line">         &#123;</div><div class="line">            age = value;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">      public override string ToString()</div><div class="line">      &#123;</div><div class="line">         return &quot;Code = &quot; + Code +&quot;, Name = &quot; + Name + &quot;, Age = &quot; + Age;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   class ExampleDemo</div><div class="line">   &#123;</div><div class="line">      public static void Main()</div><div class="line">      &#123;</div><div class="line">         // 创建一个新的 Student 对象</div><div class="line">         Student s = new Student();</div><div class="line">            </div><div class="line">         // 设置 student 的 code、name 和 age</div><div class="line">         s.Code = &quot;001&quot;;</div><div class="line">         s.Name = &quot;Zara&quot;;</div><div class="line">         s.Age = 9;</div><div class="line">         Console.WriteLine(&quot;Student Info:- &#123;0&#125;&quot;, s);</div><div class="line">         // 增加年龄</div><div class="line">         s.Age += 1;</div><div class="line">         Console.WriteLine(&quot;Student Info:- &#123;0&#125;&quot;, s);</div><div class="line">         Console.ReadKey();</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Student Info: Code = 001, Name = Zara, Age = 9</div><div class="line">Student Info: Code = 001, Name = Zara, Age = 10</div></pre></td></tr></table></figure><h3 id="索引器"><a href="#索引器" class="headerlink" title="索引器"></a>索引器</h3><p><strong>索引器（Indexer）</strong> 允许一个对象可以像数组一样被索引。当您为类定义一个索引器时，该类的行为就会像一个 <strong>虚拟数组（virtual array）</strong> 一样。您可以使用数组访问运算符（[ ]）来访问该类的实例。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>一维索引器的语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">element-type this[int index] </div><div class="line">&#123;</div><div class="line">   // get 访问器</div><div class="line">   get </div><div class="line">   &#123;</div><div class="line">      // 返回 index 指定的值</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   // set 访问器</div><div class="line">   set </div><div class="line">   &#123;</div><div class="line">      // 设置 index 指定的值 </div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="索引器（Indexer）的用途"><a href="#索引器（Indexer）的用途" class="headerlink" title="索引器（Indexer）的用途"></a>索引器（Indexer）的用途</h4><p>索引器的行为的声明在某种程度上类似于属性（property）。就像属性（property），您可使用 <strong>get</strong> 和 <strong>set</strong> 访问器来定义索引器。但是，属性返回或设置一个特定的数据成员，而索引器返回或设置对象实例的一个特定值。换句话说，它把实例数据分为更小的部分，并索引每个部分，获取或设置每个部分。</p><p>定义一个属性（property）包括提供属性名称。索引器定义的时候不带有名称，但带有 <strong>this</strong> 关键字，它指向对象实例。下面的实例演示了这个概念：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">namespace IndexerApplication</div><div class="line">&#123;</div><div class="line">   class IndexedNames</div><div class="line">   &#123;</div><div class="line">      private string[] namelist = new string[size];</div><div class="line">      static public int size = 10;</div><div class="line">      public IndexedNames()</div><div class="line">      &#123;</div><div class="line">         for (int i = 0; i &lt; size; i++)</div><div class="line">         namelist[i] = &quot;N. A.&quot;;</div><div class="line">      &#125;</div><div class="line">      public string this[int index]</div><div class="line">      &#123;</div><div class="line">         get</div><div class="line">         &#123;</div><div class="line">            string tmp;</div><div class="line"></div><div class="line">            if( index &gt;= 0 &amp;&amp; index &lt;= size-1 )</div><div class="line">            &#123;</div><div class="line">               tmp = namelist[index];</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">               tmp = &quot;&quot;;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            return ( tmp );</div><div class="line">         &#125;</div><div class="line">         set</div><div class="line">         &#123;</div><div class="line">            if( index &gt;= 0 &amp;&amp; index &lt;= size-1 )</div><div class="line">            &#123;</div><div class="line">               namelist[index] = value;</div><div class="line">            &#125;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      static void Main(string[] args)</div><div class="line">      &#123;</div><div class="line">         IndexedNames names = new IndexedNames();</div><div class="line">         names[0] = &quot;Zara&quot;;</div><div class="line">         names[1] = &quot;Riz&quot;;</div><div class="line">         names[2] = &quot;Nuha&quot;;</div><div class="line">         names[3] = &quot;Asif&quot;;</div><div class="line">         names[4] = &quot;Davinder&quot;;</div><div class="line">         names[5] = &quot;Sunil&quot;;</div><div class="line">         names[6] = &quot;Rubic&quot;;</div><div class="line">         for ( int i = 0; i &lt; IndexedNames.size; i++ )</div><div class="line">         &#123;</div><div class="line">            Console.WriteLine(names[i]);</div><div class="line">         &#125;</div><div class="line">         Console.ReadKey();</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Zara</div><div class="line">Riz</div><div class="line">Nuha</div><div class="line">Asif</div><div class="line">Davinder</div><div class="line">Sunil</div><div class="line">Rubic</div><div class="line">N. A.</div><div class="line">N. A.</div><div class="line">N. A.</div></pre></td></tr></table></figure><h4 id="重载索引器（Indexer）"><a href="#重载索引器（Indexer）" class="headerlink" title="重载索引器（Indexer）"></a>重载索引器（Indexer）</h4><p>索引器（Indexer）可被重载。索引器声明的时候也可带有多个参数，且每个参数可以是不同的类型。没有必要让索引器必须是整型的。C# 允许索引器可以是其他类型，例如，字符串类型。</p><p>下面的实例演示了重载索引器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">namespace IndexerApplication</div><div class="line">&#123;</div><div class="line">   class IndexedNames</div><div class="line">   &#123;</div><div class="line">      private string[] namelist = new string[size];</div><div class="line">      static public int size = 10;</div><div class="line">      public IndexedNames()</div><div class="line">      &#123;</div><div class="line">         for (int i = 0; i &lt; size; i++)</div><div class="line">         &#123;</div><div class="line">          namelist[i] = &quot;N. A.&quot;;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">      public string this[int index]</div><div class="line">      &#123;</div><div class="line">         get</div><div class="line">         &#123;</div><div class="line">            string tmp;</div><div class="line"></div><div class="line">            if( index &gt;= 0 &amp;&amp; index &lt;= size-1 )</div><div class="line">            &#123;</div><div class="line">               tmp = namelist[index];</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">               tmp = &quot;&quot;;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            return ( tmp );</div><div class="line">         &#125;</div><div class="line">         set</div><div class="line">         &#123;</div><div class="line">            if( index &gt;= 0 &amp;&amp; index &lt;= size-1 )</div><div class="line">            &#123;</div><div class="line">               namelist[index] = value;</div><div class="line">            &#125;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">      public int this[string name]</div><div class="line">      &#123;</div><div class="line">         get</div><div class="line">         &#123;</div><div class="line">            int index = 0;</div><div class="line">            while(index &lt; size)</div><div class="line">            &#123;</div><div class="line">               if (namelist[index] == name)</div><div class="line">               &#123;</div><div class="line">                return index;</div><div class="line">               &#125;</div><div class="line">               index++;</div><div class="line">            &#125;</div><div class="line">            return index;</div><div class="line">         &#125;</div><div class="line"></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      static void Main(string[] args)</div><div class="line">      &#123;</div><div class="line">         IndexedNames names = new IndexedNames();</div><div class="line">         names[0] = &quot;Zara&quot;;</div><div class="line">         names[1] = &quot;Riz&quot;;</div><div class="line">         names[2] = &quot;Nuha&quot;;</div><div class="line">         names[3] = &quot;Asif&quot;;</div><div class="line">         names[4] = &quot;Davinder&quot;;</div><div class="line">         names[5] = &quot;Sunil&quot;;</div><div class="line">         names[6] = &quot;Rubic&quot;;</div><div class="line">         // 使用带有 int 参数的第一个索引器</div><div class="line">         for (int i = 0; i &lt; IndexedNames.size; i++)</div><div class="line">         &#123;</div><div class="line">            Console.WriteLine(names[i]);</div><div class="line">         &#125;</div><div class="line">         // 使用带有 string 参数的第二个索引器</div><div class="line">         Console.WriteLine(names[&quot;Nuha&quot;]);</div><div class="line">         Console.ReadKey();</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Zara</div><div class="line">Riz</div><div class="line">Nuha</div><div class="line">Asif</div><div class="line">Davinder</div><div class="line">Sunil</div><div class="line">Rubic</div><div class="line">N. A.</div><div class="line">N. A.</div><div class="line">N. A.</div><div class="line">2</div></pre></td></tr></table></figure><h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><p>C# 中的委托（Delegate）类似于 C 或 C++ 中函数的指针。<strong>委托（Delegate）</strong> 是存有对某个方法的引用的一种引用类型变量。引用可在运行时被改变。</p><p>委托（Delegate）特别用于实现事件和回调方法。所有的委托（Delegate）都派生自 <strong>System.Delegate</strong> 类。</p><h4 id="声明委托（Delegate）"><a href="#声明委托（Delegate）" class="headerlink" title="声明委托（Delegate）"></a>声明委托（Delegate）</h4><p>委托声明决定了可由该委托引用的方法。委托可指向一个与其具有相同标签的方法。</p><p>例如，假设有一个委托：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public delegate int MyDelegate (string s);</div></pre></td></tr></table></figure><p>上面的委托可被用于引用任何一个带有一个单一的 <em>string</em> 参数的方法，并返回一个 <em>int</em> 类型变量。</p><p>声明委托的语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delegate &lt;return type&gt; &lt;delegate-name&gt; &lt;parameter list&gt;</div></pre></td></tr></table></figure><h4 id="实例化委托（Delegate）"><a href="#实例化委托（Delegate）" class="headerlink" title="实例化委托（Delegate）"></a>实例化委托（Delegate）</h4><p>一旦声明了委托类型，委托对象必须使用 <strong>new</strong> 关键字来创建，且与一个特定的方法有关。当创建委托时，传递到 <strong>new</strong> 语句的参数就像方法调用一样书写，但是不带有参数。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public delegate void printString(string s);</div><div class="line">...</div><div class="line">printString ps1 = new printString(WriteToScreen);</div><div class="line">printString ps2 = new printString(WriteToFile);</div></pre></td></tr></table></figure><p>下面的实例演示了委托的声明、实例化和使用，该委托可用于引用带有一个整型参数的方法，并返回一个整型值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line"></div><div class="line">delegate int NumberChanger(int n);</div><div class="line">namespace DelegateAppl</div><div class="line">&#123;</div><div class="line">   class TestDelegate</div><div class="line">   &#123;</div><div class="line">      static int num = 10;</div><div class="line">      public static int AddNum(int p)</div><div class="line">      &#123;</div><div class="line">         num += p;</div><div class="line">         return num;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      public static int MultNum(int q)</div><div class="line">      &#123;</div><div class="line">         num *= q;</div><div class="line">         return num;</div><div class="line">      &#125;</div><div class="line">      public static int getNum()</div><div class="line">      &#123;</div><div class="line">         return num;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      static void Main(string[] args)</div><div class="line">      &#123;</div><div class="line">         // 创建委托实例</div><div class="line">         NumberChanger nc1 = new NumberChanger(AddNum);</div><div class="line">         NumberChanger nc2 = new NumberChanger(MultNum);</div><div class="line">         // 使用委托对象调用方法</div><div class="line">         nc1(25);</div><div class="line">         Console.WriteLine(&quot;Value of Num: &#123;0&#125;&quot;, getNum());</div><div class="line">         nc2(5);</div><div class="line">         Console.WriteLine(&quot;Value of Num: &#123;0&#125;&quot;, getNum());</div><div class="line">         Console.ReadKey();</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Value of Num: 35</div><div class="line">Value of Num: 175</div></pre></td></tr></table></figure><h4 id="委托的多播（Multicasting-of-a-Delegate）"><a href="#委托的多播（Multicasting-of-a-Delegate）" class="headerlink" title="委托的多播（Multicasting of a Delegate）"></a>委托的多播（Multicasting of a Delegate）</h4><p>委托对象可使用 “+” 运算符进行合并。一个合并委托调用它所合并的两个委托。只有相同类型的委托可被合并。”-“ 运算符可用于从合并的委托中移除组件委托。</p><p>使用委托的这个有用的特点，您可以创建一个委托被调用时要调用的方法的调用列表。这被称为委托的 <strong>多播（multicasting）</strong>，也叫组播。下面的程序演示了委托的多播：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line"></div><div class="line">delegate int NumberChanger(int n);</div><div class="line">namespace DelegateAppl</div><div class="line">&#123;</div><div class="line">   class TestDelegate</div><div class="line">   &#123;</div><div class="line">      static int num = 10;</div><div class="line">      public static int AddNum(int p)</div><div class="line">      &#123;</div><div class="line">         num += p;</div><div class="line">         return num;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      public static int MultNum(int q)</div><div class="line">      &#123;</div><div class="line">         num *= q;</div><div class="line">         return num;</div><div class="line">      &#125;</div><div class="line">      public static int getNum()</div><div class="line">      &#123;</div><div class="line">         return num;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      static void Main(string[] args)</div><div class="line">      &#123;</div><div class="line">         // 创建委托实例</div><div class="line">         NumberChanger nc;</div><div class="line">         NumberChanger nc1 = new NumberChanger(AddNum);</div><div class="line">         NumberChanger nc2 = new NumberChanger(MultNum);</div><div class="line">         nc = nc1;</div><div class="line">         nc += nc2;</div><div class="line">         // 调用多播</div><div class="line">         nc(5);</div><div class="line">         Console.WriteLine(&quot;Value of Num: &#123;0&#125;&quot;, getNum());</div><div class="line">         Console.ReadKey();</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Value of Num: 75</div></pre></td></tr></table></figure><h4 id="委托（Delegate）的用途"><a href="#委托（Delegate）的用途" class="headerlink" title="委托（Delegate）的用途"></a>委托（Delegate）的用途</h4><p>委托多播实例：例如小明叫小张买完车票，之后接着又让他带张电影票：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">// 小张类</div><div class="line">public class MrZhang</div><div class="line">	&#123;</div><div class="line">	// 其实买车票的悲情人物是小张</div><div class="line">	public static void BuyTicket()</div><div class="line">	&#123;</div><div class="line">	    	Console.WriteLine(&quot;NND,每次都让我去买票，鸡人呀！&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void BuyMovieTicket()</div><div class="line">	&#123;</div><div class="line">		Console.WriteLine(&quot;我去，自己泡妞，还要让我带电影票！&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//小明类</div><div class="line">class MrMing</div><div class="line">&#123;</div><div class="line">    // 声明一个委托，其实就是个“命令”</div><div class="line">    public delegate void BugTicketEventHandler();</div><div class="line"></div><div class="line">    public static void Main(string[] args)</div><div class="line">    &#123;</div><div class="line">        // 这里就是具体阐述这个命令是干什么的，本例是MrZhang.BuyTicket“小张买车票”</div><div class="line">        BugTicketEventHandler myDelegate = new BugTicketEventHandler(MrZhang.BuyTicket);</div><div class="line"></div><div class="line">        myDelegate += MrZhang.BuyMovieTicket;</div><div class="line">        // 这时候委托被附上了具体的方法</div><div class="line">        myDelegate();</div><div class="line">        Console.ReadKey();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p><strong>事件（Event）</strong> 基本上说是一个用户操作，如按键、点击、鼠标移动等等，或者是一些出现，如系统生成的通知。应用程序需要在事件发生时响应事件。例如，中断。事件是用于进程间通信。</p><h4 id="通过事件使用委托"><a href="#通过事件使用委托" class="headerlink" title="通过事件使用委托"></a>通过事件使用委托</h4><p>事件在类中声明且生成，且通过使用同一个类或其他类中的委托与事件处理程序关联。包含事件的类用于发布事件。这被称为 <strong>发布器（publisher）</strong> 类。其他接受该事件的类被称为 <strong>订阅器（subscriber）</strong> 类。事件使用 <strong>发布-订阅（publisher-subscriber）</strong> 模型。</p><p><strong>发布器（publisher）</strong> 是一个包含事件和委托定义的对象。事件和委托之间的联系也定义在这个对象中。发布器（publisher）类的对象调用这个事件，并通知其他的对象。</p><p><strong>订阅器（subscriber）</strong> 是一个接受事件并提供事件处理程序的对象。在发布器（publisher）类中的委托调用订阅器（subscriber）类中的方法（事件处理程序）。</p><h4 id="声明事件（Event）"><a href="#声明事件（Event）" class="headerlink" title="声明事件（Event）"></a>声明事件（Event）</h4><p>在类的内部声明事件，首先必须声明该事件的委托类型。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public delegate void BoilerLogHandler(string status);</div></pre></td></tr></table></figure><p>然后，声明事件本身，使用 <strong>event</strong> 关键字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 基于上面的委托定义事件</div><div class="line">public event BoilerLogHandler BoilerEventLog;</div></pre></td></tr></table></figure><p>上面的代码定义了一个名为 <em>BoilerLogHandler</em> 的委托和一个名为 <em>BoilerEventLog</em> 的事件，该事件在生成的时候会调用委托。</p><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例 1"></a>实例 1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">namespace SimpleEvent</div><div class="line">&#123;</div><div class="line">   using System;</div><div class="line"></div><div class="line">   public class EventTest</div><div class="line">   &#123;</div><div class="line">      private int value;</div><div class="line"></div><div class="line">      public delegate void NumManipulationHandler();</div><div class="line"></div><div class="line">      public event NumManipulationHandler ChangeNum;</div><div class="line"></div><div class="line">      protected virtual void OnNumChanged()</div><div class="line">      &#123;</div><div class="line">         if (ChangeNum != null)</div><div class="line">         &#123;</div><div class="line">            ChangeNum();</div><div class="line">         &#125;</div><div class="line">         else</div><div class="line">         &#123;</div><div class="line">            Console.WriteLine(&quot;Event fired!&quot;);</div><div class="line">         &#125;</div><div class="line"></div><div class="line">      &#125;</div><div class="line">      public EventTest(int n )</div><div class="line">      &#123;</div><div class="line">         SetValue(n);</div><div class="line">      &#125;</div><div class="line">      public void SetValue(int n)</div><div class="line">      &#123;</div><div class="line">         if (value != n)</div><div class="line">         &#123;</div><div class="line">            value = n;</div><div class="line">            OnNumChanged();</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   public class MainClass</div><div class="line">   &#123;</div><div class="line">      public static void Main()</div><div class="line">      &#123;</div><div class="line">         EventTest e = new EventTest(5);</div><div class="line">         e.SetValue(7);</div><div class="line">         e.SetValue(11);</div><div class="line">         Console.ReadKey();</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Event Fired!</div><div class="line">Event Fired!</div><div class="line">Event Fired!</div></pre></td></tr></table></figure><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例 2"></a>实例 2</h4><p>本实例提供一个简单的用于热水锅炉系统故障排除的应用程序。当维修工程师检查锅炉时，锅炉的温度和压力会随着维修工程师的备注自动记录到日志文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.IO;</div><div class="line"></div><div class="line">namespace BoilerEventAppl</div><div class="line">&#123;</div><div class="line"></div><div class="line">   // boiler 类</div><div class="line">   class Boiler</div><div class="line">   &#123;</div><div class="line">      private int temp;</div><div class="line">      private int pressure;</div><div class="line">      public Boiler(int t, int p)</div><div class="line">      &#123;</div><div class="line">         temp = t;</div><div class="line">         pressure = p;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      public int getTemp()</div><div class="line">      &#123;</div><div class="line">         return temp;</div><div class="line">      &#125;</div><div class="line">      public int getPressure()</div><div class="line">      &#123;</div><div class="line">         return pressure;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   // 事件发布器</div><div class="line">   class DelegateBoilerEvent</div><div class="line">   &#123;</div><div class="line">      public delegate void BoilerLogHandler(string status);</div><div class="line"></div><div class="line">      // 基于上面的委托定义事件</div><div class="line">      public event BoilerLogHandler BoilerEventLog;</div><div class="line"></div><div class="line">      public void LogProcess()</div><div class="line">      &#123;</div><div class="line">         string remarks = &quot;O. K&quot;;</div><div class="line">         Boiler b = new Boiler(100, 12);</div><div class="line">         int t = b.getTemp();</div><div class="line">         int p = b.getPressure();</div><div class="line">         if(t &gt; 150 || t &lt; 80 || p &lt; 12 || p &gt; 15)</div><div class="line">         &#123;</div><div class="line">            remarks = &quot;Need Maintenance&quot;;</div><div class="line">         &#125;</div><div class="line">         OnBoilerEventLog(&quot;Logging Info:\n&quot;);</div><div class="line">         OnBoilerEventLog(&quot;Temparature &quot; + t + &quot;\nPressure: &quot; + p);</div><div class="line">         OnBoilerEventLog(&quot;\nMessage: &quot; + remarks);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      protected void OnBoilerEventLog(string message)</div><div class="line">      &#123;</div><div class="line">         if (BoilerEventLog != null)</div><div class="line">         &#123;</div><div class="line">            BoilerEventLog(message);</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   // 该类保留写入日志文件的条款</div><div class="line">   class BoilerInfoLogger</div><div class="line">   &#123;</div><div class="line">      FileStream fs;</div><div class="line">      StreamWriter sw;</div><div class="line">      public BoilerInfoLogger(string filename)</div><div class="line">      &#123;</div><div class="line">         fs = new FileStream(filename, FileMode.Append, FileAccess.Write);</div><div class="line">         sw = new StreamWriter(fs);</div><div class="line">      &#125;</div><div class="line">      public void Logger(string info)</div><div class="line">      &#123;</div><div class="line">         sw.WriteLine(info);</div><div class="line">      &#125;</div><div class="line">      public void Close()</div><div class="line">      &#123;</div><div class="line">         sw.Close();</div><div class="line">         fs.Close();</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   // 事件订阅器</div><div class="line">   public class RecordBoilerInfo</div><div class="line">   &#123;</div><div class="line">      static void Logger(string info)</div><div class="line">      &#123;</div><div class="line">         Console.WriteLine(info);</div><div class="line">      &#125;//end of Logger</div><div class="line"></div><div class="line">      static void Main(string[] args)</div><div class="line">      &#123;</div><div class="line">         BoilerInfoLogger filelog = new BoilerInfoLogger(&quot;e:\\boiler.txt&quot;);</div><div class="line">         DelegateBoilerEvent boilerEvent = new DelegateBoilerEvent();</div><div class="line">         boilerEvent.BoilerEventLog += new </div><div class="line">         DelegateBoilerEvent.BoilerLogHandler(Logger);</div><div class="line">         boilerEvent.BoilerEventLog += new </div><div class="line">         DelegateBoilerEvent.BoilerLogHandler(filelog.Logger);</div><div class="line">         boilerEvent.LogProcess();</div><div class="line">         Console.ReadLine();</div><div class="line">         filelog.Close();</div><div class="line">      &#125;//end of main</div><div class="line"></div><div class="line">   &#125;//end of RecordBoilerInfo</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Logging info:</div><div class="line"></div><div class="line">Temperature 100</div><div class="line">Pressure 12</div><div class="line"></div><div class="line">Message: O. K</div></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合（Collection）类是专门用于数据存储和检索的类。这些类提供了对栈（stack）、队列（queue）、列表（list）和哈希表（hash table）的支持。大多数集合类实现了相同的接口。</p><p>集合（Collection）类服务于不同的目的，如为元素动态分配内存，基于索引访问列表项等等。这些类创建 Object 类的对象的集合。在 C# 中，Object 类是所有数据类型的基类。</p><h4 id="各种集合类和它们的用法"><a href="#各种集合类和它们的用法" class="headerlink" title="各种集合类和它们的用法"></a>各种集合类和它们的用法</h4><p>下面是各种常用的 <strong>System.Collection</strong> 命名空间的类。点击下面的链接查看细节。</p><div class="table-container"><table><thead><tr><th>类</th><th>描述和用法</th></tr></thead><tbody><tr><td><a href="http://www.runoob.com/csharp/csharp-arraylist.html" target="_blank" rel="external">动态数组（ArrayList）</a></td><td>它代表了可被单独<strong>索引</strong>的对象的有序集合。它基本上可以替代一个数组。但是，与数组不同的是，您可以使用<strong>索引</strong>在指定的位置添加和移除项目，动态数组会自动重新调整它的大小。它也允许在列表中进行动态内存分配、增加、搜索、排序各项。</td></tr><tr><td><a href="http://www.runoob.com/csharp/csharp-hashtable.html" target="_blank" rel="external">哈希表（Hashtable）</a></td><td>它使用<strong>键</strong>来访问集合中的元素。当您使用键访问元素时，则使用哈希表，而且您可以识别一个有用的键值。哈希表中的每一项都有一个<strong>键/值</strong>对。键用于访问集合中的项目。</td></tr><tr><td><a href="http://www.runoob.com/csharp/csharp-sortedlist.html" target="_blank" rel="external">排序列表（SortedList）</a></td><td>它可以使用<strong>键</strong>和<strong>索引</strong>来访问列表中的项。排序列表是数组和哈希表的组合。它包含一个可使用键或索引访问各项的列表。如果您使用索引访问各项，则它是一个动态数组（ArrayList），如果您使用键访问各项，则它是一个哈希表（Hashtable）。集合中的各项总是按键值排序。</td></tr><tr><td><a href="http://www.runoob.com/csharp/csharp-stack.html" target="_blank" rel="external">堆栈（Stack）</a></td><td>它代表了一个<strong>后进先出</strong>的对象集合。当您需要对各项进行后进先出的访问时，则使用堆栈。当您在列表中添加一项，称为<strong>推入</strong>元素，当您从列表中移除一项时，称为<strong>弹出</strong>元素。</td></tr><tr><td><a href="http://www.runoob.com/csharp/csharp-queue.html" target="_blank" rel="external">队列（Queue）</a></td><td>它代表了一个<strong>先进先出</strong>的对象集合。当您需要对各项进行先进先出的访问时，则使用队列。当您在列表中添加一项，称为<strong>入队</strong>，当您从列表中移除一项时，称为<strong>出队</strong>。</td></tr><tr><td><a href="http://www.runoob.com/csharp/csharp-bitarray.html" target="_blank" rel="external">点阵列（BitArray）</a></td><td>它代表了一个使用值 1 和 0 来表示的<strong>二进制</strong>数组。当您需要存储位，但是事先不知道位数时，则使用点阵列。您可以使用<strong>整型索引</strong>从点阵列集合中访问各项，索引从零开始。</td></tr></tbody></table></div><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p><strong>泛型（Generic）</strong> 允许您延迟编写类或方法中的编程元素的数据类型的规范，直到实际在程序中使用它的时候。换句话说，泛型允许您编写一个可以与任何数据类型一起工作的类或方法。</p><p>您可以通过数据类型的替代参数编写类或方法的规范。当编译器遇到类的构造函数或方法的函数调用时，它会生成代码来处理指定的数据类型。下面这个简单的实例将有助于您理解这个概念：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line"></div><div class="line">namespace GenericApplication</div><div class="line">&#123;</div><div class="line">    public class MyGenericArray&lt;T&gt;</div><div class="line">    &#123;</div><div class="line">        private T[] array;</div><div class="line">        public MyGenericArray(int size)</div><div class="line">        &#123;</div><div class="line">            array = new T[size + 1];</div><div class="line">        &#125;</div><div class="line">        public T getItem(int index)</div><div class="line">        &#123;</div><div class="line">            return array[index];</div><div class="line">        &#125;</div><div class="line">        public void setItem(int index, T value)</div><div class="line">        &#123;</div><div class="line">            array[index] = value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">           </div><div class="line">    class Tester</div><div class="line">    &#123;</div><div class="line">        static void Main(string[] args)</div><div class="line">        &#123;</div><div class="line">            // 声明一个整型数组</div><div class="line">            MyGenericArray&lt;int&gt; intArray = new MyGenericArray&lt;int&gt;(5);</div><div class="line">            // 设置值</div><div class="line">            for (int c = 0; c &lt; 5; c++)</div><div class="line">            &#123;</div><div class="line">                intArray.setItem(c, c*5);</div><div class="line">            &#125;</div><div class="line">            // 获取值</div><div class="line">            for (int c = 0; c &lt; 5; c++)</div><div class="line">            &#123;</div><div class="line">                Console.Write(intArray.getItem(c) + &quot; &quot;);</div><div class="line">            &#125;</div><div class="line">            Console.WriteLine();</div><div class="line">            // 声明一个字符数组</div><div class="line">            MyGenericArray&lt;char&gt; charArray = new MyGenericArray&lt;char&gt;(5);</div><div class="line">            // 设置值</div><div class="line">            for (int c = 0; c &lt; 5; c++)</div><div class="line">            &#123;</div><div class="line">                charArray.setItem(c, (char)(c+97));</div><div class="line">            &#125;</div><div class="line">            // 获取值</div><div class="line">            for (int c = 0; c &lt; 5; c++)</div><div class="line">            &#123;</div><div class="line">                Console.Write(charArray.getItem(c) + &quot; &quot;);</div><div class="line">            &#125;</div><div class="line">            Console.WriteLine();</div><div class="line">            Console.ReadKey();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0 5 10 15 20</div><div class="line">a b c d e</div></pre></td></tr></table></figure><h4 id="泛型（Generic）的特性"><a href="#泛型（Generic）的特性" class="headerlink" title="泛型（Generic）的特性"></a>泛型（Generic）的特性</h4><p>使用泛型是一种增强程序功能的技术，具体表现在以下几个方面：</p><ul><li>它有助于您最大限度地重用代码、保护类型的安全以及提高性能。</li><li>您可以创建泛型集合类。.NET 框架类库在 <em>System.Collections.Generic</em> 命名空间中包含了一些新的泛型集合类。您可以使用这些泛型集合类来替代 <em>System.Collections</em> 中的集合类。</li><li>您可以创建自己的泛型接口、泛型类、泛型方法、泛型事件和泛型委托。</li><li>您可以对泛型类进行约束以访问特定数据类型的方法。</li><li>关于泛型数据类型中使用的类型的信息可在运行时通过使用反射获取。</li></ul><h4 id="泛型（Generic）方法"><a href="#泛型（Generic）方法" class="headerlink" title="泛型（Generic）方法"></a>泛型（Generic）方法</h4><p>在上面的实例中，我们已经使用了泛型类，我们可以通过类型参数声明泛型方法。下面的程序说明了这个概念：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line"></div><div class="line">namespace GenericMethodAppl</div><div class="line">&#123;</div><div class="line">    class Program</div><div class="line">    &#123;</div><div class="line">        static void Swap&lt;T&gt;(ref T lhs, ref T rhs)</div><div class="line">        &#123;</div><div class="line">            T temp;</div><div class="line">            temp = lhs;</div><div class="line">            lhs = rhs;</div><div class="line">            rhs = temp;</div><div class="line">        &#125;</div><div class="line">        static void Main(string[] args)</div><div class="line">        &#123;</div><div class="line">            int a, b;</div><div class="line">            char c, d;</div><div class="line">            a = 10;</div><div class="line">            b = 20;</div><div class="line">            c = &apos;I&apos;;</div><div class="line">            d = &apos;V&apos;;</div><div class="line"></div><div class="line">            // 在交换之前显示值</div><div class="line">            Console.WriteLine(&quot;Int values before calling swap:&quot;);</div><div class="line">            Console.WriteLine(&quot;a = &#123;0&#125;, b = &#123;1&#125;&quot;, a, b);</div><div class="line">            Console.WriteLine(&quot;Char values before calling swap:&quot;);</div><div class="line">            Console.WriteLine(&quot;c = &#123;0&#125;, d = &#123;1&#125;&quot;, c, d);</div><div class="line"></div><div class="line">            // 调用 swap</div><div class="line">            Swap&lt;int&gt;(ref a, ref b);</div><div class="line">            Swap&lt;char&gt;(ref c, ref d);</div><div class="line"></div><div class="line">            // 在交换之后显示值</div><div class="line">            Console.WriteLine(&quot;Int values after calling swap:&quot;);</div><div class="line">            Console.WriteLine(&quot;a = &#123;0&#125;, b = &#123;1&#125;&quot;, a, b);</div><div class="line">            Console.WriteLine(&quot;Char values after calling swap:&quot;);</div><div class="line">            Console.WriteLine(&quot;c = &#123;0&#125;, d = &#123;1&#125;&quot;, c, d);</div><div class="line">            Console.ReadKey();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Int values before calling swap:</div><div class="line">a = 10, b = 20</div><div class="line">Char values before calling swap:</div><div class="line">c = I, d = V</div><div class="line">Int values after calling swap:</div><div class="line">a = 20, b = 10</div><div class="line">Char values after calling swap:</div><div class="line">c = V, d = I</div></pre></td></tr></table></figure><h4 id="泛型（Generic）委托"><a href="#泛型（Generic）委托" class="headerlink" title="泛型（Generic）委托"></a>泛型（Generic）委托</h4><p>您可以通过类型参数定义泛型委托。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delegate T NumberChanger&lt;T&gt;(T n);</div></pre></td></tr></table></figure><p>下面的实例演示了委托的使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line"></div><div class="line">delegate T NumberChanger&lt;T&gt;(T n);</div><div class="line">namespace GenericDelegateAppl</div><div class="line">&#123;</div><div class="line">    class TestDelegate</div><div class="line">    &#123;</div><div class="line">        static int num = 10;</div><div class="line">        public static int AddNum(int p)</div><div class="line">        &#123;</div><div class="line">            num += p;</div><div class="line">            return num;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public static int MultNum(int q)</div><div class="line">        &#123;</div><div class="line">            num *= q;</div><div class="line">            return num;</div><div class="line">        &#125;</div><div class="line">        public static int getNum()</div><div class="line">        &#123;</div><div class="line">            return num;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        static void Main(string[] args)</div><div class="line">        &#123;</div><div class="line">            // 创建委托实例</div><div class="line">            NumberChanger&lt;int&gt; nc1 = new NumberChanger&lt;int&gt;(AddNum);</div><div class="line">            NumberChanger&lt;int&gt; nc2 = new NumberChanger&lt;int&gt;(MultNum);</div><div class="line">            // 使用委托对象调用方法</div><div class="line">            nc1(25);</div><div class="line">            Console.WriteLine(&quot;Value of Num: &#123;0&#125;&quot;, getNum());</div><div class="line">            nc2(5);</div><div class="line">            Console.WriteLine(&quot;Value of Num: &#123;0&#125;&quot;, getNum());</div><div class="line">            Console.ReadKey();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Value of Num: 35</div><div class="line">Value of Num: 175</div></pre></td></tr></table></figure><h3 id="匿名方法"><a href="#匿名方法" class="headerlink" title="匿名方法"></a>匿名方法</h3><p>我们已经提到过，委托是用于引用与其具有相同标签的方法。换句话说，您可以使用委托对象调用可由委托引用的方法。</p><p><strong>匿名方法（Anonymous methods）</strong> 提供了一种传递代码块作为委托参数的技术。匿名方法是没有名称只有主体的方法。</p><p>在匿名方法中您不需要指定返回类型，它是从方法主体内的 return 语句推断的。</p><h4 id="编写匿名方法的语法"><a href="#编写匿名方法的语法" class="headerlink" title="编写匿名方法的语法"></a>编写匿名方法的语法</h4><p>匿名方法是通过使用 <strong>delegate</strong> 关键字创建委托实例来声明的。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">delegate void NumberChanger(int n);</div><div class="line">...</div><div class="line">NumberChanger nc = delegate(int x)</div><div class="line">&#123;</div><div class="line">    Console.WriteLine(&quot;Anonymous Method: &#123;0&#125;&quot;, x);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>代码块 <code>Console.WriteLine(&quot;Anonymous Method: {0}&quot;, x);</code> 是匿名方法的主体。</p><p>委托可以通过匿名方法调用，也可以通过命名方法调用，即，通过向委托对象传递方法参数。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc(10);</div></pre></td></tr></table></figure><h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><p>下面的实例演示了匿名方法的概念：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line"></div><div class="line">delegate void NumberChanger(int n);</div><div class="line">namespace DelegateAppl</div><div class="line">&#123;</div><div class="line">    class TestDelegate</div><div class="line">    &#123;</div><div class="line">        static int num = 10;</div><div class="line">        public static void AddNum(int p)</div><div class="line">        &#123;</div><div class="line">            num += p;</div><div class="line">            Console.WriteLine(&quot;Named Method: &#123;0&#125;&quot;, num);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public static void MultNum(int q)</div><div class="line">        &#123;</div><div class="line">            num *= q;</div><div class="line">            Console.WriteLine(&quot;Named Method: &#123;0&#125;&quot;, num);</div><div class="line">        &#125;</div><div class="line">        public static int getNum()</div><div class="line">        &#123;</div><div class="line">            return num;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        static void Main(string[] args)</div><div class="line">        &#123;</div><div class="line">            // 使用匿名方法创建委托实例</div><div class="line">            NumberChanger nc = delegate(int x)</div><div class="line">            &#123;</div><div class="line">               Console.WriteLine(&quot;Anonymous Method: &#123;0&#125;&quot;, x);</div><div class="line">            &#125;;</div><div class="line">            </div><div class="line">            // 使用匿名方法调用委托</div><div class="line">            nc(10);</div><div class="line"></div><div class="line">            // 使用命名方法实例化委托</div><div class="line">            nc =  new NumberChanger(AddNum);</div><div class="line">            </div><div class="line">            // 使用命名方法调用委托</div><div class="line">            nc(5);</div><div class="line"></div><div class="line">            // 使用另一个命名方法实例化委托</div><div class="line">            nc =  new NumberChanger(MultNum);</div><div class="line">            </div><div class="line">            // 使用命名方法调用委托</div><div class="line">            nc(2);</div><div class="line">            Console.ReadKey();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Anonymous Method: 10</div><div class="line">Named Method: 15</div><div class="line">Named Method: 30</div></pre></td></tr></table></figure><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a><a href="http://www.runoob.com/csharp/csharp-multithreading.html" target="_blank" rel="external">多线程</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本语法&quot;&gt;&lt;a href=&quot;#基本语法&quot; class=&quot;headerlink&quot; title=&quot;基本语法&quot;&gt;&lt;/a&gt;基本语法&lt;/h2&gt;&lt;h3 id=&quot;一个例子&quot;&gt;&lt;a href=&quot;#一个例子&quot; class=&quot;headerlink&quot; title=&quot;一个例子:&quot;&gt;&lt;/a&gt;&lt;strong&gt;一个例子:&lt;/strong&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;using System;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;namespace HelloWorldApplication&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    /* 类名为 HelloWorld */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    class HelloWorld&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        /* main函数 */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        static void Main(string[] args)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            /* 我的第一个 C# 程序 */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Console.WriteLine(&amp;quot;Hello World!&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Console.ReadKey();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;对象类型&quot;&gt;&lt;a href=&quot;#对象类型&quot; class=&quot;headerlink&quot; title=&quot;对象类型&quot;&gt;&lt;/a&gt;&lt;strong&gt;对象类型&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;是 C# 通用类型系统（Common Type System - CTS）中所有数据类型的终极基类。Object 是 System.Object 类的别名。所以对象（Object）类型可以被分配任何其他类型（值类型、引用类型、预定义类型或用户自定义类型）的值。但是，在分配值之前，需要先进行类型转换。&lt;/p&gt;&lt;p&gt;当一个值类型转换为对象类型时，则被称为 &lt;strong&gt;装箱&lt;/strong&gt;；另一方面，当一个对象类型转换为值类型时，则被称为 &lt;strong&gt;拆箱&lt;/strong&gt;。&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;object obj;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;obj = 100; // 这是装箱&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;动态类型&quot;&gt;&lt;a href=&quot;#动态类型&quot; class=&quot;headerlink&quot; title=&quot;动态类型&quot;&gt;&lt;/a&gt;&lt;strong&gt;动态类型&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;您可以存储任何类型的值在动态数据类型变量中。这些变量的类型检查是在运行时发生的。&lt;/p&gt;&lt;p&gt;声明动态类型的语法：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;dynamic &amp;lt;variable_name&amp;gt; = value;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;例如：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;dynamic d = 20;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;动态类型与对象类型相似，但是对象类型变量的类型检查是在编译时发生的，而动态类型变量的类型检查是在运行时发生的。&lt;/p&gt;&lt;h3 id=&quot;字符串的特殊定义方式&quot;&gt;&lt;a href=&quot;#字符串的特殊定义方式&quot; class=&quot;headerlink&quot; title=&quot;字符串的特殊定义方式&quot;&gt;&lt;/a&gt;&lt;strong&gt;字符串的特殊定义方式&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;字符串（String）类型允许您给变量分配任何字符串值。字符串（String）类型是 System.String 类的别名。它是从对象（Object）类型派生的。字符串（String）类型的值可以通过两种形式进行分配：引号和 @引号。&lt;/p&gt;&lt;p&gt;例如：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;String str = &amp;quot;runoob.com&amp;quot;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;一个 @引号字符串：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@&amp;quot;runoob.com&amp;quot;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;C# string 字符串的前面可以加 @（称作”逐字字符串”）将转义字符（\）当作普通字符对待，比如：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;string str = @&amp;quot;C:\Windows&amp;quot;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;等价于：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;string str = &amp;quot;C:\\Windows&amp;quot;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;@ 字符串中可以任意换行，换行符及缩进空格都计算在字符串长度之内。&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;string str = @&amp;quot;&amp;lt;script type=&amp;quot;&amp;quot;text/javascript&amp;quot;&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;!--&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&amp;quot;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;显式类型转换方式&quot;&gt;&lt;a href=&quot;#显式类型转换方式&quot; class=&quot;headerlink&quot; title=&quot;显式类型转换方式&quot;&gt;&lt;/a&gt;&lt;strong&gt;显式类型转换方式&lt;/strong&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;namespace TypeConversionApplication&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    class StringConversion&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        static void Main(string[] args)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            int i = 75;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            float f = 53.005f;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            double d = 2345.7652;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            bool b = true;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Console.WriteLine(i.ToString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Console.WriteLine(f.ToString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Console.WriteLine(d.ToString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Console.WriteLine(b.ToString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Console.ReadKey();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;命令行输入&quot;&gt;&lt;a href=&quot;#命令行输入&quot; class=&quot;headerlink&quot; title=&quot;命令行输入&quot;&gt;&lt;/a&gt;&lt;strong&gt;命令行输入&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;System&lt;/code&gt;命名空间中的&lt;code&gt;Console&lt;/code&gt;类提供了一个函数 &lt;code&gt;ReadLine()&lt;/code&gt;，用于接收来自用户的输入，并把它存储到一个变量中。&lt;/p&gt;&lt;p&gt;例如：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;int num;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;num = Convert.ToInt32(Console.ReadLine());&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;函数 &lt;code&gt;Convert.ToInt32()&lt;/code&gt;把用户输入的数据转换为&lt;code&gt;int&lt;/code&gt; 数据类型，因为 &lt;code&gt;Console.ReadLine()&lt;/code&gt;只接受字符串格式的数据。&lt;/p&gt;&lt;h3 id=&quot;特殊运算符&quot;&gt;&lt;a href=&quot;#特殊运算符&quot; class=&quot;headerlink&quot; title=&quot;特殊运算符&quot;&gt;&lt;/a&gt;&lt;strong&gt;特殊运算符&lt;/strong&gt;&lt;/h3&gt;&lt;div class=&quot;table-container&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;运算符&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;&lt;th&gt;实例&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;sizeof()&lt;/td&gt;&lt;td&gt;返回数据类型的大小。&lt;/td&gt;&lt;td&gt;sizeof(int)，将返回 4.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;typeof()&lt;/td&gt;&lt;td&gt;返回 class 的类型。&lt;/td&gt;&lt;td&gt;typeof(StreamReader);&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;amp;&lt;/td&gt;&lt;td&gt;返回变量的地址。&lt;/td&gt;&lt;td&gt;&amp;a; 将得到变量的实际地址。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;*&lt;/td&gt;&lt;td&gt;变量的指针。&lt;/td&gt;&lt;td&gt;*a; 将指向一个变量。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;? :&lt;/td&gt;&lt;td&gt;条件表达式&lt;/td&gt;&lt;td&gt;如果条件为真 ? 则为 X : 否则为 Y&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;is&lt;/td&gt;&lt;td&gt;判断对象是否为某一类型。&lt;/td&gt;&lt;td&gt;If( Ford is Car) // 检查 Ford 是否是 Car 类的一个对象。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;as&lt;/td&gt;&lt;td&gt;强制转换，即使转换失败也不会抛出异常。&lt;/td&gt;&lt;td&gt;Object obj = new StringReader(“Hello”);StringReader r = obj as StringReader;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;h3 id=&quot;特殊访问修饰符&quot;&gt;&lt;a href=&quot;#特殊访问修饰符&quot; class=&quot;headerlink&quot; title=&quot;特殊访问修饰符&quot;&gt;&lt;/a&gt;&lt;strong&gt;特殊访问修饰符&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&quot;Internal-访问修饰符&quot;&gt;&lt;a href=&quot;#Internal-访问修饰符&quot; class=&quot;headerlink&quot; title=&quot;Internal 访问修饰符&quot;&gt;&lt;/a&gt;&lt;em&gt;Internal 访问修饰符&lt;/em&gt;&lt;/h4&gt;&lt;p&gt;Internal 访问说明符允许一个类将其成员变量和成员函数暴露给当前程序中的其他函数和对象。换句话说，带有 internal 访问修饰符的任何成员可以被定义在该成员所定义的应用程序内的任何类或方法访问。&lt;/p&gt;&lt;p&gt;类的默认访问标识符是 &lt;strong&gt;internal&lt;/strong&gt;，成员的默认访问标识符是 &lt;strong&gt;private&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;下面的实例说明了这点：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;using System;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;namespace RectangleApplication&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    class Rectangle&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //成员变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        internal double length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        internal double width;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        double GetArea()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            return length * width;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       public void Display()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Console.WriteLine(&amp;quot;长度： &amp;#123;0&amp;#125;&amp;quot;, length);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Console.WriteLine(&amp;quot;宽度： &amp;#123;0&amp;#125;&amp;quot;, width);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Console.WriteLine(&amp;quot;面积： &amp;#123;0&amp;#125;&amp;quot;, GetArea());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;//end class Rectangle    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    class ExecuteRectangle&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        static void Main(string[] args)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Rectangle r = new Rectangle();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            r.length = 4.5;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            r.width = 3.5;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            r.Display();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Console.ReadLine();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;当上面的代码被编译和执行时，它会产生下列结果：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;长度： 4.5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;宽度： 3.5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;面积： 15.75&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在上面的实例中，请注意成员函数 &lt;em&gt;GetArea()&lt;/em&gt; 声明的时候不带有任何访问修饰符。如果没有指定访问修饰符，则使用类成员的默认访问修饰符，即为 &lt;strong&gt;private&lt;/strong&gt;。&lt;/p&gt;&lt;h4 id=&quot;Protected-Internal-访问修饰符&quot;&gt;&lt;a href=&quot;#Protected-Internal-访问修饰符&quot; class=&quot;headerlink&quot; title=&quot;Protected Internal 访问修饰符&quot;&gt;&lt;/a&gt;&lt;em&gt;Protected Internal 访问修饰符&lt;/em&gt;&lt;/h4&gt;&lt;p&gt;Protected Internal 访问修饰符允许在本类,派生类或者包含该类的程序集中访问。这也被用于实现继承。&lt;/p&gt;&lt;h3 id=&quot;按引用传递参数&quot;&gt;&lt;a href=&quot;#按引用传递参数&quot; class=&quot;headerlink&quot; title=&quot;按引用传递参数&quot;&gt;&lt;/a&gt;&lt;strong&gt;按引用传递参数&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;引用参数是一个对变量的内存位置的引用。当按引用传递参数时，与值参数不同的是，它不会为这些参数创建一个新的存储位置。引用参数表示与提供给方法的实际参数具有相同的内存位置。&lt;/p&gt;&lt;p&gt;在 &lt;code&gt;C#&lt;/code&gt; 中，使用 &lt;code&gt;ref&lt;/code&gt; 关键字声明引用参数。下面的实例演示了这点：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;using System;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;namespace CalculatorApplication&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   class NumberManipulator&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      public void swap(ref int x, ref int y)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         int temp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         temp = x; /* 保存 x 的值 */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         x = y;    /* 把 y 赋值给 x */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         y = temp; /* 把 temp 赋值给 y */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      static void Main(string[] args)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         NumberManipulator n = new NumberManipulator();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         /* 局部变量定义 */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         int a = 100;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         int b = 200;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         Console.WriteLine(&amp;quot;在交换之前，a 的值： &amp;#123;0&amp;#125;&amp;quot;, a);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         Console.WriteLine(&amp;quot;在交换之前，b 的值： &amp;#123;0&amp;#125;&amp;quot;, b);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         /* 调用函数来交换值 */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         n.swap(ref a, ref b);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         Console.WriteLine(&amp;quot;在交换之后，a 的值： &amp;#123;0&amp;#125;&amp;quot;, a);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         Console.WriteLine(&amp;quot;在交换之后，b 的值： &amp;#123;0&amp;#125;&amp;quot;, b);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         Console.ReadLine();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;当上面的代码被编译和执行时，它会产生下列结果：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;在交换之前，a 的值：100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;在交换之前，b 的值：200&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;在交换之后，a 的值：200&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;在交换之后，b 的值：100&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;结果表明，&lt;em&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/em&gt; 函数内的值改变了，且这个改变可以在 &lt;em&gt;&lt;code&gt;Main&lt;/code&gt;&lt;/em&gt; 函数中反映出来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="c#" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>GRADIENTS, BATCH NORMALIZATION AND LAYER NORMALIZATION</title>
    <link href="http://yoursite.com/2017/05/09/GRADIENTS-BATCH-NORMALIZATION-AND-LAYER-NORMALIZATION/"/>
    <id>http://yoursite.com/2017/05/09/GRADIENTS-BATCH-NORMALIZATION-AND-LAYER-NORMALIZATION/</id>
    <published>2017-05-09T02:17:48.000Z</published>
    <updated>2017-05-09T02:24:45.862Z</updated>
    
    <content type="html"><![CDATA[<p>In this post, we will take a look at common pit falls with optimization and solutions to some of these issues. The main topics that will be covered are:</p><ul><li>Gradients</li><li>Exploding gradients</li><li>Vanishing gradients</li><li>LSTMs (pertaining to vanishing gradients)</li><li>Normalization</li></ul><p>And then we will see how to implement batch and layer normalization and apply them to our cells.</p><h2 id="GRADIENTS"><a href="#GRADIENTS" class="headerlink" title="GRADIENTS"></a>GRADIENTS</h2><p>First, we will take a closer look at gradients and backpropagation during optimization. Our example will be a simple MLP but we will extend to an RNN later on.</p><p>I want to go over what a gradient means. Let’s say we have a very simple MLP with 1 set of weights W_1 which is used to calcualte some y. We devise a very simple loss function J, and our gradient becomes dJ/dW_1 (d = partials). Sure we can take the derivative and apply chain rule and get a number, but what does this value even mean? The gradient can be thought of as several things. One is that the magnitude of the gradient represents the sensitivity or impact this weight has on determining y which determines our loss. This can be seen below:</p><p><img src="https://theneuralperspective.files.wordpress.com/2016/10/screen-shot-2016-10-26-at-6-20-24-pm.png?w=620" alt="Screen Shot 2016-10-26 at 6.20.24 PM.png"></p><p><strong>CS231n</strong></p><p>What the gradients (dfdx, dfdy, dfdz, dfdq, dfdz) tell us is the sensitivity of each variable on our result f. In an MLP, we will produce a result (logits) and compare it with our targets to determine the deviance in what we got and what we should have gotten. From this we can use backpropagation to determine how much adjusting needs to be made for each variable along the way, all the way to the beginning.</p><p>The gradient also holds another key piece of information. It repesents how much we need to change the weights in order to move towards our goal (minimizing the loss, maximizing some objective, etc.). With simple SGD, we get the gradient and we apply an update to the weights (W_i_new = W_i_old – alpha * gradient). If we follow the direction of the gradient, we will be maximizing the goal function. Our loss functions (NLL or cross entropy) are functions we wish to minimize, so we subtract the gradient. We use the learning parameter alpha to control how quickly we change. This is where all of the normalization techniques in this post will come in handy.</p><p>If we have an alpha that is 1 or larger, we will allow the gradient to directly impact our weights. In the beginning of training a neural net, our weight initializations are bound to be far off from the weights we actually need. This creates a large error and so, results in large gradients. If we choose to update our weights with these large gradients, we will be never reach the minimum point for our loss function. We will keep overshooting and bouncing back and forth. So, we use this alpha (small value) to control how much impact the gradient has. Eventually, the gradient will get smaller as well because of less error and we will reach our goal, but with such a small alpha, this can take a while. With techniques, such as batch normalization and layer normalization, we can afford to use large alpha because the gradients will be controlled due to controlled outputs from the neurons.</p><p>Now, even with a simple RNN structure, backpropagation can pose several issues. When we get our result, we need to backpropagate all the way back to the very first cell in order to complete our updates. The main principles to really understand are: if I multiply a number greater than 1 over and over, I will reach infinity (explosion) and vice versa, if I multiply a number less than 1 over and over, I will reach 0 (vanishing).</p><p><img src="https://theneuralperspective.files.wordpress.com/2016/10/screen-shot-2016-10-04-at-5-54-13-am.png?w=620" alt="screen-shot-2016-10-04-at-5-54-13-am"></p><h2 id="EXPLODING-GRADIENTS"><a href="#EXPLODING-GRADIENTS" class="headerlink" title="EXPLODING GRADIENTS"></a>EXPLODING GRADIENTS</h2><p>The first issue is that our gradients can be greater than 1. As we backpropagate the gradient through the network, we can end up with massive gradients. So far, the solution to exploding gradients is a very hacky but cheap solution; just clip the norm of the gradient at some threshold.</p><p><img src="https://qph.ec.quoracdn.net/main-qimg-3e453fb7dd33a6e6e4d82adf6165d39a?convert_to_webp=true" alt="img"></p><h2 id="VANISHING-GRADIENTS"><a href="#VANISHING-GRADIENTS" class="headerlink" title="VANISHING GRADIENTS"></a>VANISHING GRADIENTS</h2><p>We could also experience the other issue where the gradient is less than 1 to start with and as we backpropagate, the effect of the gradient weakens and it will eventually be negligible. A common scenario where this occurs is when we have saturation at the tails of the sigmoidal function (0 or 1). This is problematic because now the derivative will always be near 0. During backpropagation, we will be multiplying this near zero derivative with our error repeatedly.</p><p>Let’s look at the sigmoidal activation function. You can replicate this example for tanh too.</p><p><img src="https://qph.ec.quoracdn.net/main-qimg-45bad3db11225318bd4aa686a823181c?convert_to_webp=true" alt="img"><img src="https://qph.ec.quoracdn.net/main-qimg-4635c1521f87e2d6f5cf4fe8f39ca76d?convert_to_webp=true" alt="img"></p><p>To solve this issue, we can use rectified linear units (ReLU) which don’t suffer from this tail saturation as much. <img src="https://qph.ec.quoracdn.net/main-qimg-bb38bf7ef543aa6a0c24134f61d15ba7?convert_to_webp=true" alt="img"></p><p>The derivative is 1 if x &gt; 0, so now error signal won’t weaken as it backpropagates through the network. But we do have the problem in the negative region (x &lt;0) where the derivative is zero. This can nullify our error signal so it’s best to add a leaky factor (<a href="http://arxiv.org/abs/1502.01852" target="_blank" rel="external">http://arxiv.org/abs/1502.01852</a>) to the ReLU unit, where the negative region will have some small negative slope. This parameter can be fixed or be a randomized parameter and be fixed after training. There’s also maxout (<a href="http://arxiv.org/abs/1302.4389" target="_blank" rel="external">http://arxiv.org/abs/1302.4389</a>) but this will have twice the amount of weights as a regular ReLU unit.</p><h2 id="LSTMS-VANISHING-GRADIENTS"><a href="#LSTMS-VANISHING-GRADIENTS" class="headerlink" title="LSTMS (VANISHING GRADIENTS)"></a>LSTMS (VANISHING GRADIENTS)</h2><p>As for how LSTMs solve the vanishing gradient issue, they don’t have to worry about the error signal weakening as with a regular basic RNN cell. It’s a bit complicated but the basic idea is that they have a forget gate that determines how much previous memory is stored in the network. This architecture allows the error signal to be transferred effectively to the previous time step. This is usually referred to as the constant error carousel (CEC).</p><h2 id="NORMALIZATION"><a href="#NORMALIZATION" class="headerlink" title="NORMALIZATION"></a>NORMALIZATION</h2><p>There are several types of normalization techniques but the idea behind all of them is the same, which is shifting our inputs to a zero mean and unit variance.</p><p>Techniques like batch norm (<a href="https://arxiv.org/abs/1502.03167" target="_blank" rel="external">https://arxiv.org/abs/1502.03167</a>) may help with the gradient issues as a side effect but the main object is to improve overall optimization. When we first initialize our weights, we are bound to have very large deviances from the true weights. These outliers need to be compensated for by the gradients and this further delays convergence during training. Batchnorm helps us here by normalizing the gradients (reducing influence from weight deviances) on a batched implementation and allows us to train faster (can even safely use larger learning rates now).</p><p>With batch norm, the main idea is to normalize at each layer for every minibatch. We initially may normalize our inputs, but as they travel through the layers, the inputs are operated on by weights and neurons and effectively change. As this progresses, the deviances get larger and larger and our backpropagation will need to account for these large deviances. This restricts us to using a small learning rate to prevent gradient explosion/vanishing. With <strong>batch norm</strong>, we will normalize the inputs (<strong>activations</strong> coming from the previous layer) going into each layer using the mean and variance of the activations for the <strong>entire</strong> <strong>minibatch</strong>. The normalization is a bit different during training and inference but it is beyond the scope of this post. (details in paper).</p><p>Batch normalization is very nice but it is based on minibatch size and so it’s a bit difficult to use with recurrent architectures. With <strong>layer normalization</strong>, we instead compute the mean and variance using ALL of the summed inputs to the neurons in a layer for EVERY <strong>single</strong> <strong>training**</strong>case<strong>. This removes the dependency on a minibatch size. Unlike batch normalization, the normalization operation for layer norm is same for training and inference. More details can be found on Hinton’s paper </strong>here**.</p><h6><a href="#" class="headerlink"></a></h6><h2 id="IMPLEMENTING-BATCH-NORMALIZATION"><a href="#IMPLEMENTING-BATCH-NORMALIZATION" class="headerlink" title="IMPLEMENTING BATCH NORMALIZATION"></a>IMPLEMENTING BATCH NORMALIZATION</h2><p>As stated above, the main goal of batch normalization is optimization. By normalizing the inputs to a layer to zero mean and unit variance, we can help our net learn faster by minimizing the effects from large errors (especially during initial training).</p><p>Batch norm is given by the operation below, where \epsilon is a small random noise (for stability). When we apply batch norm on a layer, we are restricting the inputs to follow a normal distribution, which ultimately will restrict the nets ability to learn. In order to fix this, we multiply by a scale parameter (\alpha) and add a shift parameter (\beta). Both of these parameters are trainable.</p><p><img src="https://theneuralperspective.files.wordpress.com/2016/10/screen-shot-2016-11-08-at-8-09-28-pm.png?w=620" alt="Screen Shot 2016-11-08 at 8.09.28 PM.png"></p><p>Note that both alpha and beta are applied element wise, so there will be a scale and shift for each neuron in the subsequent layer. With batchnorm, we compute mean and variance across an entire batch and we have a value for each neuron we are feeding our normalized inputs into.</p><p><img src="https://theneuralperspective.files.wordpress.com/2016/10/screen-shot-2016-11-14-at-9-00-40-pm.png?w=620" alt="Screen Shot 2016-11-14 at 9.00.40 PM.png"></p><p>So for a given layer, the mean during BN will be 1X. Each training data gets this mean subtracted from it and divided by sqrt(var + epsilon) and then shifted and scaled. To find the mean and var, we use all the examples in the training batch.</p><p>In order to accurately evaluate the effectiveness of batchnorm, we will use a simple MLP to classify MNIST digits. We will run a normal MLP and an MLP with batchnorm, both initialized with the same starting weights. Let’s take a look at both the naive and TF implementations.</p><p>First, the naive version:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Naive BN layer</span></div><div class="line">scale1 = tf.Variable(tf.ones([<span class="number">100</span>]))</div><div class="line">shift1 = tf.Variable(tf.zeros([<span class="number">100</span>]))</div><div class="line">W1_BN = tf.Variable(W1_init)</div><div class="line">b1_BN = tf.Variable(tf.zeros([<span class="number">100</span>]))</div><div class="line">z1_BN = tf.matmul(X,W1_BN)+b1_BN</div><div class="line">mean1, var1 = tf.nn.moments(z1_BN, [<span class="number">0</span>])</div><div class="line">BN1 = (z1_BN - mean1) / tf.sqrt(var1 + FLAGS.epsilon)</div><div class="line">BN1 = scale1*BN1 + shift1</div><div class="line">fc1_BN = tf.nn.relu(BN1)</div></pre></td></tr></table></figure><p>TF implementation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># TF BN layer</span></div><div class="line">scale2 = tf.Variable(tf.ones([<span class="number">100</span>]))</div><div class="line">shift2 = tf.Variable(tf.zeros([<span class="number">100</span>]))</div><div class="line">W2_BN = tf.Variable(W2_init)</div><div class="line">b2_BN = tf.Variable(tf.zeros([<span class="number">100</span>]))</div><div class="line">z2_BN = tf.matmul(fc1_BN,W2_BN)+b2_BN</div><div class="line">mean2, var2 = tf.nn.moments(z2_BN, [<span class="number">0</span>])</div><div class="line">BN2 = tf.nn.batch_normalization(z2_BN,mean2,var2,shift2,scale2,FLAGS.epsilon)</div><div class="line">fc2_BN = tf.nn.relu(BN2)</div></pre></td></tr></table></figure><p>We first need to compute the mean and variance of the inputs coming into the layer. Then normalize them and scale/shift and then apply the activation function and pass to the next layer.</p><p>Let’s compare the performance of the normal MLP and the MLP with batchnorm. We will focus of the massive impact on our cost with and without BN. Other interesting features to look at would be gradient norm, neuron inputs, etc.</p><h3 id="CROSS-ENTROPY-LOSS"><a href="#CROSS-ENTROPY-LOSS" class="headerlink" title="CROSS ENTROPY LOSS"></a>CROSS ENTROPY LOSS</h3><h3 id="-1"><a href="#-1" class="headerlink"></a></h3><p><img src="https://theneuralperspective.files.wordpress.com/2016/10/screen-shot-2016-11-10-at-8-58-44-pm.png?w=620" alt="Screen Shot 2016-11-10 at 8.58.44 PM.png"></p><h2 id="NUANCE"><a href="#NUANCE" class="headerlink" title="NUANCE:"></a>NUANCE:</h2><p>Training is all fine and well, but what about testing. When doing BN on our test set, with the implementation from above, we will be using the mean and variance from our test set. Now think about what will happen if our test set is very small or even size 1. This will homogenize all the outputs we get since all inputs will be close to mean 0 and variance 1. The solution to this is to calculate the population mean and variance during testing and then use those values during testing.</p><p>Now there are couple ways we can try to calculate the population, even simple as taking the average of the training batch and using it for testing. This isn’t the true population measure so we will calculate the unbiased mean and variance as they do in the original <strong>paper</strong>. But first, let’s see the accuracy when we feed in test samples of size 1.</p><p><img src="https://theneuralperspective.files.wordpress.com/2016/10/screen-shot-2016-11-10-at-9-40-52-pm.png?w=620" alt="Screen Shot 2016-11-10 at 9.40.52 PM.png"></p><p>Not exactly state of the art anymore. So let’s see how to calculate population mean and variance.<br><img src="https://theneuralperspective.files.wordpress.com/2016/10/screen-shot-2016-11-09-at-7-45-05-pm.png?w=620" alt="Screen Shot 2016-11-09 at 7.45.05 PM.png"></p><p>We will be updating the population mean and variance after each training batch and we will use them for inference. In fact we can simple replace the inference batchnorm process with a simple linear transformation:</p><p><img src="https://theneuralperspective.files.wordpress.com/2016/10/screen-shot-2016-11-09-at-7-50-58-pm.png?w=620" alt="Screen Shot 2016-11-09 at 7.50.58 PM.png"></p><p>Below is the tensorflow implementation for batchnorm with the exponential moving average to use during inference. Take a look <strong>here</strong> for more implementation specifications for batch_norm but the required parameters for us is the actual input that we wish to normalize and wether or not we are training. Note: TF batchnorm with inference is in <strong>batch_norm2.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> tensorflow.contrib.layers <span class="keyword">import</span> (</div><div class="line">    batch_norm</div><div class="line">)</div><div class="line">...</div><div class="line"><span class="keyword">with</span> tf.variable_scope(<span class="string">'BN_1'</span>) <span class="keyword">as</span> BN_1:</div><div class="line">    self.BN1 = tf.cond(self.is_training_ph,</div><div class="line">        <span class="keyword">lambda</span>: batch_norm(</div><div class="line">            self.z1_BN, is_training=<span class="keyword">True</span>, center=<span class="keyword">True</span>,</div><div class="line">            scale=<span class="keyword">True</span>, activation_fn=tf.nn.relu,</div><div class="line">            updates_collections=<span class="keyword">None</span>, scope=BN_1),</div><div class="line">        <span class="keyword">lambda</span>: batch_norm(</div><div class="line">            self.z1_BN, is_training=<span class="keyword">False</span>, center=<span class="keyword">True</span>,</div><div class="line">            scale=<span class="keyword">True</span>, activation_fn=tf.nn.relu,</div><div class="line">            updates_collections=<span class="keyword">None</span>, scope=BN_1, reuse=<span class="keyword">True</span>))</div></pre></td></tr></table></figure><p>Here are the inference results with the population mean and variance:</p><p><img src="https://theneuralperspective.files.wordpress.com/2016/10/screen-shot-2016-11-14-at-6-45-55-pm.png?w=620" alt="Screen Shot 2016-11-14 at 6.45.55 PM.png"></p><h6 id="-2"><a href="#-2" class="headerlink"></a></h6><h2 id="IMPLEMENTING-LAYER-NORMALIZATION"><a href="#IMPLEMENTING-LAYER-NORMALIZATION" class="headerlink" title="IMPLEMENTING LAYER NORMALIZATION"></a>IMPLEMENTING LAYER NORMALIZATION</h2><p>Layernorm is very similar to batch normalization in many ways as you can see with the equation below but it usually reserved for use with recurrent architectures.</p><p><img src="https://theneuralperspective.files.wordpress.com/2016/10/screen-shot-2017-01-19-at-6-23-36-pm.png?w=352&amp;h=105" alt="Screen Shot 2017-01-19 at 6.23.36 PM.png"></p><p>Layernorm acts on a per layer per sample basis, where the mean and variance are calculated for a specific layer for a specific training point. To understand the different between layernorm and batchnorm let’s see how these mean and variances are computed for both with figures.</p><p>With layernorm it’s a bit different from BN. We compute the mean and var for every single sample for each layer independently and then do the LN operations using those computed values.</p><p><img src="https://theneuralperspective.files.wordpress.com/2016/10/screen-shot-2016-11-14-at-8-59-44-pm.png?w=620" alt="Screen Shot 2016-11-14 at 8.59.44 PM.png"></p><p>First, we will make a function that will apply batch norm given an input tensor.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># LN funcition</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ln</span><span class="params">(inputs, epsilon = <span class="number">1e-5</span>, scope = None)</span>:</span></div><div class="line"> </div><div class="line">    <span class="string">""" Computer LN given an input tensor. We get in an input of shape</span></div><div class="line">    [N X D] and with LN we compute the mean and var for each individual</div><div class="line">    training point across all it's hidden dimensions rather than across</div><div class="line">    the training batch as we do in BN. This gives us a mean and var of shape</div><div class="line">    [N X 1].</div><div class="line">    """</div><div class="line">    mean, var = tf.nn.moments(inputs, [<span class="number">1</span>], keep_dims=<span class="keyword">True</span>)</div><div class="line">    <span class="keyword">with</span> tf.variable_scope(scope + <span class="string">'LN'</span>):</div><div class="line">        scale = tf.get_variable(<span class="string">'alpha'</span>,</div><div class="line">                                shape=[inputs.get_shape()[<span class="number">1</span>]],</div><div class="line">                                initializer=tf.constant_initializer(<span class="number">1</span>))</div><div class="line">        shift = tf.get_variable(<span class="string">'beta'</span>,</div><div class="line">                                shape=[inputs.get_shape()[<span class="number">1</span>]],</div><div class="line">                                initializer=tf.constant_initializer(<span class="number">0</span>))</div><div class="line">    LN = scale * (inputs - mean) / tf.sqrt(var + epsilon) + shift</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> LN</div></pre></td></tr></table></figure><p>Now we can apply our LN function to a GRUCell class. Note that I am using tensorflow’s <strong>GRUCell class</strong> but we can apply LN to all of their other RNN variants as well (LSTM, peephole LSTM, etc.)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GRUCell</span><span class="params">(RNNCell)</span>:</span></div><div class="line">  <span class="string">"""Gated Recurrent Unit cell (cf. http://arxiv.org/abs/1406.1078)."""</span></div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, num_units, input_size=None, activation=tanh)</span>:</span></div><div class="line">    <span class="keyword">if</span> input_size <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">      logging.warn(<span class="string">"%s: The input_size parameter is deprecated."</span>, self)</div><div class="line">    self._num_units = num_units</div><div class="line">    self._activation = activation</div><div class="line"> </div><div class="line"><span class="meta">  @property</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">state_size</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> self._num_units</div><div class="line"> </div><div class="line"><span class="meta">  @property</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">output_size</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> self._num_units</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, inputs, state, scope=None)</span>:</span></div><div class="line">    <span class="string">"""Gated recurrent unit (GRU) with nunits cells."""</span></div><div class="line">    <span class="keyword">with</span> vs.variable_scope(scope <span class="keyword">or</span> type(self).__name__):  <span class="comment"># "GRUCell"</span></div><div class="line">      <span class="keyword">with</span> vs.variable_scope(<span class="string">"Gates"</span>):  <span class="comment"># Reset gate and update gate.</span></div><div class="line">        <span class="comment"># We start with bias of 1.0 to not reset and not update.</span></div><div class="line">        r, u = array_ops.split(<span class="number">1</span>, <span class="number">2</span>, _linear([inputs, state],</div><div class="line">                                             <span class="number">2</span> * self._num_units, <span class="keyword">True</span>, <span class="number">1.0</span>))</div><div class="line"> </div><div class="line">        <span class="comment"># Apply Layer Normalization to the two gates</span></div><div class="line">        r = ln(r, scope = <span class="string">'r/'</span>)</div><div class="line">        u = ln(r, scope = <span class="string">'u/'</span>)</div><div class="line"> </div><div class="line">        r, u = sigmoid(r), sigmoid(u)</div><div class="line">      <span class="keyword">with</span> vs.variable_scope(<span class="string">"Candidate"</span>):</div><div class="line">        c = self._activation(_linear([inputs, r * state],</div><div class="line">                                     self._num_units, <span class="keyword">True</span>))</div><div class="line">      new_h = u * state + (<span class="number">1</span> - u) * c</div><div class="line">    <span class="keyword">return</span> new_h, new_h</div></pre></td></tr></table></figure><h2 id="SHAPES"><a href="#SHAPES" class="headerlink" title="SHAPES:"></a>SHAPES:</h2><p>I received quite a few PMs about some confusing aspects of BN and LN, mostly centered around what is actually the input. Let’s look at BN first. The input to a hidden layer will be [NXH]. Applying BN involves calculating the mean value for each H across all N samples. So we will have a mean of shape [1XH]. This “batch” mean will be used for BN, basically subtracting this batch mean from each sample.</p><p>Now for LN, let’s imagine a simple RNN situation. Batch major inputs are of shape [N, M, H], where N is the batch size, M is the max number of time steps and H is the number of hidden units. Before feeing to an RNN, we can reshape to time-major which becomes [M, N, H]. Now we feed in one time step at a time into the RNN, so the shape of each time-step’s input is [N,H]. Applying LN involves calculating the mean for sample across dimension [1], which means looking at all hidden states for each sample (for this particular time step). This gives us a mean of size [NX1]. We use this “layer” mean for each sample.</p><hr><p>Source page is <a href="https://theneuralperspective.com/2016/10/27/gradient-topics/" target="_blank" rel="external">HERE</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this post, we will take a look at common pit falls with optimization and solutions to some of these issues. The main topics that will 
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>What Is Local Response Normalization In Convolutional Neural Networks</title>
    <link href="http://yoursite.com/2017/05/04/What-Is-Local-Response-Normalization-In-Convolutional-Neural-Networks/"/>
    <id>http://yoursite.com/2017/05/04/What-Is-Local-Response-Normalization-In-Convolutional-Neural-Networks/</id>
    <published>2017-05-04T03:32:10.000Z</published>
    <updated>2017-05-04T03:37:33.386Z</updated>
    
    <content type="html"><![CDATA[<p>Convolutional Neural Networks (CNNs) have been doing wonders in the field of image recognition in recent times. CNN is a type of deep neural network in which the layers are connected using spatially organized patterns. This is in line with how the human visual cortex processes image data. Researchers have been working on coming up with better architectures over the last few years. In this blog post, we will discuss a particular type of layer that has been used consistently across many famous architectures. This layer is called Local Response Normalization layer and it plays an important role. What does it do? What’s the advantage of having this in our network?</p><h2 id="Why-do-we-need-normalization-layers-in-the-first-place"><a href="#Why-do-we-need-normalization-layers-in-the-first-place" class="headerlink" title="Why do we need normalization layers in the first place?"></a><strong>Why do we need normalization layers in the first place?</strong></h2><p>A typical CNN consists of the following layers: convolution, pooling, rectified linear unit (ReLU), fully connected, and loss. If the previous sentence didn’t make sense, you may want to go through a quick CNN tutorial before proceeding further. Anyway, the reason we may want to have normalization layers in our CNN is that we want to have some kind of inhibition scheme.</p><p>In neurobiology, there is a concept called “lateral inhibition”. Now what does that mean? This refers to the capacity of an excited neuron to subdue its neighbors. We basically want a significant peak so that we have a form of local maxima. This tends to create a contrast in that area, hence increasing the sensory perception. Increasing the sensory perception is a good thing! We want to have the same thing in our CNNs.</p><h2 id="What-exactly-is-Local-Response-Normalization"><a href="#What-exactly-is-Local-Response-Normalization" class="headerlink" title="What exactly is Local Response Normalization?"></a><strong>What exactly is Local Response Normalization?</strong></h2><p>Local Response Normalization (LRN) layer implements the lateral inhibition we were talking about in the previous section. This layer is useful when we are dealing with ReLU neurons. Why is that? Because ReLU neurons have unbounded activations and we need LRN to normalize that. We want to detect high frequency features with a large response. If we normalize around the local neighborhood of the excited neuron, it becomes even more sensitive as compared to its neighbors.</p><p>At the same time, it will dampen the responses that are uniformly large in any given local neighborhood. If all the values are large, then normalizing those values will diminish all of them. So basically we want to encourage some kind of inhibition and boost the neurons with relatively larger activations. This has been discussed nicely in Section 3.3 of the <a href="http://www.cs.toronto.edu/~fritz/absps/imagenet.pdf" target="_blank" rel="external">original paper</a> by Krizhevsky et al.</p><h2 id="How-is-it-done-in-practice"><a href="#How-is-it-done-in-practice" class="headerlink" title="How is it done in practice?"></a><strong>How is it done in practice?</strong></h2><p>There are two types of normalizations available in Caffe. You can either normalize within the same channel or you can normalize across channels. Both these methods tend to amplify the excited neuron while dampening the surrounding neurons. When you are normalizing within the same channel, it’s just like considering a 2D neighborhood of dimension N x N, where N is the size of the normalization window. You normalize this window using the values in this neighborhood. If you are normalizing across channels, you will consider a neighborhood along the third dimension but at a single location. You need to consider an area of shape N x 1 x 1. Here 1 x 1 refers to a single value in a 2D matrix and N refers to the normalization size.</p><hr><p>Source page is <a href="https://prateekvjoshi.com/2016/04/05/what-is-local-response-normalization-in-convolutional-neural-networks/" target="_blank" rel="external">here</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Convolutional Neural Networks (CNNs) have been doing wonders in the field of image recognition in recent times. CNN is a type of deep neu
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>The first course of the Docker</title>
    <link href="http://yoursite.com/2017/05/01/The-first-course-of-the-Docker/"/>
    <id>http://yoursite.com/2017/05/01/The-first-course-of-the-Docker/</id>
    <published>2017-05-01T08:33:38.000Z</published>
    <updated>2017-05-01T11:19:36.300Z</updated>
    
    <content type="html"><![CDATA[<p>Docker command:</p><ul><li><p>docker images <strong>查看本机所有镜像</strong></p></li><li><p>docker pull NAME <strong>从仓库下载镜像</strong></p></li><li><p>docker run [-d -p 8080:80] or [-P] NAME <strong>启动镜像（-d 后台运行 -p 端口映射 -P 随机映射）</strong></p></li><li><p>docker exec [-i -t] NAME bash <strong>进入容器并执行bash</strong></p></li><li><p>docker ps <strong>查看后台容器</strong></p></li><li><p>docker stop ID <strong>停止docker容器</strong></p></li><li><p>docker restart ID <strong>重启容器</strong></p><p>​</p></li></ul><p>Docker netowrk type: bridge</p><p>Docker port map: host(eth0:80) &lt;—&gt; dicker0(bridge) &lt;—&gt; docker container(eth0:80)</p><p>Build Docker</p><ul><li>Dockerfile</li><li>docker build [-t] <strong>建立Docker，指定TAG</strong></li></ul><p>A Dcokerfile example (based tomcat):</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> tomcat </div><div class="line"></div><div class="line"><span class="keyword">MAINTAINER</span> ewan ewanlee@yeah.net</div><div class="line"></div><div class="line"><span class="keyword">COPY</span> jpress-web-newest.war /usr/local/tomcat/webapps</div></pre></td></tr></table></figure><h2 id="搭建第一个Web-app"><a href="#搭建第一个Web-app" class="headerlink" title="搭建第一个Web app"></a>搭建第一个Web app</h2><p>为了介绍方便，所以使用了开源的java实现的wordpress，也就是<a href="https://github.com/JpressProjects/jpress" target="_blank" rel="external">Jpress</a></p><p>[1]下载相应的<a href="https://github.com/JpressProjects/jpress/blob/master/wars/jpress-web-newest.war" target="_blank" rel="external">war包</a>，并存到工作目录下</p><p>[2]下载一个tomcat的Docker镜像<code>docker pull tomcat</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Using default tag: latest</div><div class="line">latest: Pulling from library/tomcat</div><div class="line">cd0a524342ef: Pull complete </div><div class="line">e39c3ffe4133: Pull complete </div><div class="line">aac3320edf40: Pull complete </div><div class="line">4d9e109682f7: Pull complete </div><div class="line">0a59efcf9553: Pull complete </div><div class="line">43a404e523e0: Pull complete </div><div class="line">806f07b1dce8: Pull complete </div><div class="line">0cad96dccb4c: Pull complete </div><div class="line">04073e2a9145: Pull complete </div><div class="line">d9e4bf4be89c: Pull complete </div><div class="line">739005fdecc9: Pull complete </div><div class="line">8bd03d99f1b2: Pull complete </div><div class="line">d586afbd7622: Pull complete </div><div class="line">Digest: sha256:88483873b279aaea5ced002c98dde04555584b66de29797a4476d5e94874e6de</div><div class="line">Status: Downloaded newer image for tomcat:latest</div></pre></td></tr></table></figure><p>[3]写一个<code>Dockerfile</code>，也就是之前的example</p><p>[4]建立镜像<code>docker build -t jpress:latest .</code></p><p>结果如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Sending build context to Docker daemon  <span class="number">20.8</span> MB</div><div class="line">Step <span class="number">1</span> : FROM tomcat</div><div class="line"> ---&gt; d71978506e58</div><div class="line">Step <span class="number">2</span> : MAINTAINER ewan ewanlee<span class="meta">@yeah</span>.net</div><div class="line"> ---&gt; Running <span class="keyword">in</span> dfa1902d1ea4</div><div class="line"> ---&gt; <span class="number">956612</span>ba6987</div><div class="line">Removing intermediate container dfa1902d1ea4</div><div class="line">Step <span class="number">3</span> : COPY jpress-web-newest.war /usr/local/tomcat/webapps</div><div class="line"> ---&gt; dd6eecd741e7</div><div class="line">Removing intermediate container <span class="number">1</span>fe7f943071b</div><div class="line">Successfully built dd6eecd741e7</div></pre></td></tr></table></figure><p>[5]下载一个mysql的docker镜像<code>docker pull mysql</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Using default tag: latest</div><div class="line">latest: Pulling from library/mysql</div><div class="line">cd0a524342ef: Already exists </div><div class="line">d9c95f06c17e: Pull complete </div><div class="line">46b2d578f59a: Pull complete </div><div class="line">10fbc2bcc6e9: Pull complete </div><div class="line">91b1a29c3956: Pull complete </div><div class="line">5bf9316bd602: Pull complete </div><div class="line">69bd23f08b55: Pull complete </div><div class="line">4fb778132e94: Pull complete </div><div class="line">6913628d7744: Pull complete </div><div class="line">a477f36dc2e0: Pull complete </div><div class="line">c954124ae935: Pull complete </div><div class="line">Digest: sha256:e44b9a3ae88db013a3e8571a89998678ba44676ed4ae9f54714fd31e108f8b58</div><div class="line">Status: Downloaded newer image for mysql:latest</div></pre></td></tr></table></figure><p>[6]运行mysql并创建一个数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=000000 -e MYSQL_DATABASE=jpress mysql</div></pre></td></tr></table></figure><p>[7]运行自己建立的<code>jpress</code>镜像<code>docker run -d -p 8888:8080 jpress</code></p><p>下面进行浏览器页面的配置，在浏览器输入<code>localhost:8888</code>将出现以下界面：</p><p><img src="http://o7ie0tcjk.bkt.clouddn.com/docker-jpress/index_page.png" alt="index"></p><p>在地址栏后加入后缀<code>jpress-web-newest</code></p><p><img src="http://o7ie0tcjk.bkt.clouddn.com/docker-jpress/jpress_install.png" alt="install"></p><p>填写配置信息，注意服务器地址是<code>docker0</code>网卡的ip</p><p><img src="http://o7ie0tcjk.bkt.clouddn.com/docker-jpress/config.png" alt="config"></p><p>结果</p><p><img src="http://o7ie0tcjk.bkt.clouddn.com/docker-jpress/home_page.png" alt="home"></p><p>安装过程中出现了一个bug，就是在进行配置后我退出了，再次进去重新配置出错，最后发现原因是表前缀需要改一下，因为之前配置成功了，数据库中已经有了一个相同的表前缀​:P</p><p>是不是很方便，完全不用手动安装任何东西~</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol><li><a href="http://www.imooc.com/learn/824" target="_blank" rel="external">http://www.imooc.com/learn/824</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker command:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;docker images &lt;strong&gt;查看本机所有镜像&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;docker pull NAME &lt;strong&gt;从仓库下载镜像&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;l
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>HMM implemented by hmmlearn</title>
    <link href="http://yoursite.com/2017/05/01/HMM-implemented-by-hmmlearn/"/>
    <id>http://yoursite.com/2017/05/01/HMM-implemented-by-hmmlearn/</id>
    <published>2017-05-01T05:33:52.000Z</published>
    <updated>2017-05-01T05:47:05.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sampling-from-HMM"><a href="#Sampling-from-HMM" class="headerlink" title="Sampling from HMM"></a>Sampling from HMM</h1><p>This script shows how to sample points from a Hidden Markov Model (HMM): we use a 4-components with specified mean and covariance.</p><p>The plot show the sequence of observations generated with the transitions between them. We can see that, as specified by our transition matrix, there are no transition between component 1 and 3.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">print(__doc__)</div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="keyword">from</span> hmmlearn <span class="keyword">import</span> hmm</div></pre></td></tr></table></figure><p>Prepare parameters for a 4-components HMM Initial population probability</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">startprob = np.array([<span class="number">0.6</span>, <span class="number">0.3</span>, <span class="number">0.1</span>, <span class="number">0.0</span>])</div><div class="line"><span class="comment"># The transition matrix, note that there are no transitions possible</span></div><div class="line"><span class="comment"># between component 1 and 3</span></div><div class="line">transmat = np.array([[<span class="number">0.7</span>, <span class="number">0.2</span>, <span class="number">0.0</span>, <span class="number">0.1</span>],</div><div class="line">                     [<span class="number">0.3</span>, <span class="number">0.5</span>, <span class="number">0.2</span>, <span class="number">0.0</span>],</div><div class="line">                     [<span class="number">0.0</span>, <span class="number">0.3</span>, <span class="number">0.5</span>, <span class="number">0.2</span>],</div><div class="line">                     [<span class="number">0.2</span>, <span class="number">0.0</span>, <span class="number">0.2</span>, <span class="number">0.6</span>]])</div><div class="line"><span class="comment"># The means of each component</span></div><div class="line">means = np.array([[<span class="number">0.0</span>,  <span class="number">0.0</span>],</div><div class="line">                  [<span class="number">0.0</span>, <span class="number">11.0</span>],</div><div class="line">                  [<span class="number">9.0</span>, <span class="number">10.0</span>],</div><div class="line">                  [<span class="number">11.0</span>, <span class="number">-1.0</span>]])</div><div class="line"><span class="comment"># The covariance of each component</span></div><div class="line">covars = <span class="number">.5</span> * np.tile(np.identity(<span class="number">2</span>), (<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>))</div><div class="line"></div><div class="line"><span class="comment"># Build an HMM instance and set parameters</span></div><div class="line">model = hmm.GaussianHMM(n_components=<span class="number">4</span>, covariance_type=<span class="string">"full"</span>)</div><div class="line"></div><div class="line"><span class="comment"># Instead of fitting it from the data, we directly set the estimated</span></div><div class="line"><span class="comment"># parameters, the means and covariance of the components</span></div><div class="line">model.startprob_ = startprob</div><div class="line">model.transmat_ = transmat</div><div class="line">model.means_ = means</div><div class="line">model.covars_ = covars</div><div class="line"></div><div class="line"><span class="comment"># Generate samples</span></div><div class="line">X, Z = model.sample(<span class="number">500</span>)</div><div class="line"></div><div class="line"><span class="comment"># Plot the sampled data</span></div><div class="line">plt.plot(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], <span class="string">".-"</span>, label=<span class="string">"observations"</span>, ms=<span class="number">6</span>,</div><div class="line">         mfc=<span class="string">"orange"</span>, alpha=<span class="number">0.7</span>)</div><div class="line"></div><div class="line"><span class="comment"># Indicate the component numbers</span></div><div class="line"><span class="keyword">for</span> i, m <span class="keyword">in</span> enumerate(means):</div><div class="line">    plt.text(m[<span class="number">0</span>], m[<span class="number">1</span>], <span class="string">'Component %i'</span> % (i + <span class="number">1</span>),</div><div class="line">             size=<span class="number">17</span>, horizontalalignment=<span class="string">'center'</span>,</div><div class="line">             bbox=dict(alpha=<span class="number">.7</span>, facecolor=<span class="string">'w'</span>))</div><div class="line">plt.legend(loc=<span class="string">'best'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><p><img src="http://hmmlearn.readthedocs.io/en/latest/_images/sphx_glr_plot_hmm_sampling_001.png" alt="sampling_result"></p><p><strong>Total running time of the script:</strong> ( 0 minutes 0.676 seconds)</p><h1 id="Gaussian-HMM-of-stock-data"><a href="#Gaussian-HMM-of-stock-data" class="headerlink" title="Gaussian HMM of stock data"></a>Gaussian HMM of stock data</h1><p>This script shows how to use Gaussian HMM on stock price data from Yahoo! finance. For more information on how to visualize stock prices with matplotlib, please refer to <code>date_demo1.py</code> of matplotlib.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div><div class="line"></div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> cm, pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> matplotlib.dates <span class="keyword">import</span> YearLocator, MonthLocator</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">from</span> matplotlib.finance <span class="keyword">import</span> quotes_historical_yahoo_ochl</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    <span class="comment"># For Matplotlib prior to 1.5.</span></div><div class="line">    <span class="keyword">from</span> matplotlib.finance <span class="keyword">import</span> (</div><div class="line">        quotes_historical_yahoo <span class="keyword">as</span> quotes_historical_yahoo_ochl</div><div class="line">    )</div><div class="line"></div><div class="line"><span class="keyword">from</span> hmmlearn.hmm <span class="keyword">import</span> GaussianHMM</div><div class="line"></div><div class="line"></div><div class="line">print(__doc__)</div></pre></td></tr></table></figure><p>Get quotes from Yahoo! finance</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">quotes = quotes_historical_yahoo_ochl(</div><div class="line">    <span class="string">"INTC"</span>, datetime.date(<span class="number">1995</span>, <span class="number">1</span>, <span class="number">1</span>), datetime.date(<span class="number">2012</span>, <span class="number">1</span>, <span class="number">6</span>))</div><div class="line"></div><div class="line"><span class="comment"># Unpack quotes</span></div><div class="line">dates = np.array([q[<span class="number">0</span>] <span class="keyword">for</span> q <span class="keyword">in</span> quotes], dtype=int)</div><div class="line">close_v = np.array([q[<span class="number">2</span>] <span class="keyword">for</span> q <span class="keyword">in</span> quotes])</div><div class="line">volume = np.array([q[<span class="number">5</span>] <span class="keyword">for</span> q <span class="keyword">in</span> quotes])[<span class="number">1</span>:]</div><div class="line"></div><div class="line"><span class="comment"># Take diff of close value. Note that this makes</span></div><div class="line"><span class="comment"># ``len(diff) = len(close_t) - 1``, therefore, other quantities also</span></div><div class="line"><span class="comment"># need to be shifted by 1.</span></div><div class="line">diff = np.diff(close_v)</div><div class="line">dates = dates[<span class="number">1</span>:]</div><div class="line">close_v = close_v[<span class="number">1</span>:]</div><div class="line"></div><div class="line"><span class="comment"># Pack diff and volume for training.</span></div><div class="line">X = np.column_stack([diff, volume])</div></pre></td></tr></table></figure><p>Run Gaussian HMM</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">"fitting to HMM and decoding ..."</span>, end=<span class="string">""</span>)</div><div class="line"></div><div class="line"><span class="comment"># Make an HMM instance and execute fit</span></div><div class="line">model = GaussianHMM(n_components=<span class="number">4</span>, covariance_type=<span class="string">"diag"</span>, n_iter=<span class="number">1000</span>).fit(X)</div><div class="line"></div><div class="line"><span class="comment"># Predict the optimal sequence of internal hidden state</span></div><div class="line">hidden_states = model.predict(X)</div><div class="line"></div><div class="line">print(<span class="string">"done"</span>)</div></pre></td></tr></table></figure><p>Out:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fitting to HMM and decoding ...done</div></pre></td></tr></table></figure><p>Print trained parameters and plot</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">"Transition matrix"</span>)</div><div class="line">print(model.transmat_)</div><div class="line">print()</div><div class="line"></div><div class="line">print(<span class="string">"Means and vars of each hidden state"</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(model.n_components):</div><div class="line">    print(<span class="string">"&#123;0&#125;th hidden state"</span>.format(i))</div><div class="line">    print(<span class="string">"mean = "</span>, model.means_[i])</div><div class="line">    print(<span class="string">"var = "</span>, np.diag(model.covars_[i]))</div><div class="line">    print()</div><div class="line"></div><div class="line">fig, axs = plt.subplots(model.n_components, sharex=<span class="keyword">True</span>, sharey=<span class="keyword">True</span>)</div><div class="line">colours = cm.rainbow(np.linspace(<span class="number">0</span>, <span class="number">1</span>, model.n_components))</div><div class="line"><span class="keyword">for</span> i, (ax, colour) <span class="keyword">in</span> enumerate(zip(axs, colours)):</div><div class="line">    <span class="comment"># Use fancy indexing to plot data in each state.</span></div><div class="line">    mask = hidden_states == i</div><div class="line">    ax.plot_date(dates[mask], close_v[mask], <span class="string">".-"</span>, c=colour)</div><div class="line">    ax.set_title(<span class="string">"&#123;0&#125;th hidden state"</span>.format(i))</div><div class="line"></div><div class="line">    <span class="comment"># Format the ticks.</span></div><div class="line">    ax.xaxis.set_major_locator(YearLocator())</div><div class="line">    ax.xaxis.set_minor_locator(MonthLocator())</div><div class="line"></div><div class="line">    ax.grid(<span class="keyword">True</span>)</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure><p><img src="http://hmmlearn.readthedocs.io/en/latest/_images/sphx_glr_plot_hmm_stock_analysis_001.png" alt="hmm_yahoo_analysis"></p><p>Out:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Transition matrix</div><div class="line">[[  <span class="number">9.79220773e-01</span>   <span class="number">2.57382344e-15</span>   <span class="number">2.72061945e-03</span>   <span class="number">1.80586073e-02</span>]</div><div class="line"> [  <span class="number">1.12216188e-12</span>   <span class="number">7.73561269e-01</span>   <span class="number">1.85019044e-01</span>   <span class="number">4.14196869e-02</span>]</div><div class="line"> [  <span class="number">3.25313504e-03</span>   <span class="number">1.12692615e-01</span>   <span class="number">8.83368021e-01</span>   <span class="number">6.86228435e-04</span>]</div><div class="line"> [  <span class="number">1.18741799e-01</span>   <span class="number">4.20310643e-01</span>   <span class="number">1.18670597e-18</span>   <span class="number">4.60947557e-01</span>]]</div><div class="line"></div><div class="line">Means <span class="keyword">and</span> vars of each hidden state</div><div class="line"><span class="number">0</span>th hidden state</div><div class="line">mean =  [  <span class="number">2.33331888e-02</span>   <span class="number">4.97389989e+07</span>]</div><div class="line">var =  [  <span class="number">6.97748259e-01</span>   <span class="number">2.49466578e+14</span>]</div><div class="line"></div><div class="line"><span class="number">1</span>th hidden state</div><div class="line">mean =  [  <span class="number">2.12401671e-02</span>   <span class="number">8.81882861e+07</span>]</div><div class="line">var =  [  <span class="number">1.18665023e-01</span>   <span class="number">5.64418451e+14</span>]</div><div class="line"></div><div class="line"><span class="number">2</span>th hidden state</div><div class="line">mean =  [  <span class="number">7.69658065e-03</span>   <span class="number">5.43135922e+07</span>]</div><div class="line">var =  [  <span class="number">5.02315562e-02</span>   <span class="number">1.54569357e+14</span>]</div><div class="line"></div><div class="line"><span class="number">3</span>th hidden state</div><div class="line">mean =  [ <span class="number">-3.53210673e-01</span>   <span class="number">1.53080943e+08</span>]</div><div class="line">var =  [  <span class="number">2.55544137e+00</span>   <span class="number">5.88210257e+15</span>]</div></pre></td></tr></table></figure><p><strong>Total running time of the script:</strong> ( 0 minutes 2.903 seconds)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Sampling-from-HMM&quot;&gt;&lt;a href=&quot;#Sampling-from-HMM&quot; class=&quot;headerlink&quot; title=&quot;Sampling from HMM&quot;&gt;&lt;/a&gt;Sampling from HMM&lt;/h1&gt;&lt;p&gt;This scrip
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="HMM" scheme="http://yoursite.com/tags/HMM/"/>
    
  </entry>
  
  <entry>
    <title>The Basic of Hidden Markov Model</title>
    <link href="http://yoursite.com/2017/04/30/The-basic-of-Hidden-Markov-Model/"/>
    <id>http://yoursite.com/2017/04/30/The-basic-of-Hidden-Markov-Model/</id>
    <published>2017-04-30T15:04:54.000Z</published>
    <updated>2017-04-30T15:46:21.384Z</updated>
    
    <content type="html"><![CDATA[<div class="row"><embed src="http://o7ie0tcjk.bkt.clouddn.com/hmm-paper/tutorial%20on%20hmm%20and%20applications.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;http://o7ie0tcjk.bkt.clouddn.com/hmm-paper/tutorial%20on%20hmm%20and%20applications.pdf&quot; width=&quot;100%&quot; height=&quot;5
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="HMM" scheme="http://yoursite.com/tags/HMM/"/>
    
  </entry>
  
  <entry>
    <title>WGAN implemented by PyTorch</title>
    <link href="http://yoursite.com/2017/04/29/WGAN-implemented-by-PyTorch/"/>
    <id>http://yoursite.com/2017/04/29/WGAN-implemented-by-PyTorch/</id>
    <published>2017-04-29T15:21:33.000Z</published>
    <updated>2017-04-29T15:42:29.191Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="comment"># Wasserstein Generative Adversarial Networks (WGAN) example in PyTorch.</span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> torch</div><div class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</div><div class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</div><div class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</div><div class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</div><div class="line"></div><div class="line"><span class="comment"># Data params</span></div><div class="line">data_mean = <span class="number">4</span></div><div class="line">data_stddev = <span class="number">1.25</span></div><div class="line"></div><div class="line"><span class="comment"># Model params</span></div><div class="line">g_input_size = <span class="number">1</span>     <span class="comment"># Random noise dimension coming into generator, per output vector</span></div><div class="line">g_hidden_size = <span class="number">50</span>   <span class="comment"># Generator complexity</span></div><div class="line">g_output_size = <span class="number">1</span>    <span class="comment"># size of generated output vector</span></div><div class="line">d_input_size = <span class="number">100</span>   <span class="comment"># Minibatch size - cardinality of distributions</span></div><div class="line">d_hidden_size = <span class="number">50</span>   <span class="comment"># Discriminator complexity</span></div><div class="line">d_output_size = <span class="number">1</span>    <span class="comment"># Single dimension for 'real' vs. 'fake'</span></div><div class="line">minibatch_size = d_input_size</div><div class="line"></div><div class="line">d_learning_rate = <span class="number">2e-4</span>  <span class="comment"># 2e-4</span></div><div class="line">g_learning_rate = <span class="number">2e-4</span></div><div class="line"><span class="comment"># optim_betas = (0.9, 0.999)</span></div><div class="line">num_epochs = <span class="number">30000</span></div><div class="line">print_interval = <span class="number">200</span></div><div class="line"><span class="comment"># d_steps = 1  # 'k' steps in the original GAN paper. Can put the discriminator on higher training freq than generator</span></div><div class="line">d_steps = <span class="number">5</span></div><div class="line">g_steps = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment"># ### Uncomment only one of these</span></div><div class="line"><span class="comment">#(name, preprocess, d_input_func) = ("Raw data", lambda data: data, lambda x: x)</span></div><div class="line">(name, preprocess, d_input_func) = (<span class="string">"Data and variances"</span>, <span class="keyword">lambda</span> data: decorate_with_diffs(data, <span class="number">2.0</span>), <span class="keyword">lambda</span> x: x * <span class="number">2</span>)</div><div class="line"></div><div class="line">print(<span class="string">"Using data [%s]"</span> % (name))</div><div class="line"></div><div class="line"><span class="comment"># ##### DATA: Target data and generator input data</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distribution_sampler</span><span class="params">(mu, sigma)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> n: torch.Tensor(np.random.normal(mu, sigma, (<span class="number">1</span>, n)))  <span class="comment"># Gaussian</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_generator_input_sampler</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> m, n: torch.rand(m, n)  <span class="comment"># Uniform-dist data into generator, _NOT_ Gaussian</span></div><div class="line"></div><div class="line"><span class="comment"># ##### MODELS: Generator model and discriminator model</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generator</span><span class="params">(nn.Module)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_size, hidden_size, output_size)</span>:</span></div><div class="line">        super(Generator, self).__init__()</div><div class="line">        self.map1 = nn.Linear(input_size, hidden_size)</div><div class="line">        self.map2 = nn.Linear(hidden_size, hidden_size)</div><div class="line">        self.map3 = nn.Linear(hidden_size, output_size)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></div><div class="line">        x = F.elu(self.map1(x))</div><div class="line">        x = F.sigmoid(self.map2(x))</div><div class="line">        <span class="keyword">return</span> self.map3(x)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Discriminator</span><span class="params">(nn.Module)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_size, hidden_size, output_size)</span>:</span></div><div class="line">        super(Discriminator, self).__init__()</div><div class="line">        self.map1 = nn.Linear(input_size, hidden_size)</div><div class="line">        self.map2 = nn.Linear(hidden_size, hidden_size)</div><div class="line">        self.map3 = nn.Linear(hidden_size, output_size)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></div><div class="line">        x = F.elu(self.map1(x))</div><div class="line">        x = F.elu(self.map2(x))</div><div class="line">        <span class="comment"># return F.sigmoid(self.map3(x))</span></div><div class="line">        <span class="keyword">return</span> self.map3(x)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract</span><span class="params">(v)</span>:</span></div><div class="line">    <span class="keyword">return</span> v.data.storage().tolist()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">stats</span><span class="params">(d)</span>:</span></div><div class="line">    <span class="keyword">return</span> [np.mean(d), np.std(d)]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorate_with_diffs</span><span class="params">(data, exponent)</span>:</span></div><div class="line">    mean = torch.mean(data.data, <span class="number">1</span>)</div><div class="line">    mean_broadcast = torch.mul(torch.ones(data.size()), mean.tolist()[<span class="number">0</span>][<span class="number">0</span>])</div><div class="line">    diffs = torch.pow(data - Variable(mean_broadcast), exponent)</div><div class="line">    <span class="keyword">return</span> torch.cat([data, diffs], <span class="number">1</span>)</div><div class="line"></div><div class="line">d_sampler = get_distribution_sampler(data_mean, data_stddev)</div><div class="line">gi_sampler = get_generator_input_sampler()</div><div class="line">G = Generator(input_size=g_input_size, hidden_size=g_hidden_size, output_size=g_output_size)</div><div class="line">D = Discriminator(input_size=d_input_func(d_input_size), hidden_size=d_hidden_size, output_size=d_output_size)</div><div class="line"><span class="comment"># criterion = nn.BCELoss()  # Binary cross entropy: http://pytorch.org/docs/nn.html#bceloss</span></div><div class="line"><span class="comment"># d_optimizer = optim.Adam(D.parameters(), lr=d_learning_rate, betas=optim_betas)</span></div><div class="line"><span class="comment"># g_optimizer = optim.Adam(G.parameters(), lr=g_learning_rate, betas=optim_betas)</span></div><div class="line">d_optimizer = optim.RMSprop(D.parameters(), lr=d_learning_rate)</div><div class="line">g_optimizer = optim.Adam(G.parameters(), lr=g_learning_rate)</div><div class="line"></div><div class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epochs):</div><div class="line">    <span class="keyword">for</span> d_index <span class="keyword">in</span> range(d_steps):</div><div class="line">        <span class="comment"># 1. Train D on real+fake</span></div><div class="line">        D.zero_grad()</div><div class="line"></div><div class="line">        <span class="comment">#  1A: Train D on real</span></div><div class="line">        d_real_data = Variable(d_sampler(d_input_size))</div><div class="line">        d_real_decision = D(preprocess(d_real_data))</div><div class="line">        <span class="comment"># d_real_error = criterion(d_real_decision, Variable(torch.ones(1)))  # ones = true</span></div><div class="line">        d_real_error = -torch.mean(d_real_decision)</div><div class="line">        d_real_error.backward() <span class="comment"># compute/store gradients, but don't change params</span></div><div class="line"></div><div class="line">        <span class="comment">#  1B: Train D on fake</span></div><div class="line">        d_gen_input = Variable(gi_sampler(minibatch_size, g_input_size))</div><div class="line">        d_fake_data = G(d_gen_input).detach()  <span class="comment"># detach to avoid training G on these labels</span></div><div class="line">        d_fake_decision = D(preprocess(d_fake_data.t()))</div><div class="line">        <span class="comment"># d_fake_error = criterion(d_fake_decision, Variable(torch.zeros(1)))  # zeros = fake</span></div><div class="line">        d_fake_error = torch.mean(d_fake_decision)</div><div class="line">        d_fake_error.backward()</div><div class="line">        d_optimizer.step()     <span class="comment"># Only optimizes D's parameters; changes based on stored gradients from backward()</span></div><div class="line">        <span class="comment"># Weight Clipping</span></div><div class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> D.parameters():</div><div class="line">        	p.data.clamp_(<span class="number">-0.01</span>, <span class="number">0.01</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> g_index <span class="keyword">in</span> range(g_steps):</div><div class="line">        <span class="comment"># 2. Train G on D's response (but DO NOT train D on these labels)</span></div><div class="line">        G.zero_grad()</div><div class="line"></div><div class="line">        gen_input = Variable(gi_sampler(minibatch_size, g_input_size))</div><div class="line">        g_fake_data = G(gen_input)</div><div class="line">        dg_fake_decision = D(preprocess(g_fake_data.t()))</div><div class="line">        <span class="comment"># g_error = criterion(dg_fake_decision, Variable(torch.ones(1)))  # we want to fool, so pretend it's all genuine</span></div><div class="line">        g_error = -torch.mean(dg_fake_decision)</div><div class="line"></div><div class="line">        g_error.backward()</div><div class="line">        g_optimizer.step()  <span class="comment"># Only optimizes G's parameters</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> epoch % print_interval == <span class="number">0</span>:</div><div class="line">        print(<span class="string">"%s: D: %s/%s G: %s (Real: %s, Fake: %s) "</span> % (epoch,</div><div class="line">                                                            extract(d_real_error)[<span class="number">0</span>],</div><div class="line">                                                            extract(d_fake_error)[<span class="number">0</span>],</div><div class="line">                                                            extract(g_error)[<span class="number">0</span>],</div><div class="line">                                                            stats(extract(d_real_data)),</div><div class="line">                                                            stats(extract(d_fake_data))))</div></pre></td></tr></table></figure><p>与<a href="https://ewanlee.github.io/2017/04/28/Generative-Adversarial-Networks-GANs-in-50-lines-of-code-PyTorch/" target="_blank" rel="external">之前的文章</a>所做的修改仅仅只有以下几点（理论支持参考我之前转发的一篇<a href="https://ewanlee.github.io/2017/04/29/The-awesome-Wasserstein-GAN/" target="_blank" rel="external">博文</a>）:</p><ul><li><p>判别模型最后一层直接用线型激活函数，而不是用Sigmoid函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Discriminator</span><span class="params">(nn.Module)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_size, hidden_size, output_size)</span>:</span></div><div class="line">        super(Discriminator, self).__init__()</div><div class="line">        self.map1 = nn.Linear(input_size, hidden_size)</div><div class="line">        self.map2 = nn.Linear(hidden_size, hidden_size)</div><div class="line">        self.map3 = nn.Linear(hidden_size, output_size)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></div><div class="line">        x = F.elu(self.map1(x))</div><div class="line">        x = F.elu(self.map2(x))</div><div class="line">        <span class="comment"># return F.sigmoid(self.map3(x))</span></div><div class="line">        <span class="keyword">return</span> self.map3(x)</div></pre></td></tr></table></figure></li><li><p>生成模型与判别模型的loss函数进行修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成模型</span></div><div class="line"><span class="comment"># d_real_error = criterion(d_real_decision, Variable(torch.ones(1)))  # ones = true</span></div><div class="line">d_real_error = -torch.mean(d_real_decision)</div><div class="line"><span class="comment"># d_fake_error = criterion(d_fake_decision, Variable(torch.zeros(1)))  # zeros = fake</span></div><div class="line">d_fake_error = torch.mean(d_fake_decision)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 判别模型</span></div><div class="line"><span class="comment"># g_error = criterion(dg_fake_decision, Variable(torch.ones(1)))  # we want to fool, so pretend it's all genuine</span></div><div class="line">g_error = -torch.mean(dg_fake_decision)</div></pre></td></tr></table></figure></li><li><p>每次更新判别器的参数之后把它们的绝对值截断到不超过一个固定常数c (这里取的是0.01)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Weight Clipping</span></div><div class="line"><span class="keyword">for</span> p <span class="keyword">in</span> D.parameters():</div><div class="line">    p.data.clamp_(<span class="number">-0.01</span>, <span class="number">0.01</span>)</div></pre></td></tr></table></figure></li><li><p>不要用基于动量的优化算法（包括momentum和Adam），推荐RMSProp，SGD也行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># d_optimizer = optim.Adam(D.parameters(), lr=d_learning_rate, betas=optim_betas)</span></div><div class="line"><span class="comment"># g_optimizer = optim.Adam(G.parameters(), lr=g_learning_rate, betas=optim_betas)</span></div><div class="line">d_optimizer = optim.RMSprop(D.parameters(), lr=d_learning_rate)</div><div class="line">g_optimizer = optim.Adam(G.parameters(), lr=g_learning_rate)</div></pre></td></tr></table></figure><p>​</p></li></ul><p>实验结果如下：</p><a id="more"></a><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line">ewan<span class="meta">@ubuntu</span>:~<span class="regexp">/Documents/g</span>an/pytorch-generative-adversarial-networks$ python wgan_pytorch.py </div><div class="line">Using data [Data and variances]</div><div class="line"><span class="number">0</span>: D: <span class="number">-0.00291868206114</span>/<span class="number">-0.0098686888814</span> G: <span class="number">0.0101090818644</span> (Real: [<span class="number">3.9948547959327696</span>, <span class="number">1.1746644935894675</span>], Fake: [<span class="number">-0.49681734740734101</span>, <span class="number">0.012067284766516822</span>]) </div><div class="line"><span class="number">200</span>: D: <span class="number">-0.607654631138</span>/<span class="number">0.150195807219</span> G: <span class="number">-0.148662015796</span> (Real: [<span class="number">3.8201908415555952</span>, <span class="number">1.2529761319208725</span>], Fake: [<span class="number">1.3578049659729003</span>, <span class="number">0.068574913818859801</span>]) </div><div class="line"><span class="number">400</span>: D: <span class="number">-0.463035583496</span>/<span class="number">0.187745466828</span> G: <span class="number">-0.199109002948</span> (Real: [<span class="number">3.9679448902606964</span>, <span class="number">1.0966020511088672</span>], Fake: [<span class="number">2.7924281167984009</span>, <span class="number">0.10128610818888226</span>]) </div><div class="line"><span class="number">600</span>: D: <span class="number">-0.195529654622</span>/<span class="number">-0.0762325078249</span> G: <span class="number">0.0709114596248</span> (Real: [<span class="number">4.0289887523651124</span>, <span class="number">1.130490874393266</span>], Fake: [<span class="number">3.2025665378570558</span>, <span class="number">0.11113662831727719</span>]) </div><div class="line"><span class="number">800</span>: D: <span class="number">-0.267909675837</span>/<span class="number">-0.0125531600788</span> G: <span class="number">0.0149036226794</span> (Real: [<span class="number">3.8386318933963777</span>, <span class="number">1.1596351907184081</span>], Fake: [<span class="number">2.9168305301666262</span>, <span class="number">0.18930262941797507</span>]) </div><div class="line"><span class="number">1000</span>: D: <span class="number">-0.305421292782</span>/<span class="number">0.0375043526292</span> G: <span class="number">-0.0430304855108</span> (Real: [<span class="number">4.036220012307167</span>, <span class="number">1.2074152140825467</span>], Fake: [<span class="number">2.980299861431122</span>, <span class="number">0.34328656032877736</span>]) </div><div class="line"><span class="number">1200</span>: D: <span class="number">-0.52364641428</span>/<span class="number">0.34957420826</span> G: <span class="number">-0.336933553219</span> (Real: [<span class="number">4.2644650164060298</span>, <span class="number">1.3088487291781874</span>], Fake: [<span class="number">3.5564545428752901</span>, <span class="number">0.93418534418781807</span>]) </div><div class="line"><span class="number">1400</span>: D: <span class="number">0.0167735591531</span>/<span class="number">-0.0165516249835</span> G: <span class="number">0.0153960846364</span> (Real: [<span class="number">4.005841153860092</span>, <span class="number">1.2205788960289556</span>], Fake: [<span class="number">3.6258796131610871</span>, <span class="number">1.3573166859479273</span>]) </div><div class="line"><span class="number">1600</span>: D: <span class="number">0.00350501108915</span>/<span class="number">-0.0680181980133</span> G: <span class="number">0.0898797661066</span> (Real: [<span class="number">4.0096039956808092</span>, <span class="number">1.3040836884406217</span>], Fake: [<span class="number">4.2868031549453738</span>, <span class="number">1.1195239069375269</span>]) </div><div class="line"><span class="number">1800</span>: D: <span class="number">-0.017161777243</span>/<span class="number">-0.0345846936107</span> G: <span class="number">0.00348377227783</span> (Real: [<span class="number">3.8140131759643556</span>, <span class="number">1.2696980193364791</span>], Fake: [<span class="number">3.6976867783069611</span>, <span class="number">1.3915195404268279</span>]) </div><div class="line"><span class="number">2000</span>: D: <span class="number">0.0342473760247</span>/<span class="number">-0.0408688522875</span> G: <span class="number">0.042895399034</span> (Real: [<span class="number">3.8277990472316743</span>, <span class="number">1.2935257967493754</span>], Fake: [<span class="number">4.0553032100200657</span>, <span class="number">1.0920039067237071</span>]) </div><div class="line"><span class="number">2200</span>: D: <span class="number">-0.0247789677233</span>/<span class="number">-0.0973515734076</span> G: <span class="number">0.0561916455626</span> (Real: [<span class="number">4.0955437314510341</span>, <span class="number">1.3877739508665123</span>], Fake: [<span class="number">4.2196925377845762</span>, <span class="number">1.1830430815754616</span>]) </div><div class="line"><span class="number">2400</span>: D: <span class="number">0.0279140714556</span>/<span class="number">-0.0485894307494</span> G: <span class="number">0.051317743957</span> (Real: [<span class="number">4.1299532175064089</span>, <span class="number">1.2504224526907901</span>], Fake: [<span class="number">3.6290897476673125</span>, <span class="number">1.4143234578612853</span>]) </div><div class="line"><span class="number">2600</span>: D: <span class="number">-0.0277859847993</span>/<span class="number">0.0174758173525</span> G: <span class="number">-0.0226532723755</span> (Real: [<span class="number">4.1205433750152585</span>, <span class="number">1.1041964193630893</span>], Fake: [<span class="number">4.1067905998229977</span>, <span class="number">1.1112897398730086</span>]) </div><div class="line"><span class="number">2800</span>: D: <span class="number">0.0298485141248</span>/<span class="number">-0.0404594913125</span> G: <span class="number">0.0436173528433</span> (Real: [<span class="number">3.8474615824222567</span>, <span class="number">1.376119005659207</span>], Fake: [<span class="number">4.1015409564971925</span>, <span class="number">1.1240560154112995</span>]) </div><div class="line"><span class="number">3000</span>: D: <span class="number">-0.00891616754234</span>/<span class="number">-0.0320432707667</span> G: <span class="number">-0.00200085714459</span> (Real: [<span class="number">4.2869654643535613</span>, <span class="number">1.2452766642692439</span>], Fake: [<span class="number">4.0315418589115142</span>, <span class="number">1.1215360762164166</span>]) </div><div class="line"><span class="number">3200</span>: D: <span class="number">0.125043600798</span>/<span class="number">-0.141845062375</span> G: <span class="number">0.180229827762</span> (Real: [<span class="number">4.1041129958629607</span>, <span class="number">1.2669502216408666</span>], Fake: [<span class="number">3.9350157177448271</span>, <span class="number">1.2041076720740758</span>]) </div><div class="line"><span class="number">3400</span>: D: <span class="number">0.00801010616124</span>/<span class="number">-0.0085571501404</span> G: <span class="number">0.00837498996407</span> (Real: [<span class="number">4.1750692510604859</span>, <span class="number">1.1555020360853467</span>], Fake: [<span class="number">3.7647246885299683</span>, <span class="number">1.3171958013324914</span>]) </div><div class="line"><span class="number">3600</span>: D: <span class="number">-0.0108975172043</span>/<span class="number">0.00422720238566</span> G: <span class="number">0.0679717883468</span> (Real: [<span class="number">4.2474800306558613</span>, <span class="number">1.1525478772018374</span>], Fake: [<span class="number">3.9568253087997438</span>, <span class="number">1.2016376545965635</span>]) </div><div class="line"><span class="number">3800</span>: D: <span class="number">0.174184441566</span>/<span class="number">-0.0896890684962</span> G: <span class="number">0.132265836</span> (Real: [<span class="number">3.6444931725133212</span>, <span class="number">1.4372372290167961</span>], Fake: [<span class="number">4.1011261808872224</span>, <span class="number">1.2724649929743026</span>]) </div><div class="line"><span class="number">4000</span>: D: <span class="number">0.0152352238074</span>/<span class="number">-0.0211527496576</span> G: <span class="number">0.0241769701242</span> (Real: [<span class="number">4.298748409748077</span>, <span class="number">1.2334686924805018</span>], Fake: [<span class="number">3.8711180412769317</span>, <span class="number">1.2375391560481097</span>]) </div><div class="line"><span class="number">4200</span>: D: <span class="number">0.00989393051714</span>/<span class="number">-0.00974932964891</span> G: <span class="number">0.00978021323681</span> (Real: [<span class="number">3.8817882406711579</span>, <span class="number">1.2274675510251392</span>], Fake: [<span class="number">4.4020989084243771</span>, <span class="number">1.1135816847780859</span>]) </div><div class="line"><span class="number">4400</span>: D: <span class="number">0.110887765884</span>/<span class="number">-0.195888444781</span> G: <span class="number">0.185447320342</span> (Real: [<span class="number">4.0501037514209743</span>, <span class="number">1.3391687317184524</span>], Fake: [<span class="number">3.9222843647003174</span>, <span class="number">1.0870922014501809</span>]) </div><div class="line"><span class="number">4600</span>: D: <span class="number">0.0116609586403</span>/<span class="number">0.0201185699552</span> G: <span class="number">-0.0251631941646</span> (Real: [<span class="number">4.097090389728546</span>, <span class="number">1.190104784646782</span>], Fake: [<span class="number">4.0819661796092985</span>, <span class="number">1.3105115963188185</span>]) </div><div class="line"><span class="number">4800</span>: D: <span class="number">0.00524073652923</span>/<span class="number">-0.00464708916843</span> G: <span class="number">0.0057549579069</span> (Real: [<span class="number">3.8242294645309447</span>, <span class="number">1.2650652243397946</span>], Fake: [<span class="number">4.1804288566112522</span>, <span class="number">1.2938617118884317</span>]) </div><div class="line"><span class="number">5000</span>: D: <span class="number">-0.142288714647</span>/<span class="number">0.0809833407402</span> G: <span class="number">-0.128578931093</span> (Real: [<span class="number">3.7870366251468659</span>, <span class="number">1.1074026548781364</span>], Fake: [<span class="number">3.9050006806850432</span>, <span class="number">1.298625653396472</span>]) </div><div class="line"><span class="number">5200</span>: D: <span class="number">0.00282126059756</span>/<span class="number">-0.000789406709373</span> G: <span class="number">0.00220172246918</span> (Real: [<span class="number">3.8225140625238421</span>, <span class="number">1.2743034472730719</span>], Fake: [<span class="number">4.1409763026237485</span>, <span class="number">1.1529764181372026</span>]) </div><div class="line"><span class="number">5400</span>: D: <span class="number">0.0688827335835</span>/<span class="number">-0.143126890063</span> G: <span class="number">0.177940413356</span> (Real: [<span class="number">3.9872682169079781</span>, <span class="number">1.3030584347635661</span>], Fake: [<span class="number">4.1435868382453922</span>, <span class="number">1.1051301998899086</span>]) </div><div class="line"><span class="number">5600</span>: D: <span class="number">-0.0711650624871</span>/<span class="number">0.0871955379844</span> G: <span class="number">-0.134067937732</span> (Real: [<span class="number">3.9407234787940979</span>, <span class="number">1.1742557675838305</span>], Fake: [<span class="number">4.2017855679988863</span>, <span class="number">1.2602829191705458</span>]) </div><div class="line"><span class="number">5800</span>: D: <span class="number">0.000587910413742</span>/<span class="number">0.000934307463467</span> G: <span class="number">0.00103192776442</span> (Real: [<span class="number">4.0573597419261933</span>, <span class="number">1.2623953329979454</span>], Fake: [<span class="number">3.8340791404247283</span>, <span class="number">1.339685454959999</span>]) </div><div class="line"><span class="number">6000</span>: D: <span class="number">0.00821333751082</span>/<span class="number">-0.12042221427</span> G: <span class="number">0.0573511943221</span> (Real: [<span class="number">4.1211176145076749</span>, <span class="number">1.2369626300361085</span>], Fake: [<span class="number">3.6600258636474607</span>, <span class="number">1.3520569881721223</span>]) </div><div class="line"><span class="number">6200</span>: D: <span class="number">0.00682129478082</span>/<span class="number">0.001195830293</span> G: <span class="number">0.00338123179972</span> (Real: [<span class="number">4.0544225633144375</span>, <span class="number">1.2749644040623289</span>], Fake: [<span class="number">4.1039247584342959</span>, <span class="number">1.2693975476155579</span>]) </div><div class="line"><span class="number">6400</span>: D: <span class="number">-0.00134055688977</span>/<span class="number">0.00293467193842</span> G: <span class="number">-0.00249383598566</span> (Real: [<span class="number">4.0987548109889032</span>, <span class="number">1.4076174670922545</span>], Fake: [<span class="number">3.8387181401252746</span>, <span class="number">1.0786043697026602</span>]) </div><div class="line"><span class="number">6600</span>: D: <span class="number">-0.0879130512476</span>/<span class="number">0.00771049968898</span> G: <span class="number">0.0105132861063</span> (Real: [<span class="number">4.0482780200242994</span>, <span class="number">1.3183274437573238</span>], Fake: [<span class="number">4.1890638065338131</span>, <span class="number">1.0659647273618436</span>]) </div><div class="line"><span class="number">6800</span>: D: <span class="number">-0.0613053664565</span>/<span class="number">0.00630968250334</span> G: <span class="number">0.00345144513994</span> (Real: [<span class="number">3.9884191691875457</span>, <span class="number">1.2496578805847449</span>], Fake: [<span class="number">4.0083020174503323</span>, <span class="number">1.1951200826269044</span>]) </div><div class="line"><span class="number">7000</span>: D: <span class="number">-0.00451065413654</span>/<span class="number">0.0126703362912</span> G: <span class="number">-0.0153036154807</span> (Real: [<span class="number">4.1685840785503387</span>, <span class="number">1.0996732796623405</span>], Fake: [<span class="number">3.8199899888038633</span>, <span class="number">1.3533216043161698</span>]) </div><div class="line"><span class="number">7200</span>: D: <span class="number">-0.00164794549346</span>/<span class="number">-0.026672417298</span> G: <span class="number">0.00926311034709</span> (Real: [<span class="number">3.9697488701343535</span>, <span class="number">1.1614389493998623</span>], Fake: [<span class="number">4.0069102811813355</span>, <span class="number">1.332521020789126</span>]) </div><div class="line"><span class="number">7400</span>: D: <span class="number">0.0479753166437</span>/<span class="number">-0.00875021051615</span> G: <span class="number">0.0273390654474</span> (Real: [<span class="number">3.9136831092834474</span>, <span class="number">1.3941734665017038</span>], Fake: [<span class="number">3.9792356503009798</span>, <span class="number">1.2934269648663987</span>]) </div><div class="line"><span class="number">7600</span>: D: <span class="number">0.0299390181899</span>/<span class="number">-0.0244860406965</span> G: <span class="number">0.0235633179545</span> (Real: [<span class="number">3.9529241484403612</span>, <span class="number">1.3003400363613378</span>], Fake: [<span class="number">4.1008431494235991</span>, <span class="number">1.1966721541073959</span>]) </div><div class="line"><span class="number">7800</span>: D: <span class="number">-0.106096304953</span>/<span class="number">-0.00319136725739</span> G: <span class="number">0.0128062078729</span> (Real: [<span class="number">3.8472019118070602</span>, <span class="number">1.3776392180901436</span>], Fake: [<span class="number">3.9847766911983489</span>, <span class="number">1.1441746730859625</span>]) </div><div class="line"><span class="number">8000</span>: D: <span class="number">-0.0541454330087</span>/<span class="number">0.0360651388764</span> G: <span class="number">-0.0368629023433</span> (Real: [<span class="number">4.001156520843506</span>, <span class="number">1.2686070678293795</span>], Fake: [<span class="number">3.7170648825168611</span>, <span class="number">1.2630303399418346</span>]) </div><div class="line"><span class="number">8200</span>: D: <span class="number">0.0385981723666</span>/<span class="number">-0.0308057032526</span> G: <span class="number">0.0258536860347</span> (Real: [<span class="number">4.0773776215314861</span>, <span class="number">1.1340129155680212</span>], Fake: [<span class="number">4.025383379459381</span>, <span class="number">1.327217397616157</span>]) </div><div class="line"><span class="number">8400</span>: D: <span class="number">0.0323679596186</span>/<span class="number">-0.0363558754325</span> G: <span class="number">0.0379030331969</span> (Real: [<span class="number">4.068932784795761</span>, <span class="number">1.1369141540559231</span>], Fake: [<span class="number">3.9889052593708039</span>, <span class="number">1.292853623065962</span>]) </div><div class="line"><span class="number">8600</span>: D: <span class="number">-0.00726405344903</span>/<span class="number">-0.0198955982924</span> G: <span class="number">-0.0463897511363</span> (Real: [<span class="number">4.1387977415323256</span>, <span class="number">1.2983278993502099</span>], Fake: [<span class="number">3.9634271264076233</span>, <span class="number">1.2541944672524785</span>]) </div><div class="line"><span class="number">8800</span>: D: <span class="number">0.0214307252318</span>/<span class="number">-0.0323143824935</span> G: <span class="number">0.0147992642596</span> (Real: [<span class="number">3.8878944924473764</span>, <span class="number">1.2858782523769321</span>], Fake: [<span class="number">3.9738967609405518</span>, <span class="number">1.2617951400969825</span>]) </div><div class="line"><span class="number">9000</span>: D: <span class="number">0.0408670082688</span>/<span class="number">-0.0408971831203</span> G: <span class="number">0.0338222235441</span> (Real: [<span class="number">3.8935359448194502</span>, <span class="number">1.2102182389881371</span>], Fake: [<span class="number">4.1026345968246458</span>, <span class="number">1.1619291320679421</span>]) </div><div class="line"><span class="number">9200</span>: D: <span class="number">0.0334619283676</span>/<span class="number">-0.0487795248628</span> G: <span class="number">0.043896459043</span> (Real: [<span class="number">4.0024692767858507</span>, <span class="number">1.3035652548917089</span>], Fake: [<span class="number">4.2494437253475192</span>, <span class="number">1.1284849306040097</span>]) </div><div class="line"><span class="number">9400</span>: D: <span class="number">-0.0662252604961</span>/<span class="number">0.0567465648055</span> G: <span class="number">-0.0975001305342</span> (Real: [<span class="number">3.9983484780788423</span>, <span class="number">1.2727864024938771</span>], Fake: [<span class="number">4.1652837800979619</span>, <span class="number">1.2757452301144367</span>]) </div><div class="line"><span class="number">9600</span>: D: <span class="number">-0.0437398403883</span>/<span class="number">0.0547546446323</span> G: <span class="number">-0.0755473896861</span> (Real: [<span class="number">3.9568819630146028</span>, <span class="number">1.2089398910557572</span>], Fake: [<span class="number">4.0577589499950406</span>, <span class="number">1.254854081501209</span>]) </div><div class="line"><span class="number">9800</span>: D: <span class="number">0.00763822672889</span>/<span class="number">-0.00536214653403</span> G: <span class="number">0.00614025257528</span> (Real: [<span class="number">4.0391950635612011</span>, <span class="number">1.3067671354062065</span>], Fake: [<span class="number">3.8441065263748171</span>, <span class="number">1.3304282270617658</span>]) </div><div class="line"><span class="number">10000</span>: D: <span class="number">0.0420219749212</span>/<span class="number">-0.000623900443316</span> G: <span class="number">0.0955700650811</span> (Real: [<span class="number">4.0145307508111001</span>, <span class="number">1.2332284552616837</span>], Fake: [<span class="number">4.1720886218547824</span>, <span class="number">1.3184165599194013</span>]) </div><div class="line"><span class="number">10200</span>: D: <span class="number">-0.0580518990755</span>/<span class="number">-0.0247586201876</span> G: <span class="number">0.0602744668722</span> (Real: [<span class="number">3.9131186211109164</span>, <span class="number">1.1547087942243295</span>], Fake: [<span class="number">3.8442363095283509</span>, <span class="number">1.3100046689992075</span>]) </div><div class="line"><span class="number">10400</span>: D: <span class="number">0.0350324884057</span>/<span class="number">-0.0446610674262</span> G: <span class="number">0.0443669557571</span> (Real: [<span class="number">3.9732863992452621</span>, <span class="number">1.0900301299537192</span>], Fake: [<span class="number">4.1616083049774169</span>, <span class="number">1.1977412391369193</span>]) </div><div class="line"><span class="number">10600</span>: D: <span class="number">0.0309124011546</span>/<span class="number">-0.0327286012471</span> G: <span class="number">0.0324002951384</span> (Real: [<span class="number">4.1375643616914752</span>, <span class="number">1.3491791182650394</span>], Fake: [<span class="number">4.1360740911960603</span>, <span class="number">1.2026694938475944</span>]) </div><div class="line"><span class="number">10800</span>: D: <span class="number">0.0251356009394</span>/<span class="number">-0.0600365921855</span> G: <span class="number">0.0182816889137</span> (Real: [<span class="number">3.9463955080509185</span>, <span class="number">1.209152327657528</span>], Fake: [<span class="number">4.0492063975334167</span>, <span class="number">1.1931266255697688</span>]) </div><div class="line"><span class="number">11000</span>: D: <span class="number">-0.0226037632674</span>/<span class="number">0.0645630285144</span> G: <span class="number">-0.00730620510876</span> (Real: [<span class="number">4.0881260240077975</span>, <span class="number">1.1610880829221104</span>], Fake: [<span class="number">4.1015665113925932</span>, <span class="number">1.2508656591000114</span>]) </div><div class="line"><span class="number">11200</span>: D: <span class="number">-0.203874662519</span>/<span class="number">0.129180550575</span> G: <span class="number">-0.137796327472</span> (Real: [<span class="number">3.9598375034332274</span>, <span class="number">1.3812077142172803</span>], Fake: [<span class="number">4.0204527139663693</span>, <span class="number">1.2581185304639424</span>]) </div><div class="line"><span class="number">11400</span>: D: <span class="number">-0.0908113643527</span>/<span class="number">0.0762611478567</span> G: <span class="number">-0.0800914615393</span> (Real: [<span class="number">4.0449822235107424</span>, <span class="number">1.3556268019161497</span>], Fake: [<span class="number">3.6170706963539123</span>, <span class="number">1.2538775159913775</span>]) </div><div class="line"><span class="number">11600</span>: D: <span class="number">0.0127945197746</span>/<span class="number">-0.0136474575847</span> G: <span class="number">0.0115108992904</span> (Real: [<span class="number">3.8434849847108126</span>, <span class="number">1.4191038384690144</span>], Fake: [<span class="number">3.6834572017192841</span>, <span class="number">1.3749317238019667</span>]) </div><div class="line"><span class="number">11800</span>: D: <span class="number">-0.0162955205888</span>/<span class="number">0.00703074596822</span> G: <span class="number">0.0635928660631</span> (Real: [<span class="number">4.0656388866901398</span>, <span class="number">1.1733235519103811</span>], Fake: [<span class="number">4.2119219648838042</span>, <span class="number">1.2884029757138897</span>]) </div><div class="line"><span class="number">12000</span>: D: <span class="number">0.00804834254086</span>/<span class="number">0.0114726442844</span> G: <span class="number">-0.0416676998138</span> (Real: [<span class="number">4.0812106788158413</span>, <span class="number">1.2768383065648503</span>], Fake: [<span class="number">3.8802548873424532</span>, <span class="number">1.1682818121544778</span>]) </div><div class="line"><span class="number">12200</span>: D: <span class="number">0.00880087539554</span>/<span class="number">-0.00853784382343</span> G: <span class="number">0.00878115184605</span> (Real: [<span class="number">3.9501210238039492</span>, <span class="number">1.2609298922930623</span>], Fake: [<span class="number">4.016851776838303</span>, <span class="number">1.1958214043365074</span>]) </div><div class="line"><span class="number">12400</span>: D: <span class="number">-0.0908231809735</span>/<span class="number">0.0565089061856</span> G: <span class="number">-0.0594271346927</span> (Real: [<span class="number">4.2189184671640394</span>, <span class="number">1.2027120432908258</span>], Fake: [<span class="number">4.0232754671573643</span>, <span class="number">1.0601718488768348</span>]) </div><div class="line"><span class="number">12600</span>: D: <span class="number">0.0851941630244</span>/<span class="number">-0.0584048479795</span> G: <span class="number">0.0588090792298</span> (Real: [<span class="number">3.7772543743252753</span>, <span class="number">1.130624908263915</span>], Fake: [<span class="number">3.9319257283210756</span>, <span class="number">1.2051865367836399</span>]) </div><div class="line"><span class="number">12800</span>: D: <span class="number">-0.0560997053981</span>/<span class="number">-0.0248175561428</span> G: <span class="number">-0.0423211455345</span> (Real: [<span class="number">4.1257915179431439</span>, <span class="number">1.3557555020469465</span>], Fake: [<span class="number">3.9178791642189026</span>, <span class="number">1.1446278900771538</span>]) </div><div class="line"><span class="number">13000</span>: D: <span class="number">-0.021879715845</span>/<span class="number">-0.0102085536346</span> G: <span class="number">0.049164660275</span> (Real: [<span class="number">3.8891402572393416</span>, <span class="number">1.340302981622111</span>], Fake: [<span class="number">4.1098264539241791</span>, <span class="number">1.1973190716986095</span>]) </div><div class="line"><span class="number">13200</span>: D: <span class="number">0.00609071925282</span>/<span class="number">0.000411780551076</span> G: <span class="number">0.000873317010701</span> (Real: [<span class="number">4.0079734873771669</span>, <span class="number">1.0734378076269375</span>], Fake: [<span class="number">4.16044829249382</span>, <span class="number">1.24589904041035</span>]) </div><div class="line"><span class="number">13400</span>: D: <span class="number">0.0619652941823</span>/<span class="number">-0.0918542221189</span> G: <span class="number">0.0685269758105</span> (Real: [<span class="number">4.0059312301874161</span>, <span class="number">1.2294789910478197</span>], Fake: [<span class="number">3.935395474433899</span>, <span class="number">1.2204450041984987</span>]) </div><div class="line"><span class="number">13600</span>: D: <span class="number">-0.0172225553542</span>/<span class="number">0.0116953141987</span> G: <span class="number">-0.0139160379767</span> (Real: [<span class="number">3.9669277960062028</span>, <span class="number">1.2823045137798716</span>], Fake: [<span class="number">3.9422059106826781</span>, <span class="number">1.1863138013678882</span>]) </div><div class="line"><span class="number">13800</span>: D: <span class="number">-0.0343380719423</span>/<span class="number">-0.0341883003712</span> G: <span class="number">0.0315745696425</span> (Real: [<span class="number">3.9349321211874484</span>, <span class="number">1.3515663905606217</span>], Fake: [<span class="number">4.0361522984504701</span>, <span class="number">1.1889982801815446</span>]) </div><div class="line"><span class="number">14000</span>: D: <span class="number">-0.0781251713634</span>/<span class="number">0.0379043146968</span> G: <span class="number">-0.0811991766095</span> (Real: [<span class="number">3.9622140777111055</span>, <span class="number">1.3270647840200485</span>], Fake: [<span class="number">3.958692445755005</span>, <span class="number">1.1882249562538854</span>]) </div><div class="line"><span class="number">14200</span>: D: <span class="number">-0.00332566350698</span>/<span class="number">0.00831608474255</span> G: <span class="number">-0.00968919880688</span> (Real: [<span class="number">4.0868309581279751</span>, <span class="number">1.2649052154720533</span>], Fake: [<span class="number">3.9996533656120299</span>, <span class="number">1.2424544463340046</span>]) </div><div class="line"><span class="number">14400</span>: D: <span class="number">0.00310544949025</span>/<span class="number">-0.00344840623438</span> G: <span class="number">0.002937767189</span> (Real: [<span class="number">3.9016156983375549</span>, <span class="number">1.3394072373207904</span>], Fake: [<span class="number">3.8578492951393129</span>, <span class="number">1.2802578210924642</span>]) </div><div class="line"><span class="number">14600</span>: D: <span class="number">0.00954662263393</span>/<span class="number">-0.00955961830914</span> G: <span class="number">0.00952168926597</span> (Real: [<span class="number">3.951248247921467</span>, <span class="number">1.3720542385537113</span>], Fake: [<span class="number">3.9343765902519228</span>, <span class="number">1.3196731296807518</span>]) </div><div class="line"><span class="number">14800</span>: D: <span class="number">-0.118950776756</span>/<span class="number">-0.0234697107226</span> G: <span class="number">-0.0475859940052</span> (Real: [<span class="number">4.224924056529999</span>, <span class="number">1.2198087928062376</span>], Fake: [<span class="number">3.8152624690532684</span>, <span class="number">1.407979253312801</span>]) </div><div class="line"><span class="number">15000</span>: D: <span class="number">-0.0943605676293</span>/<span class="number">0.0735622048378</span> G: <span class="number">-0.104274556041</span> (Real: [<span class="number">3.8776874673366546</span>, <span class="number">1.2303474890793162</span>], Fake: [<span class="number">3.8042025637626646</span>, <span class="number">1.2641632638711853</span>]) </div><div class="line"><span class="number">15200</span>: D: <span class="number">-0.000172574073076</span>/<span class="number">-0.0136091653258</span> G: <span class="number">-0.0342488661408</span> (Real: [<span class="number">3.9725669431686401</span>, <span class="number">1.3636566655582356</span>], Fake: [<span class="number">3.7739255595207215</span>, <span class="number">1.286560381931142</span>]) </div><div class="line"><span class="number">15400</span>: D: <span class="number">0.0314685925841</span>/<span class="number">-0.0321847423911</span> G: <span class="number">0.0224884226918</span> (Real: [<span class="number">3.9619563330709933</span>, <span class="number">1.191049295263032</span>], Fake: [<span class="number">3.7949125266075132</span>, <span class="number">1.144446158701051</span>]) </div><div class="line"><span class="number">15600</span>: D: <span class="number">0.00764724984765</span>/<span class="number">-0.00575984269381</span> G: <span class="number">0.0064948592335</span> (Real: [<span class="number">3.7679578655958177</span>, <span class="number">1.3149928065248815</span>], Fake: [<span class="number">4.2461013138294224</span>, <span class="number">1.0951171764483221</span>]) </div><div class="line"><span class="number">15800</span>: D: <span class="number">-0.0777092948556</span>/<span class="number">0.0849689692259</span> G: <span class="number">-0.0924058929086</span> (Real: [<span class="number">3.932852659225464</span>, <span class="number">1.2573061632959293</span>], Fake: [<span class="number">4.1913282787799835</span>, <span class="number">1.2836186853339466</span>]) </div><div class="line"><span class="number">16000</span>: D: <span class="number">-0.050300322473</span>/<span class="number">-0.0388206243515</span> G: <span class="number">0.0357397347689</span> (Real: [<span class="number">4.0962446802854542</span>, <span class="number">1.4029011906591213</span>], Fake: [<span class="number">4.070586755275726</span>, <span class="number">1.1271350494375147</span>]) </div><div class="line"><span class="number">16200</span>: D: <span class="number">0.0753296241164</span>/<span class="number">-0.0198806431144</span> G: <span class="number">0.0808434784412</span> (Real: [<span class="number">3.8760965394973756</span>, <span class="number">1.1409524988246751</span>], Fake: [<span class="number">3.8057461333274842</span>, <span class="number">1.2098168757605468</span>]) </div><div class="line"><span class="number">16400</span>: D: <span class="number">-0.0372299104929</span>/<span class="number">0.0351875349879</span> G: <span class="number">-0.0454745069146</span> (Real: [<span class="number">4.0939353704452515</span>, <span class="number">1.2848196043395506</span>], Fake: [<span class="number">3.9558720147609709</span>, <span class="number">1.2728235384902225</span>]) </div><div class="line"><span class="number">16600</span>: D: <span class="number">-0.0101340338588</span>/<span class="number">0.0110626723617</span> G: <span class="number">-0.0111222248524</span> (Real: [<span class="number">3.986977145075798</span>, <span class="number">1.3259823635587689</span>], Fake: [<span class="number">3.9554380464553831</span>, <span class="number">1.2907862191410846</span>]) </div><div class="line"><span class="number">16800</span>: D: <span class="number">-0.0494117587805</span>/<span class="number">0.0523075163364</span> G: <span class="number">-0.0535500720143</span> (Real: [<span class="number">3.8448826253414152</span>, <span class="number">1.3117905469567066</span>], Fake: [<span class="number">3.7438095784187317</span>, <span class="number">1.2535150365672076</span>]) </div><div class="line"><span class="number">17000</span>: D: <span class="number">0.0156182665378</span>/<span class="number">-0.0128254238516</span> G: <span class="number">0.0146374739707</span> (Real: [<span class="number">3.9421124708652497</span>, <span class="number">1.1052540236280552</span>], Fake: [<span class="number">3.8871842885017394</span>, <span class="number">1.2453511923222738</span>]) </div><div class="line"><span class="number">17200</span>: D: <span class="number">0.0429224148393</span>/<span class="number">-0.0480623096228</span> G: <span class="number">0.0399292707443</span> (Real: [<span class="number">3.9799196243286135</span>, <span class="number">1.2941615666073001</span>], Fake: [<span class="number">4.1375756561756134</span>, <span class="number">1.2109081564509361</span>]) </div><div class="line"><span class="number">17400</span>: D: <span class="number">0.00968278944492</span>/<span class="number">-0.00968171562999</span> G: <span class="number">0.00966327264905</span> (Real: [<span class="number">3.935849468111992</span>, <span class="number">1.2695645007229639</span>], Fake: [<span class="number">3.8996728241443632</span>, <span class="number">1.3144268300578967</span>]) </div><div class="line"><span class="number">17600</span>: D: <span class="number">-0.00301436148584</span>/<span class="number">-0.000785265117884</span> G: <span class="number">0.00103102996945</span> (Real: [<span class="number">3.9284519279003143</span>, <span class="number">1.2341036313393001</span>], Fake: [<span class="number">3.6972431838512421</span>, <span class="number">1.3855687155856462</span>]) </div><div class="line"><span class="number">17800</span>: D: <span class="number">0.116903491318</span>/<span class="number">-0.0937560945749</span> G: <span class="number">0.172590240836</span> (Real: [<span class="number">4.2645069471001626</span>, <span class="number">1.3080363040531007</span>], Fake: [<span class="number">3.9567726898193358</span>, <span class="number">1.2967345311449683</span>]) </div><div class="line"><span class="number">18000</span>: D: <span class="number">-0.0608675032854</span>/<span class="number">0.0476493611932</span> G: <span class="number">-0.00500288326293</span> (Real: [<span class="number">4.0269851100444791</span>, <span class="number">1.2116770270672328</span>], Fake: [<span class="number">4.1152600276470181</span>, <span class="number">1.281199668474674</span>]) </div><div class="line"><span class="number">18200</span>: D: <span class="number">-0.0734401643276</span>/<span class="number">0.0987718477845</span> G: <span class="number">-0.0819599106908</span> (Real: [<span class="number">3.8394976514577865</span>, <span class="number">1.2749873300796422</span>], Fake: [<span class="number">4.0419886147975923</span>, <span class="number">1.327963817546014</span>]) </div><div class="line"><span class="number">18400</span>: D: <span class="number">0.0497582927346</span>/<span class="number">-0.155175164342</span> G: <span class="number">0.13303783536</span> (Real: [<span class="number">3.7719902545213699</span>, <span class="number">1.0897407967420649</span>], Fake: [<span class="number">3.7615046393871308</span>, <span class="number">1.3089916470515932</span>]) </div><div class="line"><span class="number">18600</span>: D: <span class="number">0.0239700898528</span>/<span class="number">-0.0381186343729</span> G: <span class="number">0.0276864990592</span> (Real: [<span class="number">4.188409751355648</span>, <span class="number">1.285584105229516</span>], Fake: [<span class="number">4.0233318042755126</span>, <span class="number">1.2681527004757882</span>]) </div><div class="line"><span class="number">18800</span>: D: <span class="number">0.00111512281001</span>/<span class="number">-0.0264507420361</span> G: <span class="number">0.0286112166941</span> (Real: [<span class="number">3.9199141567945479</span>, <span class="number">1.2738313063627613</span>], Fake: [<span class="number">4.1139781177043915</span>, <span class="number">1.330488711219485</span>]) </div><div class="line"><span class="number">19000</span>: D: <span class="number">-0.0473541393876</span>/<span class="number">0.111352369189</span> G: <span class="number">-0.0523310601711</span> (Real: [<span class="number">3.7932651308923959</span>, <span class="number">1.3147127405682739</span>], Fake: [<span class="number">3.7947627007961273</span>, <span class="number">1.0531299503292175</span>]) </div><div class="line"><span class="number">19200</span>: D: <span class="number">-0.0304779503495</span>/<span class="number">0.045797213912</span> G: <span class="number">-0.0440187454224</span> (Real: [<span class="number">4.0896886540949344</span>, <span class="number">1.3392233824907658</span>], Fake: [<span class="number">3.8646358847618103</span>, <span class="number">1.304593284039177</span>]) </div><div class="line"><span class="number">19400</span>: D: <span class="number">0.194737583399</span>/<span class="number">-0.192367076874</span> G: <span class="number">0.230072781444</span> (Real: [<span class="number">3.9661449289321897</span>, <span class="number">1.2822216197459986</span>], Fake: [<span class="number">4.0850893747806545</span>, <span class="number">1.3070266600721223</span>]) </div><div class="line"><span class="number">19600</span>: D: <span class="number">-0.195656016469</span>/<span class="number">0.194369539618</span> G: <span class="number">-0.204969212413</span> (Real: [<span class="number">3.9445683220028878</span>, <span class="number">1.2908669424594961</span>], Fake: [<span class="number">4.0273511683940884</span>, <span class="number">1.3484937484757897</span>]) </div><div class="line"><span class="number">19800</span>: D: <span class="number">0.276149004698</span>/<span class="number">-0.262592494488</span> G: <span class="number">0.261271834373</span> (Real: [<span class="number">3.9244625726342202</span>, <span class="number">1.2138755313418907</span>], Fake: [<span class="number">3.896045311689377</span>, <span class="number">1.3239168205792633</span>]) </div><div class="line"><span class="number">20000</span>: D: <span class="number">-0.037402831018</span>/<span class="number">0.0541176348925</span> G: <span class="number">-0.0254273694009</span> (Real: [<span class="number">3.7887831997871397</span>, <span class="number">1.0838328443531984</span>], Fake: [<span class="number">4.1803205323219297</span>, <span class="number">1.2069399210575202</span>]) </div><div class="line"><span class="number">20200</span>: D: <span class="number">-0.14391182363</span>/<span class="number">0.154710128903</span> G: <span class="number">-0.127932995558</span> (Real: [<span class="number">3.9718186306953429</span>, <span class="number">1.1938920103826984</span>], Fake: [<span class="number">3.8623993241786958</span>, <span class="number">1.1992380687067719</span>]) </div><div class="line"><span class="number">20400</span>: D: <span class="number">0.277315825224</span>/<span class="number">-0.276595175266</span> G: <span class="number">0.280247867107</span> (Real: [<span class="number">3.9932824140787124</span>, <span class="number">1.2951435399231526</span>], Fake: [<span class="number">3.9807376277446749</span>, <span class="number">1.1784780448683547</span>]) </div><div class="line"><span class="number">20600</span>: D: <span class="number">-0.213297829032</span>/<span class="number">0.245908752084</span> G: <span class="number">-0.243222758174</span> (Real: [<span class="number">3.8720276713371278</span>, <span class="number">1.2542419688526467</span>], Fake: [<span class="number">3.8206098222732545</span>, <span class="number">1.1661960388796837</span>]) </div><div class="line"><span class="number">20800</span>: D: <span class="number">0.114619217813</span>/<span class="number">-0.100926779211</span> G: <span class="number">0.0922625884414</span> (Real: [<span class="number">3.9682870441675187</span>, <span class="number">1.3188621677189192</span>], Fake: [<span class="number">3.5771069145202636</span>, <span class="number">1.1369803011602813</span>]) </div><div class="line"><span class="number">21000</span>: D: <span class="number">-0.303231596947</span>/<span class="number">0.294602781534</span> G: <span class="number">-0.288874447346</span> (Real: [<span class="number">3.991482014656067</span>, <span class="number">1.0697520343686426</span>], Fake: [<span class="number">3.674229063987732</span>, <span class="number">1.162594834704991</span>]) </div><div class="line"><span class="number">21200</span>: D: <span class="number">-0.074034973979</span>/<span class="number">0.0798109993339</span> G: <span class="number">-0.0742214098573</span> (Real: [<span class="number">3.5809044003486634</span>, <span class="number">1.1568557007313405</span>], Fake: [<span class="number">4.0297869884967801</span>, <span class="number">1.262183063172349</span>]) </div><div class="line"><span class="number">21400</span>: D: <span class="number">0.262162327766</span>/<span class="number">-0.297971874475</span> G: <span class="number">0.296678453684</span> (Real: [<span class="number">4.0233621561527251</span>, <span class="number">1.1153293685921177</span>], Fake: [<span class="number">4.3256152606010438</span>, <span class="number">1.293378983535336</span>]) </div><div class="line"><span class="number">21600</span>: D: <span class="number">0.253285288811</span>/<span class="number">-0.265974611044</span> G: <span class="number">0.271079391241</span> (Real: [<span class="number">3.8655495065450669</span>, <span class="number">1.3046362904478612</span>], Fake: [<span class="number">4.0383575105667111</span>, <span class="number">1.1593536714254398</span>]) </div><div class="line"><span class="number">21800</span>: D: <span class="number">-0.668483495712</span>/<span class="number">0.693548798561</span> G: <span class="number">-0.597621560097</span> (Real: [<span class="number">4.0561192989349362</span>, <span class="number">1.3785832256993071</span>], Fake: [<span class="number">4.0196917986869813</span>, <span class="number">1.1727416034901368</span>]) </div><div class="line"><span class="number">22000</span>: D: <span class="number">-0.247271433473</span>/<span class="number">0.260498434305</span> G: <span class="number">-0.254284113646</span> (Real: [<span class="number">4.0449540507793422</span>, <span class="number">1.1182831642815363</span>], Fake: [<span class="number">3.9410277414321899</span>, <span class="number">1.35662918383663</span>]) </div><div class="line"><span class="number">22200</span>: D: <span class="number">0.0106530245394</span>/<span class="number">-0.0105826444924</span> G: <span class="number">0.010412142612</span> (Real: [<span class="number">3.9709725368022917</span>, <span class="number">1.1935909496194108</span>], Fake: [<span class="number">3.6618342864513398</span>, <span class="number">1.1302755516153604</span>]) </div><div class="line"><span class="number">22400</span>: D: <span class="number">-0.0474079549313</span>/<span class="number">0.0512998178601</span> G: <span class="number">-0.0483585894108</span> (Real: [<span class="number">4.0366528975963591</span>, <span class="number">1.255590190060166</span>], Fake: [<span class="number">4.4536384451389317</span>, <span class="number">1.1817009846117434</span>]) </div><div class="line"><span class="number">22600</span>: D: <span class="number">-0.322408914566</span>/<span class="number">0.294503211975</span> G: <span class="number">-0.294557034969</span> (Real: [<span class="number">4.1648625326156612</span>, <span class="number">1.2910376071493044</span>], Fake: [<span class="number">3.9514351594448089</span>, <span class="number">1.2428792207747439</span>]) </div><div class="line"><span class="number">22800</span>: D: <span class="number">-0.0832418426871</span>/<span class="number">0.0778618454933</span> G: <span class="number">-0.0830294713378</span> (Real: [<span class="number">4.1286677682399748</span>, <span class="number">1.2808552112825371</span>], Fake: [<span class="number">4.0503418278694152</span>, <span class="number">1.2931609764101457</span>]) </div><div class="line"><span class="number">23000</span>: D: <span class="number">-0.369321852922</span>/<span class="number">0.350715816021</span> G: <span class="number">-0.379378199577</span> (Real: [<span class="number">4.0539671546220779</span>, <span class="number">1.2841527209665038</span>], Fake: [<span class="number">3.7385779893398285</span>, <span class="number">1.226034767157562</span>]) </div><div class="line"><span class="number">23200</span>: D: <span class="number">-0.20978730917</span>/<span class="number">0.198253154755</span> G: <span class="number">-0.20125605166</span> (Real: [<span class="number">3.8997612628340721</span>, <span class="number">1.2476609639285596</span>], Fake: [<span class="number">3.9131766259670258</span>, <span class="number">1.1745094337139723</span>]) </div><div class="line"><span class="number">23400</span>: D: <span class="number">-0.0713088735938</span>/<span class="number">0.070287771523</span> G: <span class="number">-0.0685144215822</span> (Real: [<span class="number">3.8823761761188509</span>, <span class="number">1.2554855061572396</span>], Fake: [<span class="number">3.916521146297455</span>, <span class="number">1.1589148704590277</span>]) </div><div class="line"><span class="number">23600</span>: D: <span class="number">0.0427192002535</span>/<span class="number">-0.0458992123604</span> G: <span class="number">0.0468493178487</span> (Real: [<span class="number">4.2497683775424955</span>, <span class="number">1.3534774394799314</span>], Fake: [<span class="number">3.7455072367191313</span>, <span class="number">1.2035723328660535</span>]) </div><div class="line"><span class="number">23800</span>: D: <span class="number">0.0886824280024</span>/<span class="number">-0.089180290699</span> G: <span class="number">0.0824339240789</span> (Real: [<span class="number">4.1368276840448379</span>, <span class="number">1.3053732424006685</span>], Fake: [<span class="number">3.7440953600406646</span>, <span class="number">1.3403098424499473</span>]) </div><div class="line"><span class="number">24000</span>: D: <span class="number">0.0765529945493</span>/<span class="number">-0.0702198073268</span> G: <span class="number">0.067143753171</span> (Real: [<span class="number">4.1424573111534118</span>, <span class="number">1.1894154051554844</span>], Fake: [<span class="number">3.9408028304576872</span>, <span class="number">1.311870950939225</span>]) </div><div class="line"><span class="number">24200</span>: D: <span class="number">-0.0332999974489</span>/<span class="number">0.0289861243218</span> G: <span class="number">-0.0238233078271</span> (Real: [<span class="number">4.0625021523237228</span>, <span class="number">1.3193496247910601</span>], Fake: [<span class="number">4.0214765596389768</span>, <span class="number">1.3626613178115112</span>]) </div><div class="line"><span class="number">24400</span>: D: <span class="number">0.0116833550856</span>/<span class="number">-0.0433083474636</span> G: <span class="number">0.0294151268899</span> (Real: [<span class="number">4.155729653835297</span>, <span class="number">1.2443573708805233</span>], Fake: [<span class="number">4.0276014816761014</span>, <span class="number">1.2064370896635035</span>]) </div><div class="line"><span class="number">24600</span>: D: <span class="number">-0.143586605787</span>/<span class="number">0.176585748792</span> G: <span class="number">-0.18224260211</span> (Real: [<span class="number">4.1486411762237552</span>, <span class="number">1.1859516848633762</span>], Fake: [<span class="number">4.1132693731784817</span>, <span class="number">1.1922180729014844</span>]) </div><div class="line"><span class="number">24800</span>: D: <span class="number">-0.0138712525368</span>/<span class="number">0.0168411824852</span> G: <span class="number">-0.0119427125901</span> (Real: [<span class="number">4.1591709744930263</span>, <span class="number">1.2359258557380455</span>], Fake: [<span class="number">4.1677398359775539</span>, <span class="number">1.3845231707709731</span>]) </div><div class="line"><span class="number">25000</span>: D: <span class="number">0.255919009447</span>/<span class="number">-0.294253230095</span> G: <span class="number">0.279962956905</span> (Real: [<span class="number">3.9463270044326784</span>, <span class="number">1.1874795319708413</span>], Fake: [<span class="number">4.2903580510616299</span>, <span class="number">1.3555421660554561</span>]) </div><div class="line"><span class="number">25200</span>: D: <span class="number">-0.0276325326413</span>/<span class="number">0.0174208488315</span> G: <span class="number">-0.0236964281648</span> (Real: [<span class="number">3.9243721216917038</span>, <span class="number">1.0837602743237815</span>], Fake: [<span class="number">3.6880193889141082</span>, <span class="number">1.3551960082382857</span>]) </div><div class="line"><span class="number">25400</span>: D: <span class="number">0.0133695462719</span>/<span class="number">-0.0217840373516</span> G: <span class="number">0.0382910817862</span> (Real: [<span class="number">3.9248281943798067</span>, <span class="number">1.3498579423514441</span>], Fake: [<span class="number">3.9377611076831815</span>, <span class="number">1.3147392264391</span>]) </div><div class="line"><span class="number">25600</span>: D: <span class="number">0.0533282607794</span>/<span class="number">-0.0582511797547</span> G: <span class="number">0.0426382124424</span> (Real: [<span class="number">3.9252138528227807</span>, <span class="number">1.2343049898537437</span>], Fake: [<span class="number">4.1364144349098204</span>, <span class="number">1.2410536065514364</span>]) </div><div class="line"><span class="number">25800</span>: D: <span class="number">-0.00288704037666</span>/<span class="number">0.00770187750459</span> G: <span class="number">-0.0114914979786</span> (Real: [<span class="number">3.9242496091127395</span>, <span class="number">1.2788150012319115</span>], Fake: [<span class="number">4.0345127677917478</span>, <span class="number">1.1882337663095883</span>]) </div><div class="line"><span class="number">26000</span>: D: <span class="number">-0.0608727261424</span>/<span class="number">0.0541118755937</span> G: <span class="number">-0.0474198237062</span> (Real: [<span class="number">4.0897465288639072</span>, <span class="number">1.3095601996023096</span>], Fake: [<span class="number">4.1400825273990627</span>, <span class="number">1.2148829163174772</span>]) </div><div class="line"><span class="number">26200</span>: D: <span class="number">-0.130559697747</span>/<span class="number">0.0733794793487</span> G: <span class="number">-0.104144588113</span> (Real: [<span class="number">4.2607862049341199</span>, <span class="number">1.2942193499055861</span>], Fake: [<span class="number">3.8867506885528567</span>, <span class="number">1.1942672801186012</span>]) </div><div class="line"><span class="number">26400</span>: D: <span class="number">-0.0439343079925</span>/<span class="number">0.0573879256845</span> G: <span class="number">-0.0878697857261</span> (Real: [<span class="number">3.7808335113525389</span>, <span class="number">1.0880880845236942</span>], Fake: [<span class="number">3.9782328522205352</span>, <span class="number">1.1620106342824015</span>]) </div><div class="line"><span class="number">26600</span>: D: <span class="number">0.0152015341446</span>/<span class="number">0.00366508681327</span> G: <span class="number">0.041159953922</span> (Real: [<span class="number">3.8900859886407853</span>, <span class="number">1.1779470629112894</span>], Fake: [<span class="number">3.7596992158889773</span>, <span class="number">1.2139592079531667</span>]) </div><div class="line"><span class="number">26800</span>: D: <span class="number">0.0352714285254</span>/<span class="number">-0.1031877473</span> G: <span class="number">0.067874789238</span> (Real: [<span class="number">4.0695308989286421</span>, <span class="number">1.1837713697563146</span>], Fake: [<span class="number">4.0929770147800442</span>, <span class="number">1.0965869589580517</span>]) </div><div class="line"><span class="number">27000</span>: D: <span class="number">-0.0881021544337</span>/<span class="number">0.0813493356109</span> G: <span class="number">-0.0242269244045</span> (Real: [<span class="number">3.9890777540206908</span>, <span class="number">1.2553969722414431</span>], Fake: [<span class="number">3.7988330614566803</span>, <span class="number">1.2567013288504758</span>]) </div><div class="line"><span class="number">27200</span>: D: <span class="number">0.0763045027852</span>/<span class="number">-0.0917293503881</span> G: <span class="number">0.114218316972</span> (Real: [<span class="number">4.0028738850355152</span>, <span class="number">1.3423566094628674</span>], Fake: [<span class="number">3.9770897746086122</span>, <span class="number">1.3219552807466088</span>]) </div><div class="line"><span class="number">27400</span>: D: <span class="number">0.0594872310758</span>/<span class="number">-0.0451167076826</span> G: <span class="number">0.0368666872382</span> (Real: [<span class="number">4.0800592017173765</span>, <span class="number">1.2152901513624952</span>], Fake: [<span class="number">3.9476736617088317</span>, <span class="number">1.2989705597833583</span>]) </div><div class="line"><span class="number">27600</span>: D: <span class="number">0.0153470486403</span>/<span class="number">-0.0201481245458</span> G: <span class="number">-0.000402322039008</span> (Real: [<span class="number">4.1604018148779867</span>, <span class="number">1.3359014716469342</span>], Fake: [<span class="number">3.9977971708774565</span>, <span class="number">1.2944576179632961</span>]) </div><div class="line"><span class="number">27800</span>: D: <span class="number">-0.00789823569357</span>/<span class="number">0.00908922962844</span> G: <span class="number">-0.0111076626927</span> (Real: [<span class="number">4.0212037134170533</span>, <span class="number">1.1874018724012747</span>], Fake: [<span class="number">4.1083386635780332</span>, <span class="number">1.2509297017041943</span>]) </div><div class="line"><span class="number">28000</span>: D: <span class="number">0.00757996272296</span>/<span class="number">-0.00654019229114</span> G: <span class="number">0.00611820165068</span> (Real: [<span class="number">3.7911120998859404</span>, <span class="number">1.1977103659955959</span>], Fake: [<span class="number">4.0841165268421173</span>, <span class="number">1.1898253993115502</span>]) </div><div class="line"><span class="number">28200</span>: D: <span class="number">0.0131957577541</span>/<span class="number">0.00322831980884</span> G: <span class="number">-0.00111622922122</span> (Real: [<span class="number">4.1888789300620557</span>, <span class="number">1.3496568725947327</span>], Fake: [<span class="number">4.0611115002632143</span>, <span class="number">1.3183184144220856</span>]) </div><div class="line"><span class="number">28400</span>: D: <span class="number">-0.0306499581784</span>/<span class="number">0.0331647247076</span> G: <span class="number">-0.0338053703308</span> (Real: [<span class="number">4.1849153059720994</span>, <span class="number">1.3391440077022734</span>], Fake: [<span class="number">3.8500063753128053</span>, <span class="number">1.3092803392722017</span>]) </div><div class="line"><span class="number">28600</span>: D: <span class="number">-0.0750854164362</span>/<span class="number">0.0745137408376</span> G: <span class="number">-0.0692436397076</span> (Real: [<span class="number">4.2219353467226028</span>, <span class="number">1.3228632865628431</span>], Fake: [<span class="number">3.9156518685817718</span>, <span class="number">1.322625042830196</span>]) </div><div class="line"><span class="number">28800</span>: D: <span class="number">0.0400990955532</span>/<span class="number">-0.0271217841655</span> G: <span class="number">0.0072197439149</span> (Real: [<span class="number">4.1668396210670471</span>, <span class="number">1.1685380084057959</span>], Fake: [<span class="number">3.8380984902381896</span>, <span class="number">1.362370341203504</span>]) </div><div class="line"><span class="number">29000</span>: D: <span class="number">-0.0643707811832</span>/<span class="number">0.0576644167304</span> G: <span class="number">-0.100686855614</span> (Real: [<span class="number">3.8912058281898498</span>, <span class="number">1.1764897014192157</span>], Fake: [<span class="number">4.1498241519927976</span>, <span class="number">1.2432322677870791</span>]) </div><div class="line"><span class="number">29200</span>: D: <span class="number">0.0442187860608</span>/<span class="number">-0.0331076569855</span> G: <span class="number">0.0377507209778</span> (Real: [<span class="number">3.995900819301605</span>, <span class="number">1.1999502583881319</span>], Fake: [<span class="number">3.9349853229522704</span>, <span class="number">1.3676764998638458</span>]) </div><div class="line"><span class="number">29400</span>: D: <span class="number">-0.0614512637258</span>/<span class="number">0.0583380833268</span> G: <span class="number">-0.059112302959</span> (Real: [<span class="number">4.1833238875865932</span>, <span class="number">1.4038158613161691</span>], Fake: [<span class="number">4.1426575899124147</span>, <span class="number">1.2694314780433735</span>]) </div><div class="line"><span class="number">29600</span>: D: <span class="number">-0.0337703973055</span>/<span class="number">0.0392336845398</span> G: <span class="number">-0.0504648312926</span> (Real: [<span class="number">4.1217511665821078</span>, <span class="number">1.2264251023812502</span>], Fake: [<span class="number">3.838116307258606</span>, <span class="number">1.2309841481033876</span>]) </div><div class="line"><span class="number">29800</span>: D: <span class="number">0.129453405738</span>/<span class="number">-0.13672092557</span> G: <span class="number">0.143395990133</span> (Real: [<span class="number">3.8660407388210296</span>, <span class="number">1.2221890139039508</span>], Fake: [<span class="number">4.0156518769264222</span>, <span class="number">1.3044469158238432</span>])</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;102&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;103&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;104&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;105&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;106&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;107&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;108&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;109&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;110&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;111&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;112&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;113&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;114&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;115&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;116&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;117&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;118&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;119&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;120&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;121&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;122&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;123&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;124&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;125&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;126&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;128&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;129&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;130&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;131&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;132&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;133&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;134&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;135&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;136&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;137&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;138&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;139&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Wasserstein Generative Adversarial Networks (WGAN) example in PyTorch.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; torch&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; torch.nn &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; nn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; torch.nn.functional &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; F&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; torch.optim &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; optim&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; torch.autograd &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Variable&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Data params&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;data_mean = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;data_stddev = &lt;span class=&quot;number&quot;&gt;1.25&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Model params&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;g_input_size = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;# Random noise dimension coming into generator, per output vector&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;g_hidden_size = &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;# Generator complexity&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;g_output_size = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;# size of generated output vector&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;d_input_size = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;# Minibatch size - cardinality of distributions&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;d_hidden_size = &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;# Discriminator complexity&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;d_output_size = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;# Single dimension for &#39;real&#39; vs. &#39;fake&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;minibatch_size = d_input_size&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;d_learning_rate = &lt;span class=&quot;number&quot;&gt;2e-4&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 2e-4&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;g_learning_rate = &lt;span class=&quot;number&quot;&gt;2e-4&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# optim_betas = (0.9, 0.999)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;num_epochs = &lt;span class=&quot;number&quot;&gt;30000&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print_interval = &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# d_steps = 1  # &#39;k&#39; steps in the original GAN paper. Can put the discriminator on higher training freq than generator&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;d_steps = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;g_steps = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ### Uncomment only one of these&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#(name, preprocess, d_input_func) = (&quot;Raw data&quot;, lambda data: data, lambda x: x)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(name, preprocess, d_input_func) = (&lt;span class=&quot;string&quot;&gt;&quot;Data and variances&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; data: decorate_with_diffs(data, &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;), &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: x * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;Using data [%s]&quot;&lt;/span&gt; % (name))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ##### DATA: Target data and generator input data&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get_distribution_sampler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(mu, sigma)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; n: torch.Tensor(np.random.normal(mu, sigma, (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, n)))  &lt;span class=&quot;comment&quot;&gt;# Gaussian&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get_generator_input_sampler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; m, n: torch.rand(m, n)  &lt;span class=&quot;comment&quot;&gt;# Uniform-dist data into generator, _NOT_ Gaussian&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ##### MODELS: Generator model and discriminator model&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Generator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nn.Module)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, input_size, hidden_size, output_size)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        super(Generator, self).__init__()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.map1 = nn.Linear(input_size, hidden_size)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.map2 = nn.Linear(hidden_size, hidden_size)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.map3 = nn.Linear(hidden_size, output_size)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, x)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        x = F.elu(self.map1(x))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        x = F.sigmoid(self.map2(x))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.map3(x)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Discriminator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nn.Module)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, input_size, hidden_size, output_size)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        super(Discriminator, self).__init__()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.map1 = nn.Linear(input_size, hidden_size)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.map2 = nn.Linear(hidden_size, hidden_size)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.map3 = nn.Linear(hidden_size, output_size)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, x)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        x = F.elu(self.map1(x))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        x = F.elu(self.map2(x))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# return F.sigmoid(self.map3(x))&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.map3(x)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(v)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v.data.storage().tolist()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(d)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [np.mean(d), np.std(d)]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;decorate_with_diffs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data, exponent)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    mean = torch.mean(data.data, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    mean_broadcast = torch.mul(torch.ones(data.size()), mean.tolist()[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    diffs = torch.pow(data - Variable(mean_broadcast), exponent)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; torch.cat([data, diffs], &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;d_sampler = get_distribution_sampler(data_mean, data_stddev)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gi_sampler = get_generator_input_sampler()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;G = Generator(input_size=g_input_size, hidden_size=g_hidden_size, output_size=g_output_size)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;D = Discriminator(input_size=d_input_func(d_input_size), hidden_size=d_hidden_size, output_size=d_output_size)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# criterion = nn.BCELoss()  # Binary cross entropy: http://pytorch.org/docs/nn.html#bceloss&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# d_optimizer = optim.Adam(D.parameters(), lr=d_learning_rate, betas=optim_betas)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# g_optimizer = optim.Adam(G.parameters(), lr=g_learning_rate, betas=optim_betas)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;d_optimizer = optim.RMSprop(D.parameters(), lr=d_learning_rate)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;g_optimizer = optim.Adam(G.parameters(), lr=g_learning_rate)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; epoch &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(num_epochs):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; d_index &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(d_steps):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 1. Train D on real+fake&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        D.zero_grad()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#  1A: Train D on real&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        d_real_data = Variable(d_sampler(d_input_size))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        d_real_decision = D(preprocess(d_real_data))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# d_real_error = criterion(d_real_decision, Variable(torch.ones(1)))  # ones = true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        d_real_error = -torch.mean(d_real_decision)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        d_real_error.backward() &lt;span class=&quot;comment&quot;&gt;# compute/store gradients, but don&#39;t change params&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#  1B: Train D on fake&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        d_gen_input = Variable(gi_sampler(minibatch_size, g_input_size))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        d_fake_data = G(d_gen_input).detach()  &lt;span class=&quot;comment&quot;&gt;# detach to avoid training G on these labels&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        d_fake_decision = D(preprocess(d_fake_data.t()))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# d_fake_error = criterion(d_fake_decision, Variable(torch.zeros(1)))  # zeros = fake&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        d_fake_error = torch.mean(d_fake_decision)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        d_fake_error.backward()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        d_optimizer.step()     &lt;span class=&quot;comment&quot;&gt;# Only optimizes D&#39;s parameters; changes based on stored gradients from backward()&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Weight Clipping&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; D.parameters():&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        	p.data.clamp_(&lt;span class=&quot;number&quot;&gt;-0.01&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.01&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; g_index &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(g_steps):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 2. Train G on D&#39;s response (but DO NOT train D on these labels)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        G.zero_grad()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gen_input = Variable(gi_sampler(minibatch_size, g_input_size))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        g_fake_data = G(gen_input)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        dg_fake_decision = D(preprocess(g_fake_data.t()))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# g_error = criterion(dg_fake_decision, Variable(torch.ones(1)))  # we want to fool, so pretend it&#39;s all genuine&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        g_error = -torch.mean(dg_fake_decision)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        g_error.backward()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        g_optimizer.step()  &lt;span class=&quot;comment&quot;&gt;# Only optimizes G&#39;s parameters&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; epoch % print_interval == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;%s: D: %s/%s G: %s (Real: %s, Fake: %s) &quot;&lt;/span&gt; % (epoch,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                            extract(d_real_error)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                            extract(d_fake_error)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                            extract(g_error)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                            stats(extract(d_real_data)),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                            stats(extract(d_fake_data))))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;与&lt;a href=&quot;https://ewanlee.github.io/2017/04/28/Generative-Adversarial-Networks-GANs-in-50-lines-of-code-PyTorch/&quot;&gt;之前的文章&lt;/a&gt;所做的修改仅仅只有以下几点（理论支持参考我之前转发的一篇&lt;a href=&quot;https://ewanlee.github.io/2017/04/29/The-awesome-Wasserstein-GAN/&quot;&gt;博文&lt;/a&gt;）:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;判别模型最后一层直接用线型激活函数，而不是用Sigmoid函数&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Discriminator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nn.Module)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, input_size, hidden_size, output_size)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        super(Discriminator, self).__init__()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.map1 = nn.Linear(input_size, hidden_size)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.map2 = nn.Linear(hidden_size, hidden_size)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.map3 = nn.Linear(hidden_size, output_size)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, x)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        x = F.elu(self.map1(x))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        x = F.elu(self.map2(x))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# return F.sigmoid(self.map3(x))&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.map3(x)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;生成模型与判别模型的loss函数进行修改&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 生成模型&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# d_real_error = criterion(d_real_decision, Variable(torch.ones(1)))  # ones = true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;d_real_error = -torch.mean(d_real_decision)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# d_fake_error = criterion(d_fake_decision, Variable(torch.zeros(1)))  # zeros = fake&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;d_fake_error = torch.mean(d_fake_decision)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 判别模型&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# g_error = criterion(dg_fake_decision, Variable(torch.ones(1)))  # we want to fool, so pretend it&#39;s all genuine&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;g_error = -torch.mean(dg_fake_decision)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;每次更新判别器的参数之后把它们的绝对值截断到不超过一个固定常数c (这里取的是0.01)&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Weight Clipping&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; p &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; D.parameters():&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    p.data.clamp_(&lt;span class=&quot;number&quot;&gt;-0.01&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.01&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;不要用基于动量的优化算法（包括momentum和Adam），推荐RMSProp，SGD也行&lt;/p&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# d_optimizer = optim.Adam(D.parameters(), lr=d_learning_rate, betas=optim_betas)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# g_optimizer = optim.Adam(G.parameters(), lr=g_learning_rate, betas=optim_betas)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;d_optimizer = optim.RMSprop(D.parameters(), lr=d_learning_rate)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;g_optimizer = optim.Adam(G.parameters(), lr=g_learning_rate)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;​&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;实验结果如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
      <category term="GAN" scheme="http://yoursite.com/tags/GAN/"/>
    
  </entry>
  
  <entry>
    <title>The awesome Wasserstein GAN</title>
    <link href="http://yoursite.com/2017/04/29/The-awesome-Wasserstein-GAN/"/>
    <id>http://yoursite.com/2017/04/29/The-awesome-Wasserstein-GAN/</id>
    <published>2017-04-29T08:55:06.000Z</published>
    <updated>2017-04-29T15:44:04.853Z</updated>
    
    <content type="html"><![CDATA[<p>原帖地址：<a href="https://zhuanlan.zhihu.com/p/25071913" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/25071913</a></p><blockquote><p>本文后续：<a href="https://www.zhihu.com/question/52602529/answer/158727900" target="_blank" rel="external">Wasserstein GAN最新进展：从weight clipping到gradient penalty，更加先进的Lipschitz限制手法</a></p></blockquote><p>在GAN的相关研究如火如荼甚至可以说是泛滥的今天，一篇新鲜出炉的arXiv论文《<a href="http://link.zhihu.com/?target=https%3A//arxiv.org/abs/1701.07875" target="_blank" rel="external">Wasserstein GAN</a>》却在Reddit的Machine Learning频道火了，连Goodfellow都<a href="http://link.zhihu.com/?target=https%3A//www.reddit.com/r/MachineLearning/comments/5qxoaz/r_170107875_wasserstein_gan/" target="_blank" rel="external">在帖子里和大家热烈讨论</a>，这篇论文究竟有什么了不得的地方呢？</p><p>要知道自从<a href="http://link.zhihu.com/?target=https%3A//arxiv.org/abs/1406.2661" target="_blank" rel="external">2014年Ian Goodfellow提出</a>以来，GAN就存在着训练困难、生成器和判别器的loss无法指示训练进程、生成样本缺乏多样性等问题。从那时起，很多论文都在尝试解决，但是效果不尽人意，比如最有名的一个改进<a href="http://link.zhihu.com/?target=https%3A//arxiv.org/abs/1511.06434" target="_blank" rel="external">DCGAN</a>依靠的是对判别器和生成器的架构进行实验枚举，最终找到一组比较好的网络架构设置，但是实际上是治标不治本，没有彻底解决问题。而今天的主角Wasserstein GAN（下面简称WGAN）成功地做到了以下爆炸性的几点：</p><ul><li>彻底解决GAN训练不稳定的问题，不再需要小心平衡生成器和判别器的训练程度</li><li>基本解决了collapse mode的问题，确保了生成样本的多样性</li><li>训练过程中终于有一个像交叉熵、准确率这样的数值来指示训练的进程，这个数值越小代表GAN训练得越好，代表生成器产生的图像质量越高（如题图所示）</li><li>以上一切好处不需要精心设计的网络架构，最简单的多层全连接网络就可以做到</li></ul><p>那以上好处来自哪里？这就是令人拍案叫绝的部分了——实际上作者整整花了两篇论文，在第一篇《<a href="http://link.zhihu.com/?target=https%3A//arxiv.org/abs/1701.04862" target="_blank" rel="external">Towards Principled Methods for Training Generative Adversarial Networks</a>》里面推了一堆公式定理，从理论上分析了原始GAN的问题所在，从而针对性地给出了改进要点；在这第二篇《<a href="http://link.zhihu.com/?target=https%3A//arxiv.org/abs/1701.07875" target="_blank" rel="external">Wasserstein GAN</a>》里面，又再从这个改进点出发推了一堆公式定理，最终给出了改进的算法实现流程，<strong>而改进后相比原始GAN的算法实现流程却只改了四点</strong>：</p><ul><li>判别器最后一层去掉sigmoid</li><li>生成器和判别器的loss不取log</li><li>每次更新判别器的参数之后把它们的绝对值截断到不超过一个固定常数c</li><li>不要用基于动量的优化算法（包括momentum和Adam），推荐RMSProp，SGD也行</li></ul><p>算法截图如下：</p><p><img src="https://pic1.zhimg.com/v2-6be6e2ef3d15c4b10c2a943e9bf4db70_b.jpg" alt="img"></p><p>改动是如此简单，效果却惊人地好，以至于Reddit上不少人在感叹：就这样？没有别的了？ 太简单了吧！这些反应让我想起了一个颇有年头的鸡汤段子，说是一个工程师在电机外壳上用粉笔划了一条线排除了故障，要价一万美元——画一条线，1美元；知道在哪画线，9999美元。上面这四点改进就是作者Martin Arjovsky划的简简单单四条线，对于工程实现便已足够，但是知道在哪划线，背后却是精巧的数学分析，而这也是本文想要整理的内容。</p><p>本文内容分为五个部分：</p><ul><li>原始GAN究竟出了什么问题？（此部分较长）</li><li>WGAN之前的一个过渡解决方案</li><li>Wasserstein距离的优越性质</li><li>从Wasserstein距离到WGAN</li><li>总结</li></ul><p><em>理解原文的很多公式定理需要对测度论、 拓扑学等数学知识有所掌握，本文会从直观的角度对每一个重要公式进行解读，有时通过一些低维的例子帮助读者理解数学背后的思想，所以不免会失于严谨，如有引喻不当之处，欢迎在评论中指出。</em></p><p><em>以下简称《Wassertein GAN》为“WGAN本作”，简称《Towards Principled Methods for Training Generative Adversarial Networks》为“WGAN前作”。</em></p><p><em>WGAN源码实现：martinarjovsky/WassersteinGAN</em></p><h2 id="第一部分：原始GAN究竟出了什么问题？"><a href="#第一部分：原始GAN究竟出了什么问题？" class="headerlink" title="第一部分：原始GAN究竟出了什么问题？"></a>第一部分：原始GAN究竟出了什么问题？</h2><p>回顾一下，原始GAN中判别器要最小化如下损失函数，尽可能把真实样本分为正例，生成样本分为负例：</p><script type="math/tex;mode=display">-\mathbb{E}_{x \sim P_r}[log D(x)] - \mathbb{E}_{x \sim P_{g}}[log(1-D(x))]</script><p>其中$P_r$是真实样本分布，$P_g$是由生成器产生的样本分布。对于生成器，Goodfellow一开始提出来一个损失函数，后来又提出了一个改进的损失函数，分别是</p><script type="math/tex;mode=display">\mathbb{E}_{x \sim P_g}[log(1-D(x))]</script><script type="math/tex;mode=display">\mathbb{E}_{x \sim P_g}[-log D(x)]</script><p>后者在WGAN两篇论文中称为“the - log D alternative”或“the - log D trick”。WGAN前作分别分析了这两种形式的原始GAN各自的问题所在，下面分别说明。</p><h2 id="第一种原始GAN形式的问题"><a href="#第一种原始GAN形式的问题" class="headerlink" title="第一种原始GAN形式的问题"></a>第一种原始GAN形式的问题</h2><p><strong>一句话概括：判别器越好，生成器梯度消失越严重。</strong>WGAN前作从两个角度进行了论证，第一个角度是从生成器的等价损失函数切入的。</p><p>首先从公式1可以得到，在生成器G固定参数时最优的判别器D应该是什么。对于一个具体的样本$x$，它可能来自真实分布也可能来自生成分布，它对公式1损失函数的贡献是</p><script type="math/tex;mode=display">- P_r(x)logD(x) - p_g(x)log[1 - D(x)]</script><p>令其关于$D(x)$的导数为0，得</p><script type="math/tex;mode=display">-\frac{P_r(x)}{D(x)} + \frac{P_g(x)}{1 - D(x)} = 0</script><p>化简得最优判别器为：</p><script type="math/tex;mode=display">D^{\star}(x) = \frac{P_r(x)}{P_r(x) + P_g(x)}</script><p>这个结果从直观上很容易理解，就是看一个样本$x$来自真实分布和生成分布的可能性的相对比例。如果$P_r(x) = 0$且$P_g(x) \neq 0$，最优判别器就应该非常自信地给出概率0；如果$P_r(x) = P_g(x)$，说明该样本是真是假的可能性刚好一半一半，此时最优判别器也应该给出概率0.5。</p><p>然而GAN训练有一个trick，就是别把判别器训练得太好，否则在实验中生成器会完全学不动（loss降不下去），为了探究背后的原因，我们就可以看看在极端情况——判别器最优时，生成器的损失函数变成什么。给公式2加上一个不依赖于生成器的项，使之变成</p><script type="math/tex;mode=display">\mathbb{E}_{x \sim P_r}[log D(x)] - \mathbb{E}_{x \sim P_{g}}[log(1-D(x))]</script><p>注意，最小化这个损失函数等价于最小化公式2，而且它刚好是判别器损失函数的反。代入最优判别器即公式4，再进行简单的变换可以得到</p><script type="math/tex;mode=display">\mathbb{E}_{x \sim P_r} \log \frac{P_r(x)}{\frac{1}{2}[P_r(x) + P_g(x)]} + \mathbb{E}_{x \sim P_g} \log \frac{P_g(x)}{\frac{1}{2}[P_r(x) + P_g(x)]} - 2\log 2</script><p>变换成这个样子是为了引入Kullback–Leibler divergence（简称KL散度）和Jensen-Shannon divergence（简称JS散度）这两个重要的相似度衡量指标，后面的主角之一Wasserstein距离，就是要来吊打它们两个的。所以接下来介绍这两个重要的配角——KL散度和JS散度：</p><script type="math/tex;mode=display">KL(P_1||P_2) = \mathbb{E}_{x \sim P_1} \log \frac{P_1}{P_2}</script><script type="math/tex;mode=display">JS(P_1 || P_2) = \frac{1}{2}KL(P_1||\frac{P_1 + P_2}{2}) + \frac{1}{2}KL(P_2||\frac{P_1 + P_2}{2})</script><p>于是公式5就可以继续写成</p><script type="math/tex;mode=display">2JS(P_r || P_g) - 2\log 2</script><p>到这里读者可以先喘一口气，看看目前得到了什么结论：<strong>根据原始GAN定义的判别器loss，我们可以得到最优判别器的形式；而在最优判别器的下，我们可以把原始GAN定义的生成器loss等价变换为最小化真实分布$P_r$与生成分布$P_g$之间的JS散度。我们越训练判别器，它就越接近最优，最小化生成器的loss也就会越近似于最小化$P_r$和$P_g$之间的JS散度。</strong></p><p>问题就出在这个JS散度上。我们会希望如果两个分布之间越接近它们的JS散度越小，我们通过优化JS散度就能将$P_g$“拉向”$P_r$，最终以假乱真。这个希望在两个分布有所重叠的时候是成立的，但是如果两个分布完全没有重叠的部分，或者它们重叠的部分可忽略（下面解释什么叫可忽略），它们的JS散度是多少呢？</p><p>答案是$\log 2$，因为对于任意一个x只有四种可能：</p><script type="math/tex;mode=display">P_1(x) = 0且P_2(x) = 0</script><script type="math/tex;mode=display">P_1(x) \neq 0且P_2(x) \neq 0</script><script type="math/tex;mode=display">P_1(x) = 0且P_2(x) \neq 0</script><script type="math/tex;mode=display">P_1(x) \neq 且P_2(x) = 0</script><p>第一种对计算JS散度无贡献，第二种情况由于重叠部分可忽略所以贡献也为0，第三种情况对公式7右边第一个项的贡献是$\log \frac{P_2}{\frac{1}{2}(P_2 + 0)} = \log 2$，第四种情况与之类似，所以最终$JS(P_1||P_2) = \log 2$。</p><p>换句话说，无论$P_r$跟$P_g$是远在天边，还是近在眼前，只要它们俩没有一点重叠或者重叠部分可忽略，JS散度就固定是常数$\log 2$，<strong>而这对于梯度下降方法意味着——梯度为0</strong>！此时对于最优判别器来说，生成器肯定是得不到一丁点梯度信息的；即使对于接近最优的判别器来说，生成器也有很大机会面临梯度消失的问题。</p><p>但是$P_r$与$P_g$不重叠或重叠部分可忽略的可能性有多大？不严谨的答案是：非常大。比较严谨的答案是：<strong>当$P_r$与$P_g$的支撑集（support）是高维空间中的低维流形（manifold）时，$P_r$与$P_g$重叠部分测度（measure）为0的概率为1。</strong></p><p>不用被奇怪的术语吓得关掉页面，虽然论文给出的是严格的数学表述，但是直观上其实很容易理解。首先简单介绍一下这几个概念：</p><ul><li>支撑集（support）其实就是函数的非零部分子集，比如ReLU函数的支撑集就是$(0, +\infty)$，一个概率分布的支撑集就是所有概率密度非零部分的集合。</li><li>流形（manifold）是高维空间中曲线、曲面概念的拓广，我们可以在低维上直观理解这个概念，比如我们说三维空间中的一个曲面是一个二维流形，因为它的本质维度（intrinsic dimension）只有2，一个点在这个二维流形上移动只有两个方向的自由度。同理，三维空间或者二维空间中的一条曲线都是一个一维流形。</li><li>测度（measure）是高维空间中长度、面积、体积概念的拓广，可以理解为“超体积”。</li></ul><p>回过头来看第一句话，“当$P_r$与$P_g$的支撑集是高维空间中的低维流形时”，基本上是成立的。原因是GAN中的生成器一般是从某个低维（比如100维）的随机分布中采样出一个编码向量，再经过一个神经网络生成出一个高维样本（比如64x64的图片就有4096维）。当生成器的参数固定时，生成样本的概率分布虽然是定义在4096维的空间上，但它本身所有可能产生的变化已经被那个100维的随机分布限定了，其本质维度就是100，再考虑到神经网络带来的映射降维，最终可能比100还小，所以生成样本分布的支撑集就在4096维空间中构成一个最多100维的低维流形，“撑不满”整个高维空间。</p><p>“撑不满”就会导致真实分布与生成分布难以“碰到面”，这很容易在二维空间中理解：一方面，二维平面中随机取两条曲线，它们之间刚好存在重叠线段的概率为0；另一方面，虽然它们很大可能会存在交叉点，但是相比于两条曲线而言，交叉点比曲线低一个维度，长度（测度）为0，可忽略。三维空间中也是类似的，随机取两个曲面，它们之间最多就是比较有可能存在交叉线，但是交叉线比曲面低一个维度，面积（测度）是0，可忽略。从低维空间拓展到高维空间，就有了如下逻辑：因为一开始生成器随机初始化，所以$P_g$几乎不可能与$P_r$有什么关联，所以它们的支撑集之间的重叠部分要么不存在，要么就比$P_r$和$P_g$的最小维度还要低至少一个维度，故而测度为0。所谓“重叠部分测度为0”，就是上文所言“不重叠或者重叠部分可忽略”的意思。</p><p>我们就得到了WGAN前作中关于生成器梯度消失的第一个论证：<strong>在（近似）最优判别器下，最小化生成器的loss等价于最小化$P_r$与$P_g$之间的JS散度，而由于$P_r$与$P_g$几乎不可能有不可忽略的重叠，所以无论它们相距多远JS散度都是常数$\log 2$，最终导致生成器的梯度（近似）为0，梯度消失。</strong></p><p>接着作者写了很多公式定理从第二个角度进行论证，但是背后的思想也可以直观地解释：</p><ul><li>首先，$P_r$与$P_g$之间几乎不可能有不可忽略的重叠，所以无论它们之间的“缝隙”多狭小，都肯定存在一个最优分割曲面把它们隔开，最多就是在那些可忽略的重叠处隔不开而已。</li><li>由于判别器作为一个神经网络可以无限拟合这个分隔曲面，所以存在一个最优判别器，对几乎所有真实样本给出概率1，对几乎所有生成样本给出概率0，而那些隔不开的部分就是难以被最优判别器分类的样本，但是它们的测度为0，可忽略。</li><li>最优判别器在真实分布和生成分布的支撑集上给出的概率都是常数（1和0），导致生成器的loss梯度为0，梯度消失。</li></ul><p>有了这些理论分析，原始GAN不稳定的原因就彻底清楚了：判别器训练得太好，生成器梯度消失，生成器loss降不下去；判别器训练得不好，生成器梯度不准，四处乱跑。只有判别器训练得不好不坏才行，但是这个火候又很难把握，甚至在同一轮训练的前后不同阶段这个火候都可能不一样，所以GAN才那么难训练。</p><p>实验辅证如下：</p><blockquote><p>WGAN前作Figure 2。先分别将DCGAN训练1，20，25个epoch，然后固定生成器不动，判别器重新随机初始化从头开始训练，对于第一种形式的生成器loss产生的梯度可以打印出其尺度的变化曲线，可以看到随着判别器的训练，生成器的梯度均迅速衰减。注意y轴是对数坐标轴。</p></blockquote><a id="more"></a><h2 id="第二种原始GAN形式的问题"><a href="#第二种原始GAN形式的问题" class="headerlink" title="第二种原始GAN形式的问题"></a>第二种原始GAN形式的问题</h2><p><strong>一句话概括：最小化第二种生成器loss函数，会等价于最小化一个不合理的距离衡量，导致两个问题，一是梯度不稳定，二是collapse mode即多样性不足。</strong>WGAN前作又是从两个角度进行了论证，下面只说第一个角度，因为对于第二个角度我难以找到一个直观的解释方式，感兴趣的读者还是去看论文吧（逃）。</p><p>如前文所说，Ian Goodfellow提出的“- log D trick”是把生成器loss改成</p><script type="math/tex;mode=display">\mathbb{E}_{x\sim P_g}[- \log D(x)]</script><p>上文推导已经得到在最优判别器$D^*$下</p><script type="math/tex;mode=display">\mathbb{E}_{x\sim P_r}[\log D^*(x)]</script><p>我们可以把KL散度（注意下面是先g后r）变换成含<img src="http://www.zhihu.com/equation?tex=D%5E%2A" alt="D^*">的形式：</p><script type="math/tex;mode=display">\begin{align}KL(P_g || P_r) &= \mathbb{E}_{x \sim P_g} [\log \frac{P_g(x)}{P_r(x)}] \\&= \mathbb{E}_{x \sim P_g} [\log \frac{P_g(x) / (P_r(x) + P_g(x))}{P_r(x) / (P_r(x) + P_g(x))}] \\&= \mathbb{E}_{x \sim P_g} [\log \frac{1 - D^*(x)}{D^*(x)}] \\&= \mathbb{E}_{x \sim P_g} \log [1 - D^*(x)] -  \mathbb{E}_{x \sim P_g} \log D^*(x)\end{align} \\</script><p>可得最小化目标的等价变形</p><script type="math/tex;mode=display">\begin{align}\mathbb{E}_{x \sim P_g} [-\log D^*(x)] &=  KL(P_g || P_r) -  \mathbb{E}_{x \sim P_g} \log [1 - D^*(x)] \\&= KL(P_g || P_r) - 2JS(P_r || P_g) + 2\log 2 + \mathbb{E}_{x\sim P_r}[\log D^*(x)]\end{align}</script><p>注意上式最后两项不依赖于生成器G，最终得到最小化公式3等价于最小化</p><script type="math/tex;mode=display">KL(P_g || P_r) - 2JS(P_r || P_g)</script><p>这个等价最小化目标存在两个严重的问题。第一是它同时要最小化生成分布与真实分布的KL散度，却又要最大化两者的JS散度，一个要拉近，一个却要推远！这在直观上非常荒谬，在数值上则会导致梯度不稳定，这是后面那个JS散度项的毛病。</p><p>第二，即便是前面那个正常的$KL$散度项也有毛病。因为$KL$散度不是一个对称的衡量，$KL(P_g || P_r)$与$KL(P_r || P_g)$是有差别的。以前者为例</p><ul><li>当$P_g(x)\rightarrow 0$而$P_r(x)\rightarrow 1$时，$P_g(x) \log \frac{P_g(x)}{P_r(x)} \rightarrow 0$，对$KL(P_g || P_r)$贡献趋近0</li><li>当$P_g(x)\rightarrow 1$而$P_r(x)\rightarrow 0$时，$P_g(x) \log \frac{P_g(x)}{P_r(x)} \rightarrow +\infty$，对$KL(P_g || P_r)$贡献趋近正无穷</li></ul><p>换言之，$KL(P_g || P_r)$对于上面两种错误的惩罚是不一样的，第一种错误对应的是“生成器没能生成真实的样本”，惩罚微小；第二种错误对应的是“生成器生成了不真实的样本” ，惩罚巨大。第一种错误对应的是缺乏多样性，第二种错误对应的是缺乏准确性。<strong>这一放一打之下，生成器宁可多生成一些重复但是很“安全”的样本，也不愿意去生成多样性的样本，因为那样一不小心就会产生第二种错误，得不偿失。这种现象就是大家常说的collapse mode。</strong></p><p><strong>第一部分小结：在原始GAN的（近似）最优判别器下，第一种生成器loss面临梯度消失问题，第二种生成器loss面临优化目标荒谬、梯度不稳定、对多样性与准确性惩罚不平衡导致mode collapse这几个问题。</strong></p><p>实验辅证如下：</p><p><img src="https://pic4.zhimg.com/v2-b85cdb4d79d7618213c320cfb3a6d4bf_b.jpg" alt="img"></p><blockquote><p>WGAN前作Figure 3。先分别将DCGAN训练1，20，25个epoch，然后固定生成器不动，判别器重新随机初始化从头开始训练，对于第二种形式的生成器loss产生的梯度可以打印出其尺度的变化曲线，可以看到随着判别器的训练，蓝色和绿色曲线中生成器的梯度迅速增长，说明梯度不稳定，红线对应的是DCGAN相对收敛的状态，梯度才比较稳定。</p></blockquote><h2 id="第二部分：WGAN之前的一个过渡解决方案"><a href="#第二部分：WGAN之前的一个过渡解决方案" class="headerlink" title="第二部分：WGAN之前的一个过渡解决方案"></a>第二部分：WGAN之前的一个过渡解决方案</h2><p>原始GAN问题的根源可以归结为两点，一是等价优化的距离衡量（KL散度、JS散度）不合理，二是生成器随机初始化后的生成分布很难与真实分布有不可忽略的重叠。</p><p>WGAN前作其实已经针对第二点提出了一个解决方案，就是对生成样本和真实样本加噪声，直观上说，使得原本的两个低维流形“弥散”到整个高维空间，强行让它们产生不可忽略的重叠。而一旦存在重叠，JS散度就能真正发挥作用，此时如果两个分布越靠近，它们“弥散”出来的部分重叠得越多，JS散度也会越小而不会一直是一个常数，于是（在第一种原始GAN形式下）梯度消失的问题就解决了。在训练过程中，我们可以对所加的噪声进行退火（annealing），慢慢减小其方差，到后面两个低维流形“本体”都已经有重叠时，就算把噪声完全拿掉，JS散度也能照样发挥作用，继续产生有意义的梯度把两个低维流形拉近，直到它们接近完全重合。以上是对原文的直观解释。</p><p>在这个解决方案下我们可以放心地把判别器训练到接近最优，不必担心梯度消失的问题。而当判别器最优时，对公式9取反可得判别器的最小loss为</p><p>其中$P<em>{r+\epsilon}$和$P</em>{g+\epsilon}$分别是加噪后的真实分布与生成分布。反过来说，从最优判别器的loss可以反推出当前两个加噪分布的JS散度。两个加噪分布的JS散度可以在某种程度上代表两个原本分布的距离，也就是说可以通过最优判别器的loss反映训练进程！……真的有这样的好事吗？</p><p>并没有，因为加噪JS散度的具体数值受到噪声的方差影响，随着噪声的退火，前后的数值就没法比较了，所以它不能成为$P_r$和$P_g$距离的本质性衡量。</p><p>因为本文的重点是WGAN本身，所以WGAN前作的加噪方案简单介绍到这里，感兴趣的读者可以阅读原文了解更多细节。<strong>加噪方案是针对原始GAN问题的第二点根源提出的，解决了训练不稳定的问题，不需要小心平衡判别器训练的火候，可以放心地把判别器训练到接近最优，但是仍然没能够提供一个衡量训练进程的数值指标。但是WGAN本作就从第一点根源出发，用Wasserstein距离代替JS散度，同时完成了稳定训练和进程指标的问题！</strong></p><p>作者未对此方案进行实验验证。</p><h2 id="第三部分：Wasserstein距离的优越性质"><a href="#第三部分：Wasserstein距离的优越性质" class="headerlink" title="第三部分：Wasserstein距离的优越性质"></a>第三部分：Wasserstein距离的优越性质</h2><p>Wasserstein距离又叫Earth-Mover（EM）距离，定义如下：</p><script type="math/tex;mode=display">W(P_r, P_g) = \inf_{\gamma \sim \Pi (P_r, P_g)} \mathbb{E}_{(x, y) \sim \gamma} [||x - y||</script><p>解释如下：$ \Pi (P<em>r, P_g)$ 是 $P_r$ 和 $P_g$ 组合起来的所有可能的联合分布的集合，反过来说，$\Pi (P_r, P_g)$ 中每一个分布的边缘分布都是 $P_r$ 和 $P_g$ 。对于每一个可能的联合分布 $\gamma$ 而言，可以从中采样 $(x, y) \sim \gamma$ 得到一个真实样本 $x$ 和一个生成样本 $y$ ，并算出这对样本的距离 $||x-y||$ ，所以可以计算该联合分布 $\gamma$ 下样本对距离的期望值 $\mathbb{E}</em>{(x, y) \sim \gamma} [||x - y||$ 。在所有可能的联合分布中能够对这个期望值取到的下界 $\inf<em>{\gamma \sim \Pi (P_r, P_g)} \mathbb{E}</em>{(x, y) \sim \gamma} [||x - y||$ ，就定义为Wasserstein距离。</p><p>直观上可以把$\mathbb{E}_{(x, y) \sim \gamma} [||x - y||]$理解为在$\gamma$这个“路径规划”下把$P_r$这堆“沙土”挪到$P_g$“位置”所需的“消耗”，而$W(P_r, P_g)$就是“最优路径规划”下的“最小消耗”，所以才叫Earth-Mover（推土机）距离。</p><p><strong>Wasserstein距离相比KL散度、JS散度的优越性在于，即便两个分布没有重叠，Wasserstein距离仍然能够反映它们的远近。</strong>WGAN本作通过简单的例子展示了这一点。考虑如下二维空间中的两个分布$P_1$和$P_2$，$P_1$在线段AB上均匀分布，$P_2$在线段CD上均匀分布，通过控制参数$\theta$可以控制着两个分布的距离远近。</p><p><img src="https://pic3.zhimg.com/v2-c9cc9f8c879e7fe93d6e3bfafd41bd8a_b.jpg" alt="img"></p><p>此时容易得到（读者可自行验证）</p><script type="math/tex;mode=display">KL(P_1 || P_2) = KL(P_1 || P_2) =\begin{cases}+\infty & \text{if $\theta \neq 0$} \\0 & \text{if $\theta = 0$}\end{cases}</script><script type="math/tex;mode=display">JS(P_1||P_2)=\begin{cases}\log 2 & \text{if $\theta \neq 0$} \\0 & \text{if $\theta - 0$}\end{cases}</script><script type="math/tex;mode=display">W(P_0, P_1) = |\theta|</script><p>KL散度和JS散度是突变的，要么最大要么最小，<strong>Wasserstein距离却是平滑的</strong>，如果我们要用梯度下降法优化$\theta$这个参数，前两者根本提供不了梯度，Wasserstein距离却可以。类似地，在高维空间中如果两个分布不重叠或者重叠部分可忽略，则KL和JS既反映不了远近，也提供不了梯度，<strong>但是Wasserstein却可以提供有意义的梯度</strong>。</p><h2 id="第四部分：从Wasserstein距离到WGAN"><a href="#第四部分：从Wasserstein距离到WGAN" class="headerlink" title="第四部分：从Wasserstein距离到WGAN"></a>第四部分：从Wasserstein距离到WGAN</h2><p>既然Wasserstein距离有如此优越的性质，如果我们能够把它定义为生成器的loss，不就可以产生有意义的梯度来更新生成器，使得生成分布被拉向真实分布吗？</p><p>没那么简单，因为Wasserstein距离定义中的$\inf_{\gamma \sim \Pi (P_r, P_g)}$没法直接求解，不过没关系，作者用了一个已有的定理把它变换为如下形式</p><script type="math/tex;mode=display">W(P_r, P_g) = \frac{1}{K} \sup_{||f||_L \leq K} \mathbb{E}_{x \sim P_r} [f(x)</script><p>证明过程被作者丢到论文附录中了，我们也姑且不管，先看看上式究竟说了什么。</p><p>首先需要介绍一个概念——Lipschitz连续。它其实就是在一个连续函数$f$上面额外施加了一个限制，要求存在一个常数$K\geq 0$使得定义域内的任意两个元素$x_1$和$x_2$都满足</p><p>此时称函数$f$的Lipschitz常数为$K$。</p><p>简单理解，比如说$f$的定义域是实数集合，那上面的要求就等价于$f$的导函数绝对值不超过$K$。再比如说$\log (x)$就不是Lipschitz连续，因为它的导函数没有上界。Lipschitz连续条件限制了一个连续函数的最大局部变动幅度。</p><p>公式13的意思就是在要求函数$f$的Lipschitz常数$||f||<em>L$不超过$K$的条件下，对所有可能满足条件的$f$取到$\mathbb{E}</em>{x \sim P_r} [f(x)]$的上界，然后再除以$K$。特别地，我们可以用一组参数$w$来定义一系列可能的函数$f_w$，此时求解公式13可以近似变成求解如下形式</p><script type="math/tex;mode=display">K \cdot W(P_r, P_g) \approx \max_{w: |f_w|_L \leq K} \mathbb{E}_{x \sim P_r} [f_w(x)</script><p>再用上我们搞深度学习的人最熟悉的那一套，不就可以把$f$用一个带参数$w$的神经网络来表示嘛！由于神经网络的拟合能力足够强大，我们有理由相信，这样定义出来的一系列$f<em>w$虽然无法囊括所有可能，但是也足以高度近似公式13要求的那个$sup</em>{||f||_L \leq K} $了。</p><p>最后，还不能忘了满足 $||f<em>w||_L \leq K$ 这个限制。我们其实不关心具体的K是多少，只要它不是正无穷就行，因为它只是会使得梯度变大K倍，并不会影响梯度的方向。所以作者采取了一个非常简单的做法，就是限制神经网络$f</em>\theta$的所有参数$w_i$的不超过某个范围$[-c, c]$，比如$w_i \in [- 0.01, 0.01]$，此时关于输入样本x的导数$\frac{\partial f_w}{\partial x}$也不会超过某个范围，所以一定存在某个不知道的常数K使得$f_w$的局部变动幅度不会超过它，Lipschitz连续条件得以满足。具体在算法实现中，只需要每次更新完$w$后把它clip回这个范围就可以了。</p><p><strong>到此为止，我们可以构造一个含参数$w$、最后一层不是非线性激活层的判别器网络$f_w$，在限制$w$不超过某个范围的条件下，使得</strong></p><script type="math/tex;mode=display">L = \mathbb{E}_{x \sim P_r} [f_w(x)</script><p><strong>尽可能取到最大，此时L就会近似真实分布与生成分布之间的Wasserstein距离（忽略常数倍数K）。注意原始GAN的判别器做的是真假二分类任务，所以最后一层是sigmoid，但是现在WGAN中的判别器$f_w$做的是近似拟合Wasserstein距离，属于回归任务，所以要把最后一层的sigmoid拿掉。</strong></p><p><strong>接下来生成器要近似地最小化Wasserstein距离，可以最小化$L$，由于Wasserstein距离的优良性质，我们不需要担心生成器梯度消失的问题。再考虑到$L$的第一项与生成器无关，就得到了WGAN的两个loss。</strong></p><script type="math/tex;mode=display">\mathbb{E}_{x \sim P_g} [f_w(x)]</script><p>（WGAN生成器loss函数）</p><script type="math/tex;mode=display">\mathbb{E}_{x \sim P_g} [f_w(x)</script><p>（WGAN判别器loss函数）</p><p><strong>可以指示训练进程，其数值越小，表示真实分布与生成分布的Wasserstein距离越小，GAN训练得越好。</strong></p><p>WGAN完整的算法流程已经贴过了，为了方便读者此处再贴一遍：</p><p><img src="https://pic1.zhimg.com/v2-6be6e2ef3d15c4b10c2a943e9bf4db70_b.jpg" alt="img">上文说过，WGAN与原始</p><p>GAN第一种形式相比，只改了四点：</p><ul><li>判别器最后一层去掉sigmoid</li><li>生成器和判别器的loss不取log</li><li>每次更新判别器的参数之后把它们的绝对值截断到不超过一个固定常数c</li><li>不要用基于动量的优化算法（包括momentum和Adam），推荐RMSProp，SGD也行</li></ul><p>前三点都是从理论分析中得到的，已经介绍完毕；第四点却是作者从实验中发现的，属于trick，相对比较“玄”。作者发现如果使用Adam，判别器的loss有时候会崩掉，当它崩掉时，Adam给出的更新方向与梯度方向夹角的cos值就变成负数，更新方向与梯度方向南辕北辙，这意味着判别器的loss梯度是不稳定的，所以不适合用Adam这类基于动量的优化算法。作者改用RMSProp之后，问题就解决了，因为RMSProp适合梯度不稳定的情况。</p><p>对WGAN作者做了不少实验验证，本文只提比较重要的三点。第一，判别器所近似的Wasserstein距离与生成器的生成图片质量高度相关，如下所示（此即题图）：</p><p><img src="https://pic3.zhimg.com/v2-3cfe84e6b6b58c00e013975fe649398e_b.jpg" alt="img">第二，WGAN如果用类似</p><p>DCGAN架构，生成图片的效果与DCGAN差不多：</p><p><img src="https://pic2.zhimg.com/v2-5fdccfd580ea6f96626948cf8698a831_b.jpg" alt="img"></p><p>但是厉害的地方在于WGAN不用DCGAN各种特殊的架构设计也能做到不错的效果，比如如果大家一起拿掉Batch Normalization的话， DCGAN就崩了：</p><p><img src="https://pic1.zhimg.com/v2-8adc9f92a9c6d5a43c00da4411a67c34_b.jpg" alt="img"></p><p>如果WGAN和原始GAN都使用多层全连接网络（MLP），不用CNN，WGAN质量会变差些，但是原始GAN不仅质量变得更差，而且还出现了collapse mode，即多样性不足：</p><p><img src="https://pic3.zhimg.com/v2-972a7823c50e7c8f5edba9ee7a252152_b.jpg" alt="img"></p><p>第三，在所有WGAN的实验中未观察到collapse mode，作者也只说应该是解决了，</p><p>最后补充一点论文没提到，但是我个人觉得比较微妙的问题。判别器所近似的Wasserstein距离能够用来指示单次训练中的训练进程，这个没错；接着作者又说它可以用于比较多次训练进程，指引调参，我倒是觉得需要小心些。比如说我下次训练时改了判别器的层数、节点数等超参，判别器的拟合能力就必然有所波动，再比如说我下次训练时改了生成器两次迭代之间，判别器的迭代次数，这两种常见的变动都会使得Wasserstein距离的拟合误差就与上次不一样。<strong>那么这个拟合误差的变动究竟有多大，或者说不同的人做实验时判别器的拟合能力或迭代次数相差实在太大，那它们之间还能不能直接比较上述指标，我都是存疑的。</strong></p><p>评论区的知友<a href="http://www.zhihu.com/people/822cec1d495864da61b8e7ff62aaef23" target="_blank" rel="external">@Minjie Xu</a> 进一步指出，相比于判别器迭代次数的改变，<strong>对判别器架构超参的改变会直接影响到对应的Lipschitz常数<img src="http://www.zhihu.com/equation?tex=K" alt="K">，进而改变近似Wasserstein距离的倍数，前后两轮训练的指标就肯定不能比较了，</strong>这是需要在实际应用中注意的。对此我想到了一个工程化的解决方式，不是很优雅：取同样一对生成分布和真实分布，让前后两个不同架构的判别器各自拟合到收敛，看收敛到的指标差多少倍，可以近似认为是后面的<img src="http://www.zhihu.com/equation?tex=K_2" alt="K_2">相对前面<img src="http://www.zhihu.com/equation?tex=K_1" alt="K_1">的变化倍数，于是就可以用这个变化倍数校正前后两轮训练的指标。</p><h2 id="第五部分：总结"><a href="#第五部分：总结" class="headerlink" title="第五部分：总结"></a>第五部分：总结</h2><p>WGAN前作分析了Ian Goodfellow提出的原始GAN两种形式各自的问题，第一种形式等价在最优判别器下等价于最小化生成分布与真实分布之间的JS散度，由于随机生成分布很难与真实分布有不可忽略的重叠以及JS散度的突变特性，使得生成器面临梯度消失的问题；第二种形式在最优判别器下等价于既要最小化生成分布与真实分布直接的KL散度，又要最大化其JS散度，相互矛盾，导致梯度不稳定，而且KL散度的不对称性使得生成器宁可丧失多样性也不愿丧失准确性，导致collapse mode现象。</p><p>WGAN前作针对分布重叠问题提出了一个过渡解决方案，通过对生成样本和真实样本加噪声使得两个分布产生重叠，理论上可以解决训练不稳定的问题，可以放心训练判别器到接近最优，但是未能提供一个指示训练进程的可靠指标，也未做实验验证。</p><p>WGAN本作引入了Wasserstein距离，由于它相对KL散度与JS散度具有优越的平滑特性，理论上可以解决梯度消失问题。接着通过数学变换将Wasserstein距离写成可求解的形式，利用一个参数数值范围受限的判别器神经网络来最大化这个形式，就可以近似Wasserstein距离。在此近似最优判别器下优化生成器使得Wasserstein距离缩小，就能有效拉近生成分布与真实分布。WGAN既解决了训练不稳定的问题，也提供了一个可靠的训练进程指标，而且该指标确实与生成样本的质量高度相关。作者对WGAN进行了实验验证。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原帖地址：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/25071913&quot;&gt;https://zhuanlan.zhihu.com/p/25071913&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;本文后续：&lt;a href=&quot;https://www.zhihu.com/question/52602529/answer/158727900&quot;&gt;Wasserstein GAN最新进展：从weight clipping到gradient penalty，更加先进的Lipschitz限制手法&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在GAN的相关研究如火如荼甚至可以说是泛滥的今天，一篇新鲜出炉的arXiv论文《&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//arxiv.org/abs/1701.07875&quot;&gt;Wasserstein GAN&lt;/a&gt;》却在Reddit的Machine Learning频道火了，连Goodfellow都&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/MachineLearning/comments/5qxoaz/r_170107875_wasserstein_gan/&quot;&gt;在帖子里和大家热烈讨论&lt;/a&gt;，这篇论文究竟有什么了不得的地方呢？&lt;/p&gt;&lt;p&gt;要知道自从&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//arxiv.org/abs/1406.2661&quot;&gt;2014年Ian Goodfellow提出&lt;/a&gt;以来，GAN就存在着训练困难、生成器和判别器的loss无法指示训练进程、生成样本缺乏多样性等问题。从那时起，很多论文都在尝试解决，但是效果不尽人意，比如最有名的一个改进&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//arxiv.org/abs/1511.06434&quot;&gt;DCGAN&lt;/a&gt;依靠的是对判别器和生成器的架构进行实验枚举，最终找到一组比较好的网络架构设置，但是实际上是治标不治本，没有彻底解决问题。而今天的主角Wasserstein GAN（下面简称WGAN）成功地做到了以下爆炸性的几点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;彻底解决GAN训练不稳定的问题，不再需要小心平衡生成器和判别器的训练程度&lt;/li&gt;&lt;li&gt;基本解决了collapse mode的问题，确保了生成样本的多样性&lt;/li&gt;&lt;li&gt;训练过程中终于有一个像交叉熵、准确率这样的数值来指示训练的进程，这个数值越小代表GAN训练得越好，代表生成器产生的图像质量越高（如题图所示）&lt;/li&gt;&lt;li&gt;以上一切好处不需要精心设计的网络架构，最简单的多层全连接网络就可以做到&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;那以上好处来自哪里？这就是令人拍案叫绝的部分了——实际上作者整整花了两篇论文，在第一篇《&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//arxiv.org/abs/1701.04862&quot;&gt;Towards Principled Methods for Training Generative Adversarial Networks&lt;/a&gt;》里面推了一堆公式定理，从理论上分析了原始GAN的问题所在，从而针对性地给出了改进要点；在这第二篇《&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//arxiv.org/abs/1701.07875&quot;&gt;Wasserstein GAN&lt;/a&gt;》里面，又再从这个改进点出发推了一堆公式定理，最终给出了改进的算法实现流程，&lt;strong&gt;而改进后相比原始GAN的算法实现流程却只改了四点&lt;/strong&gt;：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;判别器最后一层去掉sigmoid&lt;/li&gt;&lt;li&gt;生成器和判别器的loss不取log&lt;/li&gt;&lt;li&gt;每次更新判别器的参数之后把它们的绝对值截断到不超过一个固定常数c&lt;/li&gt;&lt;li&gt;不要用基于动量的优化算法（包括momentum和Adam），推荐RMSProp，SGD也行&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;算法截图如下：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-6be6e2ef3d15c4b10c2a943e9bf4db70_b.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;&lt;p&gt;改动是如此简单，效果却惊人地好，以至于Reddit上不少人在感叹：就这样？没有别的了？ 太简单了吧！这些反应让我想起了一个颇有年头的鸡汤段子，说是一个工程师在电机外壳上用粉笔划了一条线排除了故障，要价一万美元——画一条线，1美元；知道在哪画线，9999美元。上面这四点改进就是作者Martin Arjovsky划的简简单单四条线，对于工程实现便已足够，但是知道在哪划线，背后却是精巧的数学分析，而这也是本文想要整理的内容。&lt;/p&gt;&lt;p&gt;本文内容分为五个部分：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;原始GAN究竟出了什么问题？（此部分较长）&lt;/li&gt;&lt;li&gt;WGAN之前的一个过渡解决方案&lt;/li&gt;&lt;li&gt;Wasserstein距离的优越性质&lt;/li&gt;&lt;li&gt;从Wasserstein距离到WGAN&lt;/li&gt;&lt;li&gt;总结&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;理解原文的很多公式定理需要对测度论、 拓扑学等数学知识有所掌握，本文会从直观的角度对每一个重要公式进行解读，有时通过一些低维的例子帮助读者理解数学背后的思想，所以不免会失于严谨，如有引喻不当之处，欢迎在评论中指出。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;以下简称《Wassertein GAN》为“WGAN本作”，简称《Towards Principled Methods for Training Generative Adversarial Networks》为“WGAN前作”。&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;WGAN源码实现：martinarjovsky/WassersteinGAN&lt;/em&gt;&lt;/p&gt;&lt;h2 id=&quot;第一部分：原始GAN究竟出了什么问题？&quot;&gt;&lt;a href=&quot;#第一部分：原始GAN究竟出了什么问题？&quot; class=&quot;headerlink&quot; title=&quot;第一部分：原始GAN究竟出了什么问题？&quot;&gt;&lt;/a&gt;第一部分：原始GAN究竟出了什么问题？&lt;/h2&gt;&lt;p&gt;回顾一下，原始GAN中判别器要最小化如下损失函数，尽可能把真实样本分为正例，生成样本分为负例：&lt;/p&gt;&lt;script type=&quot;math/tex;mode=display&quot;&gt;-\mathbb{E}_{x \sim P_r}[log D(x)] - \mathbb{E}_{x \sim P_{g}}[log(1-D(x))]&lt;/script&gt;&lt;p&gt;其中$P_r$是真实样本分布，$P_g$是由生成器产生的样本分布。对于生成器，Goodfellow一开始提出来一个损失函数，后来又提出了一个改进的损失函数，分别是&lt;/p&gt;&lt;script type=&quot;math/tex;mode=display&quot;&gt;\mathbb{E}_{x \sim P_g}[log(1-D(x))]&lt;/script&gt;&lt;script type=&quot;math/tex;mode=display&quot;&gt;\mathbb{E}_{x \sim P_g}[-log D(x)]&lt;/script&gt;&lt;p&gt;后者在WGAN两篇论文中称为“the - log D alternative”或“the - log D trick”。WGAN前作分别分析了这两种形式的原始GAN各自的问题所在，下面分别说明。&lt;/p&gt;&lt;h2 id=&quot;第一种原始GAN形式的问题&quot;&gt;&lt;a href=&quot;#第一种原始GAN形式的问题&quot; class=&quot;headerlink&quot; title=&quot;第一种原始GAN形式的问题&quot;&gt;&lt;/a&gt;第一种原始GAN形式的问题&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;一句话概括：判别器越好，生成器梯度消失越严重。&lt;/strong&gt;WGAN前作从两个角度进行了论证，第一个角度是从生成器的等价损失函数切入的。&lt;/p&gt;&lt;p&gt;首先从公式1可以得到，在生成器G固定参数时最优的判别器D应该是什么。对于一个具体的样本$x$，它可能来自真实分布也可能来自生成分布，它对公式1损失函数的贡献是&lt;/p&gt;&lt;script type=&quot;math/tex;mode=display&quot;&gt;- P_r(x)logD(x) - p_g(x)log[1 - D(x)]&lt;/script&gt;&lt;p&gt;令其关于$D(x)$的导数为0，得&lt;/p&gt;&lt;script type=&quot;math/tex;mode=display&quot;&gt;-\frac{P_r(x)}{D(x)} + \frac{P_g(x)}{1 - D(x)} = 0&lt;/script&gt;&lt;p&gt;化简得最优判别器为：&lt;/p&gt;&lt;script type=&quot;math/tex;mode=display&quot;&gt;D^{\star}(x) = \frac{P_r(x)}{P_r(x) + P_g(x)}&lt;/script&gt;&lt;p&gt;这个结果从直观上很容易理解，就是看一个样本$x$来自真实分布和生成分布的可能性的相对比例。如果$P_r(x) = 0$且$P_g(x) \neq 0$，最优判别器就应该非常自信地给出概率0；如果$P_r(x) = P_g(x)$，说明该样本是真是假的可能性刚好一半一半，此时最优判别器也应该给出概率0.5。&lt;/p&gt;&lt;p&gt;然而GAN训练有一个trick，就是别把判别器训练得太好，否则在实验中生成器会完全学不动（loss降不下去），为了探究背后的原因，我们就可以看看在极端情况——判别器最优时，生成器的损失函数变成什么。给公式2加上一个不依赖于生成器的项，使之变成&lt;/p&gt;&lt;script type=&quot;math/tex;mode=display&quot;&gt;\mathbb{E}_{x \sim P_r}[log D(x)] - \mathbb{E}_{x \sim P_{g}}[log(1-D(x))]&lt;/script&gt;&lt;p&gt;注意，最小化这个损失函数等价于最小化公式2，而且它刚好是判别器损失函数的反。代入最优判别器即公式4，再进行简单的变换可以得到&lt;/p&gt;&lt;script type=&quot;math/tex;mode=display&quot;&gt;\mathbb{E}_{x \sim P_r} \log \frac{P_r(x)}{\frac{1}{2}[P_r(x) + P_g(x)]} + \mathbb{E}_{x \sim P_g} \log \frac{P_g(x)}{\frac{1}{2}[P_r(x) + P_g(x)]} - 2\log 2&lt;/script&gt;&lt;p&gt;变换成这个样子是为了引入Kullback–Leibler divergence（简称KL散度）和Jensen-Shannon divergence（简称JS散度）这两个重要的相似度衡量指标，后面的主角之一Wasserstein距离，就是要来吊打它们两个的。所以接下来介绍这两个重要的配角——KL散度和JS散度：&lt;/p&gt;&lt;script type=&quot;math/tex;mode=display&quot;&gt;KL(P_1||P_2) = \mathbb{E}_{x \sim P_1} \log \frac{P_1}{P_2}&lt;/script&gt;&lt;script type=&quot;math/tex;mode=display&quot;&gt;JS(P_1 || P_2) = \frac{1}{2}KL(P_1||\frac{P_1 + P_2}{2}) + \frac{1}{2}KL(P_2||\frac{P_1 + P_2}{2})&lt;/script&gt;&lt;p&gt;于是公式5就可以继续写成&lt;/p&gt;&lt;script type=&quot;math/tex;mode=display&quot;&gt;2JS(P_r || P_g) - 2\log 2&lt;/script&gt;&lt;p&gt;到这里读者可以先喘一口气，看看目前得到了什么结论：&lt;strong&gt;根据原始GAN定义的判别器loss，我们可以得到最优判别器的形式；而在最优判别器的下，我们可以把原始GAN定义的生成器loss等价变换为最小化真实分布$P_r$与生成分布$P_g$之间的JS散度。我们越训练判别器，它就越接近最优，最小化生成器的loss也就会越近似于最小化$P_r$和$P_g$之间的JS散度。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;问题就出在这个JS散度上。我们会希望如果两个分布之间越接近它们的JS散度越小，我们通过优化JS散度就能将$P_g$“拉向”$P_r$，最终以假乱真。这个希望在两个分布有所重叠的时候是成立的，但是如果两个分布完全没有重叠的部分，或者它们重叠的部分可忽略（下面解释什么叫可忽略），它们的JS散度是多少呢？&lt;/p&gt;&lt;p&gt;答案是$\log 2$，因为对于任意一个x只有四种可能：&lt;/p&gt;&lt;script type=&quot;math/tex;mode=display&quot;&gt;P_1(x) = 0且P_2(x) = 0&lt;/script&gt;&lt;script type=&quot;math/tex;mode=display&quot;&gt;P_1(x) \neq 0且P_2(x) \neq 0&lt;/script&gt;&lt;script type=&quot;math/tex;mode=display&quot;&gt;P_1(x) = 0且P_2(x) \neq 0&lt;/script&gt;&lt;script type=&quot;math/tex;mode=display&quot;&gt;P_1(x) \neq 且P_2(x) = 0&lt;/script&gt;&lt;p&gt;第一种对计算JS散度无贡献，第二种情况由于重叠部分可忽略所以贡献也为0，第三种情况对公式7右边第一个项的贡献是$\log \frac{P_2}{\frac{1}{2}(P_2 + 0)} = \log 2$，第四种情况与之类似，所以最终$JS(P_1||P_2) = \log 2$。&lt;/p&gt;&lt;p&gt;换句话说，无论$P_r$跟$P_g$是远在天边，还是近在眼前，只要它们俩没有一点重叠或者重叠部分可忽略，JS散度就固定是常数$\log 2$，&lt;strong&gt;而这对于梯度下降方法意味着——梯度为0&lt;/strong&gt;！此时对于最优判别器来说，生成器肯定是得不到一丁点梯度信息的；即使对于接近最优的判别器来说，生成器也有很大机会面临梯度消失的问题。&lt;/p&gt;&lt;p&gt;但是$P_r$与$P_g$不重叠或重叠部分可忽略的可能性有多大？不严谨的答案是：非常大。比较严谨的答案是：&lt;strong&gt;当$P_r$与$P_g$的支撑集（support）是高维空间中的低维流形（manifold）时，$P_r$与$P_g$重叠部分测度（measure）为0的概率为1。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;不用被奇怪的术语吓得关掉页面，虽然论文给出的是严格的数学表述，但是直观上其实很容易理解。首先简单介绍一下这几个概念：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;支撑集（support）其实就是函数的非零部分子集，比如ReLU函数的支撑集就是$(0, +\infty)$，一个概率分布的支撑集就是所有概率密度非零部分的集合。&lt;/li&gt;&lt;li&gt;流形（manifold）是高维空间中曲线、曲面概念的拓广，我们可以在低维上直观理解这个概念，比如我们说三维空间中的一个曲面是一个二维流形，因为它的本质维度（intrinsic dimension）只有2，一个点在这个二维流形上移动只有两个方向的自由度。同理，三维空间或者二维空间中的一条曲线都是一个一维流形。&lt;/li&gt;&lt;li&gt;测度（measure）是高维空间中长度、面积、体积概念的拓广，可以理解为“超体积”。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;回过头来看第一句话，“当$P_r$与$P_g$的支撑集是高维空间中的低维流形时”，基本上是成立的。原因是GAN中的生成器一般是从某个低维（比如100维）的随机分布中采样出一个编码向量，再经过一个神经网络生成出一个高维样本（比如64x64的图片就有4096维）。当生成器的参数固定时，生成样本的概率分布虽然是定义在4096维的空间上，但它本身所有可能产生的变化已经被那个100维的随机分布限定了，其本质维度就是100，再考虑到神经网络带来的映射降维，最终可能比100还小，所以生成样本分布的支撑集就在4096维空间中构成一个最多100维的低维流形，“撑不满”整个高维空间。&lt;/p&gt;&lt;p&gt;“撑不满”就会导致真实分布与生成分布难以“碰到面”，这很容易在二维空间中理解：一方面，二维平面中随机取两条曲线，它们之间刚好存在重叠线段的概率为0；另一方面，虽然它们很大可能会存在交叉点，但是相比于两条曲线而言，交叉点比曲线低一个维度，长度（测度）为0，可忽略。三维空间中也是类似的，随机取两个曲面，它们之间最多就是比较有可能存在交叉线，但是交叉线比曲面低一个维度，面积（测度）是0，可忽略。从低维空间拓展到高维空间，就有了如下逻辑：因为一开始生成器随机初始化，所以$P_g$几乎不可能与$P_r$有什么关联，所以它们的支撑集之间的重叠部分要么不存在，要么就比$P_r$和$P_g$的最小维度还要低至少一个维度，故而测度为0。所谓“重叠部分测度为0”，就是上文所言“不重叠或者重叠部分可忽略”的意思。&lt;/p&gt;&lt;p&gt;我们就得到了WGAN前作中关于生成器梯度消失的第一个论证：&lt;strong&gt;在（近似）最优判别器下，最小化生成器的loss等价于最小化$P_r$与$P_g$之间的JS散度，而由于$P_r$与$P_g$几乎不可能有不可忽略的重叠，所以无论它们相距多远JS散度都是常数$\log 2$，最终导致生成器的梯度（近似）为0，梯度消失。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;接着作者写了很多公式定理从第二个角度进行论证，但是背后的思想也可以直观地解释：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;首先，$P_r$与$P_g$之间几乎不可能有不可忽略的重叠，所以无论它们之间的“缝隙”多狭小，都肯定存在一个最优分割曲面把它们隔开，最多就是在那些可忽略的重叠处隔不开而已。&lt;/li&gt;&lt;li&gt;由于判别器作为一个神经网络可以无限拟合这个分隔曲面，所以存在一个最优判别器，对几乎所有真实样本给出概率1，对几乎所有生成样本给出概率0，而那些隔不开的部分就是难以被最优判别器分类的样本，但是它们的测度为0，可忽略。&lt;/li&gt;&lt;li&gt;最优判别器在真实分布和生成分布的支撑集上给出的概率都是常数（1和0），导致生成器的loss梯度为0，梯度消失。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;有了这些理论分析，原始GAN不稳定的原因就彻底清楚了：判别器训练得太好，生成器梯度消失，生成器loss降不下去；判别器训练得不好，生成器梯度不准，四处乱跑。只有判别器训练得不好不坏才行，但是这个火候又很难把握，甚至在同一轮训练的前后不同阶段这个火候都可能不一样，所以GAN才那么难训练。&lt;/p&gt;&lt;p&gt;实验辅证如下：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;WGAN前作Figure 2。先分别将DCGAN训练1，20，25个epoch，然后固定生成器不动，判别器重新随机初始化从头开始训练，对于第一种形式的生成器loss产生的梯度可以打印出其尺度的变化曲线，可以看到随着判别器的训练，生成器的梯度均迅速衰减。注意y轴是对数坐标轴。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
      <category term="GAN" scheme="http://yoursite.com/tags/GAN/"/>
    
  </entry>
  
  <entry>
    <title>Generative Adversarial Networks (GANs) in 50 lines of code (PyTorch)</title>
    <link href="http://yoursite.com/2017/04/28/Generative-Adversarial-Networks-GANs-in-50-lines-of-code-PyTorch/"/>
    <id>http://yoursite.com/2017/04/28/Generative-Adversarial-Networks-GANs-in-50-lines-of-code-PyTorch/</id>
    <published>2017-04-28T11:46:55.000Z</published>
    <updated>2017-04-28T11:53:35.942Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://medium.com/@devnag/generative-adversarial-networks-gans-in-50-lines-of-code-pytorch-e81b79659e3f" target="_blank" rel="external">Source Blog</a></p><p>PyTorch Install: <a href="http://pytorch.org/" target="_blank" rel="external">http://pytorch.org/</a></p><p>The models play two distinct (literally, <em>adversarial</em>) roles. Given some real data set <strong>R</strong>, <strong>G</strong> is the <em>generator</em>, trying to create fake data that looks just like the genuine data, while <strong>D</strong> is the <em>discriminator</em>, getting data from either the real set or <strong>G </strong>and labeling the difference. Goodfellow’s metaphor (and a fine one it is) was that <strong>G</strong> was like a team of forgers trying to match real paintings with their output, while <strong>D</strong> was the team of detectives trying to tell the difference. (Except that in this case, the forgers <strong>G</strong> never get to see the original data — only the judgments of <strong>D</strong>. They’re like <em>blind</em> forgers.)</p><p><img src="https://cdn-images-1.medium.com/max/800/1*-gFsbymY9oJUQJ-A3GTfeg.png" alt="img"></p><p>In the ideal case, both <strong>D</strong> and <strong>G</strong> would get better over time until <strong>G</strong> had essentially become a “master forger” of the genuine article and <strong>D</strong> was at a loss, “unable to differentiate between the two distributions.”</p><p>In practice, what Goodfellow had shown was that <strong>G</strong> would be able to perform a form of <em>unsupervised learning</em> on the original dataset, finding some way of representing that data in a (possibly) much lower-dimensional manner. And as Yann LeCun famously stated, <a href="https://www.facebook.com/yann.lecun/posts/10153426023477143" target="_blank" rel="external">unsupervised learning is the “cake” of true AI</a>.</p><hr><p>This powerful technique seems like it must require a <strong>metric ton</strong> of code just to get started, right? Nope. Using <a href="http://pytorch.org/" target="_blank" rel="external">PyTorch</a>, we can actually create a very simple GAN in under 50 lines of code. There are really only 5 components to think about:</p><ul><li><strong>R</strong>: The original, genuine data set</li><li><strong>I</strong>: The random noise that goes into the generator as a source of entropy</li><li><strong>G</strong>: The generator which tries to copy/mimic the original data set</li><li><strong>D</strong>: The discriminator which tries to tell apart <strong>G</strong>’s output from <strong>R</strong></li><li>The actual ‘training’ loop where we teach <strong>G</strong> to trick <strong>D</strong> and <strong>D </strong>to <em>beware</em> <strong>G</strong>.</li></ul><p><strong>1.) R</strong>: In our case, we’ll start with the simplest possible <strong>R</strong> — a bell curve. This function takes a mean and a standard deviation and returns a function which provides the right shape of sample data from a Gaussian with those parameters. In our sample code, we’ll use a mean of 4.0 and a standard deviation of 1.25.</p><p><img src="https://cdn-images-1.medium.com/max/800/1*xsuE-nhsJOzk9lfI3rayuw.png" alt="img"></p><p><strong>2.) I</strong>: The input into the generator is also random, but to make our job a little bit harder, let’s use a uniform distribution rather than a normal one. This means that our model <strong>G</strong> can’t simply shift/scale the input to copy <strong>R, </strong>but has to reshape the data in a non-linear way.</p><p><img src="https://cdn-images-1.medium.com/max/800/1*wuhEVnK25V3zXQzuCwFDAg.png" alt="img"></p><p><strong>3.) G</strong>: The generator is a standard feedforward graph — two hidden layers, three linear maps. We’re using an <a href="http://pytorch.org/docs/nn.html#elu" target="_blank" rel="external">ELU (exponential linear unit)</a> because<a href="https://www.linkedin.com/pulse/exponential-linear-units-elu-deep-network-learning-martin-heusel" target="_blank" rel="external">they’re the new black, yo.</a> <strong>G</strong> is going to get the uniformly distributed data samples from <strong>I</strong> and somehow mimic the normally distributed samples from <strong>R</strong>.</p><p><img src="https://cdn-images-1.medium.com/max/800/1*NM6wfbhZLSiVnCX33f7eBw.png" alt="img"></p><p><strong>4.) D</strong>: The discriminator code is very similar to <strong>G</strong>’s generator code; a feedforward graph with two hidden layers and three linear maps. It’s going to get samples from either <strong>R</strong> or <strong>G</strong> and will output a single scalar between 0 and 1, interpreted as ‘fake’ vs. ‘real’. This is about as milquetoast as a neural net can get.</p><p><img src="https://cdn-images-1.medium.com/max/800/1*5x9hrP5oozp3e2pm-Mtqmw.png" alt="img"></p><p><strong>5.)</strong> Finally, the training loop alternates between two modes: first training <strong>D</strong> on real data vs. fake data, with <em>accurate</em> labels (think of this as <a href="https://en.wikipedia.org/wiki/Police_Academy_%28film%29" target="_blank" rel="external">Police Academy</a>); and then training <strong>G</strong> to fool <strong>D</strong>, with <em>inaccurate</em> labels (this is more like those preparation montages from <a href="https://en.wikipedia.org/wiki/Ocean%27s_Eleven" target="_blank" rel="external">Ocean’s Eleven</a>). It’s a fight between good and evil, people.</p><p><img src="https://cdn-images-1.medium.com/max/1000/1*MESLBNZIWxJp553TWKUADQ.png" alt="img"></p><p>Even if you haven’t seen PyTorch before, you can probably tell what’s going on. In the first (green) section, we push both types of data through <strong>D</strong> and apply a differentiable criterion to <strong>D</strong>’s guesses vs. the actual labels. That pushing is the ‘forward’ step; we then call ‘backward()’ explicitly in order to calculate gradients, which are then used to update <strong>D</strong>’s parameters in the d_optimizer step() call. <strong>G</strong> is used but isn’t trained here.</p><p>Then in the last (red) section, we do the same thing for <strong>G</strong> — note that we also run <strong>G</strong>’s output through <strong>D</strong> (we’re essentially giving the forger a detective to practice on) but we <em>do not optimize or change</em> <strong>D</strong> at this step. We don’t want the detective <strong>D</strong> to learn the wrong labels. Hence, we only call g_optimizer.step().</p><p>And…<em>that’s all</em>. There’s some other boilerplate code but the GAN-specific stuff is just those 5 components, nothing else.</p><hr><p>After a few thousand rounds of this forbidden dance between <strong>D</strong> and <strong>G</strong>, what do we get? The discriminator <strong>D</strong> gets good very quickly (while <strong>G</strong> slowly moves up), but once it gets to a certain level of power, <strong>G</strong> has a worthy adversary and begins to improve. <em>Really</em> improve.</p><p>Over 20,000 training rounds, the mean of <strong>G</strong>’s output overshoots 4.0 but then comes back in a fairly stable, correct range (left). Likewise, the standard deviation initially drops in the wrong direction but then rises up to the desired 1.25 range (right), matching <strong>R</strong>.</p><p><img src="https://cdn-images-1.medium.com/max/1000/1*2Qm33RqWBKVF3g1Vg2HnVg.png" alt="img"></p><p>Ok, so the basic stats match <strong>R</strong>, eventually. How about the higher moments? Does the shape of the distribution look right? After all, you could certainly have a uniform distribution with a mean of 4.0 and a standard deviation of 1.25, but that wouldn’t really match <strong>R</strong>. Let’s show the final distribution emitted by <strong>G</strong>.</p><p><img src="https://cdn-images-1.medium.com/max/800/1*Ary_6gaLxIijk7j2trroBQ.png" alt="img"></p><p>Not bad. The left tail is a bit longer than the right, but the skew and kurtosis are, shall we say, <em>evocative</em> of the original Gaussian.</p><p><strong>G</strong> recovers the original distribution <strong>R</strong> nearly perfectly — and <strong>D</strong> is left cowering in the corner, mumbling to itself, unable to tell fact from fiction. This is <em>precisely</em> the behavior we want (see <a href="https://arxiv.org/pdf/1406.2661.pdf" target="_blank" rel="external">Figure 1 in Goodfellow</a>). <strong>From fewer than 50 lines of code</strong>.</p><p>Goodfellow would go on to publish many other papers on GANs, including a <a href="https://arxiv.org/pdf/1606.03498.pdf" target="_blank" rel="external">2016 gem describing some practical improvements</a>, including the minibatch discrimination method adapted here. And <a href="https://channel9.msdn.com/Events/Neural-Information-Processing-Systems-Conference/Neural-Information-Processing-Systems-Conference-NIPS-2016/Generative-Adversarial-Networks" target="_blank" rel="external">here’s a 2-hour tutorial he presented at NIPS 2016</a>. For TensorFlow users, here’s a parallel <a href="http://blog.aylien.com/introduction-generative-adversarial-networks-code-tensorflow/" target="_blank" rel="external">post from Aylien on GANs</a>.</p><p>Ok. Enough talk. <a href="https://github.com/devnag/pytorch-generative-adversarial-networks" target="_blank" rel="external"><strong>Go look at the code</strong></a>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="comment"># Generative Adversarial Networks (GAN) example in PyTorch.</span></div><div class="line"><span class="comment"># See related blog post at https://medium.com/@devnag/generative-adversarial-networks-gans-in-50-lines-of-code-pytorch-e81b79659e3f#.sch4xgsa9</span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> torch</div><div class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</div><div class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</div><div class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</div><div class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</div><div class="line"></div><div class="line"><span class="comment"># Data params</span></div><div class="line">data_mean = <span class="number">4</span></div><div class="line">data_stddev = <span class="number">1.25</span></div><div class="line"></div><div class="line"><span class="comment"># Model params</span></div><div class="line">g_input_size = <span class="number">1</span>     <span class="comment"># Random noise dimension coming into generator, per output vector</span></div><div class="line">g_hidden_size = <span class="number">50</span>   <span class="comment"># Generator complexity</span></div><div class="line">g_output_size = <span class="number">1</span>    <span class="comment"># size of generated output vector</span></div><div class="line">d_input_size = <span class="number">100</span>   <span class="comment"># Minibatch size - cardinality of distributions</span></div><div class="line">d_hidden_size = <span class="number">50</span>   <span class="comment"># Discriminator complexity</span></div><div class="line">d_output_size = <span class="number">1</span>    <span class="comment"># Single dimension for 'real' vs. 'fake'</span></div><div class="line">minibatch_size = d_input_size</div><div class="line"></div><div class="line">d_learning_rate = <span class="number">2e-4</span>  <span class="comment"># 2e-4</span></div><div class="line">g_learning_rate = <span class="number">2e-4</span></div><div class="line">optim_betas = (<span class="number">0.9</span>, <span class="number">0.999</span>)</div><div class="line">num_epochs = <span class="number">30000</span></div><div class="line">print_interval = <span class="number">200</span></div><div class="line">d_steps = <span class="number">1</span>  <span class="comment"># 'k' steps in the original GAN paper. Can put the discriminator on higher training freq than generator</span></div><div class="line">g_steps = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment"># ### Uncomment only one of these</span></div><div class="line"><span class="comment">#(name, preprocess, d_input_func) = ("Raw data", lambda data: data, lambda x: x)</span></div><div class="line">(name, preprocess, d_input_func) = (<span class="string">"Data and variances"</span>, <span class="keyword">lambda</span> data: decorate_with_diffs(data, <span class="number">2.0</span>), <span class="keyword">lambda</span> x: x * <span class="number">2</span>)</div><div class="line"></div><div class="line">print(<span class="string">"Using data [%s]"</span> % (name))</div><div class="line"></div><div class="line"><span class="comment"># ##### DATA: Target data and generator input data</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distribution_sampler</span><span class="params">(mu, sigma)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> n: torch.Tensor(np.random.normal(mu, sigma, (<span class="number">1</span>, n)))  <span class="comment"># Gaussian</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_generator_input_sampler</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> m, n: torch.rand(m, n)  <span class="comment"># Uniform-dist data into generator, _NOT_ Gaussian</span></div><div class="line"></div><div class="line"><span class="comment"># ##### MODELS: Generator model and discriminator model</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generator</span><span class="params">(nn.Module)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_size, hidden_size, output_size)</span>:</span></div><div class="line">        super(Generator, self).__init__()</div><div class="line">        self.map1 = nn.Linear(input_size, hidden_size)</div><div class="line">        self.map2 = nn.Linear(hidden_size, hidden_size)</div><div class="line">        self.map3 = nn.Linear(hidden_size, output_size)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></div><div class="line">        x = F.elu(self.map1(x))</div><div class="line">        x = F.sigmoid(self.map2(x))</div><div class="line">        <span class="keyword">return</span> self.map3(x)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Discriminator</span><span class="params">(nn.Module)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_size, hidden_size, output_size)</span>:</span></div><div class="line">        super(Discriminator, self).__init__()</div><div class="line">        self.map1 = nn.Linear(input_size, hidden_size)</div><div class="line">        self.map2 = nn.Linear(hidden_size, hidden_size)</div><div class="line">        self.map3 = nn.Linear(hidden_size, output_size)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></div><div class="line">        x = F.elu(self.map1(x))</div><div class="line">        x = F.elu(self.map2(x))</div><div class="line">        <span class="keyword">return</span> F.sigmoid(self.map3(x))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract</span><span class="params">(v)</span>:</span></div><div class="line">    <span class="keyword">return</span> v.data.storage().tolist()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">stats</span><span class="params">(d)</span>:</span></div><div class="line">    <span class="keyword">return</span> [np.mean(d), np.std(d)]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorate_with_diffs</span><span class="params">(data, exponent)</span>:</span></div><div class="line">    mean = torch.mean(data.data, <span class="number">1</span>)</div><div class="line">    mean_broadcast = torch.mul(torch.ones(data.size()), mean.tolist()[<span class="number">0</span>][<span class="number">0</span>])</div><div class="line">    diffs = torch.pow(data - Variable(mean_broadcast), exponent)</div><div class="line">    <span class="keyword">return</span> torch.cat([data, diffs], <span class="number">1</span>)</div><div class="line"></div><div class="line">d_sampler = get_distribution_sampler(data_mean, data_stddev)</div><div class="line">gi_sampler = get_generator_input_sampler()</div><div class="line">G = Generator(input_size=g_input_size, hidden_size=g_hidden_size, output_size=g_output_size)</div><div class="line">D = Discriminator(input_size=d_input_func(d_input_size), hidden_size=d_hidden_size, output_size=d_output_size)</div><div class="line">criterion = nn.BCELoss()  <span class="comment"># Binary cross entropy: http://pytorch.org/docs/nn.html#bceloss</span></div><div class="line">d_optimizer = optim.Adam(D.parameters(), lr=d_learning_rate, betas=optim_betas)</div><div class="line">g_optimizer = optim.Adam(G.parameters(), lr=g_learning_rate, betas=optim_betas)</div><div class="line"></div><div class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epochs):</div><div class="line">    <span class="keyword">for</span> d_index <span class="keyword">in</span> range(d_steps):</div><div class="line">        <span class="comment"># 1. Train D on real+fake</span></div><div class="line">        D.zero_grad()</div><div class="line"></div><div class="line">        <span class="comment">#  1A: Train D on real</span></div><div class="line">        d_real_data = Variable(d_sampler(d_input_size))</div><div class="line">        d_real_decision = D(preprocess(d_real_data))</div><div class="line">        d_real_error = criterion(d_real_decision, Variable(torch.ones(<span class="number">1</span>)))  <span class="comment"># ones = true</span></div><div class="line">        d_real_error.backward() <span class="comment"># compute/store gradients, but don't change params</span></div><div class="line"></div><div class="line">        <span class="comment">#  1B: Train D on fake</span></div><div class="line">        d_gen_input = Variable(gi_sampler(minibatch_size, g_input_size))</div><div class="line">        d_fake_data = G(d_gen_input).detach()  <span class="comment"># detach to avoid training G on these labels</span></div><div class="line">        d_fake_decision = D(preprocess(d_fake_data.t()))</div><div class="line">        d_fake_error = criterion(d_fake_decision, Variable(torch.zeros(<span class="number">1</span>)))  <span class="comment"># zeros = fake</span></div><div class="line">        d_fake_error.backward()</div><div class="line">        d_optimizer.step()     <span class="comment"># Only optimizes D's parameters; changes based on stored gradients from backward()</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> g_index <span class="keyword">in</span> range(g_steps):</div><div class="line">        <span class="comment"># 2. Train G on D's response (but DO NOT train D on these labels)</span></div><div class="line">        G.zero_grad()</div><div class="line"></div><div class="line">        gen_input = Variable(gi_sampler(minibatch_size, g_input_size))</div><div class="line">        g_fake_data = G(gen_input)</div><div class="line">        dg_fake_decision = D(preprocess(g_fake_data.t()))</div><div class="line">        g_error = criterion(dg_fake_decision, Variable(torch.ones(<span class="number">1</span>)))  <span class="comment"># we want to fool, so pretend it's all genuine</span></div><div class="line"></div><div class="line">        g_error.backward()</div><div class="line">        g_optimizer.step()  <span class="comment"># Only optimizes G's parameters</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> epoch % print_interval == <span class="number">0</span>:</div><div class="line">        print(<span class="string">"%s: D: %s/%s G: %s (Real: %s, Fake: %s) "</span> % (epoch,</div><div class="line">                                                            extract(d_real_error)[<span class="number">0</span>],</div><div class="line">                                                            extract(d_fake_error)[<span class="number">0</span>],</div><div class="line">                                                            extract(g_error)[<span class="number">0</span>],</div><div class="line">                                                            stats(extract(d_real_data)),</div><div class="line">                                                            stats(extract(d_fake_data))))</div></pre></td></tr></table></figure><p>Result：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line">ewan<span class="meta">@ubuntu</span>:~<span class="regexp">/Documents/g</span>an/pytorch-generative-adversarial-networks$ python gan_pytorch.py </div><div class="line">Using data [Data and variances]</div><div class="line"><span class="number">0</span>: D: <span class="number">0.636019647121</span>/<span class="number">0.687892377377</span> G: <span class="number">0.692580163479</span> (Real: [<span class="number">4.0121619534492492</span>, <span class="number">1.3228379995364423</span>], Fake: [<span class="number">0.36497069358825684</span>, <span class="number">0.0040907625909989871</span>]) </div><div class="line"><span class="number">200</span>: D: <span class="number">2.92067015835e-05</span>/<span class="number">0.474851727486</span> G: <span class="number">1.00973010063</span> (Real: [<span class="number">4.0935744738578794</span>, <span class="number">1.3016500752040552</span>], Fake: [<span class="number">-0.5716635638475418</span>, <span class="number">0.019948046232028654</span>]) </div><div class="line"><span class="number">400</span>: D: <span class="number">0.0014917049557</span>/<span class="number">0.502498149872</span> G: <span class="number">0.943185687065</span> (Real: [<span class="number">4.198446000814438</span>, <span class="number">1.1262929992527102</span>], Fake: [<span class="number">-0.21786054879426955</span>, <span class="number">0.0067362612730766476</span>]) </div><div class="line"><span class="number">600</span>: D: <span class="number">6.4969262894e-06</span>/<span class="number">0.384293109179</span> G: <span class="number">1.15257537365</span> (Real: [<span class="number">3.8602226501703263</span>, <span class="number">1.3292726136430937</span>], Fake: [<span class="number">-0.29857088595628739</span>, <span class="number">0.03924369275813562</span>]) </div><div class="line"><span class="number">800</span>: D: <span class="number">1.84774467016e-06</span>/<span class="number">0.211148008704</span> G: <span class="number">1.67116880417</span> (Real: [<span class="number">4.0269100540876392</span>, <span class="number">1.2954351206409835</span>], Fake: [<span class="number">-0.32296697288751602</span>, <span class="number">0.14901211840131676</span>]) </div><div class="line"><span class="number">1000</span>: D: <span class="number">9.02455067262e-05</span>/<span class="number">0.0219078511</span> G: <span class="number">4.19585323334</span> (Real: [<span class="number">3.9491306754946707</span>, <span class="number">1.3613105655283608</span>], Fake: [<span class="number">0.13110455054789782</span>, <span class="number">0.5252103421913964</span>]) </div><div class="line"><span class="number">1200</span>: D: <span class="number">0.00441630883142</span>/<span class="number">0.137605398893</span> G: <span class="number">2.78980493546</span> (Real: [<span class="number">4.238747425079346</span>, <span class="number">1.1837142728845262</span>], Fake: [<span class="number">2.3851456820964811</span>, <span class="number">0.69947230698573948</span>]) </div><div class="line"><span class="number">1400</span>: D: <span class="number">0.291683584452</span>/<span class="number">0.824121117592</span> G: <span class="number">0.26126781106</span> (Real: [<span class="number">3.8486315739154815</span>, <span class="number">1.2074486225815622</span>], Fake: [<span class="number">3.4868409335613251</span>, <span class="number">1.2438192602257458</span>]) </div><div class="line"><span class="number">1600</span>: D: <span class="number">0.503275632858</span>/<span class="number">1.08712184429</span> G: <span class="number">0.628099560738</span> (Real: [<span class="number">3.7856648898124696</span>, <span class="number">1.1925325100947208</span>], Fake: [<span class="number">3.9149187129735945</span>, <span class="number">1.5374543372663099</span>]) </div><div class="line"><span class="number">1800</span>: D: <span class="number">0.992162883282</span>/<span class="number">0.955306172371</span> G: <span class="number">0.215137541294</span> (Real: [<span class="number">3.9097139459848402</span>, <span class="number">1.3729001379532129</span>], Fake: [<span class="number">4.9751595187187192</span>, <span class="number">1.2850838287273094</span>]) </div><div class="line"><span class="number">2000</span>: D: <span class="number">0.701098382473</span>/<span class="number">0.634775817394</span> G: <span class="number">0.389043629169</span> (Real: [<span class="number">3.9641699814796447</span>, <span class="number">1.1512756986625183</span>], Fake: [<span class="number">5.0374661159515384</span>, <span class="number">1.5190411587235346</span>]) </div><div class="line"><span class="number">2200</span>: D: <span class="number">0.510353624821</span>/<span class="number">0.350295126438</span> G: <span class="number">1.5988701582</span> (Real: [<span class="number">4.0406568145751951</span>, <span class="number">1.3612318676859239</span>], Fake: [<span class="number">5.4763065743446351</span>, <span class="number">1.2736378899688456</span>]) </div><div class="line"><span class="number">2400</span>: D: <span class="number">0.895085930824</span>/<span class="number">0.400622785091</span> G: <span class="number">0.922062814236</span> (Real: [<span class="number">3.8292097043991089</span>, <span class="number">1.1506111704583193</span>], Fake: [<span class="number">4.5642045128345492</span>, <span class="number">1.7082890861364539</span>]) </div><div class="line"><span class="number">2600</span>: D: <span class="number">0.802581310272</span>/<span class="number">0.717123866081</span> G: <span class="number">0.572393655777</span> (Real: [<span class="number">4.0654918360710148</span>, <span class="number">1.2552944260604222</span>], Fake: [<span class="number">5.1286249160766602</span>, <span class="number">1.0479449058428656</span>]) </div><div class="line"><span class="number">2800</span>: D: <span class="number">0.51098883152</span>/<span class="number">0.489002883434</span> G: <span class="number">0.842381119728</span> (Real: [<span class="number">4.0405197954177856</span>, <span class="number">1.136660175398452</span>], Fake: [<span class="number">3.9549839448928834</span>, <span class="number">1.1751749984899784</span>]) </div><div class="line"><span class="number">3000</span>: D: <span class="number">0.496278882027</span>/<span class="number">0.97537201643</span> G: <span class="number">0.753688693047</span> (Real: [<span class="number">4.0026307255029678</span>, <span class="number">1.2446167315972034</span>], Fake: [<span class="number">3.2340782660245897</span>, <span class="number">1.2949288892421307</span>]) </div><div class="line"><span class="number">3200</span>: D: <span class="number">0.696556508541</span>/<span class="number">0.829834342003</span> G: <span class="number">0.475445389748</span> (Real: [<span class="number">3.9983750417828561</span>, <span class="number">1.2828095340103229</span>], Fake: [<span class="number">3.5434492731094362</span>, <span class="number">0.98673911467128028</span>]) </div><div class="line"><span class="number">3400</span>: D: <span class="number">0.479906737804</span>/<span class="number">0.477254271507</span> G: <span class="number">1.2421528101</span> (Real: [<span class="number">4.1585888534784319</span>, <span class="number">1.2672863214247221</span>], Fake: [<span class="number">3.3173918831348419</span>, <span class="number">1.156708995162234</span>]) </div><div class="line"><span class="number">3600</span>: D: <span class="number">1.36562228203</span>/<span class="number">0.508370876312</span> G: <span class="number">0.550418972969</span> (Real: [<span class="number">4.0406067597866056</span>, <span class="number">1.1363201759386616</span>], Fake: [<span class="number">4.4300824308395388</span>, <span class="number">1.0639278538481793</span>]) </div><div class="line"><span class="number">3800</span>: D: <span class="number">0.538426816463</span>/<span class="number">0.622343420982</span> G: <span class="number">0.786149024963</span> (Real: [<span class="number">4.0097330248355867</span>, <span class="number">1.1609232820569348</span>], Fake: [<span class="number">4.5179304122924808</span>, <span class="number">1.2347411732817635</span>]) </div><div class="line"><span class="number">4000</span>: D: <span class="number">0.350504934788</span>/<span class="number">0.361344873905</span> G: <span class="number">0.728424191475</span> (Real: [<span class="number">3.7975878280401232</span>, <span class="number">1.2378775025626094</span>], Fake: [<span class="number">4.3484812033176423</span>, <span class="number">1.4327683271077338</span>]) </div><div class="line"><span class="number">4200</span>: D: <span class="number">0.912463009357</span>/<span class="number">0.779066801071</span> G: <span class="number">0.840294659138</span> (Real: [<span class="number">3.9861780107021332</span>, <span class="number">1.2293009498211762</span>], Fake: [<span class="number">4.0718169224262235</span>, <span class="number">1.2044778720046834</span>]) </div><div class="line"><span class="number">4400</span>: D: <span class="number">0.814347147942</span>/<span class="number">0.794115483761</span> G: <span class="number">0.889387726784</span> (Real: [<span class="number">3.9556436133384705</span>, <span class="number">1.1131208050960595</span>], Fake: [<span class="number">3.6148070895671847</span>, <span class="number">1.1790021094109027</span>]) </div><div class="line"><span class="number">4600</span>: D: <span class="number">0.637132883072</span>/<span class="number">0.639598190784</span> G: <span class="number">0.835896074772</span> (Real: [<span class="number">4.0807307386398319</span>, <span class="number">1.1590112689981971</span>], Fake: [<span class="number">3.6376679444313051</span>, <span class="number">1.2540016088688517</span>]) </div><div class="line"><span class="number">4800</span>: D: <span class="number">0.816388785839</span>/<span class="number">0.629823803902</span> G: <span class="number">0.6337043643</span> (Real: [<span class="number">4.1595975148677828</span>, <span class="number">1.2996693029809485</span>], Fake: [<span class="number">4.0303308999538423</span>, <span class="number">1.3050560562935769</span>]) </div><div class="line"><span class="number">5000</span>: D: <span class="number">1.38226401806</span>/<span class="number">0.714248239994</span> G: <span class="number">1.17240273952</span> (Real: [<span class="number">3.9217003214359285</span>, <span class="number">1.3408209709046912</span>], Fake: [<span class="number">4.4204820060729979</span>, <span class="number">1.0378887480226417</span>]) </div><div class="line"><span class="number">5200</span>: D: <span class="number">0.752707779408</span>/<span class="number">0.432243227959</span> G: <span class="number">0.735915839672</span> (Real: [<span class="number">4.033863249272108</span>, <span class="number">1.417255801501303</span>], Fake: [<span class="number">3.7434970003366472</span>, <span class="number">1.4305561672741818</span>]) </div><div class="line"><span class="number">5400</span>: D: <span class="number">0.672449588776</span>/<span class="number">0.694190680981</span> G: <span class="number">0.671269893646</span> (Real: [<span class="number">3.9849637061357499</span>, <span class="number">1.3054745436415693</span>], Fake: [<span class="number">3.7987613070011137</span>, <span class="number">1.1584021967574571</span>]) </div><div class="line"><span class="number">5600</span>: D: <span class="number">0.633513212204</span>/<span class="number">0.678804934025</span> G: <span class="number">0.736048042774</span> (Real: [<span class="number">3.8742538380622862</span>, <span class="number">1.1924929483627851</span>], Fake: [<span class="number">4.0905960440635685</span>, <span class="number">1.0496450658176097</span>]) </div><div class="line"><span class="number">5800</span>: D: <span class="number">0.954816102982</span>/<span class="number">0.619474828243</span> G: <span class="number">0.847522497177</span> (Real: [<span class="number">4.0848416697978971</span>, <span class="number">1.2377045321962332</span>], Fake: [<span class="number">4.5059887909889218</span>, <span class="number">1.0769809353783582</span>]) </div><div class="line"><span class="number">6000</span>: D: <span class="number">0.634225904942</span>/<span class="number">0.653471052647</span> G: <span class="number">0.402414888144</span> (Real: [<span class="number">3.9909452509880068</span>, <span class="number">1.2152347623325401</span>], Fake: [<span class="number">3.9412865948677065</span>, <span class="number">1.2808620107297906</span>]) </div><div class="line"><span class="number">6200</span>: D: <span class="number">0.733776032925</span>/<span class="number">0.414616316557</span> G: <span class="number">0.969770550728</span> (Real: [<span class="number">4.0096452310681343</span>, <span class="number">1.2858629342885464</span>], Fake: [<span class="number">3.4776910370588303</span>, <span class="number">1.4216167469252254</span>]) </div><div class="line"><span class="number">6400</span>: D: <span class="number">0.483776688576</span>/<span class="number">0.456314682961</span> G: <span class="number">0.42595911026</span> (Real: [<span class="number">4.16927042722702</span>, <span class="number">1.2557057135387499</span>], Fake: [<span class="number">3.905275868177414</span>, <span class="number">1.3509040440658031</span>]) </div><div class="line"><span class="number">6600</span>: D: <span class="number">1.06177055836</span>/<span class="number">0.443961560726</span> G: <span class="number">0.910483181477</span> (Real: [<span class="number">4.0327691116929056</span>, <span class="number">1.1752792712434861</span>], Fake: [<span class="number">4.1322225379943847</span>, <span class="number">1.3041032842304898</span>]) </div><div class="line"><span class="number">6800</span>: D: <span class="number">0.911615252495</span>/<span class="number">0.851063728333</span> G: <span class="number">0.822307884693</span> (Real: [<span class="number">4.0429812586307525</span>, <span class="number">1.0149434426406105</span>], Fake: [<span class="number">4.181604235172272</span>, <span class="number">1.1091966315801844</span>]) </div><div class="line"><span class="number">7000</span>: D: <span class="number">0.859644412994</span>/<span class="number">0.819373309612</span> G: <span class="number">0.683367550373</span> (Real: [<span class="number">4.0413902151584624</span>, <span class="number">1.2697299173474621</span>], Fake: [<span class="number">3.6461249232292174</span>, <span class="number">1.1392232969008105</span>]) </div><div class="line"><span class="number">7200</span>: D: <span class="number">0.697537004948</span>/<span class="number">1.29639554024</span> G: <span class="number">0.567749083042</span> (Real: [<span class="number">3.9289280462265013</span>, <span class="number">1.1476723124689931</span>], Fake: [<span class="number">4.3612218284606934</span>, <span class="number">1.1698644305174593</span>]) </div><div class="line"><span class="number">7400</span>: D: <span class="number">0.892510712147</span>/<span class="number">0.93148213625</span> G: <span class="number">1.18729686737</span> (Real: [<span class="number">3.9838603484630584</span>, <span class="number">1.10640478112829</span>], Fake: [<span class="number">4.1228645443916321</span>, <span class="number">1.2695625804586594</span>]) </div><div class="line"><span class="number">7600</span>: D: <span class="number">0.855136275291</span>/<span class="number">0.683420717716</span> G: <span class="number">0.87994658947</span> (Real: [<span class="number">4.1161885654926298</span>, <span class="number">1.1923004904972447</span>], Fake: [<span class="number">3.6958885985612868</span>, <span class="number">1.3379389180110717</span>]) </div><div class="line"><span class="number">7800</span>: D: <span class="number">0.549697399139</span>/<span class="number">1.37823116779</span> G: <span class="number">0.398991644382</span> (Real: [<span class="number">4.2173074555397037</span>, <span class="number">1.2371073094023581</span>], Fake: [<span class="number">3.8741448554396629</span>, <span class="number">1.3837623378110455</span>]) </div><div class="line"><span class="number">8000</span>: D: <span class="number">1.35398185253</span>/<span class="number">0.410179078579</span> G: <span class="number">0.527717351913</span> (Real: [<span class="number">3.9588229835033415</span>, <span class="number">1.3744496473744439</span>], Fake: [<span class="number">3.9429207968711855</span>, <span class="number">1.3684983506717674</span>]) </div><div class="line"><span class="number">8200</span>: D: <span class="number">0.700774013996</span>/<span class="number">0.295857429504</span> G: <span class="number">0.803082704544</span> (Real: [<span class="number">3.8515358114242555</span>, <span class="number">1.2566173136350174</span>], Fake: [<span class="number">3.7108538401126863</span>, <span class="number">1.3342916614304938</span>]) </div><div class="line"><span class="number">8400</span>: D: <span class="number">0.689352571964</span>/<span class="number">0.590398311615</span> G: <span class="number">0.698961615562</span> (Real: [<span class="number">3.965521250963211</span>, <span class="number">1.2231963456729893</span>], Fake: [<span class="number">4.6866454958915709</span>, <span class="number">1.1286615282559416</span>]) </div><div class="line"><span class="number">8600</span>: D: <span class="number">0.19632807374</span>/<span class="number">0.604559898376</span> G: <span class="number">0.812706291676</span> (Real: [<span class="number">3.8928249645233155</span>, <span class="number">1.3264703109197318</span>], Fake: [<span class="number">3.918080286383629</span>, <span class="number">1.2016505045193488</span>]) </div><div class="line"><span class="number">8800</span>: D: <span class="number">0.595732450485</span>/<span class="number">0.572122216225</span> G: <span class="number">0.738678693771</span> (Real: [<span class="number">3.7554583859443667</span>, <span class="number">1.2011572644775179</span>], Fake: [<span class="number">3.8252914756536485</span>, <span class="number">1.1905187885079342</span>]) </div><div class="line"><span class="number">9000</span>: D: <span class="number">0.232542961836</span>/<span class="number">1.26930451393</span> G: <span class="number">0.834500789642</span> (Real: [<span class="number">3.9203160056471824</span>, <span class="number">1.2725988502730134</span>], Fake: [<span class="number">4.1613124001026156</span>, <span class="number">1.2681795442466237</span>]) </div><div class="line"><span class="number">9200</span>: D: <span class="number">1.257376194</span>/<span class="number">0.5735257864</span> G: <span class="number">0.554405272007</span> (Real: [<span class="number">3.8860677522420883</span>, <span class="number">1.1041807259307903</span>], Fake: [<span class="number">3.9102136331796644</span>, <span class="number">1.3811967247690093</span>]) </div><div class="line"><span class="number">9400</span>: D: <span class="number">0.610212028027</span>/<span class="number">0.538761377335</span> G: <span class="number">0.558459818363</span> (Real: [<span class="number">4.0015355503559116</span>, <span class="number">0.99711450973270277</span>], Fake: [<span class="number">3.8555663478374482</span>, <span class="number">1.1037480705144518</span>]) </div><div class="line"><span class="number">9600</span>: D: <span class="number">0.702151358128</span>/<span class="number">0.81621837616</span> G: <span class="number">0.706716835499</span> (Real: [<span class="number">4.0513852632045744</span>, <span class="number">1.1984303669025829</span>], Fake: [<span class="number">4.2933621263504032</span>, <span class="number">1.1478353305254103</span>]) </div><div class="line"><span class="number">9800</span>: D: <span class="number">0.511451423168</span>/<span class="number">0.670217812061</span> G: <span class="number">0.873916983604</span> (Real: [<span class="number">3.935146123766899</span>, <span class="number">1.3218541944694313</span>], Fake: [<span class="number">4.2863738107681275</span>, <span class="number">1.1362357473661524</span>]) </div><div class="line"><span class="number">10000</span>: D: <span class="number">0.587130308151</span>/<span class="number">0.764386773109</span> G: <span class="number">0.714644312859</span> (Real: [<span class="number">4.0829932641983033</span>, <span class="number">1.1844677307174318</span>], Fake: [<span class="number">4.2149634605646131</span>, <span class="number">1.1542778585504672</span>]) </div><div class="line"><span class="number">10200</span>: D: <span class="number">0.454408079386</span>/<span class="number">0.390097141266</span> G: <span class="number">0.694087386131</span> (Real: [<span class="number">3.9480907583236693</span>, <span class="number">1.2586832917742197</span>], Fake: [<span class="number">3.9525690937042235</span>, <span class="number">1.3555640918653922</span>]) </div><div class="line"><span class="number">10400</span>: D: <span class="number">0.232991695404</span>/<span class="number">0.377689123154</span> G: <span class="number">0.839949011803</span> (Real: [<span class="number">3.9636431083083155</span>, <span class="number">1.2146210496905581</span>], Fake: [<span class="number">4.0022356742620468</span>, <span class="number">1.0348462356745984</span>]) </div><div class="line"><span class="number">10600</span>: D: <span class="number">0.887756228447</span>/<span class="number">0.452646583319</span> G: <span class="number">0.776298880577</span> (Real: [<span class="number">4.1107078218460087</span>, <span class="number">1.3061081296488184</span>], Fake: [<span class="number">4.3001403945684435</span>, <span class="number">1.3191353715419794</span>]) </div><div class="line"><span class="number">10800</span>: D: <span class="number">0.988030552864</span>/<span class="number">0.472889751196</span> G: <span class="number">2.00703763962</span> (Real: [<span class="number">4.1303015506267551</span>, <span class="number">1.2646447231333668</span>], Fake: [<span class="number">4.2425211107730867</span>, <span class="number">1.2706986066792705</span>]) </div><div class="line"><span class="number">11000</span>: D: <span class="number">0.962553679943</span>/<span class="number">1.00584948063</span> G: <span class="number">0.458068579435</span> (Real: [<span class="number">4.1017441129684444</span>, <span class="number">1.1564779436003478</span>], Fake: [<span class="number">3.861787896156311</span>, <span class="number">1.2478181443952361</span>]) </div><div class="line"><span class="number">11200</span>: D: <span class="number">0.404395908117</span>/<span class="number">0.560545325279</span> G: <span class="number">0.764987766743</span> (Real: [<span class="number">3.8819530367851258</span>, <span class="number">1.1290593525971337</span>], Fake: [<span class="number">4.0393019503355028</span>, <span class="number">1.1760851438968263</span>]) </div><div class="line"><span class="number">11400</span>: D: <span class="number">1.04482722282</span>/<span class="number">0.170368790627</span> G: <span class="number">0.979512214661</span> (Real: [<span class="number">4.0775347077846531</span>, <span class="number">1.1743573984958275</span>], Fake: [<span class="number">4.4076948529481887</span>, <span class="number">1.1430737801156545</span>]) </div><div class="line"><span class="number">11600</span>: D: <span class="number">0.767144262791</span>/<span class="number">0.419019073248</span> G: <span class="number">0.804197788239</span> (Real: [<span class="number">4.1507718646526337</span>, <span class="number">1.2935215526943189</span>], Fake: [<span class="number">4.2565110635757444</span>, <span class="number">1.1195747875890809</span>]) </div><div class="line"><span class="number">11800</span>: D: <span class="number">0.328228145838</span>/<span class="number">0.192100420594</span> G: <span class="number">0.694948136806</span> (Real: [<span class="number">4.2615561389923098</span>, <span class="number">1.3187283101366121</span>], Fake: [<span class="number">3.7841238260269163</span>, <span class="number">1.2796545407667934</span>]) </div><div class="line"><span class="number">12000</span>: D: <span class="number">0.939581632614</span>/<span class="number">0.512252509594</span> G: <span class="number">0.486280798912</span> (Real: [<span class="number">4.1770594882965089</span>, <span class="number">1.2492834466325793</span>], Fake: [<span class="number">4.0997331076860428</span>, <span class="number">1.0701209918243111</span>]) </div><div class="line"><span class="number">12200</span>: D: <span class="number">0.964525461197</span>/<span class="number">0.397465586662</span> G: <span class="number">1.45534229279</span> (Real: [<span class="number">3.9129967219382524</span>, <span class="number">1.3473476671217695</span>], Fake: [<span class="number">4.3561846733093263</span>, <span class="number">1.1667221650406194</span>]) </div><div class="line"><span class="number">12400</span>: D: <span class="number">0.516430974007</span>/<span class="number">0.255626231432</span> G: <span class="number">0.753806650639</span> (Real: [<span class="number">3.9942912605404852</span>, <span class="number">1.3623400447216258</span>], Fake: [<span class="number">4.2171517282724382</span>, <span class="number">1.2046534326031684</span>]) </div><div class="line"><span class="number">12600</span>: D: <span class="number">0.050210531801</span>/<span class="number">0.567070662975</span> G: <span class="number">0.887824892998</span> (Real: [<span class="number">3.9560802054405211</span>, <span class="number">1.3569670682588555</span>], Fake: [<span class="number">3.6434229278564452</span>, <span class="number">1.2798963544271591</span>]) </div><div class="line"><span class="number">12800</span>: D: <span class="number">0.566556215286</span>/<span class="number">1.45121753216</span> G: <span class="number">2.67591071129</span> (Real: [<span class="number">4.0868541407585148</span>, <span class="number">1.1440918337515926</span>], Fake: [<span class="number">3.7308121472597122</span>, <span class="number">1.2567484994327229</span>]) </div><div class="line"><span class="number">13000</span>: D: <span class="number">0.285438686609</span>/<span class="number">1.26493763924</span> G: <span class="number">0.714931368828</span> (Real: [<span class="number">4.0406689298152925</span>, <span class="number">1.2295255598171184</span>], Fake: [<span class="number">4.1976348906755447</span>, <span class="number">1.2778464434389283</span>]) </div><div class="line"><span class="number">13200</span>: D: <span class="number">0.420082330704</span>/<span class="number">0.20268279314</span> G: <span class="number">1.13221895695</span> (Real: [<span class="number">4.0006502330303189</span>, <span class="number">1.1790149224725006</span>], Fake: [<span class="number">4.2336275362968445</span>, <span class="number">1.2803975596845565</span>]) </div><div class="line"><span class="number">13400</span>: D: <span class="number">0.219869300723</span>/<span class="number">0.733704686165</span> G: <span class="number">1.4634616375</span> (Real: [<span class="number">3.8348834168910981</span>, <span class="number">1.240605849665303</span>], Fake: [<span class="number">3.8208065938949587</span>, <span class="number">1.3042463825727604</span>]) </div><div class="line"><span class="number">13600</span>: D: <span class="number">1.35286784172</span>/<span class="number">0.161317944527</span> G: <span class="number">2.29795908928</span> (Real: [<span class="number">4.0841373348236081</span>, <span class="number">1.2295542819596996</span>], Fake: [<span class="number">4.0513113558292391</span>, <span class="number">1.2789595441318489</span>]) </div><div class="line"><span class="number">13800</span>: D: <span class="number">0.188396275043</span>/<span class="number">0.38589566946</span> G: <span class="number">1.38826131821</span> (Real: [<span class="number">4.0228236329555509</span>, <span class="number">1.3524482715610078</span>], Fake: [<span class="number">4.2307587480545044</span>, <span class="number">1.2042737228043698</span>]) </div><div class="line"><span class="number">14000</span>: D: <span class="number">0.0101562952623</span>/<span class="number">0.363918542862</span> G: <span class="number">1.24292945862</span> (Real: [<span class="number">4.0695835274457934</span>, <span class="number">1.4484548400603423</span>], Fake: [<span class="number">4.3588982570171355</span>, <span class="number">1.2305509242343933</span>]) </div><div class="line"><span class="number">14200</span>: D: <span class="number">0.308517187834</span>/<span class="number">0.687216579914</span> G: <span class="number">0.831201374531</span> (Real: [<span class="number">4.1314239382743834</span>, <span class="number">1.2039768851618762</span>], Fake: [<span class="number">4.3469831347465515</span>, <span class="number">1.1622408025070994</span>]) </div><div class="line"><span class="number">14400</span>: D: <span class="number">1.05658388138</span>/<span class="number">0.777651846409</span> G: <span class="number">0.713593065739</span> (Real: [<span class="number">3.9307258637249469</span>, <span class="number">1.3932677098843045</span>], Fake: [<span class="number">3.8781710839271546</span>, <span class="number">1.3920662615905985</span>]) </div><div class="line"><span class="number">14600</span>: D: <span class="number">0.428974717855</span>/<span class="number">0.430344074965</span> G: <span class="number">0.865560889244</span> (Real: [<span class="number">4.2443156433105464</span>, <span class="number">1.4786604488020483</span>], Fake: [<span class="number">3.9386759352684022</span>, <span class="number">1.2173706417721266</span>]) </div><div class="line"><span class="number">14800</span>: D: <span class="number">0.358524769545</span>/<span class="number">0.631785154343</span> G: <span class="number">1.72760403156</span> (Real: [<span class="number">4.0897545439004901</span>, <span class="number">1.3611061267905207</span>], Fake: [<span class="number">4.0185626268386843</span>, <span class="number">1.2011546705663261</span>]) </div><div class="line"><span class="number">15000</span>: D: <span class="number">0.451200634241</span>/<span class="number">0.451773911715</span> G: <span class="number">1.10325527191</span> (Real: [<span class="number">3.9933083570003509</span>, <span class="number">1.0881706638388742</span>], Fake: [<span class="number">3.902902855873108</span>, <span class="number">1.1771562868487595</span>]) </div><div class="line"><span class="number">15200</span>: D: <span class="number">0.756480932236</span>/<span class="number">0.419855684042</span> G: <span class="number">0.942300021648</span> (Real: [<span class="number">4.1753564620018002</span>, <span class="number">1.3629881946025171</span>], Fake: [<span class="number">3.8721090507507325</span>, <span class="number">1.189488508024922</span>]) </div><div class="line"><span class="number">15400</span>: D: <span class="number">0.219109147787</span>/<span class="number">0.190036550164</span> G: <span class="number">2.20304942131</span> (Real: [<span class="number">3.9836783826351168</span>, <span class="number">1.4838718408508595</span>], Fake: [<span class="number">3.9491609585285188</span>, <span class="number">1.1700151592543104</span>]) </div><div class="line"><span class="number">15600</span>: D: <span class="number">1.01965582371</span>/<span class="number">0.519556045532</span> G: <span class="number">1.10594069958</span> (Real: [<span class="number">4.1213941669464109</span>, <span class="number">1.2398676800048194</span>], Fake: [<span class="number">4.1908504700660707</span>, <span class="number">1.1195751576139747</span>]) </div><div class="line"><span class="number">15800</span>: D: <span class="number">0.733263611794</span>/<span class="number">0.697221815586</span> G: <span class="number">0.84056687355</span> (Real: [<span class="number">4.0593542096018789</span>, <span class="number">1.1946663317303297</span>], Fake: [<span class="number">4.3031868946552274</span>, <span class="number">1.0306412415157991</span>]) </div><div class="line"><span class="number">16000</span>: D: <span class="number">0.400649875402</span>/<span class="number">0.377974271774</span> G: <span class="number">1.2899967432</span> (Real: [<span class="number">4.0140545344352718</span>, <span class="number">1.2630515897106358</span>], Fake: [<span class="number">4.1656066524982451</span>, <span class="number">1.1779954377184654</span>]) </div><div class="line"><span class="number">16200</span>: D: <span class="number">0.34089872241</span>/<span class="number">0.265896707773</span> G: <span class="number">1.11251270771</span> (Real: [<span class="number">4.0408088731765748</span>, <span class="number">1.3839176416694203</span>], Fake: [<span class="number">4.0593357777595518</span>, <span class="number">1.2213436233279213</span>]) </div><div class="line"><span class="number">16400</span>: D: <span class="number">0.00472234329209</span>/<span class="number">0.513436615467</span> G: <span class="number">1.63225841522</span> (Real: [<span class="number">4.1417997646331788</span>, <span class="number">1.2449733327544124</span>], Fake: [<span class="number">3.7269023895263671</span>, <span class="number">1.1296458384504016</span>]) </div><div class="line"><span class="number">16600</span>: D: <span class="number">0.756382524967</span>/<span class="number">0.66779255867</span> G: <span class="number">0.536718785763</span> (Real: [<span class="number">3.9379871004819869</span>, <span class="number">1.278594816781579</span>], Fake: [<span class="number">3.8750299978256226</span>, <span class="number">1.2829775944385431</span>]) </div><div class="line"><span class="number">16800</span>: D: <span class="number">0.879319548607</span>/<span class="number">0.169020995498</span> G: <span class="number">2.33787298203</span> (Real: [<span class="number">4.2075482982397077</span>, <span class="number">1.3725696551173026</span>], Fake: [<span class="number">3.6744112837314606</span>, <span class="number">1.3225226221432227</span>]) </div><div class="line"><span class="number">17000</span>: D: <span class="number">0.0482731573284</span>/<span class="number">1.43823099136</span> G: <span class="number">1.15067052841</span> (Real: [<span class="number">4.0404629743099214</span>, <span class="number">1.218948521692204</span>], Fake: [<span class="number">4.0387165582180025</span>, <span class="number">1.2794767516999943</span>]) </div><div class="line"><span class="number">17200</span>: D: <span class="number">2.88490628009e-05</span>/<span class="number">0.57872825861</span> G: <span class="number">0.495411038399</span> (Real: [<span class="number">3.9901529085636138</span>, <span class="number">1.4349120434336065</span>], Fake: [<span class="number">4.0573103535175328</span>, <span class="number">1.1918079188127153</span>]) </div><div class="line"><span class="number">17400</span>: D: <span class="number">0.231002807617</span>/<span class="number">1.2511702776</span> G: <span class="number">1.33606302738</span> (Real: [<span class="number">3.7472488379478452</span>, <span class="number">1.1658634335870959</span>], Fake: [<span class="number">3.9354779303073881</span>, <span class="number">1.2931455406139682</span>]) </div><div class="line"><span class="number">17600</span>: D: <span class="number">0.181431129575</span>/<span class="number">0.149175107479</span> G: <span class="number">2.51311731339</span> (Real: [<span class="number">4.1270963573455814</span>, <span class="number">1.312367798822683</span>], Fake: [<span class="number">4.3470913958549495</span>, <span class="number">1.1818067904116243</span>]) </div><div class="line"><span class="number">17800</span>: D: <span class="number">0.830040276051</span>/<span class="number">0.415931969881</span> G: <span class="number">1.57710897923</span> (Real: [<span class="number">3.99146986246109</span>, <span class="number">1.0836663745208763</span>], Fake: [<span class="number">4.3325731372833252</span>, <span class="number">1.266683405420135</span>]) </div><div class="line"><span class="number">18000</span>: D: <span class="number">0.20047518611</span>/<span class="number">0.460676729679</span> G: <span class="number">2.56421780586</span> (Real: [<span class="number">4.3388666504621503</span>, <span class="number">1.3881540592894346</span>], Fake: [<span class="number">3.9820314025878907</span>, <span class="number">1.0436684747098013</span>]) </div><div class="line"><span class="number">18200</span>: D: <span class="number">0.0659740716219</span>/<span class="number">0.428199917078</span> G: <span class="number">0.931035280228</span> (Real: [<span class="number">3.8892200005054476</span>, <span class="number">1.2217018988161374</span>], Fake: [<span class="number">3.8822696304321287</span>, <span class="number">1.304586899060783</span>]) </div><div class="line"><span class="number">18400</span>: D: <span class="number">0.791511416435</span>/<span class="number">0.56503880024</span> G: <span class="number">1.98549497128</span> (Real: [<span class="number">3.7894453473389147</span>, <span class="number">1.3567878969348022</span>], Fake: [<span class="number">4.0909739780426024</span>, <span class="number">1.2361544714927677</span>]) </div><div class="line"><span class="number">18600</span>: D: <span class="number">1.15297484398</span>/<span class="number">0.102882102132</span> G: <span class="number">1.85704553127</span> (Real: [<span class="number">4.2316720616817474</span>, <span class="number">1.2603607958456993</span>], Fake: [<span class="number">3.7415710711479186</span>, <span class="number">1.311454258421634</span>]) </div><div class="line"><span class="number">18800</span>: D: <span class="number">1.06078708172</span>/<span class="number">0.366641134024</span> G: <span class="number">0.914008259773</span> (Real: [<span class="number">3.9394708669185636</span>, <span class="number">1.2924449902046702</span>], Fake: [<span class="number">3.9466111737489702</span>, <span class="number">1.137776845711856</span>]) </div><div class="line"><span class="number">19000</span>: D: <span class="number">0.374139517546</span>/<span class="number">0.448283135891</span> G: <span class="number">0.701639294624</span> (Real: [<span class="number">3.9492650532722475</span>, <span class="number">1.2348435624999976</span>], Fake: [<span class="number">3.7365686148405075</span>, <span class="number">1.215777672310739</span>]) </div><div class="line"><span class="number">19200</span>: D: <span class="number">0.209440857172</span>/<span class="number">0.522395193577</span> G: <span class="number">0.707223057747</span> (Real: [<span class="number">3.8846979635953902</span>, <span class="number">1.2146658434075039</span>], Fake: [<span class="number">4.1696245861053463</span>, <span class="number">1.2979841463522084</span>]) </div><div class="line"><span class="number">19400</span>: D: <span class="number">0.15654887259</span>/<span class="number">0.133351936936</span> G: <span class="number">1.43907415867</span> (Real: [<span class="number">4.0292040088772776</span>, <span class="number">1.2291287794070285</span>], Fake: [<span class="number">3.8498308193683624</span>, <span class="number">1.1121767482065514</span>]) </div><div class="line"><span class="number">19600</span>: D: <span class="number">0.329566717148</span>/<span class="number">0.222448319197</span> G: <span class="number">0.429250627756</span> (Real: [<span class="number">3.7978928279876709</span>, <span class="number">1.1554982239517226</span>], Fake: [<span class="number">3.5122534275054931</span>, <span class="number">1.2462801759237472</span>]) </div><div class="line"><span class="number">19800</span>: D: <span class="number">0.0176634714007</span>/<span class="number">0.480926275253</span> G: <span class="number">0.39424943924</span> (Real: [<span class="number">4.0822606313228604</span>, <span class="number">1.2484518469881001</span>], Fake: [<span class="number">4.5482089626789097</span>, <span class="number">1.1266585202489452</span>]) </div><div class="line"><span class="number">20000</span>: D: <span class="number">0.45860773325</span>/<span class="number">0.517112135887</span> G: <span class="number">0.957448124886</span> (Real: [<span class="number">4.0875282829999922</span>, <span class="number">1.2310698313795749</span>], Fake: [<span class="number">4.2767848205566406</span>, <span class="number">1.1186856033319335</span>]) </div><div class="line"><span class="number">20200</span>: D: <span class="number">1.71172118187</span>/<span class="number">0.240745082498</span> G: <span class="number">0.314642876387</span> (Real: [<span class="number">3.8525538909435273</span>, <span class="number">1.2094100771830765</span>], Fake: [<span class="number">3.6543397814035417</span>, <span class="number">1.2917598911679764</span>]) </div><div class="line"><span class="number">20400</span>: D: <span class="number">0.583434104919</span>/<span class="number">0.703361749649</span> G: <span class="number">1.45571947098</span> (Real: [<span class="number">4.0388400733470915</span>, <span class="number">1.2267253073862441</span>], Fake: [<span class="number">3.9019298100471498</span>, <span class="number">1.0292402192122965</span>]) </div><div class="line"><span class="number">20600</span>: D: <span class="number">0.176266431808</span>/<span class="number">0.55411952734</span> G: <span class="number">0.962469100952</span> (Real: [<span class="number">4.0694609802961352</span>, <span class="number">1.2276659305759301</span>], Fake: [<span class="number">3.9728190612792971</span>, <span class="number">1.1212652107309595</span>]) </div><div class="line"><span class="number">20800</span>: D: <span class="number">1.17427504063</span>/<span class="number">0.212535098195</span> G: <span class="number">0.505771696568</span> (Real: [<span class="number">3.7983859290182589</span>, <span class="number">1.3565768879920506</span>], Fake: [<span class="number">4.0766829651594163</span>, <span class="number">1.1742807548541911</span>]) </div><div class="line"><span class="number">21000</span>: D: <span class="number">0.247546881437</span>/<span class="number">0.242251947522</span> G: <span class="number">2.533826828</span> (Real: [<span class="number">4.048124186992645</span>, <span class="number">1.2074367711533176</span>], Fake: [<span class="number">3.8443934541940687</span>, <span class="number">1.0964556009967605</span>]) </div><div class="line"><span class="number">21200</span>: D: <span class="number">0.000996549613774</span>/<span class="number">1.77280521393</span> G: <span class="number">0.741032421589</span> (Real: [<span class="number">3.8826335191726686</span>, <span class="number">1.3432952882949609</span>], Fake: [<span class="number">4.0052364200353621</span>, <span class="number">1.0658632049377181</span>]) </div><div class="line"><span class="number">21400</span>: D: <span class="number">0.0162861924618</span>/<span class="number">0.202122434974</span> G: <span class="number">0.640827775002</span> (Real: [<span class="number">3.949158318042755</span>, <span class="number">1.2312223613675215</span>], Fake: [<span class="number">3.9677765011787414</span>, <span class="number">1.1984950273079937</span>]) </div><div class="line"><span class="number">21600</span>: D: <span class="number">0.494586825371</span>/<span class="number">0.368914216757</span> G: <span class="number">1.73299539089</span> (Real: [<span class="number">4.2141097390651705</span>, <span class="number">1.3170628249721785</span>], Fake: [<span class="number">3.9259325069189073</span>, <span class="number">1.2402090610341174</span>]) </div><div class="line"><span class="number">21800</span>: D: <span class="number">1.72856020927</span>/<span class="number">0.280478566885</span> G: <span class="number">0.301942139864</span> (Real: [<span class="number">3.9425574642419816</span>, <span class="number">1.3421295277895979</span>], Fake: [<span class="number">4.1370714265108113</span>, <span class="number">1.3135434962232824</span>]) </div><div class="line"><span class="number">22000</span>: D: <span class="number">0.316263616085</span>/<span class="number">0.425417006016</span> G: <span class="number">4.6092467308</span> (Real: [<span class="number">3.9253722500801085</span>, <span class="number">1.1573266813219236</span>], Fake: [<span class="number">3.7590440094470976</span>, <span class="number">1.2176312271677099</span>]) </div><div class="line"><span class="number">22200</span>: D: <span class="number">1.70313096046</span>/<span class="number">0.166758075356</span> G: <span class="number">1.76803898811</span> (Real: [<span class="number">4.1788750314712528</span>, <span class="number">1.3796412025948377</span>], Fake: [<span class="number">4.4896411395072935</span>, <span class="number">0.88890948354147137</span>]) </div><div class="line"><span class="number">22400</span>: D: <span class="number">0.00245383195579</span>/<span class="number">0.618139982224</span> G: <span class="number">0.561835348606</span> (Real: [<span class="number">4.0531666296720505</span>, <span class="number">1.3030890495946361</span>], Fake: [<span class="number">3.9800510057806968</span>, <span class="number">1.2769573713555427</span>]) </div><div class="line"><span class="number">22600</span>: D: <span class="number">0.0456999950111</span>/<span class="number">0.270536243916</span> G: <span class="number">0.719259619713</span> (Real: [<span class="number">3.8036734467744826</span>, <span class="number">1.2489490089903446</span>], Fake: [<span class="number">4.2525720745325089</span>, <span class="number">1.3061806069103183</span>]) </div><div class="line"><span class="number">22800</span>: D: <span class="number">0.0318684391677</span>/<span class="number">0.34651991725</span> G: <span class="number">1.3301807642</span> (Real: [<span class="number">4.0768313544988635</span>, <span class="number">1.2930152979365797</span>], Fake: [<span class="number">4.4993063497543337</span>, <span class="number">1.2277717696258752</span>]) </div><div class="line"><span class="number">23000</span>: D: <span class="number">1.38112533092</span>/<span class="number">0.656377196312</span> G: <span class="number">0.700986683369</span> (Real: [<span class="number">4.0261077487468722</span>, <span class="number">1.1634786009859657</span>], Fake: [<span class="number">4.1274698692560197</span>, <span class="number">1.1909195549188023</span>]) </div><div class="line"><span class="number">23200</span>: D: <span class="number">0.7532761693</span>/<span class="number">0.30048418045</span> G: <span class="number">1.24321329594</span> (Real: [<span class="number">4.0255234652757643</span>, <span class="number">1.2277433432951119</span>], Fake: [<span class="number">4.0463824319839476</span>, <span class="number">1.2493841122917879</span>]) </div><div class="line"><span class="number">23400</span>: D: <span class="number">1.54497790337</span>/<span class="number">0.524266302586</span> G: <span class="number">1.88104653358</span> (Real: [<span class="number">4.1244187545776363</span>, <span class="number">1.2126284333800423</span>], Fake: [<span class="number">4.0199511092901226</span>, <span class="number">1.4125067136876193</span>]) </div><div class="line"><span class="number">23600</span>: D: <span class="number">0.838026106358</span>/<span class="number">1.1139113903</span> G: <span class="number">2.2735543251</span> (Real: [<span class="number">4.0352903008460999</span>, <span class="number">1.1687086536829701</span>], Fake: [<span class="number">4.5685070466995237</span>, <span class="number">1.4508884769834012</span>]) </div><div class="line"><span class="number">23800</span>: D: <span class="number">0.869914472103</span>/<span class="number">0.160864800215</span> G: <span class="number">1.42444908619</span> (Real: [<span class="number">4.1635012495517731</span>, <span class="number">1.1441051019240691</span>], Fake: [<span class="number">4.1520407730340958</span>, <span class="number">1.2022442680490875</span>]) </div><div class="line"><span class="number">24000</span>: D: <span class="number">0.0401677601039</span>/<span class="number">0.240127012134</span> G: <span class="number">1.21359109879</span> (Real: [<span class="number">4.0558859372138976</span>, <span class="number">1.1263029268841764</span>], Fake: [<span class="number">3.8535136532783509</span>, <span class="number">0.99055012605544335</span>]) </div><div class="line"><span class="number">24200</span>: D: <span class="number">0.444084912539</span>/<span class="number">0.761975646019</span> G: <span class="number">1.18176090717</span> (Real: [<span class="number">4.1462872040271757</span>, <span class="number">1.1670976588949802</span>], Fake: [<span class="number">4.0291124176979061</span>, <span class="number">1.4000525541431663</span>]) </div><div class="line"><span class="number">24400</span>: D: <span class="number">0.259448975325</span>/<span class="number">0.206390738487</span> G: <span class="number">0.850725114346</span> (Real: [<span class="number">4.2600694203376772</span>, <span class="number">1.3260391555100224</span>], Fake: [<span class="number">4.7161277580261229</span>, <span class="number">1.3763624799621637</span>]) </div><div class="line"><span class="number">24600</span>: D: <span class="number">0.821855664253</span>/<span class="number">0.381440609694</span> G: <span class="number">0.898442983627</span> (Real: [<span class="number">3.9929001557826997</span>, <span class="number">1.316718033939094</span>], Fake: [<span class="number">3.659836998283863</span>, <span class="number">1.033547623133473</span>]) </div><div class="line"><span class="number">24800</span>: D: <span class="number">0.869792580605</span>/<span class="number">0.143853545189</span> G: <span class="number">1.68244981766</span> (Real: [<span class="number">3.9503055346012115</span>, <span class="number">1.1980136516743376</span>], Fake: [<span class="number">4.3753550618886949</span>, <span class="number">1.4268488751378543</span>]) </div><div class="line"><span class="number">25000</span>: D: <span class="number">0.533834278584</span>/<span class="number">0.944993913174</span> G: <span class="number">1.35653877258</span> (Real: [<span class="number">3.8403973925113677</span>, <span class="number">1.1415226099240794</span>], Fake: [<span class="number">4.3022644245624546</span>, <span class="number">1.277824404897737</span>]) </div><div class="line"><span class="number">25200</span>: D: <span class="number">0.57686984539</span>/<span class="number">1.21011674404</span> G: <span class="number">0.49785476923</span> (Real: [<span class="number">4.1094828593730925</span>, <span class="number">1.0606124114518727</span>], Fake: [<span class="number">3.8350191235542299</span>, <span class="number">1.1822398134788241</span>]) </div><div class="line"><span class="number">25400</span>: D: <span class="number">1.30570268631</span>/<span class="number">0.127069279552</span> G: <span class="number">2.14658904076</span> (Real: [<span class="number">3.8440176880359651</span>, <span class="number">1.2759016439053388</span>], Fake: [<span class="number">4.2303895175457003</span>, <span class="number">1.2478330871411345</span>]) </div><div class="line"><span class="number">25600</span>: D: <span class="number">0.163877904415</span>/<span class="number">0.356351107359</span> G: <span class="number">1.50513041019</span> (Real: [<span class="number">3.9149920016527178</span>, <span class="number">1.3322359586431274</span>], Fake: [<span class="number">4.5107577931880947</span>, <span class="number">1.37733363996175</span>]) </div><div class="line"><span class="number">25800</span>: D: <span class="number">0.0257995054126</span>/<span class="number">0.501479804516</span> G: <span class="number">0.846267580986</span> (Real: [<span class="number">4.0328698861598973</span>, <span class="number">1.0891363228332751</span>], Fake: [<span class="number">4.2062628841400143</span>, <span class="number">1.2707193105443095</span>]) </div><div class="line"><span class="number">26000</span>: D: <span class="number">0.4208984375</span>/<span class="number">0.45090213418</span> G: <span class="number">1.24405300617</span> (Real: [<span class="number">4.0495267909765245</span>, <span class="number">1.3629959211491509</span>], Fake: [<span class="number">3.881335927248001</span>, <span class="number">1.1534035700479874</span>]) </div><div class="line"><span class="number">26200</span>: D: <span class="number">1.0977101326</span>/<span class="number">0.260044932365</span> G: <span class="number">0.274282753468</span> (Real: [<span class="number">4.0526520502567287</span>, <span class="number">1.1354404896569923</span>], Fake: [<span class="number">3.7989616423845289</span>, <span class="number">1.3036229409468019</span>]) </div><div class="line"><span class="number">26400</span>: D: <span class="number">0.836492598057</span>/<span class="number">0.194570705295</span> G: <span class="number">1.25769793987</span> (Real: [<span class="number">4.2580243301391603</span>, <span class="number">1.1229754918621602</span>], Fake: [<span class="number">4.9420129108428954</span>, <span class="number">1.4595622988211396</span>]) </div><div class="line"><span class="number">26600</span>: D: <span class="number">0.0381172671914</span>/<span class="number">0.229116663337</span> G: <span class="number">3.23367476463</span> (Real: [<span class="number">3.9871047949790954</span>, <span class="number">1.2891811878363044</span>], Fake: [<span class="number">5.5130027627944944</span>, <span class="number">1.3531596753079107</span>]) </div><div class="line"><span class="number">26800</span>: D: <span class="number">0.33750808239</span>/<span class="number">0.0588937625289</span> G: <span class="number">2.76632380486</span> (Real: [<span class="number">4.0901136839389798</span>, <span class="number">1.2240984948711151</span>], Fake: [<span class="number">5.9970619964599612</span>, <span class="number">1.3296608494175821</span>]) </div><div class="line"><span class="number">27000</span>: D: <span class="number">0.403919011354</span>/<span class="number">0.025144957006</span> G: <span class="number">5.00026988983</span> (Real: [<span class="number">3.9684947764873506</span>, <span class="number">1.1928812330565042</span>], Fake: [<span class="number">5.5821900677680967</span>, <span class="number">1.5869340992569609</span>]) </div><div class="line"><span class="number">27200</span>: D: <span class="number">1.26118826866</span>/<span class="number">1.14945113659</span> G: <span class="number">0.233536079526</span> (Real: [<span class="number">4.0953157800436024</span>, <span class="number">1.2000917970554563</span>], Fake: [<span class="number">3.457775202393532</span>, <span class="number">1.2362199991432059</span>]) </div><div class="line"><span class="number">27400</span>: D: <span class="number">0.842516124249</span>/<span class="number">0.577941656113</span> G: <span class="number">0.518706798553</span> (Real: [<span class="number">3.8673747038841246</span>, <span class="number">1.1826108239366226</span>], Fake: [<span class="number">3.6999527400732042</span>, <span class="number">1.2050256827670227</span>]) </div><div class="line"><span class="number">27600</span>: D: <span class="number">0.459548681974</span>/<span class="number">0.516558885574</span> G: <span class="number">1.69328427315</span> (Real: [<span class="number">4.0379843235015871</span>, <span class="number">1.267741160236167</span>], Fake: [<span class="number">4.3069088852405546</span>, <span class="number">1.2883256614455194</span>]) </div><div class="line"><span class="number">27800</span>: D: <span class="number">0.757292568684</span>/<span class="number">0.295852422714</span> G: <span class="number">0.82683211565</span> (Real: [<span class="number">3.6750951480865477</span>, <span class="number">1.1881818498282759</span>], Fake: [<span class="number">4.3079475378990173</span>, <span class="number">1.3863961893145142</span>]) </div><div class="line"><span class="number">28000</span>: D: <span class="number">1.0311729908</span>/<span class="number">0.836829304695</span> G: <span class="number">0.54562240839</span> (Real: [<span class="number">3.8109287106990815</span>, <span class="number">1.2699445078581264</span>], Fake: [<span class="number">4.0800623488426204</span>, <span class="number">1.2420579399013889</span>]) </div><div class="line"><span class="number">28200</span>: D: <span class="number">0.662180066109</span>/<span class="number">0.698618113995</span> G: <span class="number">0.430238395929</span> (Real: [<span class="number">3.8820258617401122</span>, <span class="number">1.3192879801078357</span>], Fake: [<span class="number">3.8678512275218964</span>, <span class="number">1.2100339116659864</span>]) </div><div class="line"><span class="number">28400</span>: D: <span class="number">0.857332766056</span>/<span class="number">0.637849986553</span> G: <span class="number">0.443328052759</span> (Real: [<span class="number">4.0044168281555175</span>, <span class="number">1.2977773729964786</span>], Fake: [<span class="number">3.77621297955513</span>, <span class="number">1.10884790779666</span>]) </div><div class="line"><span class="number">28600</span>: D: <span class="number">0.518617451191</span>/<span class="number">0.676390469074</span> G: <span class="number">0.824631929398</span> (Real: [<span class="number">3.9321113193035124</span>, <span class="number">1.189980080467403</span>], Fake: [<span class="number">4.1412628889083862</span>, <span class="number">1.4110153520360829</span>]) </div><div class="line"><span class="number">28800</span>: D: <span class="number">0.924657285213</span>/<span class="number">0.57682287693</span> G: <span class="number">0.867313206196</span> (Real: [<span class="number">3.8806186806410552</span>, <span class="number">1.2663798129949515</span>], Fake: [<span class="number">3.7928846073150635</span>, <span class="number">0.96599856269415929</span>]) </div><div class="line"><span class="number">29000</span>: D: <span class="number">0.681347727776</span>/<span class="number">0.833830595016</span> G: <span class="number">0.880895376205</span> (Real: [<span class="number">4.0122552135586735</span>, <span class="number">1.3382642859979685</span>], Fake: [<span class="number">3.8699622356891634</span>, <span class="number">1.5246898233773196</span>]) </div><div class="line"><span class="number">29200</span>: D: <span class="number">0.690975308418</span>/<span class="number">0.571468651295</span> G: <span class="number">0.539677977562</span> (Real: [<span class="number">3.9422134029865266</span>, <span class="number">1.2798402813873653</span>], Fake: [<span class="number">3.4796924066543578</span>, <span class="number">1.0078584415562459</span>]) </div><div class="line"><span class="number">29400</span>: D: <span class="number">0.600927650928</span>/<span class="number">0.692537486553</span> G: <span class="number">0.785535871983</span> (Real: [<span class="number">4.0494313037395475</span>, <span class="number">1.2729051468200046</span>], Fake: [<span class="number">4.0457676327228542</span>, <span class="number">1.2121629628604733</span>]) </div><div class="line"><span class="number">29600</span>: D: <span class="number">0.662378668785</span>/<span class="number">0.552553355694</span> G: <span class="number">0.665563106537</span> (Real: [<span class="number">3.8692034566402436</span>, <span class="number">1.1988600586203602</span>], Fake: [<span class="number">4.3626180648803707</span>, <span class="number">1.3098951956607312</span>]) </div><div class="line"><span class="number">29800</span>: D: <span class="number">0.844242811203</span>/<span class="number">0.719559967518</span> G: <span class="number">0.89226102829</span> (Real: [<span class="number">3.8751950478553772</span>, <span class="number">1.1053984789259368</span>], Fake: [<span class="number">3.9671442759037019</span>, <span class="number">1.1584875699071935</span>])</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://medium.com/@devnag/generative-adversarial-networks-gans-in-50-lines-of-code-pytorch-e81b79659e3f&quot; target=&quot;_blank&quot; rel=&quot;e
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="GAN" scheme="http://yoursite.com/tags/GAN/"/>
    
      <category term="PyTorch" scheme="http://yoursite.com/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>LSTM by Example using Tensorflow (Text Generate)</title>
    <link href="http://yoursite.com/2017/04/26/LSTM-by-Example-using-Tensorflow-Text-Generate/"/>
    <id>http://yoursite.com/2017/04/26/LSTM-by-Example-using-Tensorflow-Text-Generate/</id>
    <published>2017-04-26T13:05:01.000Z</published>
    <updated>2017-04-26T13:10:20.095Z</updated>
    
    <content type="html"><![CDATA[<p>In Deep Learning, Recurrent Neural Networks (RNN) are a family of neural networks that excels in learning from sequential data. A class of RNN that has found practical applications is Long Short-Term Memory (LSTM) because it is robust against the problems of long-term dependency.</p><p>What seems to be lacking is a good documentation and example on how to build an easy to understand Tensorflow application based on LSTM. This is the motivation behind this article.</p><p>Suppose we want to train a LSTM to predict the next word using a sample short story, <a href="http://www.taleswithmorals.com/" target="_blank" rel="external">Aesop’s Fables</a>:</p><blockquote><p>long ago , the mice had a general council to consider what measures they could take to outwit their common enemy , the cat . some said this , and some said that but at last a young mouse got up and said he had a proposal to make , which he thought would meet the case . you will all agree , said he , that our chief danger consists in the sly and treacherous manner in which the enemy approaches us . now , if we could receive some signal of her approach , we could easily escape from her . i venture , therefore , to propose that a small bell be procured , and attached by a ribbon round the neck of the cat . by this means we should always know when she was about , and could easily retire while she was in the neighbourhood . this proposal met with general applause , until an old mouse got up and said that is all very well , but who is to bell the cat ? the mice looked at one another and nobody spoke . then the old mouse said it is easy to propose impossible remedies .</p></blockquote><p>If we feed a LSTM with correct sequences from the text of 3 symbols as inputs and 1 labeled symbol, eventually the neural network will learn to predict the next symbol correctly.</p><p><img src="https://cdn-images-1.medium.com/max/800/1*epcf2SBjRHBynBNFf-CpQA.png" alt="lstm"></p><p>Technically, LSTM inputs can only understand real numbers. A way to convert symbol to number is to assign a unique integer to each symbol based on frequency of occurrence. For example, there are 112 unique symbols in the text above. The function in Listing 2 builds a dictionary with the following entries [ “,” : 0 ][ “the” : 1 ], …, [ “council” : 37 ],…,[ “spoke” : 111 ]. The reverse dictionary is also generated since it will be used in decoding the output of LSTM.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_dataset</span><span class="params">(words)</span>:</span></div><div class="line">    count = collections.Counter(words).most_common()</div><div class="line">    dictionary = dict()</div><div class="line">    <span class="keyword">for</span> word, _ <span class="keyword">in</span> count:</div><div class="line">        dictionary[word] = len(dictionary)</div><div class="line">    reverse_dictionary = dict(zip(dictionary.values(), dictionary.keys()))</div><div class="line">    <span class="keyword">return</span> dictionary, reverse_dictionary</div></pre></td></tr></table></figure><p>Similarly, the prediction is a unique integer identifying the index in the reverse dictionary of the predicted symbol. For example, if the prediction is 37, the predicted symbol is actually “council”.</p><p>The generation of output may sound simple but actually LSTM produces a 112-element vector of probabilities of prediction for the next symbol normalized by the softmax() function. The index of the element with the highest probability is the predicted index of the symbol in the reverse dictionary (ie a one-hot vector).</p><p><img src="https://cdn-images-1.medium.com/max/800/1*XAJdt_EbedqDlrTT9eqWvQ.png" alt="word-gen"></p><p>There is the source code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div></pre></td><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line">A Recurrent Neural Network (LSTM) implementation example using TensorFlow..</div><div class="line">Next word prediction after n_input words learned from text file.</div><div class="line">A story is automatically generated if the predicted word is fed back as input.</div><div class="line">Author: Rowel Atienza</div><div class="line">Project: https://github.com/roatienza/Deep-Learning-Experiments</div><div class="line">'''</div><div class="line"></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> tensorflow.contrib <span class="keyword">import</span> rnn</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> collections</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">start_time = time.time()</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">elapsed</span><span class="params">(sec)</span>:</span></div><div class="line">    <span class="keyword">if</span> sec&lt;<span class="number">60</span>:</div><div class="line">        <span class="keyword">return</span> str(sec) + <span class="string">" sec"</span></div><div class="line">    <span class="keyword">elif</span> sec&lt;(<span class="number">60</span>*<span class="number">60</span>):</div><div class="line">        <span class="keyword">return</span> str(sec/<span class="number">60</span>) + <span class="string">" min"</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> str(sec/(<span class="number">60</span>*<span class="number">60</span>)) + <span class="string">" hr"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Target log path</span></div><div class="line">logs_path = <span class="string">'/tmp/tensorflow/rnn_words'</span></div><div class="line">writer = tf.summary.FileWriter(logs_path)</div><div class="line"></div><div class="line"><span class="comment"># Text file containing words for training</span></div><div class="line">training_file = <span class="string">'belling_the_cat.txt'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_data</span><span class="params">(fname)</span>:</span></div><div class="line">    <span class="keyword">with</span> open(fname) <span class="keyword">as</span> f:</div><div class="line">        content = f.readlines()</div><div class="line">    content = [x.strip() <span class="keyword">for</span> x <span class="keyword">in</span> content]</div><div class="line">    content = [content[i].split() <span class="keyword">for</span> i <span class="keyword">in</span> range(len(content))]</div><div class="line">    content = np.array(content)</div><div class="line">    content = np.reshape(content, [<span class="number">-1</span>, ])</div><div class="line">    <span class="keyword">return</span> content</div><div class="line"></div><div class="line">training_data = read_data(training_file)</div><div class="line">print(<span class="string">"Loaded training data..."</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_dataset</span><span class="params">(words)</span>:</span></div><div class="line">    count = collections.Counter(words).most_common()</div><div class="line">    dictionary = dict()</div><div class="line">    <span class="keyword">for</span> word, _ <span class="keyword">in</span> count:</div><div class="line">        dictionary[word] = len(dictionary)</div><div class="line">    reverse_dictionary = dict(zip(dictionary.values(), dictionary.keys()))</div><div class="line">    <span class="keyword">return</span> dictionary, reverse_dictionary</div><div class="line"></div><div class="line">dictionary, reverse_dictionary = build_dataset(training_data)</div><div class="line">vocab_size = len(dictionary)</div><div class="line"></div><div class="line"><span class="comment"># Parameters</span></div><div class="line">learning_rate = <span class="number">0.001</span></div><div class="line">training_iters = <span class="number">50000</span></div><div class="line">display_step = <span class="number">1000</span></div><div class="line">n_input = <span class="number">3</span></div><div class="line"></div><div class="line"><span class="comment"># number of units in RNN cell</span></div><div class="line">n_hidden = <span class="number">512</span></div><div class="line"></div><div class="line"><span class="comment"># tf Graph input</span></div><div class="line">x = tf.placeholder(<span class="string">"float"</span>, [<span class="keyword">None</span>, n_input, <span class="number">1</span>])</div><div class="line">y = tf.placeholder(<span class="string">"float"</span>, [<span class="keyword">None</span>, vocab_size])</div><div class="line"></div><div class="line"><span class="comment"># RNN output node weights and biases</span></div><div class="line">weights = &#123;</div><div class="line">    <span class="string">'out'</span>: tf.Variable(tf.random_normal([n_hidden, vocab_size]))</div><div class="line">&#125;</div><div class="line">biases = &#123;</div><div class="line">    <span class="string">'out'</span>: tf.Variable(tf.random_normal([vocab_size]))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">RNN</span><span class="params">(x, weights, biases)</span>:</span></div><div class="line"></div><div class="line">    <span class="comment"># reshape to [1, n_input]</span></div><div class="line">    x = tf.reshape(x, [<span class="number">-1</span>, n_input])</div><div class="line"></div><div class="line">    <span class="comment"># Generate a n_input-element sequence of inputs</span></div><div class="line">    <span class="comment"># (eg. [had] [a] [general] -&gt; [20] [6] [33])</span></div><div class="line">    x = tf.split(x,n_input,<span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="comment"># 2-layer LSTM, each layer has n_hidden units.</span></div><div class="line">    <span class="comment"># Average Accuracy= 95.20% at 50k iter</span></div><div class="line">    </div><div class="line">    rnn_cell = rnn.MultiRNNCell([rnn.BasicLSTMCell(n_hidden),rnn.BasicLSTMCell(n_hidden)])</div><div class="line"></div><div class="line">    <span class="comment"># 1-layer LSTM with n_hidden units but with lower accuracy.</span></div><div class="line">    <span class="comment"># Average Accuracy= 90.60% 50k iter</span></div><div class="line">    <span class="comment"># Uncomment line below to test but comment out the 2-layer rnn.MultiRNNCell above</span></div><div class="line">    <span class="comment"># rnn_cell = rnn.BasicLSTMCell(n_hidden)</span></div><div class="line"></div><div class="line">    <span class="comment"># generate prediction</span></div><div class="line">    outputs, states = rnn.static_rnn(rnn_cell, x, dtype=tf.float32)</div><div class="line"></div><div class="line">    <span class="comment"># there are n_input outputs but</span></div><div class="line">    <span class="comment"># we only want the last output</span></div><div class="line">    <span class="keyword">return</span> tf.matmul(outputs[<span class="number">-1</span>], weights[<span class="string">'out'</span>]) + biases[<span class="string">'out'</span>]</div><div class="line"></div><div class="line">pred = RNN(x, weights, biases)</div><div class="line"></div><div class="line"><span class="comment"># Loss and optimizer</span></div><div class="line">cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=pred, labels=y))</div><div class="line">optimizer = tf.train.RMSPropOptimizer(learning_rate=learning_rate).minimize(cost)</div><div class="line"></div><div class="line"><span class="comment"># Model evaluation</span></div><div class="line">correct_pred = tf.equal(tf.argmax(pred,<span class="number">1</span>), tf.argmax(y,<span class="number">1</span>))</div><div class="line">accuracy = tf.reduce_mean(tf.cast(correct_pred, tf.float32))</div><div class="line"></div><div class="line"><span class="comment"># Initializing the variables</span></div><div class="line">init = tf.global_variables_initializer()</div><div class="line"></div><div class="line"><span class="comment"># Launch the graph</span></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> session:</div><div class="line">    session.run(init)</div><div class="line">    step = <span class="number">0</span></div><div class="line">    offset = random.randint(<span class="number">0</span>,n_input+<span class="number">1</span>)</div><div class="line">    end_offset = n_input + <span class="number">1</span></div><div class="line">    acc_total = <span class="number">0</span></div><div class="line">    loss_total = <span class="number">0</span></div><div class="line"></div><div class="line">    writer.add_graph(session.graph)</div><div class="line"></div><div class="line">    <span class="keyword">while</span> step &lt; training_iters:</div><div class="line">        <span class="comment"># Generate a minibatch. Add some randomness on selection process.</span></div><div class="line">        <span class="keyword">if</span> offset &gt; (len(training_data)-end_offset):</div><div class="line">            offset = random.randint(<span class="number">0</span>, n_input+<span class="number">1</span>)</div><div class="line"></div><div class="line">        symbols_in_keys = [ [dictionary[ str(training_data[i])]] <span class="keyword">for</span> i <span class="keyword">in</span> range(offset, offset+n_input) ]</div><div class="line">        symbols_in_keys = np.reshape(np.array(symbols_in_keys), [<span class="number">-1</span>, n_input, <span class="number">1</span>])</div><div class="line"></div><div class="line">        symbols_out_onehot = np.zeros([vocab_size], dtype=float)</div><div class="line">        symbols_out_onehot[dictionary[str(training_data[offset+n_input])]] = <span class="number">1.0</span></div><div class="line">        symbols_out_onehot = np.reshape(symbols_out_onehot,[<span class="number">1</span>,<span class="number">-1</span>])</div><div class="line"></div><div class="line">        _, acc, loss, onehot_pred = session.run([optimizer, accuracy, cost, pred], \</div><div class="line">                                                feed_dict=&#123;x: symbols_in_keys, y: symbols_out_onehot&#125;)</div><div class="line">        loss_total += loss</div><div class="line">        acc_total += acc</div><div class="line">        <span class="keyword">if</span> (step+<span class="number">1</span>) % display_step == <span class="number">0</span>:</div><div class="line">            print(<span class="string">"Iter= "</span> + str(step+<span class="number">1</span>) + <span class="string">", Average Loss= "</span> + \</div><div class="line">                  <span class="string">"&#123;:.6f&#125;"</span>.format(loss_total/display_step) + <span class="string">", Average Accuracy= "</span> + \</div><div class="line">                  <span class="string">"&#123;:.2f&#125;%"</span>.format(<span class="number">100</span>*acc_total/display_step))</div><div class="line">            acc_total = <span class="number">0</span></div><div class="line">            loss_total = <span class="number">0</span></div><div class="line">            symbols_in = [training_data[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(offset, offset + n_input)]</div><div class="line">            symbols_out = training_data[offset + n_input]</div><div class="line">            symbols_out_pred = reverse_dictionary[int(tf.argmax(onehot_pred, <span class="number">1</span>).eval())]</div><div class="line">            print(<span class="string">"%s - [%s] vs [%s]"</span> % (symbols_in,symbols_out,symbols_out_pred))</div><div class="line">        step += <span class="number">1</span></div><div class="line">        offset += (n_input+<span class="number">1</span>)</div><div class="line">    print(<span class="string">"Optimization Finished!"</span>)</div><div class="line">    print(<span class="string">"Elapsed time: "</span>, elapsed(time.time() - start_time))</div><div class="line">    print(<span class="string">"Run on command line."</span>)</div><div class="line">    print(<span class="string">"\ttensorboard --logdir=%s"</span> % (logs_path))</div><div class="line">    print(<span class="string">"Point your web browser to: http://localhost:6006/"</span>)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        prompt = <span class="string">"%s words: "</span> % n_input</div><div class="line">        sentence = input(prompt)</div><div class="line">        sentence = sentence.strip()</div><div class="line">        words = sentence.split(<span class="string">' '</span>)</div><div class="line">        <span class="keyword">if</span> len(words) != n_input:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            symbols_in_keys = [dictionary[str(words[i])] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(words))]</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</div><div class="line">                keys = np.reshape(np.array(symbols_in_keys), [<span class="number">-1</span>, n_input, <span class="number">1</span>])</div><div class="line">                onehot_pred = session.run(pred, feed_dict=&#123;x: keys&#125;)</div><div class="line">                onehot_pred_index = int(tf.argmax(onehot_pred, <span class="number">1</span>).eval())</div><div class="line">                sentence = <span class="string">"%s %s"</span> % (sentence,reverse_dictionary[onehot_pred_index])</div><div class="line">                symbols_in_keys = symbols_in_keys[<span class="number">1</span>:]</div><div class="line">                symbols_in_keys.append(onehot_pred_index)</div><div class="line">            print(sentence)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">"Word not in dictionary"</span>)</div></pre></td></tr></table></figure><p><strong>source blog:</strong> <a href="https://medium.com/towards-data-science/lstm-by-example-using-tensorflow-feb0c1968537" target="_blank" rel="external">https://medium.com/towards-data-science/lstm-by-example-using-tensorflow-feb0c1968537</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In Deep Learning, Recurrent Neural Networks (RNN) are a family of neural networks that excels in learning from sequential data. A class o
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
      <category term="LSTM" scheme="http://yoursite.com/tags/LSTM/"/>
    
  </entry>
  
  <entry>
    <title>Xiaomi mini wifi cannot build the connection</title>
    <link href="http://yoursite.com/2017/04/26/Xiaomi-mini-wifi-cannot-build-the-connection/"/>
    <id>http://yoursite.com/2017/04/26/Xiaomi-mini-wifi-cannot-build-the-connection/</id>
    <published>2017-04-26T09:42:41.000Z</published>
    <updated>2017-04-26T09:48:43.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="针对Win10不能正常使用的问题"><a href="#针对Win10不能正常使用的问题" class="headerlink" title="针对Win10不能正常使用的问题"></a>针对Win10不能正常使用的问题</h2><ol><li>进入安装目录</li><li>进入<code>drivers</code>文件夹</li><li>进入<code>Win81x64</code>文件夹</li><li>找到<code>netr28ux.inf</code>文件，右键安装之</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;针对Win10不能正常使用的问题&quot;&gt;&lt;a href=&quot;#针对Win10不能正常使用的问题&quot; class=&quot;headerlink&quot; title=&quot;针对Win10不能正常使用的问题&quot;&gt;&lt;/a&gt;针对Win10不能正常使用的问题&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;进入安装目录&lt;/l
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Movie Recommendation with MLlib</title>
    <link href="http://yoursite.com/2017/04/26/Movie-Recommendation-with-MLlib/"/>
    <id>http://yoursite.com/2017/04/26/Movie-Recommendation-with-MLlib/</id>
    <published>2017-04-26T06:24:57.000Z</published>
    <updated>2017-04-26T07:27:36.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spark-Summit-2014"><a href="#Spark-Summit-2014" class="headerlink" title="Spark Summit 2014"></a>Spark Summit 2014</h2><p><a href="https://databricks-training.s3.amazonaws.com/index.html" target="_blank" rel="external">https://databricks-training.s3.amazonaws.com/index.html</a></p><p>we will use MLlib to make personalized movie recommendations tailored <em>for you</em>. We will work with 10 million ratings from 72,000 users on 10,000 movies, collected by <a href="http://movielens.umn.edu/" target="_blank" rel="external">MovieLens</a>. This dataset is pre-loaded in your USB drive under <code>data/movielens/large</code>. For quick testing of your code, you may want to use a smaller dataset under <code>data/movielens/medium</code>, which contains 1 million ratings from 6000 users on 4000 movies.</p><h2 id="DataSet"><a href="#DataSet" class="headerlink" title="DataSet"></a>DataSet</h2><p>We will use two files from this MovieLens dataset: “<code>ratings.dat</code>” and “<code>movies.dat</code>”. All ratings are contained in the file “<code>ratings.dat</code>” and are in the following format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UserID::MovieID::Rating::Timestamp</div></pre></td></tr></table></figure><p>Movie information is in the file “<code>movies.dat</code>” and is in the following format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MovieID::Title::Genres</div></pre></td></tr></table></figure><h2 id="Collaborative-filtering"><a href="#Collaborative-filtering" class="headerlink" title="Collaborative filtering"></a>Collaborative filtering</h2><p>Collaborative filtering is commonly used for recommender systems. These techniques aim to fill in the missing entries of a user-item association matrix, in our case, the user-movie rating matrix. MLlib currently supports model-based collaborative filtering, in which users and products are described by a small set of latent factors that can be used to predict missing entries. In particular, we implement the alternating least squares (ALS) algorithm to learn these latent factors.</p><p><img src="https://databricks-training.s3.amazonaws.com/img/matrix_factorization.png" alt="cf"></p><h2 id="Create-training-examples"><a href="#Create-training-examples" class="headerlink" title="Create training examples"></a>Create training examples</h2><p><a href="https://github.com/ewanlee/spark-training" target="_blank" rel="external">https://github.com/ewanlee/spark-training</a></p><p>To make recommendation <em>for you</em>, we are going to learn your taste by asking you to rate a few movies. We have selected a small set of movies that have received the most ratings from users in the MovieLens dataset. You can rate those movies by running <code>bin/rateMovies</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python bin/rateMovies</div></pre></td></tr></table></figure><p>When you run the script, you should see prompt similar to the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Please rate the following movie (1-5 (best), or 0 if not seen):</div><div class="line">Toy Story (1995):</div></pre></td></tr></table></figure><p>After you’re done rating the movies, we save your ratings in <code>personalRatings.txt</code> in the MovieLens format, where a special user id <code>0</code> is assigned to you.</p><p><code>rateMovies</code> allows you to re-rate the movies if you’d like to see how your ratings affect your recommendations.</p><p>If you don’t have python installed, please copy <code>personalRatings.txt.template</code> to <code>personalRatings.txt</code> and replace <code>?</code>s with your ratings.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>We will be using a standalone project template for this exercise.</p><ul><li><p>In the training USB drive, this has been setup in</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">machine-learning/python/</div></pre></td></tr></table></figure></li><li><p>You should find the following items in the directory:</p></li><li><p><code>MovieLensALS.py</code>: Main Python program that you are going to edit, compile and run</p></li><li><p><code>solution</code>: Directory containing the solution code</p></li></ul><p><code>MovieLensALS.py</code> should look as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> itertools</div><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</div><div class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add</div><div class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join, isfile, dirname</div><div class="line"></div><div class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</div><div class="line"><span class="keyword">from</span> pyspark.mllib.recommendation <span class="keyword">import</span> ALS</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseRating</span><span class="params">(line)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Parses a rating record in MovieLens format userId::movieId::rating::timestamp .</div><div class="line">    """</div><div class="line">    <span class="comment"># ...</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseMovie</span><span class="params">(line)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Parses a movie record in MovieLens format movieId::movieTitle .</div><div class="line">    """</div><div class="line">    <span class="comment"># ...</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadRatings</span><span class="params">(ratingsFile)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Load ratings from file.</div><div class="line">    """</div><div class="line">    <span class="comment"># ...</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">computeRmse</span><span class="params">(model, data, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Compute RMSE (Root Mean Squared Error).</div><div class="line">    """</div><div class="line">    <span class="comment"># ...</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">if</span> (len(sys.argv) != <span class="number">3</span>):</div><div class="line">        <span class="keyword">print</span> <span class="string">"Usage: [usb root directory]/spark/bin/spark-submit --driver-memory 2g "</span> + \</div><div class="line">          <span class="string">"MovieLensALS.py movieLensDataDir personalRatingsFile"</span></div><div class="line">        sys.exit(<span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="comment"># set up environment</span></div><div class="line">    conf = SparkConf() \</div><div class="line">      .setAppName(<span class="string">"MovieLensALS"</span>) \</div><div class="line">      .set(<span class="string">"spark.executor.memory"</span>, <span class="string">"2g"</span>)</div><div class="line">    sc = SparkContext(conf=conf)</div><div class="line"></div><div class="line">    <span class="comment"># load personal ratings</span></div><div class="line">    myRatings = loadRatings(sys.argv[<span class="number">2</span>])</div><div class="line">    myRatingsRDD = sc.parallelize(myRatings, <span class="number">1</span>)</div><div class="line">    </div><div class="line">    <span class="comment"># load ratings and movie titles</span></div><div class="line"></div><div class="line">    movieLensHomeDir = sys.argv[<span class="number">1</span>]</div><div class="line"></div><div class="line">    <span class="comment"># ratings is an RDD of (last digit of timestamp, (userId, movieId, rating))</span></div><div class="line">    ratings = sc.textFile(join(movieLensHomeDir, <span class="string">"ratings.dat"</span>)).map(parseRating)</div><div class="line"></div><div class="line">    <span class="comment"># movies is an RDD of (movieId, movieTitle)</span></div><div class="line">    movies = dict(sc.textFile(join(movieLensHomeDir, <span class="string">"movies.dat"</span>)).map(parseMovie).collect())</div><div class="line"></div><div class="line">    <span class="comment"># your code here</span></div><div class="line">    </div><div class="line">    <span class="comment"># clean up</span></div><div class="line">    sc.stop()</div></pre></td></tr></table></figure><p>Let’s first take a closer look at our template code in a text editor, then we’ll start adding code to the template. Locate the<code>MovieLensALS</code> class and open it with a text editor.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">usb/$ cd machine-learning/python</div><div class="line">vim MovieLensALS.py  # Or your editor of choice</div></pre></td></tr></table></figure><p>For any Spark computation, we first create a SparkConf object and use it to create a SparkContext object. Since we will be using spark-submit to execute the programs in this tutorial (more on spark-submit in the next section), we only need to configure the executor memory allocation and give the program a name, e.g. “MovieLensALS”, to identify it in Spark’s web UI. In local mode, the web UI can be access at <a href="http://localhost:4040/" target="_blank" rel="external"><code>localhost:4040</code></a> during the execution of a program.</p><p>This is what it looks like in our template code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">conf = SparkConf() \</div><div class="line">     .setAppName(<span class="string">"MovieLensALS"</span>) \</div><div class="line">     .set(<span class="string">"spark.executor.memory"</span>, <span class="string">"2g"</span>)</div><div class="line">   sc = SparkContext(conf=conf)</div></pre></td></tr></table></figure><p>Next, the code uses the SparkContext to read in ratings. Recall that the rating file is a text file with “<code>::</code>” as the delimiter. The code parses each line to create a RDD for ratings that contains <code>(Int, Rating)</code> pairs. We only keep the last digit of the timestamp as a random key. The <code>Rating</code> class is a wrapper around the tuple <code>(user: Int, product: Int, rating: Double)</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">movieLensHomeDir = sys.argv[<span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="comment"># ratings is an RDD of (last digit of timestamp, (userId, movieId, rating))</span></div><div class="line">ratings = sc.textFile(join(movieLensHomeDir, <span class="string">"ratings.dat"</span>)).map(parseRating)</div></pre></td></tr></table></figure><p>Next, the code read in movie ids and titles, collect them into a movie id to title map.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseMovie</span><span class="params">(line)</span>:</span></div><div class="line">      fields = line.split(<span class="string">"::"</span>)</div><div class="line">      <span class="keyword">return</span> int(fields[<span class="number">0</span>]), fields[<span class="number">1</span>]</div><div class="line"></div><div class="line">    movies = dict(sc.textFile(join(movieLensHomeDir, <span class="string">"movies.dat"</span>)).map(parseMovie).collect())</div></pre></td></tr></table></figure><p>Now, let’s make our first edit to add code to get a summary of the ratings.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">numRatings = ratings.count()</div><div class="line">numUsers = ratings.values().map(<span class="keyword">lambda</span> r: r[<span class="number">0</span>]).distinct().count()</div><div class="line">numMovies = ratings.values().map(<span class="keyword">lambda</span> r: r[<span class="number">1</span>]).distinct().count()</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"Got %d ratings from %d users on %d movies."</span> % (numRatings, numUsers, numMovies)</div></pre></td></tr></table></figure><h2 id="Running-the-program"><a href="#Running-the-program" class="headerlink" title="Running the program"></a>Running the program</h2><p>Before we compute movie recommendations, here is a quick reminder on how you can run the program at any point during this exercise. As mentioned above, we will use <code>spark-submit</code> to execute your program in local mode for this tutorial.</p><p>Starting with Spark 1.0, <code>spark-submit</code> is the recommended way for running Spark applications, both on clusters and locally in standalone mode.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">usb/$ cd machine-learning/python</div><div class="line"></div><div class="line"># change the folder name from <span class="string">"medium"</span> to <span class="string">"large"</span> to run on the large data <span class="keyword">set</span></div><div class="line">[usb root directory]/spark/bin/spark-submit MovieLensALS.py [usb root directory]/data/movielens/medium/ ../personalRatings.txt</div></pre></td></tr></table></figure><p>You should see output similar to the following on your screen:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Got <span class="number">1000209</span> ratings from <span class="number">6040</span> users on <span class="number">3706</span> movies.</div></pre></td></tr></table></figure><h2 id="Splitting-training-data"><a href="#Splitting-training-data" class="headerlink" title="Splitting training data"></a>Splitting training data</h2><p>We will use MLlib’s <code>ALS</code> to train a <code>MatrixFactorizationModel</code>, which takes a <code>RDD[Rating]</code> object as input in Scala and <code>RDD[(user, product, rating)]</code> in Python. ALS has training parameters such as rank for matrix factors and regularization constants. To determine a good combination of the training parameters, we split the data into three non-overlapping subsets, named training, test, and validation, based on the last digit of the timestamp, and cache them. We will train multiple models based on the training set, select the best model on the validation set based on RMSE (Root Mean Squared Error), and finally evaluate the best model on the test set. We also add your ratings to the training set to make recommendations for you. We hold the training, validation, and test sets in memory by calling <code>cache</code> because we need to visit them multiple times.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">numPartitions = <span class="number">4</span></div><div class="line">training = ratings.filter(<span class="keyword">lambda</span> x: x[<span class="number">0</span>] &lt; <span class="number">6</span>) \</div><div class="line">  .values() \</div><div class="line">  .union(myRatingsRDD) \</div><div class="line">  .repartition(numPartitions) \</div><div class="line">  .cache()</div><div class="line"></div><div class="line">validation = ratings.filter(<span class="keyword">lambda</span> x: x[<span class="number">0</span>] &gt;= <span class="number">6</span> <span class="keyword">and</span> x[<span class="number">0</span>] &lt; <span class="number">8</span>) \</div><div class="line">  .values() \</div><div class="line">  .repartition(numPartitions) \</div><div class="line">  .cache()</div><div class="line"></div><div class="line">test = ratings.filter(<span class="keyword">lambda</span> x: x[<span class="number">0</span>] &gt;= <span class="number">8</span>).values().cache()</div><div class="line"></div><div class="line">numTraining = training.count()</div><div class="line">numValidation = validation.count()</div><div class="line">numTest = test.count()</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"Training: %d, validation: %d, test: %d"</span> % (numTraining, numValidation, numTest)</div></pre></td></tr></table></figure><p>After the split, you should see</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Training: <span class="number">602251</span>, validation: <span class="number">198919</span>, test: <span class="number">199049.</span></div></pre></td></tr></table></figure><h2 id="Training-using-ALS"><a href="#Training-using-ALS" class="headerlink" title="Training using ALS"></a>Training using ALS</h2><p>In this section, we will use <code>ALS.train</code> to train a bunch of models, and select and evaluate the best. Among the training paramters of ALS, the most important ones are rank, lambda (regularization constant), and number of iterations. The <code>train</code>method of ALS we are going to use is defined as the following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ALS</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(cls, ratings, rank, iterations=<span class="number">5</span>, lambda_=<span class="number">0.01</span>, blocks=<span class="number">-1</span>)</span>:</span></div><div class="line">    <span class="comment"># ...</span></div><div class="line">    <span class="keyword">return</span> MatrixFactorizationModel(sc, mod)</div></pre></td></tr></table></figure><p>deally, we want to try a large number of combinations of them in order to find the best one. Due to time constraint, we will test only 8 combinations resulting from the cross product of 2 different ranks (8 and 12), 2 different lambdas (1.0 and 10.0), and two different numbers of iterations (10 and 20). We use the provided method <code>computeRmse</code> to compute the RMSE on the validation set for each model. The model with the smallest RMSE on the validation set becomes the one selected and its RMSE on the test set is used as the final metric.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">ranks = [<span class="number">8</span>, <span class="number">12</span>]</div><div class="line">lambdas = [<span class="number">1.0</span>, <span class="number">10.0</span>]</div><div class="line">numIters = [<span class="number">10</span>, <span class="number">20</span>]</div><div class="line">bestModel = <span class="keyword">None</span></div><div class="line">bestValidationRmse = float(<span class="string">"inf"</span>)</div><div class="line">bestRank = <span class="number">0</span></div><div class="line">bestLambda = <span class="number">-1.0</span></div><div class="line">bestNumIter = <span class="number">-1</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> rank, lmbda, numIter <span class="keyword">in</span> itertools.product(ranks, lambdas, numIters):</div><div class="line">    model = ALS.train(training, rank, numIter, lmbda)</div><div class="line">    validationRmse = computeRmse(model, validation, numValidation)</div><div class="line">    <span class="keyword">print</span> <span class="string">"RMSE (validation) = %f for the model trained with "</span> % validationRmse + \</div><div class="line">          <span class="string">"rank = %d, lambda = %.1f, and numIter = %d."</span> % (rank, lmbda, numIter)</div><div class="line">    <span class="keyword">if</span> (validationRmse &lt; bestValidationRmse):</div><div class="line">        bestModel = model</div><div class="line">        bestValidationRmse = validationRmse</div><div class="line">        bestRank = rank</div><div class="line">        bestLambda = lmbda</div><div class="line">        bestNumIter = numIter</div><div class="line"></div><div class="line">testRmse = computeRmse(bestModel, test, numTest)</div><div class="line"></div><div class="line"><span class="comment"># evaluate the best model on the test set</span></div><div class="line"><span class="keyword">print</span> <span class="string">"The best model was trained with rank = %d and lambda = %.1f, "</span> % (bestRank, bestLambda) \</div><div class="line">  + <span class="string">"and numIter = %d, and its RMSE on the test set is %f."</span> % (bestNumIter, testRmse)</div></pre></td></tr></table></figure><p>Spark might take a minute or two to train the models. You should see the following on the screen:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The best model was trained using rank <span class="number">8</span> <span class="keyword">and</span> <span class="keyword">lambda</span> <span class="number">10.0</span>, <span class="keyword">and</span> its RMSE on test <span class="keyword">is</span> <span class="number">0.8808492431998702</span>.</div></pre></td></tr></table></figure><h2 id="Recommending-movies-for-you"><a href="#Recommending-movies-for-you" class="headerlink" title="Recommending movies for you"></a>Recommending movies for you</h2><p>As the last part of our tutorial, let’s take a look at what movies our model recommends for you. This is done by generating <code>(0, movieId)</code> pairs for all movies you haven’t rated and calling the model’s <code>predict</code> method to get predictions. <code>0</code> is the special user id assigned to you.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MatrixFactorizationModel</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predictAll</span><span class="params">(self, usersProducts)</span>:</span></div><div class="line">        <span class="comment"># ...</span></div><div class="line">        <span class="keyword">return</span> RDD(self._java_model.predict(usersProductsJRDD._jrdd),</div><div class="line">                   self._context, RatingDeserializer())</div></pre></td></tr></table></figure><p>After we get all predictions, let us list the top 50 recommendations and see whether they look good to you.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">myRatedMovieIds = set([x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> myRatings])</div><div class="line">candidates = sc.parallelize([m <span class="keyword">for</span> m <span class="keyword">in</span> movies <span class="keyword">if</span> m <span class="keyword">not</span> <span class="keyword">in</span> myRatedMovieIds])</div><div class="line">predictions = bestModel.predictAll(candidates.map(<span class="keyword">lambda</span> x: (<span class="number">0</span>, x))).collect()</div><div class="line">recommendations = sorted(predictions, key=<span class="keyword">lambda</span> x: x[<span class="number">2</span>], reverse=<span class="keyword">True</span>)[:<span class="number">50</span>]</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"Movies recommended for you:"</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(recommendations)):</div><div class="line">    <span class="keyword">print</span> (<span class="string">"%2d: %s"</span> % (i + <span class="number">1</span>, movies[recommendations[i][<span class="number">1</span>]])).encode(<span class="string">'ascii'</span>, <span class="string">'ignore'</span>)</div></pre></td></tr></table></figure><p>The output should be similar to</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Movies recommended for you:</div><div class="line"> 1: Silence of the Lambs, The (1991)</div><div class="line"> 2: Saving Private Ryan (1998)</div><div class="line"> 3: Godfather, The (1972)</div><div class="line"> 4: Star Wars: Episode IV - A New Hope (1977)</div><div class="line"> 5: Braveheart (1995)</div><div class="line"> 6: Schindler's List (1993)</div><div class="line"> 7: Shawshank Redemption, The (1994)</div><div class="line"> 8: Star Wars: Episode V - The Empire Strikes Back (1980)</div><div class="line"> 9: Pulp Fiction (1994)</div><div class="line">10: Alien (1979)</div><div class="line">...</div></pre></td></tr></table></figure><h2 id="Comparing-to-a-naive-baseline"><a href="#Comparing-to-a-naive-baseline" class="headerlink" title="Comparing to a naive baseline"></a>Comparing to a naive baseline</h2><p>Does ALS output a non-trivial model? We can compare the evaluation result with a naive baseline model that only outputs the average rating (or you may try one that outputs the average rating per movie). Computing the baseline’s RMSE is straightforward:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">meanRating = training.union(validation).map(<span class="keyword">lambda</span> x: x[<span class="number">2</span>]).mean()</div><div class="line">baselineRmse = sqrt(test.map(<span class="keyword">lambda</span> x: (meanRating - x[<span class="number">2</span>]) ** <span class="number">2</span>).reduce(add) / numTest)</div><div class="line">improvement = (baselineRmse - testRmse) / baselineRmse * <span class="number">100</span></div><div class="line"><span class="keyword">print</span> <span class="string">"The best model improves the baseline by %.2f"</span> % (improvement) + <span class="string">"%."</span></div></pre></td></tr></table></figure><p>The output should be similar to</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The best model improves the baseline by <span class="number">20.96</span>%.</div></pre></td></tr></table></figure><p>It seems obvious that the trained model would outperform the naive baseline. However, a bad combination of training parameters would lead to a model worse than this naive baseline. Choosing the right set of parameters is quite important for this task.</p><h2 id="Solution-code"><a href="#Solution-code" class="headerlink" title="Solution code"></a>Solution code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> itertools</div><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</div><div class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add</div><div class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join, isfile, dirname</div><div class="line"></div><div class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</div><div class="line"><span class="keyword">from</span> pyspark.mllib.recommendation <span class="keyword">import</span> ALS</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseRating</span><span class="params">(line)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Parses a rating record in MovieLens format userId::movieId::rating::timestamp .</div><div class="line">    """</div><div class="line">    fields = line.strip().split(<span class="string">"::"</span>)</div><div class="line">    <span class="keyword">return</span> long(fields[<span class="number">3</span>]) % <span class="number">10</span>, (int(fields[<span class="number">0</span>]), int(fields[<span class="number">1</span>]), float(fields[<span class="number">2</span>]))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseMovie</span><span class="params">(line)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Parses a movie record in MovieLens format movieId::movieTitle .</div><div class="line">    """</div><div class="line">    fields = line.strip().split(<span class="string">"::"</span>)</div><div class="line">    <span class="keyword">return</span> int(fields[<span class="number">0</span>]), fields[<span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadRatings</span><span class="params">(ratingsFile)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Load ratings from file.</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isfile(ratingsFile):</div><div class="line">        <span class="keyword">print</span> <span class="string">"File %s does not exist."</span> % ratingsFile</div><div class="line">        sys.exit(<span class="number">1</span>)</div><div class="line">    f = open(ratingsFile, <span class="string">'r'</span>)</div><div class="line">    ratings = filter(<span class="keyword">lambda</span> r: r[<span class="number">2</span>] &gt; <span class="number">0</span>, [parseRating(line)[<span class="number">1</span>] <span class="keyword">for</span> line <span class="keyword">in</span> f])</div><div class="line">    f.close()</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ratings:</div><div class="line">        <span class="keyword">print</span> <span class="string">"No ratings provided."</span></div><div class="line">        sys.exit(<span class="number">1</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> ratings</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">computeRmse</span><span class="params">(model, data, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Compute RMSE (Root Mean Squared Error).</div><div class="line">    """</div><div class="line">    predictions = model.predictAll(data.map(<span class="keyword">lambda</span> x: (x[<span class="number">0</span>], x[<span class="number">1</span>])))</div><div class="line">    predictionsAndRatings = predictions.map(<span class="keyword">lambda</span> x: ((x[<span class="number">0</span>], x[<span class="number">1</span>]), x[<span class="number">2</span>])) \</div><div class="line">      .join(data.map(<span class="keyword">lambda</span> x: ((x[<span class="number">0</span>], x[<span class="number">1</span>]), x[<span class="number">2</span>]))) \</div><div class="line">      .values()</div><div class="line">    <span class="keyword">return</span> sqrt(predictionsAndRatings.map(<span class="keyword">lambda</span> x: (x[<span class="number">0</span>] - x[<span class="number">1</span>]) ** <span class="number">2</span>).reduce(add) / float(n))</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">if</span> (len(sys.argv) != <span class="number">3</span>):</div><div class="line">        <span class="keyword">print</span> <span class="string">"Usage: /path/to/spark/bin/spark-submit --driver-memory 2g "</span> + \</div><div class="line">          <span class="string">"MovieLensALS.py movieLensDataDir personalRatingsFile"</span></div><div class="line">        sys.exit(<span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="comment"># set up environment</span></div><div class="line">    conf = SparkConf() \</div><div class="line">      .setAppName(<span class="string">"MovieLensALS"</span>) \</div><div class="line">      .set(<span class="string">"spark.executor.memory"</span>, <span class="string">"2g"</span>)</div><div class="line">    sc = SparkContext(conf=conf)</div><div class="line"></div><div class="line">    <span class="comment"># load personal ratings</span></div><div class="line">    myRatings = loadRatings(sys.argv[<span class="number">2</span>])</div><div class="line">    myRatingsRDD = sc.parallelize(myRatings, <span class="number">1</span>)</div><div class="line">    </div><div class="line">    <span class="comment"># load ratings and movie titles</span></div><div class="line"></div><div class="line">    movieLensHomeDir = sys.argv[<span class="number">1</span>]</div><div class="line"></div><div class="line">    <span class="comment"># ratings is an RDD of (last digit of timestamp, (userId, movieId, rating))</span></div><div class="line">    ratings = sc.textFile(join(movieLensHomeDir, <span class="string">"ratings.dat"</span>)).map(parseRating)</div><div class="line"></div><div class="line">    <span class="comment"># movies is an RDD of (movieId, movieTitle)</span></div><div class="line">    movies = dict(sc.textFile(join(movieLensHomeDir, <span class="string">"movies.dat"</span>)).map(parseMovie).collect())</div><div class="line"></div><div class="line">    numRatings = ratings.count()</div><div class="line">    numUsers = ratings.values().map(<span class="keyword">lambda</span> r: r[<span class="number">0</span>]).distinct().count()</div><div class="line">    numMovies = ratings.values().map(<span class="keyword">lambda</span> r: r[<span class="number">1</span>]).distinct().count()</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">"Got %d ratings from %d users on %d movies."</span> % (numRatings, numUsers, numMovies)</div><div class="line"></div><div class="line">    <span class="comment"># split ratings into train (60%), validation (20%), and test (20%) based on the </span></div><div class="line">    <span class="comment"># last digit of the timestamp, add myRatings to train, and cache them</span></div><div class="line"></div><div class="line">    <span class="comment"># training, validation, test are all RDDs of (userId, movieId, rating)</span></div><div class="line"></div><div class="line">    numPartitions = <span class="number">4</span></div><div class="line">    training = ratings.filter(<span class="keyword">lambda</span> x: x[<span class="number">0</span>] &lt; <span class="number">6</span>) \</div><div class="line">      .values() \</div><div class="line">      .union(myRatingsRDD) \</div><div class="line">      .repartition(numPartitions) \</div><div class="line">      .cache()</div><div class="line"></div><div class="line">    validation = ratings.filter(<span class="keyword">lambda</span> x: x[<span class="number">0</span>] &gt;= <span class="number">6</span> <span class="keyword">and</span> x[<span class="number">0</span>] &lt; <span class="number">8</span>) \</div><div class="line">      .values() \</div><div class="line">      .repartition(numPartitions) \</div><div class="line">      .cache()</div><div class="line"></div><div class="line">    test = ratings.filter(<span class="keyword">lambda</span> x: x[<span class="number">0</span>] &gt;= <span class="number">8</span>).values().cache()</div><div class="line"></div><div class="line">    numTraining = training.count()</div><div class="line">    numValidation = validation.count()</div><div class="line">    numTest = test.count()</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">"Training: %d, validation: %d, test: %d"</span> % (numTraining, numValidation, numTest)</div><div class="line"></div><div class="line">    <span class="comment"># train models and evaluate them on the validation set</span></div><div class="line"></div><div class="line">    ranks = [<span class="number">8</span>, <span class="number">12</span>]</div><div class="line">    lambdas = [<span class="number">0.1</span>, <span class="number">10.0</span>]</div><div class="line">    numIters = [<span class="number">10</span>, <span class="number">20</span>]</div><div class="line">    bestModel = <span class="keyword">None</span></div><div class="line">    bestValidationRmse = float(<span class="string">"inf"</span>)</div><div class="line">    bestRank = <span class="number">0</span></div><div class="line">    bestLambda = <span class="number">-1.0</span></div><div class="line">    bestNumIter = <span class="number">-1</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> rank, lmbda, numIter <span class="keyword">in</span> itertools.product(ranks, lambdas, numIters):</div><div class="line">        model = ALS.train(training, rank, numIter, lmbda)</div><div class="line">        validationRmse = computeRmse(model, validation, numValidation)</div><div class="line">        <span class="keyword">print</span> <span class="string">"RMSE (validation) = %f for the model trained with "</span> % validationRmse + \</div><div class="line">              <span class="string">"rank = %d, lambda = %.1f, and numIter = %d."</span> % (rank, lmbda, numIter)</div><div class="line">        <span class="keyword">if</span> (validationRmse &lt; bestValidationRmse):</div><div class="line">            bestModel = model</div><div class="line">            bestValidationRmse = validationRmse</div><div class="line">            bestRank = rank</div><div class="line">            bestLambda = lmbda</div><div class="line">            bestNumIter = numIter</div><div class="line"></div><div class="line">    testRmse = computeRmse(bestModel, test, numTest)</div><div class="line"></div><div class="line">    <span class="comment"># evaluate the best model on the test set</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"The best model was trained with rank = %d and lambda = %.1f, "</span> % (bestRank, bestLambda) \</div><div class="line">      + <span class="string">"and numIter = %d, and its RMSE on the test set is %f."</span> % (bestNumIter, testRmse)</div><div class="line"></div><div class="line">    <span class="comment"># compare the best model with a naive baseline that always returns the mean rating</span></div><div class="line">    meanRating = training.union(validation).map(<span class="keyword">lambda</span> x: x[<span class="number">2</span>]).mean()</div><div class="line">    baselineRmse = sqrt(test.map(<span class="keyword">lambda</span> x: (meanRating - x[<span class="number">2</span>]) ** <span class="number">2</span>).reduce(add) / numTest)</div><div class="line">    improvement = (baselineRmse - testRmse) / baselineRmse * <span class="number">100</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"The best model improves the baseline by %.2f"</span> % (improvement) + <span class="string">"%."</span></div><div class="line"></div><div class="line">    <span class="comment"># make personalized recommendations</span></div><div class="line"></div><div class="line">    myRatedMovieIds = set([x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> myRatings])</div><div class="line">    candidates = sc.parallelize([m <span class="keyword">for</span> m <span class="keyword">in</span> movies <span class="keyword">if</span> m <span class="keyword">not</span> <span class="keyword">in</span> myRatedMovieIds])</div><div class="line">    predictions = bestModel.predictAll(candidates.map(<span class="keyword">lambda</span> x: (<span class="number">0</span>, x))).collect()</div><div class="line">    recommendations = sorted(predictions, key=<span class="keyword">lambda</span> x: x[<span class="number">2</span>], reverse=<span class="keyword">True</span>)[:<span class="number">50</span>]</div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">"Movies recommended for you:"</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(recommendations)):</div><div class="line">        <span class="keyword">print</span> (<span class="string">"%2d: %s"</span> % (i + <span class="number">1</span>, movies[recommendations[i][<span class="number">1</span>]])).encode(<span class="string">'ascii'</span>, <span class="string">'ignore'</span>)</div><div class="line"></div><div class="line">    <span class="comment"># clean up</span></div><div class="line">    sc.stop()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spark-Summit-2014&quot;&gt;&lt;a href=&quot;#Spark-Summit-2014&quot; class=&quot;headerlink&quot; title=&quot;Spark Summit 2014&quot;&gt;&lt;/a&gt;Spark Summit 2014&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;h
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
      <category term="MLlib" scheme="http://yoursite.com/tags/MLlib/"/>
    
      <category term="recommendation system" scheme="http://yoursite.com/tags/recommendation-system/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning with MLlib of Spark</title>
    <link href="http://yoursite.com/2017/04/25/Machine-Learning-with-MLlib-of-Spark/"/>
    <id>http://yoursite.com/2017/04/25/Machine-Learning-with-MLlib-of-Spark/</id>
    <published>2017-04-25T11:13:07.000Z</published>
    <updated>2017-04-25T13:21:00.738Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Example-Spam-Classification"><a href="#Example-Spam-Classification" class="headerlink" title="Example: Spam Classification"></a>Example: Spam Classification</h2><p>This program uses two MLlib algorithms: <code>HashingTF</code>, which builds term frequency feature vectors from text data, and LogisticRegressionWithSGD, which implements the logistic regression procedure using stochastic gradient descent (<code>SGD</code>). We assume that we start with two files, spam.txt an normal.txt, each of which contains examples of spam and non-spam emails, one per line. We then turn the text in each file into a feature vector with <code>TF</code>, and train a logistic regression model to separate the two types of messages.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Licensed to the Apache Software Foundation (ASF) under one or more</span></div><div class="line"><span class="comment"># contributor license agreements.  See the NOTICE file distributed with</span></div><div class="line"><span class="comment"># this work for additional information regarding copyright ownership.</span></div><div class="line"><span class="comment"># The ASF licenses this file to You under the Apache License, Version 2.0</span></div><div class="line"><span class="comment"># (the "License"); you may not use this file except in compliance with</span></div><div class="line"><span class="comment"># the License.  You may obtain a copy of the License at</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#    http://www.apache.org/licenses/LICENSE-2.0</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></div><div class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></div><div class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div><div class="line"><span class="comment"># See the License for the specific language governing permissions and</span></div><div class="line"><span class="comment"># limitations under the License.</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkContext</div><div class="line"><span class="keyword">from</span> pyspark.mllib.regression <span class="keyword">import</span> LabeledPoint</div><div class="line"><span class="keyword">from</span> pyspark.mllib.classification <span class="keyword">import</span> LogisticRegressionWithSGD</div><div class="line"><span class="keyword">from</span> pyspark.mllib.feature <span class="keyword">import</span> HashingTF</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    sc = SparkContext(appName=<span class="string">"PythonBookExample"</span>)</div><div class="line"></div><div class="line">    <span class="comment"># Load 2 types of emails from text files: spam and ham (non-spam).</span></div><div class="line">    <span class="comment"># Each line has text from one email.</span></div><div class="line">    spam = sc.textFile(<span class="string">"file:///home/hduser/learning-spark/files/spam.txt"</span>)</div><div class="line">    ham = sc.textFile(<span class="string">"file:///home/hduser/learning-spark/files/ham.txt"</span>)</div><div class="line"></div><div class="line">    <span class="comment"># Create a HashingTF instance to map email text to vectors of 100 features.</span></div><div class="line">    tf = HashingTF(numFeatures = <span class="number">100</span>)</div><div class="line">    <span class="comment"># Each email is split into words, and each word is mapped to one feature.</span></div><div class="line">    spamFeatures = spam.map(<span class="keyword">lambda</span> email: tf.transform(email.split(<span class="string">" "</span>)))</div><div class="line">    hamFeatures = ham.map(<span class="keyword">lambda</span> email: tf.transform(email.split(<span class="string">" "</span>)))</div><div class="line"></div><div class="line">    <span class="comment"># Create LabeledPoint datasets for positive (spam) and negative (ham) examples.</span></div><div class="line">    positiveExamples = spamFeatures.map(<span class="keyword">lambda</span> features: LabeledPoint(<span class="number">1</span>, features))</div><div class="line">    negativeExamples = hamFeatures.map(<span class="keyword">lambda</span> features: LabeledPoint(<span class="number">0</span>, features))</div><div class="line">    training_data = positiveExamples.union(negativeExamples)</div><div class="line">    training_data.cache() <span class="comment"># Cache data since Logistic Regression is an iterative algorithm.</span></div><div class="line"></div><div class="line">    <span class="comment"># Run Logistic Regression using the SGD optimizer.</span></div><div class="line">    <span class="comment"># regParam is model regularization, which can make models more robust.</span></div><div class="line">    model = LogisticRegressionWithSGD.train(training_data)</div><div class="line"></div><div class="line">    <span class="comment"># Test on a positive example (spam) and a negative one (ham).</span></div><div class="line">    <span class="comment"># First apply the same HashingTF feature transformation used on the training data.</span></div><div class="line">    posTestExample = tf.transform(<span class="string">"O M G GET cheap stuff by sending money to ..."</span>.split(<span class="string">" "</span>))</div><div class="line">    negTestExample = tf.transform(<span class="string">"Hi Dad, I started studying Spark the other ..."</span>.split(<span class="string">" "</span>))</div><div class="line"></div><div class="line">    <span class="comment"># Now use the learned model to predict spam/ham for new emails.</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"Prediction for positive test example: %g"</span> % model.predict(posTestExample)</div><div class="line">    <span class="keyword">print</span> <span class="string">"Prediction for negative test example: %g"</span> % model.predict(negTestExample)</div><div class="line"></div><div class="line">    sc.stop()</div></pre></td></tr></table></figure><h2 id="Algorithms"><a href="#Algorithms" class="headerlink" title="Algorithms"></a>Algorithms</h2><p><strong><em>Here only has some usual APIs.</em></strong></p><h3 id="Feature-Extraction"><a href="#Feature-Extraction" class="headerlink" title="Feature Extraction"></a>Feature Extraction</h3><h4 id="Scaling"><a href="#Scaling" class="headerlink" title="Scaling"></a>Scaling</h4><p>Most machine learning algorithms consider the magnitude of each element in the feature vector, and thus work best when the features are scaled so they weigh equally (e.g., all features have a mean of 0 and standard deviation of 1). Once you have built feature vectors, you can use the StandardScaler class in MLlib to do this scaling, both for the mean and the standard deviation. You create a StandardScaler, call fit() on a dataset to obtain a StandardScalerModel (i.e., compute the mean and variance of each column), and then call transform() on the model to scale a dataset.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pyspark.mllib.feature <span class="keyword">import</span> StandardScaler</div><div class="line"></div><div class="line">vectors = [Vectors.dense([<span class="number">-2.0</span>, <span class="number">5.0</span>, <span class="number">1.0</span>]), Vectors.dense([<span class="number">2.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>])]</div><div class="line">dataset = sc.parallelize(vectors)</div><div class="line">scaler = StandardScaler(withMean=<span class="keyword">True</span>, withStd=<span class="keyword">True</span>)</div><div class="line">model = scaler.fit(dataset)</div><div class="line">result = model.transform(dataset)</div><div class="line"></div><div class="line"><span class="comment"># Result: &#123;[-0.7071, 0.7071, 0.0], [0.7071, -0.7071, 0.0]&#125;</span></div></pre></td></tr></table></figure><h4 id="Normalization"><a href="#Normalization" class="headerlink" title="Normalization"></a>Normalization</h4><p>Simply use <code>Normalizer().transform(rdd)</code>. By default Normalizer uses the L 2 norm (i.e, Euclidean length), but you can also pass a power <code>p</code>to Normalizer to use the L p norm.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pyspark.mllib.feature <span class="keyword">import</span> Normalizer</div><div class="line"><span class="keyword">from</span> pyspark.mllib.util <span class="keyword">import</span> MLUtils</div><div class="line"></div><div class="line">data = MLUtils.loadLibSVMFile(sc, <span class="string">"data/mllib/sample_libsvm_data.txt"</span>)</div><div class="line">labels = data.map(<span class="keyword">lambda</span> x: x.label)</div><div class="line">features = data.map(<span class="keyword">lambda</span> x: x.features)</div><div class="line"></div><div class="line">normalizer1 = Normalizer()</div><div class="line">normalizer2 = Normalizer(p=float(<span class="string">"inf"</span>))</div><div class="line"></div><div class="line"><span class="comment"># Each sample in data1 will be normalized using $L^2$ norm.</span></div><div class="line">data1 = labels.zip(normalizer1.transform(features))</div><div class="line"></div><div class="line"><span class="comment"># Each sample in data2 will be normalized using $L^\infty$ norm.</span></div><div class="line">data2 = labels.zip(normalizer2.transform(features))</div></pre></td></tr></table></figure><h4 id="Word2Vec"><a href="#Word2Vec" class="headerlink" title="Word2Vec"></a>Word2Vec</h4><p>Once you have trained the model (withWord2Vec.fit(rdd)), you will receive a Word2VecModel that can be used to transform() each word into a vector. Note that the size of the models in Word2Vec will be equal to the number of words in your vocabulary times the size of a vector (by default, 100). You may wish to filter out words that are not in a standard dictionary to limit the size. In general, a good size for the vocabulary is 100,000 words.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pyspark.mllib.feature <span class="keyword">import</span> Word2Vec</div><div class="line"></div><div class="line">inp = sc.textFile(<span class="string">"data/mllib/sample_lda_data.txt"</span>).map(<span class="keyword">lambda</span> row: row.split(<span class="string">" "</span>))</div><div class="line"></div><div class="line">word2vec = Word2Vec()</div><div class="line">model = word2vec.fit(inp)</div><div class="line"></div><div class="line">synonyms = model.findSynonyms(<span class="string">'1'</span>, <span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> word, cosine_distance <span class="keyword">in</span> synonyms:</div><div class="line">    print(<span class="string">"&#123;&#125;: &#123;&#125;"</span>.format(word, cosine_distance))</div></pre></td></tr></table></figure><h3 id="Statistics"><a href="#Statistics" class="headerlink" title="Statistics"></a>Statistics</h3><p><strong><em>Statistics.colStats(rdd)</em></strong><br>Computes a statistical summary of an RDD of vectors, which stores the min, max, mean, and variance for each column in the set of vectors. This can be used to obtain a wide variety of statistics in one pass.</p><p><strong><em>Statistics.corr(rdd, method)</em></strong><br>Computes the correlation matrix between columns in an RDD of vectors, using either the Pearson or Spearman correlation (method must be one of pearson and spearman).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pyspark.mllib.stat <span class="keyword">import</span> Statistics</div><div class="line"></div><div class="line">seriesX = sc.parallelize([<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">3.0</span>, <span class="number">5.0</span>])  <span class="comment"># a series</span></div><div class="line"><span class="comment"># seriesY must have the same number of partitions and cardinality as seriesX</span></div><div class="line">seriesY = sc.parallelize([<span class="number">11.0</span>, <span class="number">22.0</span>, <span class="number">33.0</span>, <span class="number">33.0</span>, <span class="number">555.0</span>])</div><div class="line"></div><div class="line"><span class="comment"># Compute the correlation using Pearson's method. Enter "spearman" for Spearman's method.</span></div><div class="line"><span class="comment"># If a method is not specified, Pearson's method will be used by default.</span></div><div class="line">print(<span class="string">"Correlation is: "</span> + str(Statistics.corr(seriesX, seriesY, method=<span class="string">"pearson"</span>)))</div><div class="line"></div><div class="line">data = sc.parallelize(</div><div class="line">    [np.array([<span class="number">1.0</span>, <span class="number">10.0</span>, <span class="number">100.0</span>]), np.array([<span class="number">2.0</span>, <span class="number">20.0</span>, <span class="number">200.0</span>]), np.array([<span class="number">5.0</span>, <span class="number">33.0</span>, <span class="number">366.0</span>])]</div><div class="line">)  <span class="comment"># an RDD of Vectors</span></div><div class="line"></div><div class="line"><span class="comment"># calculate the correlation matrix using Pearson's method. Use "spearman" for Spearman's method.</span></div><div class="line"><span class="comment"># If a method is not specified, Pearson's method will be used by default.</span></div><div class="line">print(Statistics.corr(data, method=<span class="string">"pearson"</span>))</div></pre></td></tr></table></figure><p><strong><em>Statistics.corr(rdd1, rdd2, method)</em></strong><br>Computes the correlation between two RDDs of floating-point values, using either the Pearson or Spearman correlation (method must be one of pearson and spearman).</p><p><strong><em>Statistics.chiSqTest(rdd)</em></strong><br>Computes Pearson’s independence test for every feature with the label on an RDD of LabeledPoint objects. Returns an array of ChiSqTestResult objects that capture the p-value, test statistic, and degrees of freedom for each feature. Label and feature values must be categorical (i.e., discrete values).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pyspark.mllib.linalg <span class="keyword">import</span> Matrices, Vectors</div><div class="line"><span class="keyword">from</span> pyspark.mllib.regression <span class="keyword">import</span> LabeledPoint</div><div class="line"><span class="keyword">from</span> pyspark.mllib.stat <span class="keyword">import</span> Statistics</div><div class="line"></div><div class="line">vec = Vectors.dense(<span class="number">0.1</span>, <span class="number">0.15</span>, <span class="number">0.2</span>, <span class="number">0.3</span>, <span class="number">0.25</span>)  <span class="comment"># a vector composed of the frequencies of events</span></div><div class="line"></div><div class="line"><span class="comment"># compute the goodness of fit. If a second vector to test against</span></div><div class="line"><span class="comment"># is not supplied as a parameter, the test runs against a uniform distribution.</span></div><div class="line">goodnessOfFitTestResult = Statistics.chiSqTest(vec)</div><div class="line"></div><div class="line"><span class="comment"># summary of the test including the p-value, degrees of freedom,</span></div><div class="line"><span class="comment"># test statistic, the method used, and the null hypothesis.</span></div><div class="line">print(<span class="string">"%s\n"</span> % goodnessOfFitTestResult)</div><div class="line"></div><div class="line">mat = Matrices.dense(<span class="number">3</span>, <span class="number">2</span>, [<span class="number">1.0</span>, <span class="number">3.0</span>, <span class="number">5.0</span>, <span class="number">2.0</span>, <span class="number">4.0</span>, <span class="number">6.0</span>])  <span class="comment"># a contingency matrix</span></div><div class="line"></div><div class="line"><span class="comment"># conduct Pearson's independence test on the input contingency matrix</span></div><div class="line">independenceTestResult = Statistics.chiSqTest(mat)</div><div class="line"></div><div class="line"><span class="comment"># summary of the test including the p-value, degrees of freedom,</span></div><div class="line"><span class="comment"># test statistic, the method used, and the null hypothesis.</span></div><div class="line">print(<span class="string">"%s\n"</span> % independenceTestResult)</div><div class="line"></div><div class="line">obs = sc.parallelize(</div><div class="line">    [LabeledPoint(<span class="number">1.0</span>, [<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">3.0</span>]),</div><div class="line">     LabeledPoint(<span class="number">1.0</span>, [<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">0.0</span>]),</div><div class="line">     LabeledPoint(<span class="number">1.0</span>, [<span class="number">-1.0</span>, <span class="number">0.0</span>, <span class="number">-0.5</span>])]</div><div class="line">)  <span class="comment"># LabeledPoint(feature, label)</span></div><div class="line"></div><div class="line"><span class="comment"># The contingency table is constructed from an RDD of LabeledPoint and used to conduct</span></div><div class="line"><span class="comment"># the independence test. Returns an array containing the ChiSquaredTestResult for every feature</span></div><div class="line"><span class="comment"># against the label.</span></div><div class="line">featureTestResults = Statistics.chiSqTest(obs)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i, result <span class="keyword">in</span> enumerate(featureTestResults):</div><div class="line">    print(<span class="string">"Column %d:\n%s"</span> % (i + <span class="number">1</span>, result))</div></pre></td></tr></table></figure><h3 id="Classification-and-Regression"><a href="#Classification-and-Regression" class="headerlink" title="Classification and Regression"></a>Classification and Regression</h3><p>MLlib includes a variety of methods for classification and regression, including simple linear methods and decision trees and forests.</p><h4 id="Linear-regression"><a href="#Linear-regression" class="headerlink" title="Linear regression"></a>Linear regression</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pyspark.mllib.regression <span class="keyword">import</span> LabeledPoint</div><div class="line"><span class="keyword">from</span> pyspark.mllib.regression <span class="keyword">import</span> LinearRegressionWithSGD</div><div class="line"></div><div class="line">points = <span class="comment"># (create RDD of LabeledPoint)</span></div><div class="line">model = LinearRegressionWithSGD.train(points, iterations=<span class="number">200</span>, intercept=<span class="keyword">True</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"weights: %s, intercept: %s"</span> % (model.weights, model.intercept)</div></pre></td></tr></table></figure><h4 id="Logistic-regression"><a href="#Logistic-regression" class="headerlink" title="Logistic regression"></a>Logistic regression</h4><p>The logistic regression algorithm has a very similar API to linear regression, covered in the previous section. One difference is that there are two algorithms available for solving it: <code>SGD</code> and <code>LBFGS</code>. <code>LBFGS</code> is generally the best choice, but is not available in some earlier versions of <code>MLlib</code> (before <code>Spark 1.2</code>). These algorithms are available in the <code>mllib.classification.LogisticRegressionWithLBFGS</code> and <code>WithSGD</code> classes, which have interfaces similar to <code>LinearRegressionWithSGD</code>. They take all the same parameters as linear regression.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pyspark.mllib.classification <span class="keyword">import</span> LogisticRegressionWithLBFGS, LogisticRegressionModel</div><div class="line"><span class="keyword">from</span> pyspark.mllib.regression <span class="keyword">import</span> LabeledPoint</div><div class="line"></div><div class="line"><span class="comment"># Load and parse the data</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parsePoint</span><span class="params">(line)</span>:</span></div><div class="line">    values = [float(x) <span class="keyword">for</span> x <span class="keyword">in</span> line.split(<span class="string">' '</span>)]</div><div class="line">    <span class="keyword">return</span> LabeledPoint(values[<span class="number">0</span>], values[<span class="number">1</span>:])</div><div class="line"></div><div class="line">data = sc.textFile(<span class="string">"data/mllib/sample_svm_data.txt"</span>)</div><div class="line">parsedData = data.map(parsePoint)</div><div class="line"></div><div class="line"><span class="comment"># Build the model</span></div><div class="line">model = LogisticRegressionWithLBFGS.train(parsedData)</div><div class="line"></div><div class="line"><span class="comment"># Evaluating the model on training data</span></div><div class="line">labelsAndPreds = parsedData.map(<span class="keyword">lambda</span> p: (p.label, model.predict(p.features)))</div><div class="line">trainErr = labelsAndPreds.filter(<span class="keyword">lambda</span> (v, p): v != p).count() / float(parsedData.count())</div><div class="line">print(<span class="string">"Training Error = "</span> + str(trainErr))</div><div class="line"></div><div class="line"><span class="comment"># Save and load model</span></div><div class="line">model.save(sc, <span class="string">"target/tmp/pythonLogisticRegressionWithLBFGSModel"</span>)</div><div class="line">sameModel = LogisticRegressionModel.load(sc,</div><div class="line">                                         <span class="string">"target/tmp/pythonLogisticRegressionWithLBFGSModel"</span>)</div></pre></td></tr></table></figure><h4 id="Support-Vector-Machines"><a href="#Support-Vector-Machines" class="headerlink" title="Support Vector Machines"></a>Support Vector Machines</h4><p>They are available through the <code>SVMWithSGD</code> class, with similar parameters to linear and logisitic regression. The returned <code>SVMModel</code> uses a threshold for prediction like <code>LogisticRegressionModel</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pyspark.mllib.classification <span class="keyword">import</span> SVMWithSGD, SVMModel</div><div class="line"><span class="keyword">from</span> pyspark.mllib.regression <span class="keyword">import</span> LabeledPoint</div><div class="line"></div><div class="line"><span class="comment"># Load and parse the data</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parsePoint</span><span class="params">(line)</span>:</span></div><div class="line">    values = [float(x) <span class="keyword">for</span> x <span class="keyword">in</span> line.split(<span class="string">' '</span>)]</div><div class="line">    <span class="keyword">return</span> LabeledPoint(values[<span class="number">0</span>], values[<span class="number">1</span>:])</div><div class="line"></div><div class="line">data = sc.textFile(<span class="string">"data/mllib/sample_svm_data.txt"</span>)</div><div class="line">parsedData = data.map(parsePoint)</div><div class="line"></div><div class="line"><span class="comment"># Build the model</span></div><div class="line">model = SVMWithSGD.train(parsedData, iterations=<span class="number">100</span>)</div><div class="line"></div><div class="line"><span class="comment"># Evaluating the model on training data</span></div><div class="line">labelsAndPreds = parsedData.map(<span class="keyword">lambda</span> p: (p.label, model.predict(p.features)))</div><div class="line">trainErr = labelsAndPreds.filter(<span class="keyword">lambda</span> (v, p): v != p).count() / float(parsedData.count())</div><div class="line">print(<span class="string">"Training Error = "</span> + str(trainErr))</div><div class="line"></div><div class="line"><span class="comment"># Save and load model</span></div><div class="line">model.save(sc, <span class="string">"target/tmp/pythonSVMWithSGDModel"</span>)</div><div class="line">sameModel = SVMModel.load(sc, <span class="string">"target/tmp/pythonSVMWithSGDModel"</span>)</div></pre></td></tr></table></figure><h4 id="Naive-Bayes"><a href="#Naive-Bayes" class="headerlink" title="Naive Bayes"></a>Naive Bayes</h4><p>In <code>MLlib</code>, you can use <code>Naive Bayes</code> through the<code>mllib.classification.NaiveBayes</code> class. It supports one parameter, <code>lambda</code> (or <code>lambda_</code> in Python), used for smoothing. You can call it on an <code>RDD</code> of <code>LabeledPoints</code>, where the labels are between 0 and C–1 for C classes.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pyspark.mllib.classification <span class="keyword">import</span> NaiveBayes, NaiveBayesModel</div><div class="line"><span class="keyword">from</span> pyspark.mllib.util <span class="keyword">import</span> MLUtils</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Load and parse the data file.</span></div><div class="line">data = MLUtils.loadLibSVMFile(sc, <span class="string">"data/mllib/sample_libsvm_data.txt"</span>)</div><div class="line"></div><div class="line"><span class="comment"># Split data approximately into training (60%) and test (40%)</span></div><div class="line">training, test = data.randomSplit([<span class="number">0.6</span>, <span class="number">0.4</span>])</div><div class="line"></div><div class="line"><span class="comment"># Train a naive Bayes model.</span></div><div class="line">model = NaiveBayes.train(training, <span class="number">1.0</span>)</div><div class="line"></div><div class="line"><span class="comment"># Make prediction and test accuracy.</span></div><div class="line">predictionAndLabel = test.map(<span class="keyword">lambda</span> p: (model.predict(p.features), p.label))</div><div class="line">accuracy = <span class="number">1.0</span> * predictionAndLabel.filter(<span class="keyword">lambda</span> (x, v): x == v).count() / test.count()</div><div class="line">print(<span class="string">'model accuracy &#123;&#125;'</span>.format(accuracy))</div><div class="line"></div><div class="line"><span class="comment"># Save and load model</span></div><div class="line">output_dir = <span class="string">'target/tmp/myNaiveBayesModel'</span></div><div class="line">shutil.rmtree(output_dir, ignore_errors=<span class="keyword">True</span>)</div><div class="line">model.save(sc, output_dir)</div><div class="line">sameModel = NaiveBayesModel.load(sc, output_dir)</div><div class="line">predictionAndLabel = test.map(<span class="keyword">lambda</span> p: (sameModel.predict(p.features), p.label))</div><div class="line">accuracy = <span class="number">1.0</span> * predictionAndLabel.filter(<span class="keyword">lambda</span> (x, v): x == v).count() / test.count()</div><div class="line">print(<span class="string">'sameModel accuracy &#123;&#125;'</span>.format(accuracy))</div></pre></td></tr></table></figure><h4 id="Decision-trees-and-random-forests"><a href="#Decision-trees-and-random-forests" class="headerlink" title="Decision trees and random forests"></a>Decision trees and random forests</h4><p>In <code>MLlib</code>, you can train trees using the <code>mllib.tree.DecisionTree</code> class, through the static methods <code>trainClassifier()</code> and <code>trainRegressor()</code>. Unlike in some of the other algorithms, the Java and Scala APIs also use static methods instead of a <code>DecisionTree</code> object with setters.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pyspark.mllib.tree <span class="keyword">import</span> DecisionTree, DecisionTreeModel</div><div class="line"><span class="keyword">from</span> pyspark.mllib.util <span class="keyword">import</span> MLUtils</div><div class="line"></div><div class="line"><span class="comment"># Load and parse the data file into an RDD of LabeledPoint.</span></div><div class="line">data = MLUtils.loadLibSVMFile(sc, <span class="string">'data/mllib/sample_libsvm_data.txt'</span>)</div><div class="line"><span class="comment"># Split the data into training and test sets (30% held out for testing)</span></div><div class="line">(trainingData, testData) = data.randomSplit([<span class="number">0.7</span>, <span class="number">0.3</span>])</div><div class="line"></div><div class="line"><span class="comment"># Train a DecisionTree model.</span></div><div class="line"><span class="comment">#  Empty categoricalFeaturesInfo indicates all features are continuous.</span></div><div class="line">model = DecisionTree.trainClassifier(trainingData, numClasses=<span class="number">2</span>, categoricalFeaturesInfo=&#123;&#125;,</div><div class="line">                                     impurity=<span class="string">'gini'</span>, maxDepth=<span class="number">5</span>, maxBins=<span class="number">32</span>)</div><div class="line"></div><div class="line"><span class="comment"># Evaluate model on test instances and compute test error</span></div><div class="line">predictions = model.predict(testData.map(<span class="keyword">lambda</span> x: x.features))</div><div class="line">labelsAndPredictions = testData.map(<span class="keyword">lambda</span> lp: lp.label).zip(predictions)</div><div class="line">testErr = labelsAndPredictions.filter(<span class="keyword">lambda</span> (v, p): v != p).count() / float(testData.count())</div><div class="line">print(<span class="string">'Test Error = '</span> + str(testErr))</div><div class="line">print(<span class="string">'Learned classification tree model:'</span>)</div><div class="line">print(model.toDebugString())</div><div class="line"></div><div class="line"><span class="comment"># Save and load model</span></div><div class="line">model.save(sc, <span class="string">"target/tmp/myDecisionTreeClassificationModel"</span>)</div><div class="line">sameModel = DecisionTreeModel.load(sc, <span class="string">"target/tmp/myDecisionTreeClassificationModel"</span>)</div></pre></td></tr></table></figure><h3 id="Clustering"><a href="#Clustering" class="headerlink" title="Clustering"></a>Clustering</h3><h4 id="K-means"><a href="#K-means" class="headerlink" title="K-means"></a>K-means</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> array</div><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</div><div class="line"></div><div class="line"><span class="keyword">from</span> pyspark.mllib.clustering <span class="keyword">import</span> KMeans, KMeansModel</div><div class="line"></div><div class="line"><span class="comment"># Load and parse the data</span></div><div class="line">data = sc.textFile(<span class="string">"data/mllib/kmeans_data.txt"</span>)</div><div class="line">parsedData = data.map(<span class="keyword">lambda</span> line: array([float(x) <span class="keyword">for</span> x <span class="keyword">in</span> line.split(<span class="string">' '</span>)]))</div><div class="line"></div><div class="line"><span class="comment"># Build the model (cluster the data)</span></div><div class="line">clusters = KMeans.train(parsedData, <span class="number">2</span>, maxIterations=<span class="number">10</span>, initializationMode=<span class="string">"random"</span>)</div><div class="line"></div><div class="line"><span class="comment"># Evaluate clustering by computing Within Set Sum of Squared Errors</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">(point)</span>:</span></div><div class="line">    center = clusters.centers[clusters.predict(point)]</div><div class="line">    <span class="keyword">return</span> sqrt(sum([x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (point - center)]))</div><div class="line"></div><div class="line">WSSSE = parsedData.map(<span class="keyword">lambda</span> point: error(point)).reduce(<span class="keyword">lambda</span> x, y: x + y)</div><div class="line">print(<span class="string">"Within Set Sum of Squared Error = "</span> + str(WSSSE))</div><div class="line"></div><div class="line"><span class="comment"># Save and load model</span></div><div class="line">clusters.save(sc, <span class="string">"target/org/apache/spark/PythonKMeansExample/KMeansModel"</span>)</div><div class="line">sameModel = KMeansModel.load(sc, <span class="string">"target/org/apache/spark/PythonKMeansExample/KMeansModel"</span>)</div></pre></td></tr></table></figure><h3 id="Collaborative-Filtering-and-Recommendation"><a href="#Collaborative-Filtering-and-Recommendation" class="headerlink" title="Collaborative Filtering and Recommendation"></a>Collaborative Filtering and Recommendation</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pyspark.mllib.recommendation <span class="keyword">import</span> ALS, MatrixFactorizationModel, Rating</div><div class="line"></div><div class="line"><span class="comment"># Load and parse the data</span></div><div class="line">data = sc.textFile(<span class="string">"data/mllib/als/test.data"</span>)</div><div class="line">ratings = data.map(<span class="keyword">lambda</span> l: l.split(<span class="string">','</span>))\</div><div class="line">    .map(<span class="keyword">lambda</span> l: Rating(int(l[<span class="number">0</span>]), int(l[<span class="number">1</span>]), float(l[<span class="number">2</span>])))</div><div class="line"></div><div class="line"><span class="comment"># Build the recommendation model using Alternating Least Squares</span></div><div class="line">rank = <span class="number">10</span></div><div class="line">numIterations = <span class="number">10</span></div><div class="line">model = ALS.train(ratings, rank, numIterations)</div><div class="line"></div><div class="line"><span class="comment"># Evaluate the model on training data</span></div><div class="line">testdata = ratings.map(<span class="keyword">lambda</span> p: (p[<span class="number">0</span>], p[<span class="number">1</span>]))</div><div class="line">predictions = model.predictAll(testdata).map(<span class="keyword">lambda</span> r: ((r[<span class="number">0</span>], r[<span class="number">1</span>]), r[<span class="number">2</span>]))</div><div class="line">ratesAndPreds = ratings.map(<span class="keyword">lambda</span> r: ((r[<span class="number">0</span>], r[<span class="number">1</span>]), r[<span class="number">2</span>])).join(predictions)</div><div class="line">MSE = ratesAndPreds.map(<span class="keyword">lambda</span> r: (r[<span class="number">1</span>][<span class="number">0</span>] - r[<span class="number">1</span>][<span class="number">1</span>])**<span class="number">2</span>).mean()</div><div class="line">print(<span class="string">"Mean Squared Error = "</span> + str(MSE))</div><div class="line"></div><div class="line"><span class="comment"># Save and load model</span></div><div class="line">model.save(sc, <span class="string">"target/tmp/myCollaborativeFilter"</span>)</div><div class="line">sameModel = MatrixFactorizationModel.load(sc, <span class="string">"target/tmp/myCollaborativeFilter"</span>)</div></pre></td></tr></table></figure><p>The <a href="https://databricks-training.s3.amazonaws.com/index.html" target="_blank" rel="external">training exercises</a> from the Spark Summit 2014 include a hands-on tutorial for <a href="https://databricks-training.s3.amazonaws.com/movie-recommendation-with-mllib.html" target="_blank" rel="external">personalized movie recommendation with <code>spark.mllib</code></a>.</p><h3 id="Dimensionality-Reduction"><a href="#Dimensionality-Reduction" class="headerlink" title="Dimensionality Reduction"></a>Dimensionality Reduction</h3><h4 id="Principal-component-analysis"><a href="#Principal-component-analysis" class="headerlink" title="Principal component analysis"></a>Principal component analysis</h4><p>PCA in Scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.spark.mllib.linalg.<span class="type">Matrix</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.mllib.linalg.distributed.<span class="type">RowMatrix</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> points: <span class="type">RDD</span>[<span class="type">Vector</span>] = <span class="comment">// ...</span></div><div class="line"><span class="keyword">val</span> mat: <span class="type">RowMatrix</span> = <span class="keyword">new</span> <span class="type">RowMatrix</span>(points)</div><div class="line"><span class="keyword">val</span> pc: <span class="type">Matrix</span> = mat.computePrincipalComponents(<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment">// Project points to low-dimensional space</span></div><div class="line"><span class="keyword">val</span> projected = mat.multiply(pc).rows</div><div class="line"></div><div class="line"><span class="comment">// Train a k-means model on the projected 2-dimensional data</span></div><div class="line"><span class="keyword">val</span> model = <span class="type">KMeans</span>.train(projected, <span class="number">10</span>)</div></pre></td></tr></table></figure><h4 id="Singular-value-decomposition"><a href="#Singular-value-decomposition" class="headerlink" title="Singular value decomposition"></a>Singular value decomposition</h4><p>SVD in Scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Compute the top 20 singular values of a RowMatrix mat and their singular vectors.</span></div><div class="line"><span class="keyword">val</span> svd: <span class="type">SingularValueDecomposition</span>[<span class="type">RowMatrix</span>, <span class="type">Matrix</span>] =</div><div class="line"> mat.computeSVD(<span class="number">20</span>, computeU=<span class="literal">true</span>)</div><div class="line"></div><div class="line"><span class="keyword">val</span> <span class="type">U</span>: <span class="type">RowMatrix</span> = svd.<span class="type">U</span> <span class="comment">// U is a distributed RowMatrix.</span></div><div class="line"><span class="keyword">val</span> s: <span class="type">Vector</span> = svd.s <span class="comment">// Singular values are a local dense vector.</span></div><div class="line"><span class="keyword">val</span> <span class="type">V</span>: <span class="type">Matrix</span> = svd.<span class="type">V</span> <span class="comment">// V is a local dense matrix.</span></div></pre></td></tr></table></figure><h3 id="Pipeline-API"><a href="#Pipeline-API" class="headerlink" title="Pipeline API"></a>Pipeline API</h3><p>Pipeline API version of spam classification in Scala</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SQLContext</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.ml.<span class="type">Pipeline</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.ml.classification.<span class="type">LogisticRegression</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.ml.feature.&#123;<span class="type">HashingTF</span>, <span class="type">Tokenizer</span>&#125;</div><div class="line"><span class="keyword">import</span> org.apache.spark.ml.tuning.&#123;<span class="type">CrossValidator</span>, <span class="type">ParamGridBuilder</span>&#125;</div><div class="line"><span class="keyword">import</span> org.apache.spark.ml.evaluation.<span class="type">BinaryClassificationEvaluator</span></div><div class="line"></div><div class="line"><span class="comment">// A class to represent documents -- will be turned into a SchemaRDD</span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">LabeledDocument</span>(<span class="params">id: <span class="type">Long</span>, text: <span class="type">String</span>, label: <span class="type">Double</span></span>)</span></div><div class="line"><span class="keyword">val</span> documents = <span class="comment">// (load RDD of LabeledDocument)</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> sqlContext = <span class="keyword">new</span> <span class="type">SQLContext</span>(sc)</div><div class="line"><span class="keyword">import</span> sqlContext._</div><div class="line"></div><div class="line"><span class="comment">// Configure an ML pipeline with three stages: tokenizer, tf, and lr; each stage</span></div><div class="line"><span class="comment">// outputs a column in a SchemaRDD and feeds it to the next stage's input column</span></div><div class="line"><span class="keyword">val</span> tokenizer = <span class="keyword">new</span> <span class="type">Tokenizer</span>() <span class="comment">// Splits each email into words</span></div><div class="line"> .setInputCol(<span class="string">"text"</span>)</div><div class="line"> .setOutputCol(<span class="string">"words"</span>)</div><div class="line"><span class="keyword">val</span> tf = <span class="keyword">new</span> <span class="type">HashingTF</span>() <span class="comment">// Maps email words to vectors of 10000 features</span></div><div class="line"> .setNumFeatures(<span class="number">10000</span>)</div><div class="line"> .setInputCol(tokenizer.getOutputCol)</div><div class="line"> .setOutputCol(<span class="string">"features"</span>)</div><div class="line"><span class="keyword">val</span> lr = <span class="keyword">new</span> <span class="type">LogisticRegression</span>() <span class="comment">// Uses "features" as inputCol by default</span></div><div class="line"><span class="keyword">val</span> pipeline = <span class="keyword">new</span> <span class="type">Pipeline</span>().setStages(<span class="type">Array</span>(tokenizer, tf, lr))</div><div class="line"></div><div class="line"><span class="comment">// Fit the pipeline to the training documents</span></div><div class="line"><span class="keyword">val</span> model = pipeline.fit(documents)</div><div class="line"></div><div class="line"><span class="comment">// Alternatively, instead of fitting once with the parameters above, we can do a</span></div><div class="line"><span class="comment">// grid search over some parameters and pick the best model via cross-validation</span></div><div class="line"><span class="keyword">val</span> paramMaps = <span class="keyword">new</span> <span class="type">ParamGridBuilder</span>()</div><div class="line"> .addGrid(tf.numFeatures, <span class="type">Array</span>(<span class="number">10000</span>, <span class="number">20000</span>))</div><div class="line"> .addGrid(lr.maxIter, <span class="type">Array</span>(<span class="number">100</span>, <span class="number">200</span>))</div><div class="line"> .build() <span class="comment">// Builds all combinations of parameters</span></div><div class="line"><span class="keyword">val</span> eval = <span class="keyword">new</span> <span class="type">BinaryClassificationEvaluator</span>()</div><div class="line"><span class="keyword">val</span> cv = <span class="keyword">new</span> <span class="type">CrossValidator</span>()</div><div class="line"> .setEstimator(lr)</div><div class="line"> .setEstimatorParamMaps(paramMaps)</div><div class="line"> .setEvaluator(eval)</div><div class="line"><span class="keyword">val</span> bestModel = cv.fit(documents)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Example-Spam-Classification&quot;&gt;&lt;a href=&quot;#Example-Spam-Classification&quot; class=&quot;headerlink&quot; title=&quot;Example: Spam Classification&quot;&gt;&lt;/a&gt;Exam
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
      <category term="MLlib" scheme="http://yoursite.com/tags/MLlib/"/>
    
  </entry>
  
  <entry>
    <title>Solution for Bracket in markdown link address</title>
    <link href="http://yoursite.com/2017/04/23/%C2%96Solution-for-Bracket-in-markdown-link-address/"/>
    <id>http://yoursite.com/2017/04/23/Solution-for-Bracket-in-markdown-link-address/</id>
    <published>2017-04-23T11:56:40.000Z</published>
    <updated>2017-04-23T12:01:11.467Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown创造一个链接或者图片是使用 <code>[title](link)</code> 和 <code>![title](link)</code>.</p><p>我们可以避免<code>[]</code>内出现中括号, 或者使用转义.</p><p>但是在小括号的链接里面就可能会出问题. 有些网址上面会具有小括号. 例如,</p><p><a href="https://github.com/CjTouzi/Learning-RSpark/blob/master/Zaharia%20M.%2C%20et%20al.%20Learning%20Spark%20%28O%27Reilly%2C%202015%29%28274s%29.pdf" target="_blank" rel="external">https://github.com/CjTouzi/Learning-RSpark/blob/master/Zaharia%20M.%2C%20et%20al.%20Learning%20Spark%20%28O%27Reilly%2C%202015%29%28274s%29.pdf</a></p><p>解决方法:</p><p><code>%28</code> 代替<code>(</code>, <code>%29</code>代替<code>)</code> 主要是后者会歧义链接部分的结束. 这是使用url符号码去代替ascii的符号. 能够解决这个问题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown创造一个链接或者图片是使用 &lt;code&gt;[title](link)&lt;/code&gt; 和 &lt;code&gt;![title](link)&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;我们可以避免&lt;code&gt;[]&lt;/code&gt;内出现中括号, 或者使用转义.&lt;/p&gt;&lt;p&gt;但是在小括号的链
    
    </summary>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
</feed>
