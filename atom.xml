<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Abracdabra</title>
  <subtitle>Do it yourself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-17T11:24:16.646Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ewan Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hadoop ch02 MapReduce notes</title>
    <link href="http://yoursite.com/2017/04/17/Hadoop-ch02-MapReduce-notes/"/>
    <id>http://yoursite.com/2017/04/17/Hadoop-ch02-MapReduce-notes/</id>
    <published>2017-04-17T09:32:26.000Z</published>
    <updated>2017-04-17T11:24:16.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h2><p>首先我们有一个数据集，关于天气的，然后它的每一条记录是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">0057</div><div class="line">332130 # USAF weather station identifier</div><div class="line">99999 # WBAN weather station identifier</div><div class="line">19500101 # observation date</div><div class="line">0300 # observation time</div><div class="line">4</div><div class="line">+51317 # latitude (degrees x 1000)</div><div class="line">+028783 # longitude (degrees x 1000)</div><div class="line">FM-12</div><div class="line">+0171 # elevation (meters)</div><div class="line">99999</div><div class="line">V020</div><div class="line">320 # wind direction (degrees)</div><div class="line">1 # quality code</div><div class="line">N</div><div class="line">0072</div><div class="line">1</div><div class="line">00450 # sky ceiling height (meters)</div><div class="line">1 # quality code</div><div class="line">C</div><div class="line">N</div><div class="line">010000 # visibility distance (meters)</div><div class="line">1 # quality code</div><div class="line">N</div><div class="line">9</div><div class="line">-0128 # air temperature (degrees Celsius x 10)</div><div class="line">1 # quality code</div><div class="line">-0139 # dew point temperature (degrees Celsius x 10)</div><div class="line">1 # quality code</div><div class="line">10268 # atmospheric pressure (hectopascals x 10)</div><div class="line">1 # quality code</div></pre></td></tr></table></figure><p>当然以上数据是经过处理之后的，一开始它长这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0067011990999991950051507004...9999999N9+00001+99999999999...</div><div class="line">0043011990999991950051512004...9999999N9+00221+99999999999...</div><div class="line">0043011990999991950051518004...9999999N9-00111+99999999999...</div><div class="line">0043012650999991949032412004...0500001N9+01111+99999999999...</div><div class="line">0043012650999991949032418004...0500001N9+00781+99999999999...</div></pre></td></tr></table></figure><p>Hmmm….</p><p>这个天气数据集按照<code>气象站编号-年份</code>的形式来组织的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">010010-99999-1990.gz</div><div class="line">010014-99999-1990.gz</div><div class="line">010015-99999-1990.gz</div><div class="line">010016-99999-1990.gz</div><div class="line">010017-99999-1990.gz</div><div class="line">010030-99999-1990.gz</div><div class="line">010040-99999-1990.gz</div><div class="line">010080-99999-1990.gz</div><div class="line">010100-99999-1990.gz</div><div class="line">010150-99999-1990.gz</div></pre></td></tr></table></figure><p>这个原始数据显然用起来不方便，所以按照年份给它聚个类，用了如下方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">hadoop jar $HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-*.jar \</div><div class="line">  -D mapred.reduce.tasks=0 \</div><div class="line">  -D mapred.map.tasks.speculative.execution=false \</div><div class="line">  -D mapred.task.timeout=12000000 \</div><div class="line">  -input ncdc_files.txt \</div><div class="line">  -inputformat org.apache.hadoop.mapred.lib.NLineInputFormat \</div><div class="line">  -output output \</div><div class="line">  -mapper load_ncdc_map.sh \</div><div class="line">  -file load_ncdc_map.sh</div></pre></td></tr></table></figure><p>然后里面用到的<code>ncdc_files</code>以及<code>load_ncdc_map.sh</code>这两个文件是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">s3n://hadoopbook/ncdc/raw/isd-1901.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1902.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1903.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1904.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1905.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1906.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1907.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1908.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1909.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1910.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1911.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1912.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1913.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1914.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1915.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1916.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1917.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1918.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1919.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1920.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1921.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1922.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1923.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1924.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1925.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1926.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1927.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1928.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1929.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1930.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1931.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1932.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1933.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1934.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1935.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1936.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1937.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1938.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1939.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1940.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1941.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1942.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1943.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1944.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1945.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1946.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1947.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1948.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1949.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1950.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1951.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1952.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1953.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1954.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1955.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1956.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1957.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1958.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1959.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1960.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1961.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1962.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1963.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1964.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1965.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1966.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1967.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1968.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1969.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1970.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1971.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1972.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1973.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1974.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1975.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1976.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1977.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1978.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1979.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1980.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1981.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1982.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1983.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1984.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1985.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1986.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1987.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1988.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1989.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1990.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1991.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1992.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1993.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1994.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1995.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1996.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1997.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1998.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-1999.tar.bz2</div><div class="line">s3n://hadoopbook/ncdc/raw/isd-2000.tar.bz2</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env bash</div><div class="line"></div><div class="line"># NLineInputFormat gives a single line: key is offset, value is S3 URI</div><div class="line">read offset s3file</div><div class="line"></div><div class="line"># Retrieve file from S3 to local disk</div><div class="line">echo &quot;reporter:status:Retrieving $s3file&quot; &gt;&amp;2</div><div class="line">$HADOOP_INSTALL/bin/hadoop fs -get $s3file .</div><div class="line"></div><div class="line"># Un-bzip and un-tar the local file</div><div class="line">target=`basename $s3file .tar.bz2`</div><div class="line">mkdir -p $target</div><div class="line">echo &quot;reporter:status:Un-tarring $s3file to $target&quot; &gt;&amp;2</div><div class="line">tar jxf `basename $s3file` -C $target</div><div class="line"></div><div class="line"># Un-gzip each station file and concat into one file</div><div class="line">echo &quot;reporter:status:Un-gzipping $target&quot; &gt;&amp;2</div><div class="line">for file in $target/*/*</div><div class="line">do</div><div class="line">  gunzip -c $file &gt;&gt; $target.all</div><div class="line">  echo &quot;reporter:status:Processed $file&quot; &gt;&amp;2</div><div class="line">done</div><div class="line"></div><div class="line"># Put gzipped version into HDFS</div><div class="line">echo &quot;reporter:status:Gzipping $target and putting in HDFS&quot; &gt;&amp;2</div><div class="line">gzip -c $target.all | $HADOOP_INSTALL/bin/hadoop fs -put - gz/$target.gz</div></pre></td></tr></table></figure><p>嗯…顺便说一句，这个文件是存在<code>AWS</code>上的，所以想用的话要有一个<code>AWS</code>账号，想要有个账号呢，你得先有个可以支付美刀的信用卡。</p><p>Hmmmmm…</p><p>其实作者给的<code>sample data</code>也挺好的我觉得，<a href="https://github.com/tomwhite/hadoop-book/tree/master/input/ncdc" target="_blank" rel="external">在这里</a>.</p><p>那么我们的问题就是说，找出每一年的最高的温度。先看看不用<code>Hadoop</code>的实现方法，事实证明我<code>shell</code>脚本还是宝刀未老的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env bash</div><div class="line">for year in all/*</div><div class="line">do</div><div class="line"> echo -ne `basename $year .gz`&quot;\t&quot;</div><div class="line"> gunzip -c $year | \</div><div class="line"> awk &apos;&#123; temp = substr($0, 88, 5) + 0;</div><div class="line"> q = substr($0, 93, 1);</div><div class="line"> if (temp !=9999 &amp;&amp; q ~ /[01459]/ &amp;&amp; temp &gt; max) max = temp &#125;</div><div class="line"> END &#123; print max &#125;&apos;</div><div class="line">done</div></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">% ./max_temperature.sh</div><div class="line">1901 317</div><div class="line">1902 244</div><div class="line">1903 289</div><div class="line">1904 256</div><div class="line">1905 283</div><div class="line">...</div></pre></td></tr></table></figure><p>啊嘞，还不错的样子，但是对于大数据速度还是慢了点儿，所以直接上<code>Hadoop</code>看看。</p><p>对于以上的问题呢，<code>MapReduce</code>是这样解决的</p><p><img src="http://o7ie0tcjk.bkt.clouddn.com/hadoop/ch02/mapred_pipeline.png" alt="mapred_pipeline"></p><p>注意了，上面一行是<code>hadoop</code>的术语，下面呢，其实就是<code>Unix</code>的<code>pipe</code>了，这给我们不用<code>Java</code>来实现提供了可能。</p><p>好了下面开始coding了，拿起键盘就是GAN</p><p>为了实现我们的任务，我们需要三个java文件，一个<code>mapper</code>，一个<code>reducer</code>。这俩是苦工，还要一个监工。</p><p><code>Mapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// cc MaxTemperatureMapper Mapper for maximum temperature example</span></div><div class="line"><span class="comment">// vv MaxTemperatureMapper</span></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxTemperatureMapper</span></span></div><div class="line">  <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; &#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MISSING = <span class="number">9999</span>;</div><div class="line">  </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span></span></div><div class="line">      <span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">    </div><div class="line">    String line = value.toString();</div><div class="line">    String year = line.substring(<span class="number">15</span>, <span class="number">19</span>);</div><div class="line">    <span class="keyword">int</span> airTemperature;</div><div class="line">    <span class="keyword">if</span> (line.charAt(<span class="number">87</span>) == <span class="string">'+'</span>) &#123; <span class="comment">// parseInt doesn't like leading plus signs</span></div><div class="line">      airTemperature = Integer.parseInt(line.substring(<span class="number">88</span>, <span class="number">92</span>));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      airTemperature = Integer.parseInt(line.substring(<span class="number">87</span>, <span class="number">92</span>));</div><div class="line">    &#125;</div><div class="line">    String quality = line.substring(<span class="number">92</span>, <span class="number">93</span>);</div><div class="line">    <span class="keyword">if</span> (airTemperature != MISSING &amp;&amp; quality.matches(<span class="string">"[01459]"</span>)) &#123;</div><div class="line">      context.write(<span class="keyword">new</span> Text(year), <span class="keyword">new</span> IntWritable(airTemperature));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ^^ MaxTemperatureMapper</span></div></pre></td></tr></table></figure><p><code>Reducer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// cc MaxTemperatureReducer Reducer for maximum temperature example</span></div><div class="line"><span class="comment">// vv MaxTemperatureReducer</span></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxTemperatureReducer</span></span></div><div class="line">  <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; &#123;</div><div class="line">  </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values,</span></span></div><div class="line">      Context context)</div><div class="line">      <span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> maxValue = Integer.MIN_VALUE;</div><div class="line">    <span class="keyword">for</span> (IntWritable value : values) &#123;</div><div class="line">      maxValue = Math.max(maxValue, value.get());</div><div class="line">    &#125;</div><div class="line">    context.write(key, <span class="keyword">new</span> IntWritable(maxValue));</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ^^ MaxTemperatureReducer</span></div></pre></td></tr></table></figure><p><code>Job</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// cc MaxTemperature Application to find the maximum temperature in the weather dataset</span></div><div class="line"><span class="comment">// vv MaxTemperature</span></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxTemperature</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">if</span> (args.length != <span class="number">2</span>) &#123;</div><div class="line">      System.err.println(<span class="string">"Usage: MaxTemperature &lt;input path&gt; &lt;output path&gt;"</span>);</div><div class="line">      System.exit(-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Job job = <span class="keyword">new</span> Job();</div><div class="line">    job.setJarByClass(MaxTemperature.class);</div><div class="line">    job.setJobName(<span class="string">"Max temperature"</span>);</div><div class="line"></div><div class="line">    FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</div><div class="line">    FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</div><div class="line">    </div><div class="line">    job.setMapperClass(MaxTemperatureMapper.class);</div><div class="line">    job.setReducerClass(MaxTemperatureReducer.class);</div><div class="line"></div><div class="line">    job.setOutputKeyClass(Text.class);</div><div class="line">    job.setOutputValueClass(IntWritable.class);</div><div class="line">    </div><div class="line">    System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ^^ MaxTemperature</span></div></pre></td></tr></table></figure><p>然后这么运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">% export HADOOP_CLASSPATH=hadoop-examples.jar</div><div class="line">% hadoop MaxTemperature input/ncdc/sample.txt output</div></pre></td></tr></table></figure><p>但是如果数据量非常大的话，需要在<code>Mapper</code>和<code>Reducer</code>之间传递大量的数据，这个时候可以引入<code>Combiner</code>，它的机理是这样的。假如我有两个<code>mapper</code>，它们的输出结果是这样子的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(1950, 0)</div><div class="line">(1950, 20)</div><div class="line">(1950, 10)</div></pre></td></tr></table></figure><p>以及这样子的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(1950, 25)</div><div class="line">(1950, 15)</div></pre></td></tr></table></figure><p>如果没有<code>combiner</code>的话，它们会先变成这样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(1950, [0, 20, 10, 25, 15])</div></pre></td></tr></table></figure><p>然后作为<code>reducer</code>的输入，但是如果加入了<code>combiner</code>的话，相当于上面的问题变成了这样</p><p><code>max(0, 20, 10, 25, 15) = max(max(0, 20, 10), max(25, 15)) = max(20, 25) = 25</code></p><p>是不是简单多了。但是注意了，并不是所有的问题都是这样，比如下面这个问题：</p><p><code>mean(0, 20, 10, 25, 15) = 14</code></p><p><code>mean(mean(0, 20, 10), mean(25, 15)) = mean(10, 20) = 15</code></p><p>所以说要根据具体情况来定，不能直接套用。</p><p>好了我们继续<code>combiner</code>的话题，我们怎么把这货加到<code>hadoop</code>的流程中去呢，其实很简单，这样就可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// cc MaxTemperatureWithCombiner Application to find the maximum temperature, using a combiner function for efficiency</span></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</div><div class="line"></div><div class="line"><span class="comment">// vv MaxTemperatureWithCombiner</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxTemperatureWithCombiner</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">if</span> (args.length != <span class="number">2</span>) &#123;</div><div class="line">      System.err.println(<span class="string">"Usage: MaxTemperatureWithCombiner &lt;input path&gt; "</span> +</div><div class="line">          <span class="string">"&lt;output path&gt;"</span>);</div><div class="line">      System.exit(-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Job job = <span class="keyword">new</span> Job();</div><div class="line">    job.setJarByClass(MaxTemperatureWithCombiner.class);</div><div class="line">    job.setJobName(<span class="string">"Max temperature"</span>);</div><div class="line"></div><div class="line">    FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</div><div class="line">    FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</div><div class="line">    </div><div class="line">    job.setMapperClass(MaxTemperatureMapper.class);</div><div class="line">    <span class="comment">/*[*/</span>job.setCombinerClass(MaxTemperatureReducer.class)<span class="comment">/*]*/</span>;</div><div class="line">    job.setReducerClass(MaxTemperatureReducer.class);</div><div class="line"></div><div class="line">    job.setOutputKeyClass(Text.class);</div><div class="line">    job.setOutputValueClass(IntWritable.class);</div><div class="line">    </div><div class="line">    System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ^^ MaxTemperatureWithCombiner</span></div></pre></td></tr></table></figure><p>没错，<code>combiner</code>和<code>reducer</code>是一样的。其实仔细想想这也很自然，因为它们俩实际实现的功能是一样的。</p><h2 id="Hadoop-Streaming"><a href="#Hadoop-Streaming" class="headerlink" title="Hadoop Streaming"></a>Hadoop Streaming</h2><p>作为一个<code>machine learning</code>专业的，有时候用<code>Java</code>还是感觉挺不爽的，哪有<code>Python</code>啊，<code>Ruby</code>啊这种脚本语言方便嘛。所以<code>hadoop</code>还是很人性地提供了解决方法，就是标题所表示的技术。直接看代码怎么用吧。</p><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><p><code>Map</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env ruby</span></div><div class="line"></div><div class="line">STDIN.each_line <span class="keyword">do</span> <span class="params">|line|</span></div><div class="line">  val = line</div><div class="line">  year, temp, q = val[<span class="number">15</span>,<span class="number">4</span>], val[<span class="number">87</span>,<span class="number">5</span>], val[<span class="number">92</span>,<span class="number">1</span>]</div><div class="line">  puts <span class="string">"<span class="subst">#&#123;year&#125;</span>\t<span class="subst">#&#123;temp&#125;</span>"</span> <span class="keyword">if</span> (temp != <span class="string">"+9999"</span> &amp;&amp; q =~ <span class="regexp">/[01459]/</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p><code>Reduce</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env ruby</span></div><div class="line"></div><div class="line">last_key, max_val = <span class="literal">nil</span>, -<span class="number">1000000</span></div><div class="line">STDIN.each_line <span class="keyword">do</span> <span class="params">|line|</span></div><div class="line">  key, val = line.split(<span class="string">"\t"</span>)</div><div class="line">  <span class="keyword">if</span> last_key &amp;&amp; last_key != key</div><div class="line">    puts <span class="string">"<span class="subst">#&#123;last_key&#125;</span>\t<span class="subst">#&#123;max_val&#125;</span>"</span></div><div class="line">    last_key, max_val = key, val.to_i</div><div class="line">  <span class="keyword">else</span></div><div class="line">    last_key, max_val = key, [max_val, val.to_i].max</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line">puts <span class="string">"<span class="subst">#&#123;last_key&#125;</span>\t<span class="subst">#&#123;max_val&#125;</span>"</span> <span class="keyword">if</span> last_key</div></pre></td></tr></table></figure><p>然后这样调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">% hadoop jar $HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-*.jar \</div><div class="line"> -input input/ncdc/sample.txt \</div><div class="line"> -output output \</div><div class="line"> -mapper ch02-mr-intro/src/main/ruby/max_temperature_map.rb \</div><div class="line"> -reducer ch02-mr-intro/src/main/ruby/max_temperature_reduce.rb</div></pre></td></tr></table></figure><p>是不是很方便？如果要加上<code>combiner</code>的话，更方便了，都不用再写额外的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">% hadoop jar $HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-*.jar \</div><div class="line"> -files ch02-mr-intro/src/main/ruby/max_temperature_map.rb,\</div><div class="line">ch02-mr-intro/src/main/ruby/max_temperature_reduce.rb \</div><div class="line"> -input input/ncdc/all \</div><div class="line"> -output output \</div><div class="line"> -mapper ch02-mr-intro/src/main/ruby/max_temperature_map.rb \</div><div class="line"> -combiner ch02-mr-intro/src/main/ruby/max_temperature_reduce.rb \</div><div class="line"> -reducer ch02-mr-intro/src/main/ruby/max_temperature_reduce.rb</div></pre></td></tr></table></figure><p>注意，以上的<code>-files</code>命令是为了在集群环境下运行时，将脚本复制到各子节点上。</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>啊，<code>Python</code>大大出场，其实和<code>Ruby</code>没啥区别。</p><p><code>Map</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</div><div class="line">  val = line.strip()</div><div class="line">  (year, temp, q) = (val[<span class="number">15</span>:<span class="number">19</span>], val[<span class="number">87</span>:<span class="number">92</span>], val[<span class="number">92</span>:<span class="number">93</span>])</div><div class="line">  <span class="keyword">if</span> (temp != <span class="string">"+9999"</span> <span class="keyword">and</span> re.match(<span class="string">"[01459]"</span>, q)):</div><div class="line">    <span class="keyword">print</span> <span class="string">"%s\t%s"</span> % (year, temp)</div></pre></td></tr></table></figure><p><code>Reduce</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">(last_key, max_val) = (<span class="keyword">None</span>, -sys.maxint)</div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</div><div class="line">  (key, val) = line.strip().split(<span class="string">"\t"</span>)</div><div class="line">  <span class="keyword">if</span> last_key <span class="keyword">and</span> last_key != key:</div><div class="line">    <span class="keyword">print</span> <span class="string">"%s\t%s"</span> % (last_key, max_val)</div><div class="line">    (last_key, max_val) = (key, int(val))</div><div class="line">  <span class="keyword">else</span>:</div><div class="line">    (last_key, max_val) = (key, max(max_val, int(val)))</div><div class="line"></div><div class="line"><span class="keyword">if</span> last_key:</div><div class="line">  <span class="keyword">print</span> <span class="string">"%s\t%s"</span> % (last_key, max_val)</div></pre></td></tr></table></figure><p>运行都是一样的，就不多做赘述了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MapReduce&quot;&gt;&lt;a href=&quot;#MapReduce&quot; class=&quot;headerlink&quot; title=&quot;MapReduce&quot;&gt;&lt;/a&gt;MapReduce&lt;/h2&gt;&lt;p&gt;首先我们有一个数据集，关于天气的，然后它的每一条记录是这样的：&lt;/p&gt;&lt;figure
    
    </summary>
    
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning [ECNU] Assignment 1</title>
    <link href="http://yoursite.com/2017/04/16/Machine-Learning-ECNU-Assignment-1/"/>
    <id>http://yoursite.com/2017/04/16/Machine-Learning-ECNU-Assignment-1/</id>
    <published>2017-04-16T05:04:17.000Z</published>
    <updated>2017-04-16T05:15:09.386Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Use a crawler to get at least 20 webpages from a website.</strong></p><p><strong>Count theoccurrences of words in the webpages on Hadoop.</strong></p><p>Hand in:</p><ol><li>Each one should crawl different websites, list the website URL, as well as the URLsof the crawled webpages.</li><li><p>Count the word occurrence on Hadoop, code in both JAVA and another language such asPig Latin. print out your code.</p></li><li><p>Print out your result.</p></li></ol><p>Home work due: <strong>4/12</strong></p><p>You are allowed toform a group of no more than 4 fellow students.</p><p><a href="https://github.com/ewanlee/machine-learning-ECNU-/blob/master/Hadoop%20wordcount%20demo_cutted.pdf" target="_blank" rel="external">https://github.com/ewanlee/machine-learning-ECNU-/blob/master/Hadoop%20wordcount%20demo_cutted.pdf</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Use a crawler to get at least 20 webpages from a website.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Count theoccurrences of words in the webpages on
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
      <category term="crawl" scheme="http://yoursite.com/tags/crawl/"/>
    
  </entry>
  
  <entry>
    <title>cs231n Assignments [2 &amp; 3]</title>
    <link href="http://yoursite.com/2017/04/16/cs231n-Assignments-2-3/"/>
    <id>http://yoursite.com/2017/04/16/cs231n-Assignments-2-3/</id>
    <published>2017-04-16T04:39:58.000Z</published>
    <updated>2017-04-16T04:51:45.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Assignment-2"><a href="#Assignment-2" class="headerlink" title="Assignment 2"></a>Assignment 2</h1><p>In this assignment you will practice writing backpropagation code, and training Neural Networks and Convolutional Neural Networks. The goals of this assignment are as follows:</p><ul><li>understand <strong>Neural Networks</strong> and how they are arranged in layered architectures</li><li>understand and be able to implement (vectorized) <strong>backpropagation</strong></li><li>implement various <strong>update rules</strong> used to optimize Neural Networks</li><li>implement <strong>batch normalization</strong> for training deep networks</li><li>implement <strong>dropout</strong> to regularize networks</li><li>effectively <strong>cross-validate</strong> and find the best hyperparameters for Neural Network architecture</li><li>understand the architecture of <strong>Convolutional Neural Networks</strong> and train gain experience with training these models on data</li></ul><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>You can work on the assignment in one of two ways: locally on your own machine, or on a virtual machine through Terminal.com.</p><h3 id="Working-in-the-cloud-on-Terminal"><a href="#Working-in-the-cloud-on-Terminal" class="headerlink" title="Working in the cloud on Terminal"></a>Working in the cloud on Terminal</h3><p>Terminal has created a separate subdomain to serve our class, <a href="https://www.stanfordterminalcloud.com/" target="_blank" rel="external">www.stanfordterminalcloud.com</a>. Register your account there. The Assignment 2 snapshot can then be found <a href="https://www.stanfordterminalcloud.com/snapshot/6c95ca2c9866a962964ede3ea5813d4c2410ba48d92cf8d11a93fbb13e08b76a" target="_blank" rel="external">HERE</a>. If you are registered in the class you can contact the TA (see Piazza for more information) to request Terminal credits for use on the assignment. Once you boot up the snapshot everything will be installed for you, and you will be ready to start on your assignment right away. We have written a small tutorial on Terminal <a href="http://cs231n.github.io/terminal-tutorial" target="_blank" rel="external">here</a>.</p><h3 id="Working-locally"><a href="#Working-locally" class="headerlink" title="Working locally"></a>Working locally</h3><p>Get the code as a zip file <a href="http://cs231n.stanford.edu/assignments/2016/winter1516_assignment2.zip" target="_blank" rel="external">here</a>. As for the dependencies:</p><p><strong>[Option 1] Use Anaconda:</strong> The preferred approach for installing all the assignment dependencies is to use<a href="https://www.continuum.io/downloads" target="_blank" rel="external">Anaconda</a>, which is a Python distribution that includes many of the most popular Python packages for science, math, engineering and data analysis. Once you install it you can skip all mentions of requirements and you are ready to go directly to working on the assignment.</p><p><strong>[Option 2] Manual install, virtual environment:</strong> If you do not want to use Anaconda and want to go with a more manual and risky installation route you will likely want to create a <a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/" target="_blank" rel="external">virtual environment</a> for the project. If you choose not to use a virtual environment, it is up to you to make sure that all dependencies for the code are installed globally on your machine. To set up a virtual environment, run the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd assignment2</div><div class="line">sudo pip install virtualenv      # This may already be installed</div><div class="line">virtualenv .env                  # Create a virtual environment</div><div class="line">source .env/bin/activate         # Activate the virtual environment</div><div class="line">pip install -r requirements.txt  # Install dependencies</div><div class="line"># Work on the assignment for a while ...</div><div class="line">deactivate                       # Exit the virtual environment</div></pre></td></tr></table></figure><p><strong>Download data:</strong> Once you have the starter code, you will need to download the CIFAR-10 dataset. Run the following from the <code>assignment2</code> directory:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd cs231n/datasets</div><div class="line">./get_datasets.sh</div></pre></td></tr></table></figure><p><strong>Compile the Cython extension:</strong> Convolutional Neural Networks require a very efficient implementation. We have implemented of the functionality using <a href="http://cython.org/" target="_blank" rel="external">Cython</a>; you will need to compile the Cython extension before you can run the code. From the <code>cs231n</code> directory, run the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py build_ext --inplace</div></pre></td></tr></table></figure><p><strong>Start IPython:</strong> After you have the CIFAR-10 data, you should start the IPython notebook server from the <code>assignment2</code> directory. If you are unfamiliar with IPython, you should read our <a href="http://cs231n.github.io/ipython-tutorial" target="_blank" rel="external">IPython tutorial</a>.</p><p><strong>NOTE:</strong> If you are working in a virtual environment on OSX, you may encounter errors with matplotlib due to the<a href="http://matplotlib.org/faq/virtualenv_faq.html" target="_blank" rel="external">issues described here</a>. You can work around this issue by starting the IPython server using the<code>start_ipython_osx.sh</code> script from the <code>assignment2</code> directory; the script assumes that your virtual environment is named <code>.env</code>.</p><h3 id="Submitting-your-work"><a href="#Submitting-your-work" class="headerlink" title="Submitting your work:"></a>Submitting your work:</h3><p>Whether you work on the assignment locally or using Terminal, once you are done working run the <code>collectSubmission.sh</code> script; this will produce a file called <code>assignment2.zip</code>. Upload this file under the Assignments tab on <a href="https://coursework.stanford.edu/portal/site/W15-CS-231N-01/" target="_blank" rel="external">the coursework</a> page for the course.</p><h3 id="Q1-Fully-connected-Neural-Network-30-points"><a href="#Q1-Fully-connected-Neural-Network-30-points" class="headerlink" title="Q1: Fully-connected Neural Network (30 points)"></a>Q1: Fully-connected Neural Network (30 points)</h3><p>The IPython notebook <a href="https://github.com/ewanlee/cs231n/blob/master/cs231n-assignments/assignment2/FullyConnectedNets.ipynb" target="_blank" rel="external"><code>FullyConnectedNets.ipynb</code></a> will introduce you to our modular layer design, and then use those layers to implement fully-connected networks of arbitrary depth. To optimize these models you will implement several popular update rules.</p><h3 id="Q2-Batch-Normalization-30-points"><a href="#Q2-Batch-Normalization-30-points" class="headerlink" title="Q2: Batch Normalization (30 points)"></a>Q2: Batch Normalization (30 points)</h3><p>In the IPython notebook <a href="https://github.com/ewanlee/cs231n/blob/master/cs231n-assignments/assignment2/BatchNormalization.ipynb" target="_blank" rel="external"><code>BatchNormalization.ipynb</code></a> you will implement batch normalization, and use it to train deep fully-connected networks.</p><h3 id="Q3-Dropout-10-points"><a href="#Q3-Dropout-10-points" class="headerlink" title="Q3: Dropout (10 points)"></a>Q3: Dropout (10 points)</h3><p>The IPython notebook <a href="https://github.com/ewanlee/cs231n/blob/master/cs231n-assignments/assignment2/Dropout.ipynb" target="_blank" rel="external"><code>Dropout.ipynb</code></a> will help you implement Dropout and explore its effects on model generalization.</p><h3 id="Q4-ConvNet-on-CIFAR-10-30-points"><a href="#Q4-ConvNet-on-CIFAR-10-30-points" class="headerlink" title="Q4: ConvNet on CIFAR-10 (30 points)"></a>Q4: ConvNet on CIFAR-10 (30 points)</h3><p>In the IPython Notebook <a href="https://github.com/ewanlee/cs231n/blob/master/cs231n-assignments/assignment2/ConvolutionalNetworks.ipynb" target="_blank" rel="external"><code>ConvolutionalNetworks.ipynb</code></a> you will implement several new layers that are commonly used in convolutional networks. You will train a (shallow) convolutional network on CIFAR-10, and it will then be up to you to train the best network that you can.</p><h3 id="Q5-Do-something-extra-up-to-10-points"><a href="#Q5-Do-something-extra-up-to-10-points" class="headerlink" title="Q5: Do something extra! (up to +10 points)"></a>Q5: Do something extra! (up to +10 points)</h3><p>In the process of training your network, you should feel free to implement anything that you want to get better performance. You can modify the solver, implement additional layers, use different types of regularization, use an ensemble of models, or anything else that comes to mind. If you implement these or other ideas not covered in the assignment then you will be awarded some bonus points.](<a href="https://github.com/ewanlee/cs231n/tree/master/cs231n-assignments/assignment" target="_blank" rel="external">https://github.com/ewanlee/cs231n/tree/master/cs231n-assignments/assignment</a></p><h1 id="Assignment-3"><a href="#Assignment-3" class="headerlink" title="Assignment 3"></a>Assignment 3</h1><p>In this assignment you will implement recurrent networks, and apply them to image captioning on Microsoft COCO. We will also introduce the TinyImageNet dataset, and use a pretrained model on this dataset to explore different applications of image gradients.</p><p>The goals of this assignment are as follows:</p><ul><li>Understand the architecture of <em>recurrent neural networks (RNNs)</em> and how they operate on sequences by sharing weights over time</li><li>Understand the difference between vanilla RNNs and Long-Short Term Memory (LSTM) RNNs</li><li>Understand how to sample from an RNN at test-time</li><li>Understand how to combine convolutional neural nets and recurrent nets to implement an image captioning system</li><li>Understand how a trained convolutional network can be used to compute gradients with respect to the input image</li><li>Implement and different applications of image gradients, including saliency maps, fooling images, class visualizations, feature inversion, and DeepDream.</li></ul><h2 id="Setup-1"><a href="#Setup-1" class="headerlink" title="Setup"></a>Setup</h2><p>You can work on the assignment in one of two ways: locally on your own machine, or on a virtual machine through Terminal.com.</p><h3 id="Working-in-the-cloud-on-Terminal-1"><a href="#Working-in-the-cloud-on-Terminal-1" class="headerlink" title="Working in the cloud on Terminal"></a>Working in the cloud on Terminal</h3><p>Terminal has created a separate subdomain to serve our class, <a href="https://www.stanfordterminalcloud.com/" target="_blank" rel="external">www.stanfordterminalcloud.com</a>. Register your account there. The Assignment 3 snapshot can then be found <a href="https://www.stanfordterminalcloud.com/snapshot/29054ca27bc2e8bda888709ba3d9dd07a172cbbf0824152aac49b14a018ffbe5" target="_blank" rel="external">HERE</a>. If you are registered in the class you can contact the TA (see Piazza for more information) to request Terminal credits for use on the assignment. Once you boot up the snapshot everything will be installed for you, and you will be ready to start on your assignment right away. We have written a small tutorial on Terminal <a href="http://cs231n.github.io/terminal-tutorial" target="_blank" rel="external">here</a>.</p><h3 id="Working-locally-1"><a href="#Working-locally-1" class="headerlink" title="Working locally"></a>Working locally</h3><p>Get the code as a zip file <a href="http://cs231n.stanford.edu/assignments/2016/winter1516_assignment3.zip" target="_blank" rel="external">here</a>. As for the dependencies:</p><p><strong>[Option 1] Use Anaconda:</strong> The preferred approach for installing all the assignment dependencies is to use<a href="https://www.continuum.io/downloads" target="_blank" rel="external">Anaconda</a>, which is a Python distribution that includes many of the most popular Python packages for science, math, engineering and data analysis. Once you install it you can skip all mentions of requirements and you are ready to go directly to working on the assignment.</p><p><strong>[Option 2] Manual install, virtual environment:</strong> If you do not want to use Anaconda and want to go with a more manual and risky installation route you will likely want to create a <a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/" target="_blank" rel="external">virtual environment</a> for the project. If you choose not to use a virtual environment, it is up to you to make sure that all dependencies for the code are installed globally on your machine. To set up a virtual environment, run the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd assignment3</div><div class="line">sudo pip install virtualenv      # This may already be installed</div><div class="line">virtualenv .env                  # Create a virtual environment</div><div class="line">source .env/bin/activate         # Activate the virtual environment</div><div class="line">pip install -r requirements.txt  # Install dependencies</div><div class="line"># Work on the assignment for a while ...</div><div class="line">deactivate                       # Exit the virtual environment</div></pre></td></tr></table></figure><p><strong>Download data:</strong> Once you have the starter code, you will need to download the processed MS-COCO dataset, the TinyImageNet dataset, and the pretrained TinyImageNet model. Run the following from the <code>assignment3</code>directory:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd cs231n/datasets</div><div class="line">./get_coco_captioning.sh</div><div class="line">./get_tiny_imagenet_a.sh</div><div class="line">./get_pretrained_model.sh</div></pre></td></tr></table></figure><p><strong>Compile the Cython extension:</strong> Convolutional Neural Networks require a very efficient implementation. We have implemented of the functionality using <a href="http://cython.org/" target="_blank" rel="external">Cython</a>; you will need to compile the Cython extension before you can run the code. From the <code>cs231n</code> directory, run the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py build_ext --inplace</div></pre></td></tr></table></figure><p><strong>Start IPython:</strong> After you have the data, you should start the IPython notebook server from the <code>assignment3</code>directory. If you are unfamiliar with IPython, you should read our <a href="http://cs231n.github.io/ipython-tutorial" target="_blank" rel="external">IPython tutorial</a>.</p><p><strong>NOTE:</strong> If you are working in a virtual environment on OSX, you may encounter errors with matplotlib due to the<a href="http://matplotlib.org/faq/virtualenv_faq.html" target="_blank" rel="external">issues described here</a>. You can work around this issue by starting the IPython server using the<code>start_ipython_osx.sh</code> script from the <code>assignment3</code> directory; the script assumes that your virtual environment is named <code>.env</code>.</p><h3 id="Submitting-your-work-1"><a href="#Submitting-your-work-1" class="headerlink" title="Submitting your work:"></a>Submitting your work:</h3><p>Whether you work on the assignment locally or using Terminal, once you are done working run the <code>collectSubmission.sh</code> script; this will produce a file called <code>assignment3.zip</code>. Upload this file under the Assignments tab on <a href="https://coursework.stanford.edu/portal/site/W15-CS-231N-01/" target="_blank" rel="external">the coursework</a> page for the course.</p><h3 id="Q1-Image-Captioning-with-Vanilla-RNNs-40-points"><a href="#Q1-Image-Captioning-with-Vanilla-RNNs-40-points" class="headerlink" title="Q1: Image Captioning with Vanilla RNNs (40 points)"></a>Q1: Image Captioning with Vanilla RNNs (40 points)</h3><p>The IPython notebook <a href="https://github.com/ewanlee/cs231n/blob/master/cs231n-assignments/assignment3/RNN_Captioning.ipynb" target="_blank" rel="external"><code>RNN_Captioning.ipynb</code></a> will walk you through the implementation of an image captioning system on MS-COCO using vanilla recurrent networks.</p><h3 id="Q2-Image-Captioning-with-LSTMs-35-points"><a href="#Q2-Image-Captioning-with-LSTMs-35-points" class="headerlink" title="Q2: Image Captioning with LSTMs (35 points)"></a>Q2: Image Captioning with LSTMs (35 points)</h3><p>The IPython notebook <a href="https://github.com/ewanlee/cs231n/blob/master/cs231n-assignments/assignment3/LSTM_Captioning.ipynb" target="_blank" rel="external"><code>LSTM_Captioning.ipynb</code></a>will walk you through the implementation of Long-Short Term Memory (LSTM) RNNs, and apply them to image captioning on MS-COCO.</p><h3 id="Q3-Image-Gradients-Saliency-maps-and-Fooling-Images-10-points"><a href="#Q3-Image-Gradients-Saliency-maps-and-Fooling-Images-10-points" class="headerlink" title="Q3: Image Gradients: Saliency maps and Fooling Images (10 points)"></a>Q3: Image Gradients: Saliency maps and Fooling Images (10 points)</h3><p>The IPython notebook <a href="https://github.com/ewanlee/cs231n/blob/master/cs231n-assignments/assignment3/ImageGradients.ipynb" target="_blank" rel="external"><code>ImageGradients.ipynb</code></a> will introduce the TinyImageNet dataset. You will use a pretrained model on this dataset to compute gradients with respect to the image, and use them to produce saliency maps and fooling images.</p><h3 id="Q4-Image-Generation-Classes-Inversion-DeepDream-15-points"><a href="#Q4-Image-Generation-Classes-Inversion-DeepDream-15-points" class="headerlink" title="Q4: Image Generation: Classes, Inversion, DeepDream (15 points)"></a>Q4: Image Generation: Classes, Inversion, DeepDream (15 points)</h3><p>In the IPython notebook <a href="https://github.com/ewanlee/cs231n/blob/master/cs231n-assignments/assignment3/ImageGeneration.ipynb" target="_blank" rel="external"><code>ImageGeneration.ipynb</code></a> you will use the pretrained TinyImageNet model to generate images. In particular you will generate class visualizations and implement feature inversion and DeepDream.</p><h3 id="Q5-Do-something-extra-up-to-10-points-1"><a href="#Q5-Do-something-extra-up-to-10-points-1" class="headerlink" title="Q5: Do something extra! (up to +10 points)"></a>Q5: Do something extra! (up to +10 points)</h3><p>Given the components of the assignment, try to do something cool. Maybe there is some way to generate images that we did not implement in the assignment?</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Assignment-2&quot;&gt;&lt;a href=&quot;#Assignment-2&quot; class=&quot;headerlink&quot; title=&quot;Assignment 2&quot;&gt;&lt;/a&gt;Assignment 2&lt;/h1&gt;&lt;p&gt;In this assignment you will pr
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
      <category term="cs231n" scheme="http://yoursite.com/tags/cs231n/"/>
    
  </entry>
  
  <entry>
    <title>cs231n Software Packages notes</title>
    <link href="http://yoursite.com/2017/04/13/cs231n-Software-Packages-notes/"/>
    <id>http://yoursite.com/2017/04/13/cs231n-Software-Packages-notes/</id>
    <published>2017-04-13T09:22:10.000Z</published>
    <updated>2017-04-13T10:24:48.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Software-Packages"><a href="#Software-Packages" class="headerlink" title="Software Packages"></a>Software Packages</h1><h2 id="Caffe"><a href="#Caffe" class="headerlink" title="Caffe"></a>Caffe</h2><p><a href="http://caffe.berkeleyvision.org" target="_blank" rel="external">http://caffe.berkeleyvision.org</a></p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><ul><li>From U.C. Berkeley</li><li>Written in C++</li><li>Has Python and Matlab bindings</li><li>Good for training or finetuning feedforward models</li></ul><h3 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h3><p>Don’t be afraid to read the code!</p><h3 id="Main-classes"><a href="#Main-classes" class="headerlink" title="Main classes"></a>Main classes</h3><ul><li>Blob: Stores data and derivatives</li><li>Layer: Transforms bottom blobs to top blobs</li><li>Net:<ul><li>Many layers</li><li>Computes gradients via forward / backward</li></ul></li><li>Solver: Uses gradients to update weights</li></ul><h3 id="Protocol-Buffers"><a href="#Protocol-Buffers" class="headerlink" title="Protocol Buffers"></a>Protocol Buffers</h3><ul><li><p>“Typed JSON” from Google</p></li><li><p>Define “message types” in .proto files</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">message Person &#123;</div><div class="line">  required <span class="built_in">string</span> name = <span class="number">1</span>;</div><div class="line">  required int32 id = <span class="number">2</span>;</div><div class="line">  optional <span class="built_in">string</span> email = <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Serialize instances to text files (.prototxt)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">name: <span class="string">"John Doe"</span></div><div class="line">id: <span class="number">1234</span></div><div class="line">email: <span class="string">"jdoe@example.com"</span></div></pre></td></tr></table></figure></li><li><p>Compile classes for different languages</p></li></ul><h3 id="Training-Finetuning"><a href="#Training-Finetuning" class="headerlink" title="Training / Finetuning"></a>Training / Finetuning</h3><ol><li>Convert data (run a script)</li><li>Define net (edit prototxt)</li><li>Define solver (edit prototxt)</li><li>Train (with pretrained weights) (run a script)</li></ol><h4 id="Step1-Convert-Data"><a href="#Step1-Convert-Data" class="headerlink" title="Step1: Convert Data"></a>Step1: Convert Data</h4><ul><li>DataLayer reading from LMDB is the easiest</li><li>Create LMDB using <a href="https://github.com/BVLC/caffe/blob/85bb397acfd383a676c125c75d877642d6b39ff6/tools/convert_imageset.cpp" target="_blank" rel="external">convert_imageset</a></li><li>Need text file where each line is<ul><li>“[path/to/image.jpeg][label]”</li></ul></li><li>Create HDF5 file yourself using h5py</li><li>[extras] some methods:<ul><li>ImageDataLayer: Read from image files</li><li>WindowDataLayer: For detection</li><li>HDF5Layer: Read from HDF5 file</li><li>From memory, using Python interface</li><li>All of these are harder to use (except Python)</li></ul></li></ul><h4 id="Step2-Define-Net"><a href="#Step2-Define-Net" class="headerlink" title="Step2: Define Net"></a>Step2: Define Net</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line">name: <span class="string">"ResNet-152"</span></div><div class="line">input: <span class="string">"data"</span></div><div class="line">input_dim: <span class="number">1</span></div><div class="line">input_dim: <span class="number">3</span></div><div class="line">input_dim: <span class="number">224</span></div><div class="line">input_dim: <span class="number">224</span></div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"data"</span></div><div class="line">	top: <span class="string">"conv1"</span></div><div class="line">	name: <span class="string">"conv1"</span></div><div class="line">	type: <span class="string">"Convolution"</span></div><div class="line">	convolution_param &#123;</div><div class="line">		num_output: <span class="number">64</span></div><div class="line">		kernel_size: <span class="number">7</span></div><div class="line">		pad: <span class="number">3</span></div><div class="line">		stride: <span class="number">2</span></div><div class="line">		bias_term: <span class="literal">false</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"conv1"</span></div><div class="line">	top: <span class="string">"conv1"</span></div><div class="line">	name: <span class="string">"bn_conv1"</span></div><div class="line">	type: <span class="string">"BatchNorm"</span></div><div class="line">	batch_norm_param &#123;</div><div class="line">		use_global_stats: <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"conv1"</span></div><div class="line">	top: <span class="string">"conv1"</span></div><div class="line">	name: <span class="string">"scale_conv1"</span></div><div class="line">	type: <span class="string">"Scale"</span></div><div class="line">	scale_param &#123;</div><div class="line">		bias_term: <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	top: <span class="string">"conv1"</span></div><div class="line">	bottom: <span class="string">"conv1"</span></div><div class="line">	name: <span class="string">"conv1_relu"</span></div><div class="line">	type: <span class="string">"ReLU"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"conv1"</span></div><div class="line">	top: <span class="string">"pool1"</span></div><div class="line">	name: <span class="string">"pool1"</span></div><div class="line">	type: <span class="string">"Pooling"</span></div><div class="line">	pooling_param &#123;</div><div class="line">		kernel_size: <span class="number">3</span></div><div class="line">		stride: <span class="number">2</span></div><div class="line">		pool: MAX</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"pool1"</span></div><div class="line">	top: <span class="string">"res2a_branch1"</span></div><div class="line">	name: <span class="string">"res2a_branch1"</span></div><div class="line">	type: <span class="string">"Convolution"</span></div><div class="line">	convolution_param &#123;</div><div class="line">		num_output: <span class="number">256</span></div><div class="line">		kernel_size: <span class="number">1</span></div><div class="line">		pad: <span class="number">0</span></div><div class="line">		stride: <span class="number">1</span></div><div class="line">		bias_term: <span class="literal">false</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"res2a_branch1"</span></div><div class="line">	top: <span class="string">"res2a_branch1"</span></div><div class="line">	name: <span class="string">"bn2a_branch1"</span></div><div class="line">	type: <span class="string">"BatchNorm"</span></div><div class="line">	batch_norm_param &#123;</div><div class="line">		use_global_stats: <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"res2a_branch1"</span></div><div class="line">	top: <span class="string">"res2a_branch1"</span></div><div class="line">	name: <span class="string">"scale2a_branch1"</span></div><div class="line">	type: <span class="string">"Scale"</span></div><div class="line">	scale_param &#123;</div><div class="line">		bias_term: <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"pool1"</span></div><div class="line">	top: <span class="string">"res2a_branch2a"</span></div><div class="line">	name: <span class="string">"res2a_branch2a"</span></div><div class="line">	type: <span class="string">"Convolution"</span></div><div class="line">	convolution_param &#123;</div><div class="line">		num_output: <span class="number">64</span></div><div class="line">		kernel_size: <span class="number">1</span></div><div class="line">		pad: <span class="number">0</span></div><div class="line">		stride: <span class="number">1</span></div><div class="line">		bias_term: <span class="literal">false</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"res2a_branch2a"</span></div><div class="line">	top: <span class="string">"res2a_branch2a"</span></div><div class="line">	name: <span class="string">"bn2a_branch2a"</span></div><div class="line">	type: <span class="string">"BatchNorm"</span></div><div class="line">	batch_norm_param &#123;</div><div class="line">		use_global_stats: <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"res2a_branch2a"</span></div><div class="line">	top: <span class="string">"res2a_branch2a"</span></div><div class="line">	name: <span class="string">"scale2a_branch2a"</span></div><div class="line">	type: <span class="string">"Scale"</span></div><div class="line">	scale_param &#123;</div><div class="line">		bias_term: <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>.prototxt can get ugly for big models</li><li><a href="https://github.com/KaimingHe/deep-residual-networks/blob/master/prototxt/ResNet-152-deploy.prototxt" target="_blank" rel="external">ResNet-152 prototxt</a> is 6775 lines long!</li><li>Not “compositional”; can’t easily define a residual block and reuse</li></ul><h4 id="Step2-Define-Net-finetuning"><a href="#Step2-Define-Net-finetuning" class="headerlink" title="Step2: Define Net (finetuning)"></a>Step2: Define Net (finetuning)</h4><ul><li>Same name: weights copied</li><li>Different name: weights reinitialized</li></ul><h4 id="Step3-Define-Solver"><a href="#Step3-Define-Solver" class="headerlink" title="Step3: Define Solver"></a>Step3: Define Solver</h4><ul><li><p>Write a prototxt file defining a <a href="https://github.com/BVLC/caffe/blob/85bb397acfd383a676c125c75d877642d6b39ff6/src/caffe/proto/caffe.proto#L92" target="_blank" rel="external">SolverParameter</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div></pre></td><td class="code"><pre><div class="line">message SolverParameter &#123;</div><div class="line">  <span class="comment">//////////////////////////////////////////////////////////////////////////////</span></div><div class="line">  <span class="comment">// Specifying the train and test networks</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// Exactly one train net must be specified using one of the following fields:</span></div><div class="line">  <span class="comment">//     train_net_param, train_net, net_param, net</span></div><div class="line">  <span class="comment">// One or more test nets may be specified using any of the following fields:</span></div><div class="line">  <span class="comment">//     test_net_param, test_net, net_param, net</span></div><div class="line">  <span class="comment">// If more than one test net field is specified (e.g., both net and</span></div><div class="line">  <span class="comment">// test_net are specified), they will be evaluated in the field order given</span></div><div class="line">  <span class="comment">// above: (1) test_net_param, (2) test_net, (3) net_param/net.</span></div><div class="line">  <span class="comment">// A test_iter must be specified for each test_net.</span></div><div class="line">  <span class="comment">// A test_level and/or a test_stage may also be specified for each test_net.</span></div><div class="line">  <span class="comment">//////////////////////////////////////////////////////////////////////////////</span></div><div class="line"></div><div class="line">  <span class="comment">// Proto filename for the train net, possibly combined with one or more</span></div><div class="line">  <span class="comment">// test nets.</span></div><div class="line">  optional <span class="built_in">string</span> net = <span class="number">24</span>;</div><div class="line">  <span class="comment">// Inline train net param, possibly combined with one or more test nets.</span></div><div class="line">  optional NetParameter net_param = <span class="number">25</span>;</div><div class="line"></div><div class="line">  optional <span class="built_in">string</span> train_net = <span class="number">1</span>; <span class="comment">// Proto filename for the train net.</span></div><div class="line">  repeated <span class="built_in">string</span> test_net = <span class="number">2</span>; <span class="comment">// Proto filenames for the test nets.</span></div><div class="line">  optional NetParameter train_net_param = <span class="number">21</span>; <span class="comment">// Inline train net params.</span></div><div class="line">  repeated NetParameter test_net_param = <span class="number">22</span>; <span class="comment">// Inline test net params.</span></div><div class="line"></div><div class="line">  <span class="comment">// The states for the train/test nets. Must be unspecified or</span></div><div class="line">  <span class="comment">// specified once per net.</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// By default, all states will have solver = true;</span></div><div class="line">  <span class="comment">// train_state will have phase = TRAIN,</span></div><div class="line">  <span class="comment">// and all test_state's will have phase = TEST.</span></div><div class="line">  <span class="comment">// Other defaults are set according to the NetState defaults.</span></div><div class="line">  optional NetState train_state = <span class="number">26</span>;</div><div class="line">  repeated NetState test_state = <span class="number">27</span>;</div><div class="line"></div><div class="line">  <span class="comment">// The number of iterations for each test net.</span></div><div class="line">  repeated int32 test_iter = <span class="number">3</span>;</div><div class="line"></div><div class="line">  <span class="comment">// The number of iterations between two testing phases.</span></div><div class="line">  optional int32 test_interval = <span class="number">4</span> [<span class="keyword">default</span> = <span class="number">0</span>];</div><div class="line">  optional <span class="keyword">bool</span> test_compute_loss = <span class="number">19</span> [<span class="keyword">default</span> = <span class="literal">false</span>];</div><div class="line">  <span class="comment">// If true, run an initial test pass before the first iteration,</span></div><div class="line">  <span class="comment">// ensuring memory availability and printing the starting value of the loss.</span></div><div class="line">  optional <span class="keyword">bool</span> test_initialization = <span class="number">32</span> [<span class="keyword">default</span> = <span class="literal">true</span>];</div><div class="line">  optional <span class="keyword">float</span> base_lr = <span class="number">5</span>; <span class="comment">// The base learning rate</span></div><div class="line">  <span class="comment">// the number of iterations between displaying info. If display = 0, no info</span></div><div class="line">  <span class="comment">// will be displayed.</span></div><div class="line">  optional int32 display = <span class="number">6</span>;</div><div class="line">  <span class="comment">// Display the loss averaged over the last average_loss iterations</span></div><div class="line">  optional int32 average_loss = <span class="number">33</span> [<span class="keyword">default</span> = <span class="number">1</span>];</div><div class="line">  optional int32 max_iter = <span class="number">7</span>; <span class="comment">// the maximum number of iterations</span></div><div class="line">  optional <span class="built_in">string</span> lr_policy = <span class="number">8</span>; <span class="comment">// The learning rate decay policy.</span></div><div class="line">  optional <span class="keyword">float</span> gamma = <span class="number">9</span>; <span class="comment">// The parameter to compute the learning rate.</span></div><div class="line">  optional <span class="keyword">float</span> power = <span class="number">10</span>; <span class="comment">// The parameter to compute the learning rate.</span></div><div class="line">  optional <span class="keyword">float</span> momentum = <span class="number">11</span>; <span class="comment">// The momentum value.</span></div><div class="line">  optional <span class="keyword">float</span> weight_decay = <span class="number">12</span>; <span class="comment">// The weight decay.</span></div><div class="line">  <span class="comment">// regularization types supported: L1 and L2</span></div><div class="line">  <span class="comment">// controlled by weight_decay</span></div><div class="line">  optional <span class="built_in">string</span> regularization_type = <span class="number">29</span> [<span class="keyword">default</span> = <span class="string">"L2"</span>];</div><div class="line">  <span class="comment">// the stepsize for learning rate policy "step"</span></div><div class="line">  optional int32 stepsize = <span class="number">13</span>;</div><div class="line">  <span class="comment">// the stepsize for learning rate policy "multistep"</span></div><div class="line">  repeated int32 stepvalue = <span class="number">34</span>;</div><div class="line"></div><div class="line">  <span class="comment">// Set clip_gradients to &gt;= 0 to clip parameter gradients to that L2 norm,</span></div><div class="line">  <span class="comment">// whenever their actual L2 norm is larger.</span></div><div class="line">  optional <span class="keyword">float</span> clip_gradients = <span class="number">35</span> [<span class="keyword">default</span> = <span class="number">-1</span>];</div><div class="line"></div><div class="line">  optional int32 snapshot = <span class="number">14</span> [<span class="keyword">default</span> = <span class="number">0</span>]; <span class="comment">// The snapshot interval</span></div><div class="line">  optional <span class="built_in">string</span> snapshot_prefix = <span class="number">15</span>; <span class="comment">// The prefix for the snapshot.</span></div><div class="line">  <span class="comment">// whether to snapshot diff in the results or not. Snapshotting diff will help</span></div><div class="line">  <span class="comment">// debugging but the final protocol buffer size will be much larger.</span></div><div class="line">  optional <span class="keyword">bool</span> snapshot_diff = <span class="number">16</span> [<span class="keyword">default</span> = <span class="literal">false</span>];</div><div class="line">  <span class="comment">// the mode solver will use: 0 for CPU and 1 for GPU. Use GPU in default.</span></div><div class="line">  <span class="keyword">enum</span> SolverMode &#123;</div><div class="line">    CPU = <span class="number">0</span>;</div><div class="line">    GPU = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  optional SolverMode solver_mode = <span class="number">17</span> [<span class="keyword">default</span> = GPU];</div><div class="line">  <span class="comment">// the device_id will that be used in GPU mode. Use device_id = 0 in default.</span></div><div class="line">  optional int32 device_id = <span class="number">18</span> [<span class="keyword">default</span> = <span class="number">0</span>];</div><div class="line">  <span class="comment">// If non-negative, the seed with which the Solver will initialize the Caffe</span></div><div class="line">  <span class="comment">// random number generator -- useful for reproducible results. Otherwise,</span></div><div class="line">  <span class="comment">// (and by default) initialize using a seed derived from the system clock.</span></div><div class="line">  optional int64 random_seed = <span class="number">20</span> [<span class="keyword">default</span> = <span class="number">-1</span>];</div><div class="line"></div><div class="line">  <span class="comment">// Solver type</span></div><div class="line">  <span class="keyword">enum</span> SolverType &#123;</div><div class="line">    SGD = <span class="number">0</span>;</div><div class="line">    NESTEROV = <span class="number">1</span>;</div><div class="line">    ADAGRAD = <span class="number">2</span>;</div><div class="line">  &#125;</div><div class="line">  optional SolverType solver_type = <span class="number">30</span> [<span class="keyword">default</span> = SGD];</div><div class="line">  <span class="comment">// numerical stability for AdaGrad</span></div><div class="line">  optional <span class="keyword">float</span> delta = <span class="number">31</span> [<span class="keyword">default</span> = <span class="number">1e-8</span>];</div><div class="line"></div><div class="line">  <span class="comment">// If true, print information about the state of the net that may help with</span></div><div class="line">  <span class="comment">// debugging learning problems.</span></div><div class="line">  optional <span class="keyword">bool</span> debug_info = <span class="number">23</span> [<span class="keyword">default</span> = <span class="literal">false</span>];</div><div class="line"></div><div class="line">  <span class="comment">// If false, don't save a snapshot after training finishes.</span></div><div class="line">  optional <span class="keyword">bool</span> snapshot_after_train = <span class="number">28</span> [<span class="keyword">default</span> = <span class="literal">true</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// A message that stores the solver snapshots</span></div><div class="line">message SolverState &#123;</div><div class="line">  optional int32 iter = <span class="number">1</span>; <span class="comment">// The current iteration</span></div><div class="line">  optional <span class="built_in">string</span> learned_net = <span class="number">2</span>; <span class="comment">// The file that stores the learned net.</span></div><div class="line">  repeated BlobProto history = <span class="number">3</span>; <span class="comment">// The history for sgd solvers</span></div><div class="line">  optional int32 current_step = <span class="number">4</span> [<span class="keyword">default</span> = <span class="number">0</span>]; <span class="comment">// The current step for learning rate</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">enum</span> Phase &#123;</div><div class="line">   TRAIN = <span class="number">0</span>;</div><div class="line">   TEST = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">message NetState &#123;</div><div class="line">  optional Phase phase = <span class="number">1</span> [<span class="keyword">default</span> = TEST];</div><div class="line">  optional int32 level = <span class="number">2</span> [<span class="keyword">default</span> = <span class="number">0</span>];</div><div class="line">  repeated <span class="built_in">string</span> stage = <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">message NetStateRule &#123;</div><div class="line">  <span class="comment">// Set phase to require the NetState have a particular phase (TRAIN or TEST)</span></div><div class="line">  <span class="comment">// to meet this rule.</span></div><div class="line">  optional Phase phase = <span class="number">1</span>;</div><div class="line"></div><div class="line">  <span class="comment">// Set the minimum and/or maximum levels in which the layer should be used.</span></div><div class="line">  <span class="comment">// Leave undefined to meet the rule regardless of level.</span></div><div class="line">  optional int32 min_level = <span class="number">2</span>;</div><div class="line">  optional int32 max_level = <span class="number">3</span>;</div><div class="line"></div><div class="line">  <span class="comment">// Customizable sets of stages to include or exclude.</span></div><div class="line">  <span class="comment">// The net must have ALL of the specified stages and NONE of the specified</span></div><div class="line">  <span class="comment">// "not_stage"s to meet the rule.</span></div><div class="line">  <span class="comment">// (Use multiple NetStateRules to specify conjunctions of stages.)</span></div><div class="line">  repeated <span class="built_in">string</span> stage = <span class="number">4</span>;</div><div class="line">  repeated <span class="built_in">string</span> not_stage = <span class="number">5</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Specifies training parameters (multipliers on global learning constants,</span></div><div class="line"><span class="comment">// and the name and other settings used for weight sharing).</span></div><div class="line">message ParamSpec &#123;</div><div class="line">  <span class="comment">// The names of the parameter blobs -- useful for sharing parameters among</span></div><div class="line">  <span class="comment">// layers, but never required otherwise.  To share a parameter between two</span></div><div class="line">  <span class="comment">// layers, give it a (non-empty) name.</span></div><div class="line">  optional <span class="built_in">string</span> name = <span class="number">1</span>;</div><div class="line"></div><div class="line">  <span class="comment">// Whether to require shared weights to have the same shape, or just the same</span></div><div class="line">  <span class="comment">// count -- defaults to STRICT if unspecified.</span></div><div class="line">  optional DimCheckMode share_mode = <span class="number">2</span>;</div><div class="line">  <span class="keyword">enum</span> DimCheckMode &#123;</div><div class="line">    <span class="comment">// STRICT (default) requires that num, channels, height, width each match.</span></div><div class="line">    STRICT = <span class="number">0</span>;</div><div class="line">    <span class="comment">// PERMISSIVE requires only the count (num*channels*height*width) to match.</span></div><div class="line">    PERMISSIVE = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// The multiplier on the global learning rate for this parameter.</span></div><div class="line">  optional <span class="keyword">float</span> lr_mult = <span class="number">3</span> [<span class="keyword">default</span> = <span class="number">1.0</span>];</div><div class="line"></div><div class="line">  <span class="comment">// The multiplier on the global weight decay for this parameter.</span></div><div class="line">  optional <span class="keyword">float</span> decay_mult = <span class="number">4</span> [<span class="keyword">default</span> = <span class="number">1.0</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>If finetuning, copy existing solver.prototxt file</p><ul><li>Change net to be your net</li><li>Change snapshot_prefix to your output</li><li>Reduce base learning rate (divide by 100)</li><li>Maybe change max_iter and snapshot</li></ul></li></ul><h4 id="Step-4-Train"><a href="#Step-4-Train" class="headerlink" title="Step 4: Train"></a>Step 4: Train</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">./build/tools/caffe train \</div><div class="line"> -gpu 0 \</div><div class="line"> -model path/to/trainval.prototxt \</div><div class="line"> -solver path/to/solver.prototxt \</div><div class="line"> -weights path/to/pretrained_weights.caffemodel</div><div class="line"> </div><div class="line"> # -gpu -1 for CPU mode</div><div class="line"> # -gpu all for multi-GPU data parallelism</div></pre></td></tr></table></figure><h3 id="Model-Zoo"><a href="#Model-Zoo" class="headerlink" title="Model Zoo"></a>Model Zoo</h3><p><a href="https://github.com/BVLC/caffe/wiki/Model-Zoo" target="_blank" rel="external">https://github.com/BVLC/caffe/wiki/Model-Zoo</a></p><h3 id="Python-Interface"><a href="#Python-Interface" class="headerlink" title="Python Interface"></a>Python Interface</h3><p>Read the code! Two most important files:</p><ul><li><a href="https://github.com/BVLC/caffe/blob/master/python/caffe/_caffe.cpp" target="_blank" rel="external">caffe/python/caffe/_caffe.cpp</a><ul><li>Exports Blob, Layer, Net, and Solver classes</li></ul></li><li><a href="https://github.com/BVLC/caffe/blob/master/python/caffe/pycaffe.py" target="_blank" rel="external">caffe/python/caffe/pycaffe.py</a><ul><li>Adds extra methods to Net class</li></ul></li></ul><p>Good for:</p><ul><li>Interfacing with numpy</li><li>Extract features: Run net forward</li><li>Compute gradients: Run net backward (DeepDream, etc)</li><li>Define layers in Python with numpy (CPU only)</li></ul><h3 id="Pros-Cons"><a href="#Pros-Cons" class="headerlink" title="Pros / Cons"></a>Pros / Cons</h3><ul><li>(+) Good for feedforward networks</li><li>(+) Good for finetuning existing networks</li><li>(+) Train models without writing any code!</li><li>(+) Python interface is pretty useful!</li><li>(-) Need to write C++ / CUDA for new GPU layers</li><li>(-) Not good for recurrent networks</li><li>(-) Cumbersome for big networks (GoogLeNet, ResNet)</li></ul><h2 id="Torch"><a href="#Torch" class="headerlink" title="Torch"></a>Torch</h2><p><a href="http://torch.ch" target="_blank" rel="external">http://torch.ch</a></p><h3 id="Overview-1"><a href="#Overview-1" class="headerlink" title="Overview"></a>Overview</h3><ul><li>From NYU + IDIAP</li><li>Written in C and Lua</li><li>Used a lot a Facebook, DeepMind</li></ul><h3 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h3><p><a href="http://tylerneylon.com/a/learn-lua/" target="_blank" rel="external">Learn Lua in 15 Minutes</a></p><ul><li>High level scripting language, easy to interface with C</li><li>Similar to Javascript:<ul><li>One data structure: table == JS object</li><li>Prototypical inheritance: metatable == JS prototype</li><li>First-class functions</li></ul></li><li>Some gotchas:<ul><li>1-indexed =(</li><li>Variables global by default =(</li><li>Small standard library</li></ul></li></ul><h3 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h3><p>Torch tensors are just like numpy arrays</p><p>Documentation on GitHub:</p><ul><li><a href="https://github.com/torch/torch7/blob/master/doc/tensor.md" target="_blank" rel="external">https://github.com/torch/torch7/blob/master/doc/tensor.md</a></li><li><a href="https://github.com/torch/torch7/blob/master/doc/maths.md" target="_blank" rel="external">https://github.com/torch/torch7/blob/master/doc/maths.md</a></li></ul><h3 id="nn"><a href="#nn" class="headerlink" title="nn"></a>nn</h3><p>nn module lets you easily build and train neural nets</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- our optimization procedure will iterate over the modules, so only share</span></div><div class="line"><span class="comment">-- the parameters</span></div><div class="line">mlp = nn.Sequential()</div><div class="line">linear = nn.Linear(<span class="number">2</span>,<span class="number">2</span>)</div><div class="line">linear_clone = linear:clone(<span class="string">'weight'</span>,<span class="string">'bias'</span>) <span class="comment">-- clone sharing the parameters</span></div><div class="line">mlp:add(linear)</div><div class="line">mlp:add(linear_clone)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">gradUpdate</span><span class="params">(mlp, x, y, criterion, learningRate)</span></span> </div><div class="line">  <span class="keyword">local</span> pred = mlp:forward(x)</div><div class="line">  <span class="keyword">local</span> err = criterion:forward(pred, y)</div><div class="line">  <span class="keyword">local</span> gradCriterion = criterion:backward(pred, y)</div><div class="line">  mlp:zeroGradParameters()</div><div class="line">  mlp:backward(x, gradCriterion)</div><div class="line">  mlp:updateParameters(learningRate)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- our optimization procedure will use all the parameters at once, because</span></div><div class="line"><span class="comment">-- it requires the flattened parameters and gradParameters Tensors. Thus,</span></div><div class="line"><span class="comment">-- we need to share both the parameters and the gradParameters</span></div><div class="line">mlp = nn.Sequential()</div><div class="line">linear = nn.Linear(<span class="number">2</span>,<span class="number">2</span>)</div><div class="line"><span class="comment">-- need to share the parameters and the gradParameters as well</span></div><div class="line">linear_clone = linear:clone(<span class="string">'weight'</span>,<span class="string">'bias'</span>,<span class="string">'gradWeight'</span>,<span class="string">'gradBias'</span>)</div><div class="line">mlp:add(linear)</div><div class="line">mlp:add(linear_clone)</div><div class="line">params, gradParams = mlp:getParameters()</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">gradUpdate</span><span class="params">(mlp, x, y, criterion, learningRate, params, gradParams)</span></span></div><div class="line">  <span class="keyword">local</span> pred = mlp:forward(x)</div><div class="line">  <span class="keyword">local</span> err = criterion:forward(pred, y)</div><div class="line">  <span class="keyword">local</span> gradCriterion = criterion:backward(pred, y)</div><div class="line">  mlp:zeroGradParameters()</div><div class="line">  mlp:backward(x, gradCriterion)</div><div class="line">  <span class="comment">-- adds the gradients to all the parameters at once</span></div><div class="line">  params:add(-learningRate, gradParams)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><h3 id="cunn"><a href="#cunn" class="headerlink" title="cunn"></a>cunn</h3><p>Running on GPU is easy</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> model = nn.Sequential()</div><div class="line">model:add(nn.Linear(<span class="number">2</span>,<span class="number">2</span>))</div><div class="line">model:add(nn.LogSoftMax())</div><div class="line"></div><div class="line">model:cuda()  <span class="comment">-- convert model to CUDA</span></div><div class="line"></div><div class="line"><span class="keyword">local</span> input = torch.Tensor(<span class="number">32</span>,<span class="number">2</span>):uniform()</div><div class="line">input = input:cuda()</div><div class="line"><span class="keyword">local</span> output = model:forward(input)</div><div class="line"></div><div class="line"><span class="keyword">local</span> input = torch.CudaTensor(<span class="number">32</span>,<span class="number">2</span>):uniform()</div><div class="line"><span class="keyword">local</span> output = model:forward(input)</div></pre></td></tr></table></figure><h3 id="optim"><a href="#optim" class="headerlink" title="optim"></a>optim</h3><p>optim package implements different update rules: momentum, Adam, etc</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span> <span class="string">'optim'</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> epoch = <span class="number">1</span>, <span class="number">50</span> <span class="keyword">do</span></div><div class="line">   <span class="comment">-- local function we give to optim</span></div><div class="line">   <span class="comment">-- it takes current weights as input, and outputs the loss</span></div><div class="line">   <span class="comment">-- and the gradient of the loss with respect to the weights</span></div><div class="line">   <span class="comment">-- gradParams is calculated implicitly by calling 'backward',</span></div><div class="line">   <span class="comment">-- because the model's weight and bias gradient tensors</span></div><div class="line">   <span class="comment">-- are simply views onto gradParams</span></div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">feval</span><span class="params">(params)</span></span></div><div class="line">      gradParams:zero()</div><div class="line"></div><div class="line">      <span class="keyword">local</span> outputs = model:forward(batchInputs)</div><div class="line">      <span class="keyword">local</span> loss = criterion:forward(outputs, batchLabels)</div><div class="line">      <span class="keyword">local</span> dloss_doutputs = criterion:backward(outputs, batchLabels)</div><div class="line">      model:backward(batchInputs, dloss_doutputs)</div><div class="line"></div><div class="line">      <span class="keyword">return</span> loss, gradParams</div><div class="line">   <span class="keyword">end</span></div><div class="line">   optim.sgd(feval, params, optimState)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><ul><li>Caffe has Nets and Layers; Torch just has Modules</li><li>Modules are classes written in Lua; easy to read and write</li><li>Forward / backward written in Lua using Tensor methods</li><li>Same code runs on CPU / GPU</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> Linear, parent = torch.class(<span class="string">'nn.Linear'</span>, <span class="string">'nn.Module'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Linear:__init</span><span class="params">(inputSize, outputSize, bias)</span></span></div><div class="line">   parent.__init(self)</div><div class="line">   <span class="keyword">local</span> bias = ((bias == <span class="keyword">nil</span>) <span class="keyword">and</span> <span class="keyword">true</span>) <span class="keyword">or</span> bias</div><div class="line">   self.weight = torch.Tensor(outputSize, inputSize)</div><div class="line">   self.gradWeight = torch.Tensor(outputSize, inputSize)</div><div class="line">   <span class="keyword">if</span> bias <span class="keyword">then</span></div><div class="line">      self.bias = torch.Tensor(outputSize)</div><div class="line">      self.gradBias = torch.Tensor(outputSize)</div><div class="line">   <span class="keyword">end</span></div><div class="line">   self:reset()</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Linear:noBias</span><span class="params">()</span></span></div><div class="line">   self.bias = <span class="keyword">nil</span></div><div class="line">   self.gradBias = <span class="keyword">nil</span></div><div class="line">   <span class="keyword">return</span> self</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Linear:reset</span><span class="params">(stdv)</span></span></div><div class="line">   <span class="keyword">if</span> stdv <span class="keyword">then</span></div><div class="line">      stdv = stdv * <span class="built_in">math</span>.sqrt(<span class="number">3</span>)</div><div class="line">   <span class="keyword">else</span></div><div class="line">      stdv = <span class="number">1.</span>/<span class="built_in">math</span>.sqrt(self.weight:size(<span class="number">2</span>))</div><div class="line">   <span class="keyword">end</span></div><div class="line">   <span class="keyword">if</span> nn.oldSeed <span class="keyword">then</span></div><div class="line">      <span class="keyword">for</span> i=<span class="number">1</span>,self.weight:size(<span class="number">1</span>) <span class="keyword">do</span></div><div class="line">         self.weight:<span class="built_in">select</span>(<span class="number">1</span>, i):apply(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></div><div class="line">            <span class="keyword">return</span> torch.uniform(-stdv, stdv)</div><div class="line">         <span class="keyword">end</span>)</div><div class="line">      <span class="keyword">end</span></div><div class="line">      <span class="keyword">if</span> self.bias <span class="keyword">then</span></div><div class="line">         <span class="keyword">for</span> i=<span class="number">1</span>,self.bias:nElement() <span class="keyword">do</span></div><div class="line">            self.bias[i] = torch.uniform(-stdv, stdv)</div><div class="line">         <span class="keyword">end</span></div><div class="line">      <span class="keyword">end</span></div><div class="line">   <span class="keyword">else</span></div><div class="line">      self.weight:uniform(-stdv, stdv)</div><div class="line">      <span class="keyword">if</span> self.bias <span class="keyword">then</span> self.bias:uniform(-stdv, stdv) <span class="keyword">end</span></div><div class="line">   <span class="keyword">end</span></div><div class="line">   <span class="keyword">return</span> self</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">updateAddBuffer</span><span class="params">(self, input)</span></span></div><div class="line">   <span class="keyword">local</span> nframe = input:size(<span class="number">1</span>)</div><div class="line">   self.addBuffer = self.addBuffer <span class="keyword">or</span> input.new()</div><div class="line">   <span class="keyword">if</span> self.addBuffer:nElement() ~= nframe <span class="keyword">then</span></div><div class="line">      self.addBuffer:resize(nframe):fill(<span class="number">1</span>)</div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Linear:updateOutput</span><span class="params">(input)</span></span></div><div class="line">   <span class="keyword">if</span> input:dim() == <span class="number">1</span> <span class="keyword">then</span></div><div class="line">      self.output:resize(self.weight:size(<span class="number">1</span>))</div><div class="line">      <span class="keyword">if</span> self.bias <span class="keyword">then</span> self.output:copy(self.bias) <span class="keyword">else</span> self.output:zero() <span class="keyword">end</span></div><div class="line">      self.output:addmv(<span class="number">1</span>, self.weight, input)</div><div class="line">   <span class="keyword">elseif</span> input:dim() == <span class="number">2</span> <span class="keyword">then</span></div><div class="line">      <span class="keyword">local</span> nframe = input:size(<span class="number">1</span>)</div><div class="line">      <span class="keyword">local</span> nElement = self.output:nElement()</div><div class="line">      self.output:resize(nframe, self.weight:size(<span class="number">1</span>))</div><div class="line">      <span class="keyword">if</span> self.output:nElement() ~= nElement <span class="keyword">then</span></div><div class="line">         self.output:zero()</div><div class="line">      <span class="keyword">end</span></div><div class="line">      updateAddBuffer(self, input)</div><div class="line">      self.output:addmm(<span class="number">0</span>, self.output, <span class="number">1</span>, input, self.weight:t())</div><div class="line">      <span class="keyword">if</span> self.bias <span class="keyword">then</span> self.output:addr(<span class="number">1</span>, self.addBuffer, self.bias) <span class="keyword">end</span></div><div class="line">   <span class="keyword">else</span></div><div class="line">      <span class="built_in">error</span>(<span class="string">'input must be vector or matrix'</span>)</div><div class="line">   <span class="keyword">end</span></div><div class="line"></div><div class="line">   <span class="keyword">return</span> self.output</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Linear:updateGradInput</span><span class="params">(input, gradOutput)</span></span></div><div class="line">   <span class="keyword">if</span> self.gradInput <span class="keyword">then</span></div><div class="line"></div><div class="line">      <span class="keyword">local</span> nElement = self.gradInput:nElement()</div><div class="line">      self.gradInput:resizeAs(input)</div><div class="line">      <span class="keyword">if</span> self.gradInput:nElement() ~= nElement <span class="keyword">then</span></div><div class="line">         self.gradInput:zero()</div><div class="line">      <span class="keyword">end</span></div><div class="line">      <span class="keyword">if</span> input:dim() == <span class="number">1</span> <span class="keyword">then</span></div><div class="line">         self.gradInput:addmv(<span class="number">0</span>, <span class="number">1</span>, self.weight:t(), gradOutput)</div><div class="line">      <span class="keyword">elseif</span> input:dim() == <span class="number">2</span> <span class="keyword">then</span></div><div class="line">         self.gradInput:addmm(<span class="number">0</span>, <span class="number">1</span>, gradOutput, self.weight)</div><div class="line">      <span class="keyword">end</span></div><div class="line"></div><div class="line">      <span class="keyword">return</span> self.gradInput</div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Linear:accGradParameters</span><span class="params">(input, gradOutput, scale)</span></span></div><div class="line">   scale = scale <span class="keyword">or</span> <span class="number">1</span></div><div class="line">   <span class="keyword">if</span> input:dim() == <span class="number">1</span> <span class="keyword">then</span></div><div class="line">      self.gradWeight:addr(scale, gradOutput, input)</div><div class="line">      <span class="keyword">if</span> self.bias <span class="keyword">then</span> self.gradBias:add(scale, gradOutput) <span class="keyword">end</span></div><div class="line">   <span class="keyword">elseif</span> input:dim() == <span class="number">2</span> <span class="keyword">then</span></div><div class="line">      self.gradWeight:addmm(scale, gradOutput:t(), input)</div><div class="line">      <span class="keyword">if</span> self.bias <span class="keyword">then</span></div><div class="line">         <span class="comment">-- update the size of addBuffer if the input is not the same size as the one we had in last updateGradInput</span></div><div class="line">         updateAddBuffer(self, input)</div><div class="line">         self.gradBias:addmv(scale, gradOutput:t(), self.addBuffer)</div><div class="line">      <span class="keyword">end</span></div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Linear:sharedAccUpdateGradParameters</span><span class="params">(input, gradOutput, lr)</span></span></div><div class="line">   <span class="comment">-- we do not need to accumulate parameters when sharing:</span></div><div class="line">   self:defaultAccUpdateGradParameters(input, gradOutput, lr)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Linear:clearState</span><span class="params">()</span></span></div><div class="line">   <span class="keyword">if</span> self.addBuffer <span class="keyword">then</span> self.addBuffer:set() <span class="keyword">end</span></div><div class="line">   <span class="keyword">return</span> parent.clearState(self)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Linear:__tostring__</span><span class="params">()</span></span></div><div class="line">  <span class="keyword">return</span> torch.<span class="built_in">type</span>(self) ..</div><div class="line">      <span class="built_in">string</span>.format(<span class="string">'(%d -&gt; %d)'</span>, self.weight:size(<span class="number">2</span>), self.weight:size(<span class="number">1</span>)) ..</div><div class="line">      (self.bias == <span class="keyword">nil</span> <span class="keyword">and</span> <span class="string">' without bias'</span> <span class="keyword">or</span> <span class="string">''</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>Tons of built-in modules and loss functions</p><p><a href="https://github.com/torch/nn" target="_blank" rel="external">https://github.com/torch/nn</a></p><h4 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h4><p>Container modules allow you to combine multiple modules</p><h3 id="nngraph"><a href="#nngraph" class="headerlink" title="nngraph"></a>nngraph</h3><p>A multi-layer network where each layer takes output of previous two layers as input.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">input = nn.Identity()()</div><div class="line">L1 = nn.Tanh()(nn.Linear(<span class="number">10</span>, <span class="number">20</span>)(input))</div><div class="line">L2 = nn.Tanh()(nn.Linear(<span class="number">30</span>, <span class="number">60</span>)(nn.JoinTable(<span class="number">1</span>)(&#123;input, L1&#125;)))</div><div class="line">L3 = nn.Tanh()(nn.Linear(<span class="number">80</span>, <span class="number">160</span>)(nn.JoinTable(<span class="number">1</span>)(&#123;L1, L2&#125;)))</div><div class="line"></div><div class="line">g = nn.gModule(&#123;input&#125;, &#123;L3&#125;)</div><div class="line"></div><div class="line">indata = torch.rand(<span class="number">10</span>)</div><div class="line">gdata = torch.rand(<span class="number">160</span>)</div><div class="line">g:forward(indata)</div><div class="line">g:backward(indata, gdata)</div><div class="line"></div><div class="line">graph.dot(g.fg, <span class="string">'Forward Graph'</span>)</div><div class="line">graph.dot(g.bg, <span class="string">'Backward Graph'</span>)</div></pre></td></tr></table></figure><p><a href="https://github.com/torch/nngraph" target="_blank" rel="external">More Info</a></p><h3 id="Pretrained-Models"><a href="#Pretrained-Models" class="headerlink" title="Pretrained Models"></a>Pretrained Models</h3><ul><li>loadcaffe: Load pretrained Caffe models: AlexNet, VGG, some others<ul><li><a href="https://github.com/szagoruyko/loadcaffe" target="_blank" rel="external">https://github.com/szagoruyko/loadcaffe</a></li></ul></li><li>GoogLeNet v1: <a href="https://github.com/soumith/inception.torch" target="_blank" rel="external">https://github.com/soumith/inception.torch</a></li><li>GoogLeNet v3: <a href="https://github.com/Moodstocks/inception-v3.torch" target="_blank" rel="external">https://github.com/Moodstocks/inception-v3.torch</a></li><li>ResNet: <a href="https://github.com/facebook/fb.resnet.torch" target="_blank" rel="external">https://github.com/facebook/fb.resnet.torch</a></li></ul><h3 id="Package-Management"><a href="#Package-Management" class="headerlink" title="Package Management"></a>Package Management</h3><p>After installing torch, use luarocks to install or update Lua packages</p><p>(Similar to pip install from Python)</p><h3 id="Other-useful-packages"><a href="#Other-useful-packages" class="headerlink" title="Other useful packages"></a>Other useful packages</h3><ul><li>torch.cudnn: Bindings for NVIDIA cuDNN kernels<ul><li><a href="https://github.com/soumith/cudnn.torch" target="_blank" rel="external">https://github.com/soumith/cudnn.torch</a></li></ul></li><li>torch-hdf5: Read and write HDF5 files from Torch<ul><li><a href="https://github.com/deepmind/torch-hdf5" target="_blank" rel="external">https://github.com/deepmind/torch-hdf5</a></li></ul></li><li>lua-cjson: Read and write JSON files from Lua<ul><li><a href="https://luarocks.org/modules/luarocks/lua-cjson" target="_blank" rel="external">https://luarocks.org/modules/luarocks/lua-cjson</a></li></ul></li><li>cltorch, clnn: OpenCL backend for Torch, and port of nn<ul><li><a href="https://github.com/hughperkins/cltorch" target="_blank" rel="external">https://github.com/hughperkins/cltorch</a>, <a href="https://github.com/hughperkins/clnn" target="_blank" rel="external">https://github.com/hughperkins/clnn</a></li></ul></li><li>torch-autograd: Automatic differentiation; sort of like more powerful nngraph, similar to Theano or TensorFlow<ul><li><a href="https://github.com/twitter/torch-autograd" target="_blank" rel="external">https://github.com/twitter/torch-autograd</a></li></ul></li><li>fbcunn: Facebook: FFT conv, multi-GPU (DataParallel, ModelParallel)<ul><li><a href="https://github.com/facebook/fbcunn" target="_blank" rel="external">https://github.com/facebook/fbcunn</a></li></ul></li></ul><h3 id="Typical-Workflow"><a href="#Typical-Workflow" class="headerlink" title="Typical Workflow"></a>Typical Workflow</h3><ol><li>Preprocess data; usually use a Python script to dump data to HDF5</li><li>Train a model in Lua / Torch; read from HDF5 datafile, save trained model to disk</li><li>Use trained model for something, often with an evaluation script</li></ol><p>Example: <a href="https://github.com/jcjohnson/torch-rnn" target="_blank" rel="external">https://github.com/jcjohnson/torch-rnn</a></p><p>Step 1: Preprocess data; usually use a Python script to dump data to HDF5 (<a href="https://github.com/jcjohnson/torch-rnn/blob/master/scripts/preprocess.py" target="_blank" rel="external">https://github.com/jcjohnson/torch-rnn/blob/master/scripts/preprocess.py</a>)<br>Step 2: Train a model in Lua / Torch; read from HDF5 datafile, save trained model to disk (<a href="https://github.com/jcjohnson/torch-rnn/blob/master/train.lua" target="_blank" rel="external">https://github.com/jcjohnson/torch-rnn/blob/master/train.lua</a> )<br>Step 3: Use trained model for something, often with an evaluation script (<a href="https://github.com/jcjohnson/torch-rnn/blob/master/sample.lua" target="_blank" rel="external">https://github.com/jcjohnson/torch-rnn/blob/master/sample.lua</a>)</p><h3 id="Pros-Cons-1"><a href="#Pros-Cons-1" class="headerlink" title="Pros / Cons"></a>Pros / Cons</h3><ul><li>(-) Lua</li><li>(-) Less plug-and-play than Caffe<ul><li>You usually write your own training code</li></ul></li><li>(+) Lots of modular pieces that are easy to combine</li><li>(+) Easy to write your own layer types and run on GPU</li><li>(+) Most of the library code is in Lua, easy to read</li><li>(+) Lots of pretrained models!</li><li>(-) Not great for RNNs</li></ul><h2 id="Theano"><a href="#Theano" class="headerlink" title="Theano"></a>Theano</h2><p><a href="http://deeplearning.net/software/theano/" target="_blank" rel="external">http://deeplearning.net/software/theano/</a></p><h3 id="Overview-2"><a href="#Overview-2" class="headerlink" title="Overview"></a>Overview</h3><ul><li>From Yoshua Bengio’s group at University of Montreal</li><li>Embracing computation graphs, symbolic computation</li><li>High-level wrappers: Keras, Lasagne</li></ul><h3 id="Other-Topics"><a href="#Other-Topics" class="headerlink" title="Other Topics"></a>Other Topics</h3><p><strong>Conditionals</strong>: The <strong>ifelse</strong> and <strong>switch</strong> functions allow conditional control flow in the graph</p><p><strong>Loops</strong>: The <strong>scan</strong> function allows for (some types) of loops in the computational graph; good for RNNs</p><p><strong>Derivatives</strong>: Efficient Jacobian / vector products with R and L operators, symbolic hessians (gradient of gradient)</p><p><strong>Sparse matrices, optimizations, etc</strong></p><h3 id="Multi-GPU"><a href="#Multi-GPU" class="headerlink" title="Multi-GPU"></a>Multi-GPU</h3><p>Experimental model parallelism:<br><a href="http://deeplearning.net/software/theano/tutorial/using_multi_gpu.html" target="_blank" rel="external">http://deeplearning.net/software/theano/tutorial/using_multi_gpu.html</a></p><p>Data parallelism using platoon:<br><a href="https://github.com/mila-udem/platoon" target="_blank" rel="external">https://github.com/mila-udem/platoon</a></p><h3 id="High-level-wrapper"><a href="#High-level-wrapper" class="headerlink" title="High level wrapper"></a>High level wrapper</h3><ul><li>Lasagne</li><li>Keras</li></ul><h3 id="Pretrained-Models-1"><a href="#Pretrained-Models-1" class="headerlink" title="Pretrained Models"></a>Pretrained Models</h3><p><strong>Lasagne Model Zoo</strong> has pretrained common architectures:<br><a href="https://github.com/Lasagne/Recipes/tree/master/modelzoo" target="_blank" rel="external">https://github.com/Lasagne/Recipes/tree/master/modelzoo</a><br><strong>AlexNet with weights</strong>: <a href="https://github.com/uoguelph-mlrg/theano_alexnet" target="_blank" rel="external">https://github.com/uoguelph-mlrg/theano_alexnet</a><br><strong>sklearn-theano</strong>: Run OverFeat and GoogLeNet forward, but no fine-tuning? <a href="http://sklearn-theano.github.io" target="_blank" rel="external">http://sklearn-theano.github.io</a><br><strong>caffe-theano-conversion</strong>: CS 231n project from last year: load models and weights from caffe! Not sure if full-featured <a href="https://github.com/kitofans/caffe-theano-conversion" target="_blank" rel="external">https://github.com/kitofans/caffe-theano-conversion</a></p><h3 id="Pros-Cons-2"><a href="#Pros-Cons-2" class="headerlink" title="Pros / Cons"></a>Pros / Cons</h3><ul><li>(+) Python + numpy</li><li>(+) Computational graph is nice abstraction</li><li>(+) RNNs fit nicely in computational graph</li><li>(-) Raw Theano is somewhat low-level</li><li>(+) High level wrappers (Keras, Lasagne) ease the pain</li><li>(-) Error messages can be unhelpful</li><li>(-) Large models can have long compile times</li><li>(-) Much “fatter” than Torch; more magic</li><li>(-) Patchy support for pretrained models</li></ul><h2 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h2><p><a href="https://www.tensorflow.org" target="_blank" rel="external">https://www.tensorflow.org</a></p><h3 id="Overview-3"><a href="#Overview-3" class="headerlink" title="Overview"></a>Overview</h3><ul><li>From Google</li><li>Very similar to Theano - all about computation graphs</li><li>Easy visualizations (TensorBoard)</li><li>Multi-GPU and multi-node training</li></ul><h3 id="Tensorboard"><a href="#Tensorboard" class="headerlink" title="Tensorboard"></a>Tensorboard</h3><p>Tensorboard makes it easy to visualize what’s happening inside your models</p><h3 id="Multi-GPU-1"><a href="#Multi-GPU-1" class="headerlink" title="Multi-GPU"></a>Multi-GPU</h3><h3 id="Distributed"><a href="#Distributed" class="headerlink" title="Distributed"></a>Distributed</h3><h3 id="Pretrained-Models-2"><a href="#Pretrained-Models-2" class="headerlink" title="Pretrained Models"></a>Pretrained Models</h3><p>You can get a pretrained version of Inception here:<br><a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/android/README.md" target="_blank" rel="external">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/android/README.md</a></p><p>(In an Android example?? Very well-hidden)</p><p>The only one I could find =(</p><h3 id="Pros-Cons-3"><a href="#Pros-Cons-3" class="headerlink" title="Pros / Cons"></a>Pros / Cons</h3><ul><li>(+) Python + numpy</li><li>(+) Computational graph abstraction, like Theano; great for RNNs</li><li>(+) Much faster compile times than Theano</li><li>(+) Slightly more convenient than raw Theano?</li><li>(+) TensorBoard for visualization</li><li>(+) Data AND model parallelism; best of all frameworks</li><li>(+/-) Distributed models, but not open-source yet</li><li>(-) Slower than other frameworks right now</li><li>(-) Much “fatter” than Torch; more magic</li><li>(-) Not many pretrained models</li></ul><h2 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h2><ul><li>Extract AlexNet or VGG features? <strong>Use Caffe</strong></li><li>Fine-tune AlexNet for new classes? <strong>Use Caffe</strong></li><li>Image Captioning with finetuning?<ul><li>-&gt; Need pretrained models (Caffe, Torch, Lasagne)</li><li>-&gt; Need RNNs (Torch or Lasagne)</li><li>-&gt; <strong>Use Torch or Lasagna</strong></li></ul></li><li>Segmentation? (Classify every pixel)<ul><li>-&gt; Need pretrained model (Caffe, Torch, Lasagna)</li><li>-&gt; Need funny loss function</li><li>-&gt; If loss function exists in Caffe: <strong>Use Caffe</strong></li><li>-&gt; If you want to write your own loss: <strong>Use Torch</strong></li></ul></li><li>Object Detection?<ul><li>-&gt; Need pretrained model (Torch, Caffe, Lasagne)</li><li>-&gt; Need lots of custom imperative code (NOT Lasagne)</li><li>-&gt; Use <strong>Caffe + Python</strong> or <strong>Torch</strong></li></ul></li><li>Language modeling with new <strong>RNN</strong> structure?<ul><li>-&gt; Need easy recurrent nets (NOT Caffe, Torch)</li><li>-&gt; No need for pretrained models</li><li>-&gt; <strong>Use Theano or TensorFlow</strong></li></ul></li><li>Implement BatchNorm?<ul><li>-&gt; Don’t want to derive gradient? <strong>Theano</strong> or <strong>TensorFlow</strong></li><li>-&gt; Implement efficient backward pass? <strong>Use Torch</strong></li></ul></li></ul><p><strong>Recommendation</strong>:</p><ul><li>Feature extraction / finetuning existing models: Use Caffe</li><li>Complex uses of pretrained models: Use Lasagne or Torch</li><li>Write your own layers: Use Torch</li><li>Crazy RNNs: Use Theano or Tensorflow</li><li>Huge model, need model parallelism: Use TensorFlow</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Software-Packages&quot;&gt;&lt;a href=&quot;#Software-Packages&quot; class=&quot;headerlink&quot; title=&quot;Software Packages&quot;&gt;&lt;/a&gt;Software Packages&lt;/h1&gt;&lt;h2 id=&quot;Caffe
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
      <category term="cs231n" scheme="http://yoursite.com/tags/cs231n/"/>
    
  </entry>
  
  <entry>
    <title>usr/bin/ld: cannot find -lxxx Solutions</title>
    <link href="http://yoursite.com/2017/04/11/usr-bin-ld-cannot-find-lxxx-Solutions/"/>
    <id>http://yoursite.com/2017/04/11/usr-bin-ld-cannot-find-lxxx-Solutions/</id>
    <published>2017-04-11T00:59:11.000Z</published>
    <updated>2017-04-11T01:04:39.843Z</updated>
    
    <content type="html"><![CDATA[<p>在Ubuntu上运行Qt5的过程中报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">usr/bin/ld: cannot find -lGL</div></pre></td></tr></table></figure><p>最后发现问题是系统中没有对应的库文件 <code>libgl.so</code></p><p>那么解决方式也很简单，安装即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libgl-dev</div></pre></td></tr></table></figure><p>Tada =)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Ubuntu上运行Qt5的过程中报错：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Reinforcement Learning (GT) Notes</title>
    <link href="http://yoursite.com/2017/04/10/Reinforcement-Learning-GT-Notes/"/>
    <id>http://yoursite.com/2017/04/10/Reinforcement-Learning-GT-Notes/</id>
    <published>2017-04-10T12:54:51.000Z</published>
    <updated>2017-04-10T12:55:44.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Decision-Making-amp-Reinforcement-Learning"><a href="#Decision-Making-amp-Reinforcement-Learning" class="headerlink" title="Decision Making &amp; Reinforcement Learning"></a>Decision Making &amp; Reinforcement Learning</h1><p>Supervised Learning: $y = f(x)$</p><p>Unsupervised Learning: $f(x)$</p><p>Reinforcement Learning: $y = f(x), z$</p><h2 id="Markov-Decision-Process"><a href="#Markov-Decision-Process" class="headerlink" title="Markov Decision Process"></a>Markov Decision Process</h2><p>States: $S$</p><p>Model: $T(s, a, s^{\prime}) \sim Pr(s^{\prime} | s, a)$</p><p>Actions: $A(s), A$</p><p>Reword: $R(s), R(s, a), R(s, a, s^{\prime})$</p><hr><p>Policy: $\pi(s) \rightarrow a$</p><p>​ $\pi^{*}$</p><h3 id="Sequences-of-Rewards-Assumption"><a href="#Sequences-of-Rewards-Assumption" class="headerlink" title="Sequences of Rewards: Assumption"></a>Sequences of Rewards: Assumption</h3><ul><li><p>Infinite Horizons</p></li><li><p>Utility of sequences</p><p>if $U(s_0, s_1, s_2, \cdots) &gt; U(s_0, s^{\prime}_1, s^{\prime}_2, \cdots)$</p><p>then $U(s_1, s_2, \cdots) &gt; U(s^{\prime}_1, s^{\prime}_2, \cdots)$</p></li></ul><script type="math/tex;mode=display">U(s_0, s_1, s_2, \cdots)=\sum_{t=0}^{\infty}\gamma^{t}R(s_t), 0 \leq \gamma \leq 1</script><script type="math/tex;mode=display">U\leq\frac{R_{max}}{1 - \gamma}</script><ul><li><p>Policies</p><script type="math/tex;mode=display">\pi^{\star}=argmax_{\pi} E[\sum_{t=0}^{\infty}\gamma^{t}R(S_t)|\pi]</script><script type="math/tex;mode=display">U^{\pi}(s)=E[\sum_{t=0}^{\infty}\gamma^{t}R(s_t)|\pi,s_0=s]</script><script type="math/tex;mode=display">\pi^{\star}(s)=argmax_{a}\sum_{s^{\prime}}T(s, a, s^{\prime})U(s^{\prime})</script><script type="math/tex;mode=display">U(s)=R(s)+\gamma \max_{a}\sum_{s^{\prime}}T(s, a, s^{\prime})U(s^{\prime})</script><p>Above is the <strong>Bellman Equation</strong>.</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Decision-Making-amp-Reinforcement-Learning&quot;&gt;&lt;a href=&quot;#Decision-Making-amp-Reinforcement-Learning&quot; class=&quot;headerlink&quot; title=&quot;Decision
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="reinforcement learning" scheme="http://yoursite.com/tags/reinforcement-learning/"/>
    
  </entry>
  
  <entry>
    <title>cs231n Lecture 11 Recap</title>
    <link href="http://yoursite.com/2017/04/10/cs231n-Lecture-11-Recap/"/>
    <id>http://yoursite.com/2017/04/10/cs231n-Lecture-11-Recap/</id>
    <published>2017-04-10T02:30:44.000Z</published>
    <updated>2017-04-10T03:00:37.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Working-with-CNNs-in-practice"><a href="#Working-with-CNNs-in-practice" class="headerlink" title="Working with CNNs in practice"></a>Working with CNNs in practice</h1><ul><li>Making the most of your data<ul><li>Data augmentation</li><li>Transfer learning</li></ul></li><li>All about convolutions<ul><li>How to arrange them</li><li>How to compute them fast</li></ul></li><li>Implementation details<ul><li>GPU / CPU, bottlenecks, ditributed training</li></ul></li></ul><h2 id="Data-Augmentation"><a href="#Data-Augmentation" class="headerlink" title="Data Augmentation"></a>Data Augmentation</h2><h3 id="Horizontal-flips"><a href="#Horizontal-flips" class="headerlink" title="Horizontal flips"></a>Horizontal flips</h3><h3 id="Random-crops-scales"><a href="#Random-crops-scales" class="headerlink" title="Random crops/scales"></a>Random crops/scales</h3><p><strong>Training:</strong> sample random crops /scales</p><p>ResNet:</p><ol><li>Pick random L in range [256, 480]</li><li>Resize training image, short side = L</li><li>Sample random 224 x 224 patch</li></ol><p><strong>Testing:</strong> average a fixed set of crops</p><p>ResNet:</p><ol><li>Resize image at 5 scales: {224, 256, 384, 480, 640}</li><li>For each size, use 10 224 x 224 crops: 4 corners + center, + flips</li></ol><h3 id="Color-jitter"><a href="#Color-jitter" class="headerlink" title="Color jitter"></a>Color jitter</h3><p><strong>Simple:</strong><br>Randomly jitter contrast</p><p><strong>Complex:</strong></p><ol><li>Apply PCA to all [R, G, B] pixels in training set</li><li>Sample a “color offset” along principal component directions</li><li>Add offset to all pixels of a training image</li></ol><p>(As seen in [Krizhevsky et al. 2012], ResNet, etc)</p><h2 id="Transfer-Learning"><a href="#Transfer-Learning" class="headerlink" title="Transfer Learning"></a>Transfer Learning</h2><p>“You need a lot of a data if you want to train/use CNNs”</p><p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n/lec11/tl.png" alt="tl"></p><p>some tricks:</p><div class="table-container"><table><thead><tr><th></th><th>very similar dataset</th><th>very different dataset</th></tr></thead><tbody><tr><td>very little data</td><td>Use Linear Classifer on top layer</td><td>Try linear classifer from different stages</td></tr><tr><td>quite a lot of data</td><td>Finetune a few layers</td><td>Finetune a larger number of layers</td></tr></tbody></table></div><h2 id="All-about-Convolutions"><a href="#All-about-Convolutions" class="headerlink" title="All about Convolutions"></a>All about Convolutions</h2><h3 id="How-to-stack-them"><a href="#How-to-stack-them" class="headerlink" title="How to stack them"></a>How to stack them</h3><ul><li>Replace large convolutions (5 x 5, 7 x 7) with stacks of 3 x 3 convolutions</li><li>1 x 1 “bottleneck” convolutions are very efficient</li><li>Can factor N x N convolutions into 1 x N and N x 1</li><li>All of the above give fewer parameters, less compute, more nonlinearity</li></ul><h3 id="How-to-compute-them"><a href="#How-to-compute-them" class="headerlink" title="How to compute them"></a>How to compute them</h3><h4 id="im2col"><a href="#im2col" class="headerlink" title="im2col"></a>im2col</h4><p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n/lec11/cs231n11_im2col.png" alt="im2col"></p><h4 id="BLAS"><a href="#BLAS" class="headerlink" title="BLAS"></a>BLAS</h4><h4 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a>FFT</h4><ol><li>Compute FFT of weights: F(W)</li><li>Compute FFT of image: F(X)</li><li>Compute elementwise product: F(W) ○ F(X)</li><li>Compute inverse FFT: Y = F-1(F(W) ○ F(X))</li></ol><p>FFT convolutions get a big speedup for larger filters</p><p>Not much speedup for 3x3 filters =(</p><h4 id="Fast-algorithms"><a href="#Fast-algorithms" class="headerlink" title="Fast algorithms"></a>Fast algorithms</h4><ul><li>Strassen’s Algorithm</li><li>And so on…</li></ul><h2 id="Implementation-Details"><a href="#Implementation-Details" class="headerlink" title="Implementation Details"></a>Implementation Details</h2><ul><li>GPUs much faster than CPUs</li><li>Distributed training is sometimes used<ul><li>Not needed for small problems</li></ul></li><li>Be aware of bottlenecks: CPU / GPU, CPU / disk</li><li>Low precison makes things faster and still works<ul><li>32 bit is standard now, 16 bit soon</li><li>In the future: binary nets?</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Working-with-CNNs-in-practice&quot;&gt;&lt;a href=&quot;#Working-with-CNNs-in-practice&quot; class=&quot;headerlink&quot; title=&quot;Working with CNNs in practice&quot;&gt;&lt;/a
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
      <category term="cs231n" scheme="http://yoursite.com/tags/cs231n/"/>
    
  </entry>
  
  <entry>
    <title>Dynet xor demo [python version]</title>
    <link href="http://yoursite.com/2017/04/09/Dynet-xor-demo-python-version/"/>
    <id>http://yoursite.com/2017/04/09/Dynet-xor-demo-python-version/</id>
    <published>2017-04-09T06:15:18.000Z</published>
    <updated>2017-04-09T06:17:35.115Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> dynet <span class="keyword">as</span> dy</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="comment"># Parameters of the model and training</span></div><div class="line">HIDDEN_SIZE = <span class="number">20</span></div><div class="line">NUM_EPOCHS = <span class="number">20</span></div><div class="line"></div><div class="line"><span class="comment"># Define the model and SGD optimizer</span></div><div class="line">model = dy.Model()</div><div class="line">W_xh_p = model.add_parameters((HIDDEN_SIZE, <span class="number">2</span>))</div><div class="line">b_h_p = model.add_parameters(HIDDEN_SIZE)</div><div class="line">W_hy_p = model.add_parameters((<span class="number">1</span>, HIDDEN_SIZE))</div><div class="line">b_y_p = model.add_parameters(<span class="number">1</span>)</div><div class="line">trainer = dy.SimpleSGDTrainer(model)</div><div class="line"></div><div class="line"><span class="comment"># Define the training data, consisting of (x,y) tuples</span></div><div class="line">data = [([<span class="number">1</span>,<span class="number">1</span>],<span class="number">1</span>), ([<span class="number">-1</span>,<span class="number">1</span>],<span class="number">-1</span>), ([<span class="number">1</span>,<span class="number">-1</span>],<span class="number">-1</span>), ([<span class="number">-1</span>,<span class="number">-1</span>],<span class="number">1</span>)]</div><div class="line"></div><div class="line"><span class="comment"># Define the function we would like to calculate</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_function</span><span class="params">(x)</span>:</span></div><div class="line">	dy.renew_cg()</div><div class="line">	w_xh = dy.parameter(W_xh_p)</div><div class="line">	b_h = dy.parameter(b_h_p)</div><div class="line">	W_hy = dy.parameter(W_hy_p)</div><div class="line">	b_y = dy.parameter(b_y_p)</div><div class="line">	x_val = dy.inputVector(x)</div><div class="line">	h_val = dy.tanh(w_xh * x_val + b_h)</div><div class="line">	y_val = W_hy * h_val + b_y</div><div class="line">	<span class="keyword">return</span> y_val</div><div class="line"></div><div class="line"><span class="comment"># Perform training</span></div><div class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(NUM_EPOCHS):</div><div class="line">	epoch_loss = <span class="number">0</span></div><div class="line">	random.shuffle(data)</div><div class="line">	<span class="keyword">for</span> x, ystar <span class="keyword">in</span> data:</div><div class="line">		y = calc_function(x)</div><div class="line">		loss = dy.squared_distance(y, dy.scalarInput(ystar))</div><div class="line">		epoch_loss += loss.value()</div><div class="line">		loss.backward()</div><div class="line">		trainer.update()</div><div class="line">	print(<span class="string">"Epoch %d: loss=%f"</span> % (epoch, epoch_loss))</div><div class="line"></div><div class="line"><span class="comment"># Print results of prediction</span></div><div class="line"><span class="keyword">for</span> x, ystar <span class="keyword">in</span> data:</div><div class="line">	y = calc_function(x)</div><div class="line">	print(<span class="string">"%r -&gt; %f"</span> % (x, y.value()))</div></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[dynet] random seed: 1174664263</div><div class="line">[dynet] allocating memory: 512MB</div><div class="line">[dynet] memory allocation done.</div><div class="line">Epoch 0: loss=12.391680</div><div class="line">Epoch 1: loss=8.196088</div><div class="line">Epoch 2: loss=8.103037</div><div class="line">Epoch 3: loss=8.636450</div><div class="line">Epoch 4: loss=7.573008</div><div class="line">Epoch 5: loss=4.910318</div><div class="line">Epoch 6: loss=3.079966</div><div class="line">Epoch 7: loss=1.328273</div><div class="line">Epoch 8: loss=1.171368</div><div class="line">Epoch 9: loss=0.515850</div><div class="line">Epoch 10: loss=1.885216</div><div class="line">Epoch 11: loss=0.568994</div><div class="line">Epoch 12: loss=0.278629</div><div class="line">Epoch 13: loss=0.025215</div><div class="line">Epoch 14: loss=0.018466</div><div class="line">Epoch 15: loss=0.055305</div><div class="line">Epoch 16: loss=0.014131</div><div class="line">Epoch 17: loss=0.010476</div><div class="line">Epoch 18: loss=0.003893</div><div class="line">Epoch 19: loss=0.003332</div><div class="line">[1, 1] -&gt; 1.049703</div><div class="line">[-1, 1] -&gt; -0.996379</div><div class="line">[1, -1] -&gt; -0.974599</div><div class="line">[-1, -1] -&gt; 0.995763</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/d
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
      <category term="dynet" scheme="http://yoursite.com/tags/dynet/"/>
    
  </entry>
  
  <entry>
    <title>Installing the Python Dynet module</title>
    <link href="http://yoursite.com/2017/04/09/Installing-the-Python-Dynet-module/"/>
    <id>http://yoursite.com/2017/04/09/Installing-the-Python-Dynet-module/</id>
    <published>2017-04-09T05:57:09.000Z</published>
    <updated>2017-04-09T06:05:58.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Installing-the-Python-Dynet-module"><a href="#Installing-the-Python-Dynet-module" class="headerlink" title="Installing the Python Dynet module"></a>Installing the Python Dynet module</h1><p>(for instructions on installing on a computer with GPU, see below)</p><p>Python bindings to DyNet are supported for both Python 2.x and 3.x.</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>(see below for the details)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># Installing Python DyNet:</div><div class="line"></div><div class="line">pip install cython  # if you don&apos;t have it already.</div><div class="line">mkdir dynet-base</div><div class="line">cd dynet-base</div><div class="line"># getting dynet and eigen</div><div class="line">git clone https://github.com/clab/dynet.git</div><div class="line">hg clone https://bitbucket.org/eigen/eigen -r 346ecdb  # -r NUM specified a known working revision</div><div class="line">cd dynet</div><div class="line">mkdir build</div><div class="line">cd build</div><div class="line"># without GPU support:</div><div class="line">cmake .. -DEIGEN3_INCLUDE_DIR=../../eigen -DPYTHON=`which python`</div><div class="line"># or with GPU support:</div><div class="line">cmake .. -DEIGEN3_INCLUDE_DIR=../../eigen -DPYTHON=`which python` -DBACKEND=cuda</div><div class="line"></div><div class="line">make -j 2 # replace 2 with the number of available cores</div><div class="line">cd python</div><div class="line">python setup.py install  # or `python setup.py install --user` for a user-local install.</div><div class="line"></div><div class="line"># this should suffice, but on some systems you may need to add the following line to your</div><div class="line"># init files in order for the compiled .so files be accessible to Python.</div><div class="line"># /path/to/dynet/build/dynet is the location in which libdynet.dylib resides.</div><div class="line">export DYLD_LIBRARY_PATH=/path/to/dynet/build/dynet/:$DYLD_LIBRARY_PATH</div></pre></td></tr></table></figure><h2 id="Detailed-Instructions"><a href="#Detailed-Instructions" class="headerlink" title="Detailed Instructions"></a>Detailed Instructions</h2><p>First, get DyNet:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd $HOME</div><div class="line">mkdir dynet-base</div><div class="line">cd dynet-base</div><div class="line">git clone https://github.com/clab/dynet.git</div><div class="line">cd dynet</div><div class="line">git submodule init # To be consistent with DyNet&apos;s installation instructions.</div><div class="line">git submodule update # To be consistent with DyNet&apos;s installation instructions.</div></pre></td></tr></table></figure><p>Then get Eigen:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd $HOME</div><div class="line">cd dynet-base</div><div class="line">hg clone https://bitbucket.org/eigen/eigen/ -r 346ecdb</div></pre></td></tr></table></figure><p>(-r NUM specifies a known working revision of Eigen. You can remove this in order to get the bleeding edge Eigen, with the risk of some compile breaks, and the possible benefit of added optimizations.)</p><p>We also need to make sure the <code>cython</code> module is installed. (you can replace <code>pip</code> with your favorite package manager, such as <code>conda</code>, or install within a virtual environment)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install cython</div></pre></td></tr></table></figure><p>To simplify the following steps, we can set a bash variable to hold where we have saved the main directories of DyNet and Eigen. In case you have gotten DyNet and Eigen differently from the instructions above and saved them in different location(s), these variables will be helpful:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PATH_TO_DYNET=$HOME/dynet-base/dynet/</div><div class="line">PATH_TO_EIGEN=$HOME/dynet-base/eigen/</div></pre></td></tr></table></figure><p>Compile DyNet.</p><p>This is pretty much the same process as compiling DyNet, with the addition of the <code>-DPYTHON=</code> flag, pointing to the location of your Python interpreter.</p><p>If Boost is installed in a non-standard location, you should add the corresponding flags to the <code>cmake</code> commandline, see the <a href="https://github.com/clab/dynet/blob/master/doc/source/install.rst" target="_blank" rel="external">DyNet installation instructions page</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cd $PATH_TO_DYNET</div><div class="line">PATH_TO_PYTHON=`which python`</div><div class="line">mkdir build</div><div class="line">cd build</div><div class="line">cmake .. -DEIGEN3_INCLUDE_DIR=$PATH_TO_EIGEN -DPYTHON=$PATH_TO_PYTHON</div><div class="line">make -j 2</div></pre></td></tr></table></figure><p>Assuming that the <code>cmake</code> command found all the needed libraries and didn’t fail, the <code>make</code> command will take a while, and compile DyNet as well as the Python bindings. You can change <code>make -j 2</code> to a higher number, depending on the available cores you want to use while compiling.</p><p>You now have a working Python binding inside of <code>build/dynet</code>. To verify this is working:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd $PATH_TO_DYNET/build/python</div><div class="line">python</div></pre></td></tr></table></figure><p>then, within Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> dynet <span class="keyword">as</span> dy</div><div class="line"><span class="keyword">print</span> dy.__version__</div><div class="line">model = dy.Model()</div></pre></td></tr></table></figure><p>In order to install the module so that it is accessible from everywhere in the system, run the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd $PATH_TO_DYNET/build/python</div><div class="line">python setup.py install --user</div></pre></td></tr></table></figure><p>The <code>--user</code> switch will install the module in your local site-packages, and works without root privileges. To install the module to the system site-packages (for all users), or to the current virtualenv (if you are on one), run <code>python setup.py install</code>without this switch.</p><p>You should now have a working python binding (the <code>dynet</code> module).</p><p>Note however that the installation relies on the compiled DyNet library being in <code>$PATH_TO_DYNET/build/dynet</code>, so make sure not to move it from there.</p><p>Now, check that everything works:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd $PATH_TO_DYNET</div><div class="line">cd examples/python</div><div class="line">python xor.py</div><div class="line">python rnnlm.py rnnlm.py</div></pre></td></tr></table></figure><p>Alternatively, if the following script works for you, then your installation is likely to be working:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> dynet <span class="keyword">import</span> *</div><div class="line">model = Model()</div></pre></td></tr></table></figure><p>If it doesn’t work and you get an error similar to the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ImportError: dlopen(/Users/sneharajana/.python-eggs/dyNET-0.0.0-py2.7-macosx-10.11-intel.egg-tmp/_dynet.so, 2): Library not loaded: @rpath/libdynet.dylib</div><div class="line">Referenced from: /Users/sneharajana/.python-eggs/dyNET-0.0.0-py2.7-macosx-10.11-intel.egg-tmp/_dynet.so</div><div class="line">Reason: image not found``</div></pre></td></tr></table></figure><p>then you may need to run the following (and add it to your shell init files):</p><blockquote><p>export DYLD_LIBRARY_PATH=/path/to/dynet/build/dynet/:$DYLD_LIBRARY_PATH</p></blockquote><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>There are two ways to import the dynet module :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> dynet</div></pre></td></tr></table></figure><p>imports dynet and automatically initializes the global dynet parameters with the command line arguments (see the <a href="https://github.com/clab/dynet/blob/master/doc/source/commandline" target="_blank" rel="external">documentation</a>). The amount of memory allocated, GPU/CPU usage is fixed from there on.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> _dynet</div><div class="line"><span class="comment"># or</span></div><div class="line"><span class="keyword">import</span> _gdynet <span class="comment"># For GPU</span></div></pre></td></tr></table></figure><p>Imports dynet for CPU (resp. GPU) and doesn’t initialize the global parameters. These must be initialized manually before using dynet, using one of the following :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Same as import dynet as dy</span></div><div class="line"><span class="keyword">import</span> _dynet <span class="keyword">as</span> dy</div><div class="line">dy.init()</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Same as import dynet as dy</span></div><div class="line"><span class="keyword">import</span> _dynet <span class="keyword">as</span> dy</div><div class="line"><span class="comment"># Declare a DynetParams object</span></div><div class="line">dyparams = dy.DynetParams()</div><div class="line"><span class="comment"># Fetch the command line arguments (optional)</span></div><div class="line">dyparams.from_args()</div><div class="line"><span class="comment"># Set some parameters manualy (see the command line arguments documentation)</span></div><div class="line">dyparams.set_mem(<span class="number">2048</span>)</div><div class="line">dyparams.set_random_seed(<span class="number">666</span>)</div><div class="line">dyparams.set_weight_decay(<span class="number">1e-7</span>)</div><div class="line">dyparams.set_shared_parameters(<span class="keyword">False</span>)</div><div class="line">dyparams.set_requested_gpus(<span class="number">1</span>)</div><div class="line">dyparams.set_gpu_mask([<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>])</div><div class="line"><span class="comment"># Initialize with the given parameters</span></div><div class="line">dyparams.init() <span class="comment"># or init_from_params(dyparams)</span></div></pre></td></tr></table></figure><h2 id="Anaconda-Support"><a href="#Anaconda-Support" class="headerlink" title="Anaconda Support"></a>Anaconda Support</h2><p><a href="https://www.continuum.io/downloads" target="_blank" rel="external">Anaconda</a> is a popular package management system for Python. DyNet can be used from within an Anaconda environment, but be sure to activate the environment</p><blockquote><p>source activate my_environment_name</p></blockquote><p>then install some necessary packages as follows:</p><blockquote><p>conda install gcc cmake boost cython</p></blockquote><p>After this, the build process should be the same as normal.</p><p>Note that on some conda environments, people have reported build errors related to the interaction between the <code>icu</code> and <code>boost</code> packages. If you encounter this, try the solution in <a href="https://github.com/clab/dynet/issues/268#issuecomment-278806398" target="_blank" rel="external">this comment</a>.</p><h2 id="Windows-Support"><a href="#Windows-Support" class="headerlink" title="Windows Support"></a>Windows Support</h2><p>You can also use Python on Windows by following similar steps to the above. For simplicity, we recommend using a Python distribution that already has Cython installed. The following has been tested to work:</p><ol><li>Install WinPython 2.7.10 (comes with Cython already installed).</li><li>Run CMake as above with <code>-DPYTHON=/path/to/your/python.exe</code>.</li><li>Open a command prompt and set <code>VS90COMNTOOLS</code> to the path to your Visual Studio “Common7/Tools” directory. One easy way to do this is a command such as:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set VS90COMNTOOLS=%VS140COMNTOOLS%</div></pre></td></tr></table></figure><ol><li>Open dynet.sln from this command prompt and build the “Release” version of the solution.</li><li>Follow the rest of the instructions above for testing the build and installing it for other users</li></ol><p>Note, currently only the Release version works.</p><h2 id="GPU-MKL-Support"><a href="#GPU-MKL-Support" class="headerlink" title="GPU/MKL Support"></a>GPU/MKL Support</h2><h3 id="Installing-running-on-GPU"><a href="#Installing-running-on-GPU" class="headerlink" title="Installing/running on GPU"></a>Installing/running on GPU</h3><p>For installing on a computer with GPU, first install CUDA. The following instructions assume CUDA is installed.</p><p>The installation process is pretty much the same, while adding the <code>-DBACKEND=cuda</code> flag to the <code>cmake</code> stage:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cmake .. -DEIGEN3_INCLUDE_DIR=$PATH_TO_EIGEN -DPYTHON=$PATH_TO_PYTHON -DBACKEND=cuda</div></pre></td></tr></table></figure><p>(if CUDA is installed in a non-standard location and <code>cmake</code> cannot find it, you can specify also <code>-DCUDA_TOOLKIT_ROOT_DIR=/path/to/cuda</code>.)</p><p>Now, build the Python modules (as above, we assume Cython is installed):</p><p>After running <code>make -j 2</code>, you should have the files <code>_dynet.so</code> and <code>_gdynet.so</code> in the <code>build/python</code> folder.</p><p>As before, <code>cd build/python</code> followed by <code>python setup.py install --user</code> will install the module.</p><p>In order to use the GPU support, you can either:</p><ul><li>Use <code>import _gdynet as dy</code> instead of <code>import dynet as dy</code></li><li>Or, (preferred), <code>import dynet</code> as usual, but use the commandline switch <code>--dynet-gpu</code> or the GPU switches detailed <a href="https://github.com/clab/dynet/blob/master/doc/source/commandline.rst" target="_blank" rel="external">here</a>when invoking the program. This option lets the same code work with either the GPU or the CPU version depending on how it is invoked.</li></ul><h3 id="Running-with-MKL"><a href="#Running-with-MKL" class="headerlink" title="Running with MKL"></a>Running with MKL</h3><p>If you’ve built DyNet to use MKL (using <code>-DMKL</code> or <code>-DMKL_ROOT</code>), Python sometimes has difficulty finding the MKL shared libraries. You can try setting <code>LD_LIBRARY_PATH</code> to point to your MKL library directory. If that doesn’t work, try setting the following environment variable (supposing, for example, your MKL libraries are located at <code>/opt/intel/mkl/lib/intel64</code>):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export LD_PRELOAD=/opt/intel/mkl/lib/intel64/libmkl_def.so:/opt/intel/mkl/lib/intel64/libmkl_avx2.so:/opt/intel/mkl/lib</div></pre></td></tr></table></figure><h2 id="Some-Errors-and-correspond-Solutions"><a href="#Some-Errors-and-correspond-Solutions" class="headerlink" title="Some Errors and correspond Solutions"></a>Some Errors and correspond Solutions</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import dynet as dy</div><div class="line">-------------------------------------------</div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">  File &quot;dynet.py&quot;, line 17, in &lt;module&gt;</div><div class="line">    from _dynet import *</div><div class="line">ImportError: /home/ewan/anaconda2/lib/libstdc++.so.6: version `GLIBCXX_3.4.20&apos; not found (required by /home/ewan/dynet-base/dynet/build/dynet/libdynet.so)</div><div class="line"></div><div class="line">-------------------------------------------</div><div class="line">Solution:</div><div class="line"></div><div class="line">conda install libgcc</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Installing-the-Python-Dynet-module&quot;&gt;&lt;a href=&quot;#Installing-the-Python-Dynet-module&quot; class=&quot;headerlink&quot; title=&quot;Installing the Python Dy
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
      <category term="dynet" scheme="http://yoursite.com/tags/dynet/"/>
    
  </entry>
  
  <entry>
    <title>lda for news classification</title>
    <link href="http://yoursite.com/2017/03/26/lda-for-news-classification/"/>
    <id>http://yoursite.com/2017/03/26/lda-for-news-classification/</id>
    <published>2017-03-26T08:54:12.000Z</published>
    <updated>2017-03-26T08:54:12.906Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>netease news spider</title>
    <link href="http://yoursite.com/2017/03/26/netease-news-spider/"/>
    <id>http://yoursite.com/2017/03/26/netease-news-spider/</id>
    <published>2017-03-26T08:53:50.000Z</published>
    <updated>2017-03-26T08:53:50.064Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LDA</title>
    <link href="http://yoursite.com/2017/03/24/LDA/"/>
    <id>http://yoursite.com/2017/03/24/LDA/</id>
    <published>2017-03-24T07:11:52.000Z</published>
    <updated>2017-03-24T07:29:41.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scikit-learn-example"><a href="#Scikit-learn-example" class="headerlink" title="Scikit-learn example"></a>Scikit-learn example</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%matplotlib inline</div></pre></td></tr></table></figure><h2 id="Topic-extraction-with-Non-negative-Matrix-Factorization-and-Latent-Dirichlet-Allocation"><a href="#Topic-extraction-with-Non-negative-Matrix-Factorization-and-Latent-Dirichlet-Allocation" class="headerlink" title="Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation"></a>Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation</h2><p>This is an example of applying Non-negative Matrix Factorization and Latent Dirichlet Allocation on a corpus of documents and extract additive models of the topic structure of the corpus. The output is a list of topics, each represented as a list of terms (weights are not shown).</p><p>The default parameters (n_samples / n_features / n_topics) should make the example runnable in a couple of tens of seconds. You can try to increase the dimensions of the problem, but be aware that the time complexity is polynomial in NMF. In LDA, the time complexity is proportional to (n_samples * iterations).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Author: Olivier Grisel &lt;olivier.grisel@ensta.org&gt;</span></div><div class="line"><span class="comment">#         Lars Buitinck</span></div><div class="line"><span class="comment">#         Chyi-Kwei Yau &lt;chyikwei.yau@gmail.com&gt;</span></div><div class="line"><span class="comment"># License: BSD 3 clause</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer, CountVectorizer</div><div class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> NMF, LatentDirichletAllocation</div><div class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_20newsgroups</div><div class="line"></div><div class="line">n_samples = <span class="number">2000</span></div><div class="line">n_features = <span class="number">1000</span></div><div class="line">n_topics = <span class="number">10</span></div><div class="line">n_top_words = <span class="number">20</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_top_words</span><span class="params">(model, feature_names, n_top_words)</span>:</span></div><div class="line">    <span class="keyword">for</span> topic_idx, topic <span class="keyword">in</span> enumerate(model.components_):</div><div class="line">        print(<span class="string">"Topic #%d:"</span> % topic_idx)</div><div class="line">        print(<span class="string">" "</span>.join([feature_names[i]</div><div class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> topic.argsort()[:-n_top_words - <span class="number">1</span>:<span class="number">-1</span>]]))</div><div class="line">    print()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Load the 20 newsgroups dataset and vectorize it. We use a few heuristics</span></div><div class="line"><span class="comment"># to filter out useless terms early on: the posts are stripped of headers,</span></div><div class="line"><span class="comment"># footers and quoted replies, and common English words, words occurring in</span></div><div class="line"><span class="comment"># only one document or in at least 95% of the documents are removed.</span></div><div class="line"></div><div class="line">print(<span class="string">"Loading dataset..."</span>)</div><div class="line">t0 = time()</div><div class="line">dataset = fetch_20newsgroups(shuffle=<span class="keyword">True</span>, random_state=<span class="number">1</span>,</div><div class="line">                             remove=(<span class="string">'headers'</span>, <span class="string">'footers'</span>, <span class="string">'quotes'</span>))</div><div class="line">data_samples = dataset.data[:n_samples]</div><div class="line">print(<span class="string">"done in %0.3fs."</span> % (time() - t0))</div><div class="line"></div><div class="line"><span class="comment"># Use tf-idf features for NMF.</span></div><div class="line">print(<span class="string">"Extracting tf-idf features for NMF..."</span>)</div><div class="line">tfidf_vectorizer = TfidfVectorizer(max_df=<span class="number">0.95</span>, min_df=<span class="number">2</span>,</div><div class="line">                                   max_features=n_features,</div><div class="line">                                   stop_words=<span class="string">'english'</span>)</div><div class="line">t0 = time()</div><div class="line">tfidf = tfidf_vectorizer.fit_transform(data_samples)</div><div class="line">print(<span class="string">"done in %0.3fs."</span> % (time() - t0))</div><div class="line"></div><div class="line"><span class="comment"># Use tf (raw term count) features for LDA.</span></div><div class="line">print(<span class="string">"Extracting tf features for LDA..."</span>)</div><div class="line">tf_vectorizer = CountVectorizer(max_df=<span class="number">0.95</span>, min_df=<span class="number">2</span>,</div><div class="line">                                max_features=n_features,</div><div class="line">                                stop_words=<span class="string">'english'</span>)</div><div class="line">t0 = time()</div><div class="line">tf = tf_vectorizer.fit_transform(data_samples)</div><div class="line">print(<span class="string">"done in %0.3fs."</span> % (time() - t0))</div><div class="line"></div><div class="line"><span class="comment"># Fit the NMF model</span></div><div class="line">print(<span class="string">"Fitting the NMF model with tf-idf features, "</span></div><div class="line">      <span class="string">"n_samples=%d and n_features=%d..."</span></div><div class="line">      % (n_samples, n_features))</div><div class="line">t0 = time()</div><div class="line">nmf = NMF(n_components=n_topics, random_state=<span class="number">1</span>,</div><div class="line">          alpha=<span class="number">.1</span>, l1_ratio=<span class="number">.5</span>).fit(tfidf)</div><div class="line">print(<span class="string">"done in %0.3fs."</span> % (time() - t0))</div><div class="line"></div><div class="line">print(<span class="string">"\nTopics in NMF model:"</span>)</div><div class="line">tfidf_feature_names = tfidf_vectorizer.get_feature_names()</div><div class="line">print_top_words(nmf, tfidf_feature_names, n_top_words)</div><div class="line"></div><div class="line">print(<span class="string">"Fitting LDA models with tf features, "</span></div><div class="line">      <span class="string">"n_samples=%d and n_features=%d..."</span></div><div class="line">      % (n_samples, n_features))</div><div class="line">lda = LatentDirichletAllocation(n_topics=n_topics, max_iter=<span class="number">5</span>,</div><div class="line">                                learning_method=<span class="string">'online'</span>,</div><div class="line">                                learning_offset=<span class="number">50.</span>,</div><div class="line">                                random_state=<span class="number">0</span>)</div><div class="line">t0 = time()</div><div class="line">lda.fit(tf)</div><div class="line">print(<span class="string">"done in %0.3fs."</span> % (time() - t0))</div><div class="line"></div><div class="line">print(<span class="string">"\nTopics in LDA model:"</span>)</div><div class="line">tf_feature_names = tf_vectorizer.get_feature_names()</div><div class="line">print_top_words(lda, tf_feature_names, n_top_words)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Loading dataset...</div></pre></td></tr></table></figure><p>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">No handlers could be found <span class="keyword">for</span> logger <span class="string">"sklearn.datasets.twenty_newsgroups"</span></div></pre></td></tr></table></figure><p>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">done <span class="keyword">in</span> <span class="number">691.647</span>s.</div><div class="line">Extracting tf-idf features <span class="keyword">for</span> NMF...</div><div class="line">done <span class="keyword">in</span> <span class="number">0.454</span>s.</div><div class="line">Extracting tf features <span class="keyword">for</span> LDA...</div><div class="line">done <span class="keyword">in</span> <span class="number">0.416</span>s.</div><div class="line">Fitting the NMF model <span class="keyword">with</span> tf-idf features, n_samples=<span class="number">2000</span> <span class="keyword">and</span> n_features=<span class="number">1000.</span>..</div><div class="line">done <span class="keyword">in</span> <span class="number">0.367</span>s.</div><div class="line"></div><div class="line">Topics <span class="keyword">in</span> NMF model:</div><div class="line">Topic <span class="comment">#0:</span></div><div class="line">just people don think like know time good make way really say right ve want did ll new use years</div><div class="line">Topic <span class="comment">#1:</span></div><div class="line">windows use dos using window program os drivers application help software pc running ms screen files version card code work</div><div class="line">Topic <span class="comment">#2:</span></div><div class="line">god jesus bible faith christian christ christians does heaven sin believe lord life church mary atheism belief human love religion</div><div class="line">Topic <span class="comment">#3:</span></div><div class="line">thanks know does mail advance hi info interested email anybody looking card help like appreciated information send list video need</div><div class="line">Topic <span class="comment">#4:</span></div><div class="line">car cars tires miles <span class="number">00</span> new engine insurance price condition oil power speed good <span class="number">000</span> brake year models used bought</div><div class="line">Topic <span class="comment">#5:</span></div><div class="line">edu soon com send university internet mit ftp mail cc pub article information hope program mac email home contact blood</div><div class="line">Topic <span class="comment">#6:</span></div><div class="line">file problem files format win sound ftp pub read save site help image available create copy running memory self version</div><div class="line">Topic <span class="comment">#7:</span></div><div class="line">game team games year win play season players nhl runs goal hockey toronto division flyers player defense leafs bad teams</div><div class="line">Topic <span class="comment">#8:</span></div><div class="line">drive drives hard disk floppy software card mac computer power scsi controller apple mb <span class="number">00</span> pc rom sale problem internal</div><div class="line">Topic <span class="comment">#9:</span></div><div class="line">key chip clipper keys encryption government public use secure enforcement phone nsa communications law encrypted security clinton used legal standard</div><div class="line"></div><div class="line">Fitting LDA models <span class="keyword">with</span> tf features, n_samples=<span class="number">2000</span> <span class="keyword">and</span> n_features=<span class="number">1000.</span>..</div><div class="line">done <span class="keyword">in</span> <span class="number">2.169</span>s.</div><div class="line"></div><div class="line">Topics <span class="keyword">in</span> LDA model:</div><div class="line">Topic <span class="comment">#0:</span></div><div class="line">edu com mail send graphics ftp pub available contact university list faq ca information cs <span class="number">1993</span> program sun uk mit</div><div class="line">Topic <span class="comment">#1:</span></div><div class="line">don like just know think ve way use right good going make sure ll point got need really time doesn</div><div class="line">Topic <span class="comment">#2:</span></div><div class="line">christian think atheism faith pittsburgh new bible radio games alt lot just religion like book read play time subject believe</div><div class="line">Topic <span class="comment">#3:</span></div><div class="line">drive disk windows thanks use card drives hard version pc software file using scsi help does new dos controller <span class="number">16</span></div><div class="line">Topic <span class="comment">#4:</span></div><div class="line">hiv health aids disease april medical care research <span class="number">1993</span> light information study national service test led <span class="number">10</span> page new drug</div><div class="line">Topic <span class="comment">#5:</span></div><div class="line">god people does just good don jesus say israel way life know true fact time law want believe make think</div><div class="line">Topic <span class="comment">#6:</span></div><div class="line"><span class="number">55</span> <span class="number">10</span> <span class="number">11</span> <span class="number">18</span> <span class="number">15</span> team game <span class="number">19</span> period play <span class="number">23</span> <span class="number">12</span> <span class="number">13</span> flyers <span class="number">20</span> <span class="number">25</span> <span class="number">22</span> <span class="number">17</span> <span class="number">24</span> <span class="number">16</span></div><div class="line">Topic <span class="comment">#7:</span></div><div class="line">car year just cars new engine like bike good oil insurance better tires <span class="number">000</span> thing speed model brake driving performance</div><div class="line">Topic <span class="comment">#8:</span></div><div class="line">people said did just didn know time like went think children came come don took years say dead told started</div><div class="line">Topic <span class="comment">#9:</span></div><div class="line">key space law government public use encryption earth section security moon probe enforcement keys states lunar military crime surface technology</div></pre></td></tr></table></figure><p>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data_samples[<span class="number">0</span>]</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">u"Well i'm not sure about the story nad it did seem biased. What\nI disagree with is your statement that the U.S. Media is out to\nruin Israels reputation. That is rediculous. The U.S. media is\nthe most pro-israeli media in the world. Having lived in Europe\nI realize that incidences such as the one described in the\nletter have occured. The U.S. media as a whole seem to try to\nignore them. The U.S. is subsidizing Israels existance and the\nEuropeans are not (at least not to the same degree). So I think\nthat might be a reason they report more clearly on the\natrocities.\n\tWhat is a shame is that in Austria, daily reports of\nthe inhuman acts commited by Israeli soldiers and the blessing\nreceived from the Government makes some of the Holocaust guilt\ngo away. After all, look how the Jews are treating other races\nwhen they got power. It is unfortunate.\n"</span></div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tfidf_vectorizer.get_feature_names()[<span class="number">-10</span>:]</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[<span class="string">u'worth'</span>,</div><div class="line"> <span class="string">u'wouldn'</span>,</div><div class="line"> <span class="string">u'write'</span>,</div><div class="line"> <span class="string">u'written'</span>,</div><div class="line"> <span class="string">u'wrong'</span>,</div><div class="line"> <span class="string">u'xfree86'</span>,</div><div class="line"> <span class="string">u'year'</span>,</div><div class="line"> <span class="string">u'years'</span>,</div><div class="line"> <span class="string">u'yes'</span>,</div><div class="line"> <span class="string">u'young'</span>]</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tfidf.toarray().shape</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="number">2000L</span>, <span class="number">1000L</span>)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dataset.target_names</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'alt.atheism'</span>,</div><div class="line"> <span class="string">'comp.graphics'</span>,</div><div class="line"> <span class="string">'comp.os.ms-windows.misc'</span>,</div><div class="line"> <span class="string">'comp.sys.ibm.pc.hardware'</span>,</div><div class="line"> <span class="string">'comp.sys.mac.hardware'</span>,</div><div class="line"> <span class="string">'comp.windows.x'</span>,</div><div class="line"> <span class="string">'misc.forsale'</span>,</div><div class="line"> <span class="string">'rec.autos'</span>,</div><div class="line"> <span class="string">'rec.motorcycles'</span>,</div><div class="line"> <span class="string">'rec.sport.baseball'</span>,</div><div class="line"> <span class="string">'rec.sport.hockey'</span>,</div><div class="line"> <span class="string">'sci.crypt'</span>,</div><div class="line"> <span class="string">'sci.electronics'</span>,</div><div class="line"> <span class="string">'sci.med'</span>,</div><div class="line"> <span class="string">'sci.space'</span>,</div><div class="line"> <span class="string">'soc.religion.christian'</span>,</div><div class="line"> <span class="string">'talk.politics.guns'</span>,</div><div class="line"> <span class="string">'talk.politics.mideast'</span>,</div><div class="line"> <span class="string">'talk.politics.misc'</span>,</div><div class="line"> <span class="string">'talk.religion.misc'</span>]</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lda.transform(tf)[<span class="number">1934</span>]</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">array([ <span class="number">0.3587206</span> ,  <span class="number">0.00227337</span>,  <span class="number">0.00227317</span>,  <span class="number">0.50146046</span>,  <span class="number">0.00227288</span>,</div><div class="line">        <span class="number">0.12390701</span>,  <span class="number">0.00227282</span>,  <span class="number">0.00227329</span>,  <span class="number">0.00227343</span>,  <span class="number">0.00227299</span>])</div></pre></td></tr></table></figure><h1 id="Extras"><a href="#Extras" class="headerlink" title="Extras"></a>Extras</h1><p>Some materials can find from Github.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Scikit-learn-example&quot;&gt;&lt;a href=&quot;#Scikit-learn-example&quot; class=&quot;headerlink&quot; title=&quot;Scikit-learn example&quot;&gt;&lt;/a&gt;Scikit-learn example&lt;/h1&gt;&lt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>Tic-Tac-Toe</title>
    <link href="http://yoursite.com/2017/03/18/Tic-Tac-Toe/"/>
    <id>http://yoursite.com/2017/03/18/Tic-Tac-Toe/</id>
    <published>2017-03-18T14:26:52.000Z</published>
    <updated>2017-03-18T14:27:44.552Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#######################################################################</span></div><div class="line"><span class="comment"># Copyright (C)                                                       #</span></div><div class="line"><span class="comment"># 2016 Shangtong Zhang(zhangshangtong.cpp@gmail.com)                  #</span></div><div class="line"><span class="comment"># 2016 Jan Hakenberg(jan.hakenberg@gmail.com)                         #</span></div><div class="line"><span class="comment"># 2016 Tian Jun(tianjun.cpp@gmail.com)                                #</span></div><div class="line"><span class="comment"># Permission given to modify the code as long as you keep this        #</span></div><div class="line"><span class="comment"># declaration at the top                                              #</span></div><div class="line"><span class="comment">#######################################################################</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pickle</div><div class="line"></div><div class="line">BOARD_ROWS = <span class="number">3</span></div><div class="line">BOARD_COLS = <span class="number">3</span></div><div class="line">BOARD_SIZE = BOARD_ROWS * BOARD_COLS</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># the board is represented by a n * n array,</span></div><div class="line">        <span class="comment"># 1 represents chessman of the player who moves first,</span></div><div class="line">        <span class="comment"># -1 represents chessman of another player</span></div><div class="line">        <span class="comment"># 0 represents empty position</span></div><div class="line">        self.data = np.zeros((BOARD_ROWS, BOARD_COLS))</div><div class="line">        self.winner = <span class="keyword">None</span></div><div class="line">        self.hashVal = <span class="keyword">None</span></div><div class="line">        self.end = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="comment"># calculate the hash value for one state, it's unique</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getHash</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.hashVal <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self.hashVal = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> self.data.reshape(BOARD_ROWS * BOARD_COLS):</div><div class="line">                <span class="keyword">if</span> i == <span class="number">-1</span>:</div><div class="line">                    i = <span class="number">2</span></div><div class="line">                self.hashVal = self.hashVal * <span class="number">3</span> + i</div><div class="line">        <span class="keyword">return</span> int(self.hashVal)</div><div class="line"></div><div class="line">    <span class="comment"># determine whether a player has won the game, or it's a tie</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEnd</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.end <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self.end</div><div class="line">        results = []</div><div class="line">        <span class="comment"># check row</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">            results.append(np.sum(self.data[i, :]))</div><div class="line">        <span class="comment"># check columns</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_COLS):</div><div class="line">            results.append(np.sum(self.data[:, i]))</div><div class="line"></div><div class="line">        <span class="comment"># check diagonals</span></div><div class="line">        results.append(<span class="number">0</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">            results[<span class="number">-1</span>] += self.data[i, i]</div><div class="line">        results.append(<span class="number">0</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">            results[<span class="number">-1</span>] += self.data[i, BOARD_ROWS - <span class="number">1</span> - i]</div><div class="line"></div><div class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> results:</div><div class="line">            <span class="keyword">if</span> result == <span class="number">3</span>:</div><div class="line">                self.winner = <span class="number">1</span></div><div class="line">                self.end = <span class="keyword">True</span></div><div class="line">                <span class="keyword">return</span> self.end</div><div class="line">            <span class="keyword">if</span> result == <span class="number">-3</span>:</div><div class="line">                self.winner = <span class="number">-1</span></div><div class="line">                self.end = <span class="keyword">True</span></div><div class="line">                <span class="keyword">return</span> self.end</div><div class="line"></div><div class="line">        <span class="comment"># whether it's a tie</span></div><div class="line">        sum = np.sum(np.abs(self.data))</div><div class="line">        <span class="keyword">if</span> sum == BOARD_ROWS * BOARD_COLS:</div><div class="line">            self.winner = <span class="number">0</span></div><div class="line">            self.end = <span class="keyword">True</span></div><div class="line">            <span class="keyword">return</span> self.end</div><div class="line"></div><div class="line">        <span class="comment"># game is still going on</span></div><div class="line">        self.end = <span class="keyword">False</span></div><div class="line">        <span class="keyword">return</span> self.end</div><div class="line"></div><div class="line">    <span class="comment"># @symbol 1 or -1</span></div><div class="line">    <span class="comment"># put chessman symbol in position (i, j)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextState</span><span class="params">(self, i, j, symbol)</span>:</span></div><div class="line">        newState = State()</div><div class="line">        newState.data = np.copy(self.data)</div><div class="line">        newState.data[i, j] = symbol</div><div class="line">        <span class="keyword">return</span> newState</div><div class="line"></div><div class="line">    <span class="comment"># print the board</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">            print(<span class="string">'-------------'</span>)</div><div class="line">            out = <span class="string">'| '</span></div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_COLS):</div><div class="line">                <span class="keyword">if</span> self.data[i, j] == <span class="number">1</span>:</div><div class="line">                    token = <span class="string">'*'</span></div><div class="line">                <span class="keyword">if</span> self.data[i, j] == <span class="number">0</span>:</div><div class="line">                    token = <span class="string">'0'</span></div><div class="line">                <span class="keyword">if</span> self.data[i, j] == <span class="number">-1</span>:</div><div class="line">                    token = <span class="string">'x'</span></div><div class="line">                out += token + <span class="string">' | '</span></div><div class="line">            print(out)</div><div class="line">        print(<span class="string">'-------------'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAllStatesImpl</span><span class="params">(currentState, currentSymbol, allStates)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_COLS):</div><div class="line">            <span class="keyword">if</span> currentState.data[i][j] == <span class="number">0</span>:</div><div class="line">                newState = currentState.nextState(i, j, currentSymbol)</div><div class="line">                newHash = newState.getHash()</div><div class="line">                <span class="keyword">if</span> newHash <span class="keyword">not</span> <span class="keyword">in</span> allStates.keys():</div><div class="line">                    isEnd = newState.isEnd()</div><div class="line">                    allStates[newHash] = (newState, isEnd)</div><div class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> isEnd:</div><div class="line">                        getAllStatesImpl(newState, -currentSymbol, allStates)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAllStates</span><span class="params">()</span>:</span></div><div class="line">    currentSymbol = <span class="number">1</span></div><div class="line">    currentState = State()</div><div class="line">    allStates = dict()</div><div class="line">    allStates[currentState.getHash()] = (currentState, currentState.isEnd())</div><div class="line">    getAllStatesImpl(currentState, currentSymbol, allStates)</div><div class="line">    <span class="keyword">return</span> allStates</div><div class="line"></div><div class="line"><span class="comment"># all possible board configurations</span></div><div class="line">allStates = getAllStates()</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Judger</span>:</span></div><div class="line">    <span class="comment"># @player1: player who will move first, its chessman will be 1</span></div><div class="line">    <span class="comment"># @player2: another player with chessman -1</span></div><div class="line">    <span class="comment"># @feedback: if True, both players will receive rewards when game is end</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, player1, player2, feedback=True)</span>:</span></div><div class="line">        self.p1 = player1</div><div class="line">        self.p2 = player2</div><div class="line">        self.feedback = feedback</div><div class="line">        self.currentPlayer = <span class="keyword">None</span></div><div class="line">        self.p1Symbol = <span class="number">1</span></div><div class="line">        self.p2Symbol = <span class="number">-1</span></div><div class="line">        self.p1.setSymbol(self.p1Symbol)</div><div class="line">        self.p2.setSymbol(self.p2Symbol)</div><div class="line">        self.currentState = State()</div><div class="line">        self.allStates = allStates</div><div class="line"></div><div class="line">    <span class="comment"># give reward to two players</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">giveReward</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.currentState.winner == self.p1Symbol:</div><div class="line">            self.p1.feedReward(<span class="number">1</span>)</div><div class="line">            self.p2.feedReward(<span class="number">0</span>)</div><div class="line">        <span class="keyword">elif</span> self.currentState.winner == self.p2Symbol:</div><div class="line">            self.p1.feedReward(<span class="number">0</span>)</div><div class="line">            self.p2.feedReward(<span class="number">1</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.p1.feedReward(<span class="number">0</span>)</div><div class="line">            self.p2.feedReward(<span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedCurrentState</span><span class="params">(self)</span>:</span></div><div class="line">        self.p1.feedState(self.currentState)</div><div class="line">        self.p2.feedState(self.currentState)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></div><div class="line">        self.p1.reset()</div><div class="line">        self.p2.reset()</div><div class="line">        self.currentState = State()</div><div class="line">        self.currentPlayer = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="comment"># @show: if True, print each board during the game</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self, show=False)</span>:</span></div><div class="line">        self.reset()</div><div class="line">        self.feedCurrentState()</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="comment"># set current player</span></div><div class="line">            <span class="keyword">if</span> self.currentPlayer == self.p1:</div><div class="line">                self.currentPlayer = self.p2</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self.currentPlayer = self.p1</div><div class="line">            <span class="keyword">if</span> show:</div><div class="line">                self.currentState.show()</div><div class="line">            [i, j, symbol] = self.currentPlayer.takeAction()</div><div class="line">            self.currentState = self.currentState.nextState(i, j, symbol)</div><div class="line">            hashValue = self.currentState.getHash()</div><div class="line">            self.currentState, isEnd = self.allStates[hashValue]</div><div class="line">            self.feedCurrentState()</div><div class="line">            <span class="keyword">if</span> isEnd:</div><div class="line">                <span class="keyword">if</span> self.feedback:</div><div class="line">                    self.giveReward()</div><div class="line">                <span class="keyword">return</span> self.currentState.winner</div><div class="line"></div><div class="line"><span class="comment"># AI player</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span>:</span></div><div class="line">    <span class="comment"># @stepSize: step size to update estimations</span></div><div class="line">    <span class="comment"># @exploreRate: possibility to explore</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, stepSize = <span class="number">0.1</span>, exploreRate=<span class="number">0.1</span>)</span>:</span></div><div class="line">        self.allStates = allStates</div><div class="line">        self.estimations = dict()</div><div class="line">        self.stepSize = stepSize</div><div class="line">        self.exploreRate = exploreRate</div><div class="line">        self.states = []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></div><div class="line">        self.states = []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setSymbol</span><span class="params">(self, symbol)</span>:</span></div><div class="line">        self.symbol = symbol</div><div class="line">        <span class="keyword">for</span> hash <span class="keyword">in</span> self.allStates.keys():</div><div class="line">            (state, isEnd) = self.allStates[hash]</div><div class="line">            <span class="keyword">if</span> isEnd:</div><div class="line">                <span class="keyword">if</span> state.winner == self.symbol:</div><div class="line">                    self.estimations[hash] = <span class="number">1.0</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    self.estimations[hash] = <span class="number">0</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self.estimations[hash] = <span class="number">0.5</span></div><div class="line"></div><div class="line">    <span class="comment"># accept a state</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedState</span><span class="params">(self, state)</span>:</span></div><div class="line">        self.states.append(state)</div><div class="line"></div><div class="line">    <span class="comment"># update estimation according to reward</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedReward</span><span class="params">(self, reward)</span>:</span></div><div class="line">        <span class="keyword">if</span> len(self.states) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        self.states = [state.getHash() <span class="keyword">for</span> state <span class="keyword">in</span> self.states]</div><div class="line">        target = reward</div><div class="line">        <span class="keyword">for</span> latestState <span class="keyword">in</span> reversed(self.states):</div><div class="line">            value = self.estimations[latestState] + self.stepSize * (target - self.estimations[latestState])</div><div class="line">            self.estimations[latestState] = value</div><div class="line">            target = value</div><div class="line">        self.states = []</div><div class="line"></div><div class="line">    <span class="comment"># determine next action</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">takeAction</span><span class="params">(self)</span>:</span></div><div class="line">        state = self.states[<span class="number">-1</span>]</div><div class="line">        nextStates = []</div><div class="line">        nextPositions = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(BOARD_ROWS):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(BOARD_COLS):</div><div class="line">                <span class="keyword">if</span> state.data[i, j] == <span class="number">0</span>:</div><div class="line">                    nextPositions.append([i, j])</div><div class="line">                    nextStates.append(state.nextState(i, j, self.symbol).getHash())</div><div class="line">        <span class="keyword">if</span> np.random.binomial(<span class="number">1</span>, self.exploreRate):</div><div class="line">            np.random.shuffle(nextPositions)</div><div class="line">            <span class="comment"># Not sure if truncating is the best way to deal with exploratory step</span></div><div class="line">            <span class="comment"># Maybe it's better to only skip this step rather than forget all the history</span></div><div class="line">            self.states = []</div><div class="line">            action = nextPositions[<span class="number">0</span>]</div><div class="line">            action.append(self.symbol)</div><div class="line">            <span class="keyword">return</span> action</div><div class="line"></div><div class="line">        values = []</div><div class="line">        <span class="keyword">for</span> hash, pos <span class="keyword">in</span> zip(nextStates, nextPositions):</div><div class="line">            values.append((self.estimations[hash], pos))</div><div class="line">        np.random.shuffle(values)</div><div class="line">        values.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>], reverse=<span class="keyword">True</span>)</div><div class="line">        action = values[<span class="number">0</span>][<span class="number">1</span>]</div><div class="line">        action.append(self.symbol)</div><div class="line">        <span class="keyword">return</span> action</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">savePolicy</span><span class="params">(self)</span>:</span></div><div class="line">        fw = open(<span class="string">'optimal_policy_'</span> + str(self.symbol), <span class="string">'wb'</span>)</div><div class="line">        pickle.dump(self.estimations, fw)</div><div class="line">        fw.close()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loadPolicy</span><span class="params">(self)</span>:</span></div><div class="line">        fr = open(<span class="string">'optimal_policy_'</span> + str(self.symbol),<span class="string">'rb'</span>)</div><div class="line">        self.estimations = pickle.load(fr)</div><div class="line">        fr.close()</div><div class="line"></div><div class="line"><span class="comment"># human interface</span></div><div class="line"><span class="comment"># input a number to put a chessman</span></div><div class="line"><span class="comment"># | 1 | 2 | 3 |</span></div><div class="line"><span class="comment"># | 4 | 5 | 6 |</span></div><div class="line"><span class="comment"># | 7 | 8 | 9 |</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanPlayer</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, stepSize = <span class="number">0.1</span>, exploreRate=<span class="number">0.1</span>)</span>:</span></div><div class="line">        self.symbol = <span class="keyword">None</span></div><div class="line">        self.currentState = <span class="keyword">None</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setSymbol</span><span class="params">(self, symbol)</span>:</span></div><div class="line">        self.symbol = symbol</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedState</span><span class="params">(self, state)</span>:</span></div><div class="line">        self.currentState = state</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedReward</span><span class="params">(self, reward)</span>:</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">takeAction</span><span class="params">(self)</span>:</span></div><div class="line">        data = int(input(<span class="string">"Input your position:"</span>))</div><div class="line">        data -= <span class="number">1</span></div><div class="line">        i = data // int(BOARD_COLS)</div><div class="line">        j = data % BOARD_COLS</div><div class="line">        <span class="keyword">if</span> self.currentState.data[i, j] != <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> self.takeAction()</div><div class="line">        <span class="keyword">return</span> (i, j, self.symbol)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(epochs=<span class="number">20000</span>)</span>:</span></div><div class="line">    player1 = Player()</div><div class="line">    player2 = Player()</div><div class="line">    judger = Judger(player1, player2)</div><div class="line">    player1Win = <span class="number">0.0</span></div><div class="line">    player2Win = <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, epochs):</div><div class="line">        print(<span class="string">"Epoch"</span>, i)</div><div class="line">        winner = judger.play()</div><div class="line">        <span class="keyword">if</span> winner == <span class="number">1</span>:</div><div class="line">            player1Win += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> winner == <span class="number">-1</span>:</div><div class="line">            player2Win += <span class="number">1</span></div><div class="line">        judger.reset()</div><div class="line">    print(player1Win / epochs)</div><div class="line">    print(player2Win / epochs)</div><div class="line">    player1.savePolicy()</div><div class="line">    player2.savePolicy()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compete</span><span class="params">(turns=<span class="number">500</span>)</span>:</span></div><div class="line">    player1 = Player(exploreRate=<span class="number">0</span>)</div><div class="line">    player2 = Player(exploreRate=<span class="number">0</span>)</div><div class="line">    judger = Judger(player1, player2, <span class="keyword">False</span>)</div><div class="line">    player1.loadPolicy()</div><div class="line">    player2.loadPolicy()</div><div class="line">    player1Win = <span class="number">0.0</span></div><div class="line">    player2Win = <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, turns):</div><div class="line">        print(<span class="string">"Epoch"</span>, i)</div><div class="line">        winner = judger.play()</div><div class="line">        <span class="keyword">if</span> winner == <span class="number">1</span>:</div><div class="line">            player1Win += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> winner == <span class="number">-1</span>:</div><div class="line">            player2Win += <span class="number">1</span></div><div class="line">        judger.reset()</div><div class="line">    print(player1Win / turns)</div><div class="line">    print(player2Win / turns)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        player1 = Player(exploreRate=<span class="number">0</span>)</div><div class="line">        player2 = HumanPlayer()</div><div class="line">        judger = Judger(player1, player2, <span class="keyword">False</span>)</div><div class="line">        player1.loadPolicy()</div><div class="line">        winner = judger.play(<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">if</span> winner == player2.symbol:</div><div class="line">            print(<span class="string">"Win!"</span>)</div><div class="line">        <span class="keyword">elif</span> winner == player1.symbol:</div><div class="line">            print(<span class="string">"Lose!"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"Tie!"</span>)</div><div class="line"></div><div class="line">train()</div><div class="line">compete()</div><div class="line">play()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/d
    
    </summary>
    
    
      <category term="Reinforcement Learning" scheme="http://yoursite.com/tags/Reinforcement-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Excel merge the same value that in a column to a cell</title>
    <link href="http://yoursite.com/2017/03/16/Excel-merge-the-same-value-that-in-a-column-to-a-cell/"/>
    <id>http://yoursite.com/2017/03/16/Excel-merge-the-same-value-that-in-a-column-to-a-cell/</id>
    <published>2017-03-16T05:59:42.000Z</published>
    <updated>2017-03-16T06:04:36.866Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o7ie0tcjk.bkt.clouddn.com/excel/merge_same_value_in_a_column/merge.gif" alt="excel_merge"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o7ie0tcjk.bkt.clouddn.com/excel/merge_same_value_in_a_column/merge.gif&quot; alt=&quot;excel_merge&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Excel" scheme="http://yoursite.com/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>Installing ptproc on Ubuntu 16.04 LTS</title>
    <link href="http://yoursite.com/2017/03/16/Installing-ptproc-on-Ubuntu-16-04-LTS/"/>
    <id>http://yoursite.com/2017/03/16/Installing-ptproc-on-Ubuntu-16-04-LTS/</id>
    <published>2017-03-16T03:32:55.000Z</published>
    <updated>2017-03-16T03:41:16.706Z</updated>
    
    <content type="html"><![CDATA[<p>想对事件数据用点过程进行建模，为了不用重复造轮子，所以找到了一个R包ptproc，但是安装时报错</p><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">install.packages(<span class="string">"ptproc"</span>)</div><div class="line"></div><div class="line">-------------------------------</div><div class="line">package ‘ptproc’ is not available (as a binary package <span class="keyword">for</span> R version <span class="number">3.2</span><span class="number">.3</span>)</div></pre></td></tr></table></figure><p>既然仓库里没有，那就只好用源码安装了，源码<a href="http://www.biostat.jhsph.edu/~rpeng/software/src/contrib/ptproc_1.5-1.tar.gz" target="_blank" rel="external">下载地址</a>, 但是依旧报错：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&gt; install.packages(<span class="string">"ptproc"</span>, repos=<span class="string">"http://www.biostat.jhsph.edu/~rpeng/software"</span>, type=<span class="string">"source"</span>)</div><div class="line">trying URL <span class="string">'http://www.biostat.jhsph.edu/~rpeng/software/src/contrib/ptproc_1.5-1.tar.gz'</span></div><div class="line">Content type <span class="string">'application/x-gzip'</span> length <span class="number">282002</span> bytes (<span class="number">275</span> KB)</div><div class="line">opened URL</div><div class="line">==================================================</div><div class="line">downloaded <span class="number">275</span> KB </div><div class="line"></div><div class="line">* installing *<span class="keyword">source</span>* package ‘ptproc’ <span class="keyword">...</span></div><div class="line">ERROR: a <span class="string">'NAMESPACE'</span> file is required</div><div class="line">* removing ‘/Library/Frameworks/R.framework/Versions/<span class="number">3.1</span>/Resources/<span class="keyword">library</span>/ptproc’ </div><div class="line"></div><div class="line">The downloaded <span class="keyword">source</span> packages are <span class="keyword">in</span> 		‘/private/var/folders/0b/qdw3f3zn0gq5yy2cjjpm8cgw0000gn/<span class="literal">T</span>/RtmpuW1EPA/downloaded_packages’</div><div class="line">Warning message:</div><div class="line">In install.packages(<span class="string">"ptproc"</span>, repos = <span class="string">"http://www.biostat.jhsph.edu/~rpeng/software"</span>, :</div><div class="line">                    installation of package ‘ptproc’ had non-zero exit status</div></pre></td></tr></table></figure><p>看来只有手动添加一个NAMESPACE,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd ptproc</div><div class="line">echo &apos;exportPattern( &quot;.&quot; )&apos; &gt; NAMESPACE</div><div class="line">cd ../</div><div class="line">rm ptproc_1.5-1.tar.gz</div><div class="line">tar cvzf ptproc/ ptproc_1.5-1.tar.gz</div></pre></td></tr></table></figure><p>继续源码安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">R CMD INSTALL -l &lt;ourRlibrarylocation&gt; &lt;path where I saved the packagename.tar.gz file&gt;</div></pre></td></tr></table></figure><p>Got it.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想对事件数据用点过程进行建模，为了不用重复造轮子，所以找到了一个R包ptproc，但是安装时报错&lt;/p&gt;&lt;figure class=&quot;highlight r&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/d
    
    </summary>
    
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="point process" scheme="http://yoursite.com/tags/point-process/"/>
    
  </entry>
  
  <entry>
    <title>python data analysis learning note Ch12</title>
    <link href="http://yoursite.com/2017/03/09/python-data-analysis-learning-note-Ch12/"/>
    <id>http://yoursite.com/2017/03/09/python-data-analysis-learning-note-Ch12/</id>
    <published>2017-03-09T06:02:20.000Z</published>
    <updated>2017-03-09T06:03:38.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy高级应用"><a href="#Numpy高级应用" class="headerlink" title="Numpy高级应用"></a>Numpy高级应用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> randn</div><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">np.set_printoptions(precision=<span class="number">4</span>)</div><div class="line"><span class="keyword">import</span> sys</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</div><div class="line">InteractiveShell.ast_node_interactivity = <span class="string">"all"</span></div></pre></td></tr></table></figure><h2 id="ndarray对象的内部机制"><a href="#ndarray对象的内部机制" class="headerlink" title="ndarray对象的内部机制"></a>ndarray对象的内部机制</h2><h3 id="NumPy-数据类型体系"><a href="#NumPy-数据类型体系" class="headerlink" title="NumPy 数据类型体系"></a>NumPy 数据类型体系</h3><p>检测类型是否是某种类型的子类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ints = np.ones(<span class="number">10</span>, dtype=np.uint16)</div><div class="line">floats = np.ones(<span class="number">10</span>, dtype=np.float32)</div><div class="line">np.issubdtype(ints.dtype, np.integer)</div><div class="line">np.issubdtype(floats.dtype, np.floating)</div></pre></td></tr></table></figure><pre><code>True






True
</code></pre><p>输出某种类型的所有父类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">np.float64.mro()</div></pre></td></tr></table></figure><pre><code>[numpy.float64,
 numpy.floating,
 numpy.inexact,
 numpy.number,
 numpy.generic,
 float,
 object]
</code></pre><h2 id="高级数组操作"><a href="#高级数组操作" class="headerlink" title="高级数组操作"></a>高级数组操作</h2><h3 id="数组重塑"><a href="#数组重塑" class="headerlink" title="数组重塑"></a>数组重塑</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">8</span>)</div><div class="line">arr</div><div class="line">arr.reshape((<span class="number">4</span>, <span class="number">2</span>))</div></pre></td></tr></table></figure><pre><code>array([0, 1, 2, 3, 4, 5, 6, 7])






array([[0, 1],
       [2, 3],
       [4, 5],
       [6, 7]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.reshape((<span class="number">4</span>, <span class="number">2</span>)).reshape((<span class="number">2</span>, <span class="number">4</span>))</div></pre></td></tr></table></figure><pre><code>array([[0, 1, 2, 3],
       [4, 5, 6, 7]])
</code></pre><p>-1代表自动选择合适的维度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">15</span>)</div><div class="line">arr.reshape((<span class="number">5</span>, <span class="number">-1</span>))</div></pre></td></tr></table></figure><pre><code>array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11],
       [12, 13, 14]])
</code></pre><p>用其他数组的shape进行重塑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">other_arr = np.ones((<span class="number">3</span>, <span class="number">5</span>))</div><div class="line">other_arr.shape</div><div class="line">arr.reshape(other_arr.shape)</div></pre></td></tr></table></figure><pre><code>(3, 5)






array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14]])
</code></pre><p>拉直</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">15</span>).reshape((<span class="number">5</span>, <span class="number">3</span>))</div><div class="line">arr</div><div class="line">arr.ravel()</div></pre></td></tr></table></figure><pre><code>array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11],
       [12, 13, 14]])






array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])
</code></pre><p>会产生一个副本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.flatten()</div></pre></td></tr></table></figure><pre><code>array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])
</code></pre><h3 id="C-vs-Fortran-顺序"><a href="#C-vs-Fortran-顺序" class="headerlink" title="C vs. Fortran 顺序"></a>C vs. Fortran 顺序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))</div><div class="line">arr</div><div class="line">arr.ravel()</div><div class="line">arr.ravel(<span class="string">'F'</span>)</div></pre></td></tr></table></figure><pre><code>array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])






array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])






array([ 0,  4,  8,  1,  5,  9,  2,  6, 10,  3,  7, 11])
</code></pre><h3 id="数组的合并以及拆分"><a href="#数组的合并以及拆分" class="headerlink" title="数组的合并以及拆分"></a>数组的合并以及拆分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</div><div class="line">arr2 = np.array([[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]])</div><div class="line">np.concatenate([arr1, arr2], axis=<span class="number">0</span>)</div><div class="line">np.concatenate([arr1, arr2], axis=<span class="number">1</span>)</div></pre></td></tr></table></figure><pre><code>array([[ 1,  2,  3],
       [ 4,  5,  6],
       [ 7,  8,  9],
       [10, 11, 12]])






array([[ 1,  2,  3,  7,  8,  9],
       [ 4,  5,  6, 10, 11, 12]])
</code></pre><p>更方便的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">np.vstack((arr1, arr2))</div><div class="line">np.hstack((arr1, arr2))</div></pre></td></tr></table></figure><pre><code>array([[ 1,  2,  3],
       [ 4,  5,  6],
       [ 7,  8,  9],
       [10, 11, 12]])






array([[ 1,  2,  3,  7,  8,  9],
       [ 4,  5,  6, 10, 11, 12]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> randn</div><div class="line">arr = randn(<span class="number">5</span>, <span class="number">2</span>)</div><div class="line">arr</div><div class="line">first, second, third = np.split(arr, [<span class="number">1</span>, <span class="number">3</span>])</div><div class="line">first</div><div class="line">second</div><div class="line">third</div></pre></td></tr></table></figure><pre><code>array([[ 0.9659,  1.3079],
       [-1.7632,  0.0904],
       [-0.6033,  0.2266],
       [-0.4417, -1.8609],
       [-1.2463, -0.6249]])






array([[ 0.9659,  1.3079]])






array([[-1.7632,  0.0904],
       [-0.6033,  0.2266]])






array([[-0.4417, -1.8609],
       [-1.2463, -0.6249]])
</code></pre><h4 id="堆叠辅助类"><a href="#堆叠辅助类" class="headerlink" title="堆叠辅助类"></a>堆叠辅助类</h4><p>更…简洁…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">6</span>)</div><div class="line">arr1 = arr.reshape((<span class="number">3</span>, <span class="number">2</span>))</div><div class="line">arr2 = randn(<span class="number">3</span>, <span class="number">2</span>)</div><div class="line">np.r_[arr1, arr2]</div><div class="line">np.c_[np.r_[arr1, arr2], arr]</div></pre></td></tr></table></figure><pre><code>array([[ 0.    ,  1.    ],
       [ 2.    ,  3.    ],
       [ 4.    ,  5.    ],
       [ 0.0376,  1.8236],
       [ 0.9025, -0.053 ],
       [-0.6849,  1.6728]])






array([[ 0.    ,  1.    ,  0.    ],
       [ 2.    ,  3.    ,  1.    ],
       [ 4.    ,  5.    ,  2.    ],
       [ 0.0376,  1.8236,  3.    ],
       [ 0.9025, -0.053 ,  4.    ],
       [-0.6849,  1.6728,  5.    ]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">np.c_[<span class="number">1</span>:<span class="number">6</span>, <span class="number">-10</span>:<span class="number">-5</span>]</div></pre></td></tr></table></figure><pre><code>array([[  1, -10],
       [  2,  -9],
       [  3,  -8],
       [  4,  -7],
       [  5,  -6]])
</code></pre><h3 id="元素的重复操作-tile-and-repeat"><a href="#元素的重复操作-tile-and-repeat" class="headerlink" title="元素的重复操作: tile and repeat"></a>元素的重复操作: tile and repeat</h3><p>元素级重复</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">3</span>)</div><div class="line">arr.repeat(<span class="number">3</span>)</div></pre></td></tr></table></figure><pre><code>array([0, 0, 0, 1, 1, 1, 2, 2, 2])
</code></pre><p>指定重复次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.repeat([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div></pre></td></tr></table></figure><pre><code>array([0, 0, 1, 1, 1, 2, 2, 2, 2])
</code></pre><p>多维数组需要指定<code>axis</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = randn(<span class="number">2</span>, <span class="number">2</span>)</div><div class="line">arr</div><div class="line">arr.repeat(<span class="number">2</span>, axis=<span class="number">0</span>)</div></pre></td></tr></table></figure><pre><code>array([[-0.4628,  1.1142],
       [ 0.3637,  0.4341]])






array([[-0.4628,  1.1142],
       [-0.4628,  1.1142],
       [ 0.3637,  0.4341],
       [ 0.3637,  0.4341]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr.repeat([<span class="number">2</span>, <span class="number">3</span>], axis=<span class="number">0</span>)</div><div class="line">arr.repeat([<span class="number">2</span>, <span class="number">3</span>], axis=<span class="number">1</span>)</div></pre></td></tr></table></figure><pre><code>array([[-0.4628,  1.1142],
       [-0.4628,  1.1142],
       [ 0.3637,  0.4341],
       [ 0.3637,  0.4341],
       [ 0.3637,  0.4341]])






array([[-0.4628, -0.4628,  1.1142,  1.1142,  1.1142],
       [ 0.3637,  0.3637,  0.4341,  0.4341,  0.4341]])
</code></pre><p>块级重复</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr</div><div class="line">np.tile(arr, <span class="number">2</span>)</div></pre></td></tr></table></figure><pre><code>array([[-0.4628,  1.1142],
       [ 0.3637,  0.4341]])






array([[-0.4628,  1.1142, -0.4628,  1.1142],
       [ 0.3637,  0.4341,  0.3637,  0.4341]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr</div><div class="line">np.tile(arr, (<span class="number">2</span>, <span class="number">1</span>))</div><div class="line">np.tile(arr, (<span class="number">3</span>, <span class="number">2</span>))</div></pre></td></tr></table></figure><pre><code>array([[-0.4628,  1.1142],
       [ 0.3637,  0.4341]])






array([[-0.4628,  1.1142],
       [ 0.3637,  0.4341],
       [-0.4628,  1.1142],
       [ 0.3637,  0.4341]])






array([[-0.4628,  1.1142, -0.4628,  1.1142],
       [ 0.3637,  0.4341,  0.3637,  0.4341],
       [-0.4628,  1.1142, -0.4628,  1.1142],
       [ 0.3637,  0.4341,  0.3637,  0.4341],
       [-0.4628,  1.1142, -0.4628,  1.1142],
       [ 0.3637,  0.4341,  0.3637,  0.4341]])
</code></pre><h3 id="花式索引的等价函数-take-and-put"><a href="#花式索引的等价函数-take-and-put" class="headerlink" title="花式索引的等价函数: take and put"></a>花式索引的等价函数: take and put</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">10</span>) * <span class="number">100</span></div><div class="line">inds = [<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>]</div><div class="line">arr[inds]</div></pre></td></tr></table></figure><pre><code>array([700, 100, 200, 600])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">arr.take(inds)</div><div class="line">arr.put(inds, <span class="number">42</span>)</div><div class="line">arr</div><div class="line">arr.put(inds, [<span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>])</div><div class="line">arr</div></pre></td></tr></table></figure><pre><code>array([700, 100, 200, 600])






array([  0,  42,  42, 300, 400, 500,  42,  42, 800, 900])






array([  0,  41,  42, 300, 400, 500,  43,  40, 800, 900])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">inds = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>]</div><div class="line">arr = randn(<span class="number">2</span>, <span class="number">4</span>)</div><div class="line">arr</div><div class="line">arr.take(inds, axis=<span class="number">1</span>)</div></pre></td></tr></table></figure><pre><code>array([[ 0.2772, -1.3059, -1.4607, -0.4856],
       [ 1.5585, -0.4521, -1.6259, -1.6644]])






array([[-1.4607,  0.2772, -1.4607, -1.3059],
       [-1.6259,  1.5585, -1.6259, -0.4521]])
</code></pre><h2 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h2><p>每一个元素都乘以4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">5</span>)</div><div class="line">arr</div><div class="line">arr * <span class="number">4</span></div></pre></td></tr></table></figure><pre><code>array([0, 1, 2, 3, 4])






array([ 0,  4,  8, 12, 16])
</code></pre><p>每一维对应减去均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">arr = randn(<span class="number">4</span>, <span class="number">3</span>)</div><div class="line">arr.mean(<span class="number">0</span>)</div><div class="line">demeaned = arr - arr.mean(<span class="number">0</span>)</div><div class="line">demeaned</div><div class="line">demeaned.mean(<span class="number">0</span>)</div></pre></td></tr></table></figure><pre><code>array([-0.1556,  0.3494, -0.2545])






array([[-0.3753,  0.5353,  1.3534],
       [-0.4282,  0.5606,  0.8935],
       [-0.0956, -0.9767, -1.2444],
       [ 0.899 , -0.1192, -1.0024]])






array([ -5.5511e-17,  -1.3878e-17,   0.0000e+00])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">arr</div><div class="line">row_means = arr.mean(<span class="number">1</span>)</div><div class="line">row_means.reshape((<span class="number">4</span>, <span class="number">1</span>))</div><div class="line">demeaned = arr - row_means.reshape((<span class="number">4</span>, <span class="number">1</span>))</div><div class="line">demeaned.mean(<span class="number">1</span>)</div></pre></td></tr></table></figure><pre><code>array([[-0.5308,  0.8848,  1.0989],
       [-0.5837,  0.91  ,  0.639 ],
       [-0.2511, -0.6273, -1.4989],
       [ 0.7434,  0.2302, -1.2569]])






array([[ 0.4843],
       [ 0.3218],
       [-0.7924],
       [-0.0944]])






array([  7.4015e-17,   0.0000e+00,   0.0000e+00,   0.0000e+00])
</code></pre><h3 id="沿其他轴向广播"><a href="#沿其他轴向广播" class="headerlink" title="沿其他轴向广播"></a>沿其他轴向广播</h3><p>维度不对应</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr - arr.mean(<span class="number">1</span>)</div></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&lt;ipython-input-31-7b87b85a20b2&gt; in &lt;module&gt;()
----&gt; 1 arr - arr.mean(1)


ValueError: operands could not be broadcast together with shapes (4,3) (4,) 
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr - arr.mean(<span class="number">1</span>).reshape((<span class="number">4</span>, <span class="number">1</span>))</div></pre></td></tr></table></figure><pre><code>array([[-1.0151,  0.4005,  0.6146],
       [-0.9055,  0.5882,  0.3173],
       [ 0.5413,  0.1652, -0.7065],
       [ 0.8378,  0.3246, -1.1625]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr = np.zeros((<span class="number">4</span>, <span class="number">4</span>))</div><div class="line">arr_3d = arr[:, np.newaxis]</div><div class="line">arr_3d</div><div class="line">arr_3d.shape</div></pre></td></tr></table></figure><pre><code>array([[[ 0.,  0.,  0.,  0.]],

       [[ 0.,  0.,  0.,  0.]],

       [[ 0.,  0.,  0.,  0.]],

       [[ 0.,  0.,  0.,  0.]]])






(4, 1, 4)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr_1d = np.random.normal(size=<span class="number">3</span>)</div><div class="line">arr_1d</div><div class="line">arr_1d[:, np.newaxis]</div><div class="line">arr_1d[np.newaxis, :]</div></pre></td></tr></table></figure><pre><code>array([-1.1083,  0.5576,  1.2277])






array([[-1.1083],
       [ 0.5576],
       [ 1.2277]])






array([[-1.1083,  0.5576,  1.2277]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">arr = randn(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">arr</div><div class="line">depth_means = arr.mean(<span class="number">2</span>)</div><div class="line">depth_means</div><div class="line">demeaned = arr - depth_means[:, :, np.newaxis]</div><div class="line">demeaned.mean(<span class="number">2</span>)</div></pre></td></tr></table></figure><pre><code>array([[[-1.9966, -0.2431, -0.992 ,  0.8283, -0.5073],
        [-0.3938, -0.1332, -0.7427,  0.3094, -0.9241],
        [ 1.1069, -0.5383, -0.9288,  0.0233, -0.4678],
        [-1.2015,  0.6905,  1.6706, -0.1703, -1.3975]],

       [[-0.3048, -1.7181, -0.189 ,  0.6263,  1.1194],
        [ 0.0823, -0.7132, -0.5162,  1.5305, -1.199 ],
        [ 0.5777,  1.2935,  0.1547, -1.3637,  0.4251],
        [ 0.4923,  1.4004,  0.3646,  0.1594, -0.7334]],

       [[ 1.3836, -0.5313,  0.2826,  0.4739, -1.3435],
        [-1.141 , -0.3084,  1.1364,  1.1326,  0.3064],
        [-0.9692,  1.0229, -0.0246,  1.4484, -1.137 ],
        [ 1.7033, -1.8358,  1.2087, -0.5463,  0.5904]]])






array([[-0.5822, -0.3769, -0.1609, -0.0816],
       [-0.0932, -0.1631,  0.2174,  0.3367],
       [ 0.0531,  0.2252,  0.0681,  0.2241]])






array([[  8.8818e-17,   0.0000e+00,  -4.4409e-17,  -8.8818e-17],
       [  0.0000e+00,   0.0000e+00,   2.7756e-17,   8.8818e-17],
       [  4.4409e-17,   5.5511e-17,   4.4409e-17,   0.0000e+00]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">demean_axis</span><span class="params">(arr, axis=<span class="number">0</span>)</span>:</span></div><div class="line">    means = arr.mean(axis)</div><div class="line"></div><div class="line">    <span class="comment"># This generalized things like [:, :, np.newaxis] to N dimensions</span></div><div class="line">    indexer = [slice(<span class="keyword">None</span>)] * arr.ndim <span class="comment"># like :</span></div><div class="line">    indexer[axis] = np.newaxis</div><div class="line">    <span class="keyword">return</span> arr - means[indexer]</div></pre></td></tr></table></figure><h3 id="通过广播设置数组的值"><a href="#通过广播设置数组的值" class="headerlink" title="通过广播设置数组的值"></a>通过广播设置数组的值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = np.zeros((<span class="number">4</span>, <span class="number">3</span>))</div><div class="line">arr[:] = <span class="number">5</span></div><div class="line">arr</div></pre></td></tr></table></figure><pre><code>array([[ 5.,  5.,  5.],
       [ 5.,  5.,  5.],
       [ 5.,  5.,  5.],
       [ 5.,  5.,  5.]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">col = np.array([<span class="number">1.28</span>, <span class="number">-0.42</span>, <span class="number">0.44</span>, <span class="number">1.6</span>])</div><div class="line">arr[:] = col[:, np.newaxis]</div><div class="line">arr</div><div class="line">arr[:<span class="number">2</span>] = [[<span class="number">-1.37</span>], [<span class="number">0.509</span>]]</div><div class="line">arr</div></pre></td></tr></table></figure><pre><code>array([[ 1.28,  1.28,  1.28],
       [-0.42, -0.42, -0.42],
       [ 0.44,  0.44,  0.44],
       [ 1.6 ,  1.6 ,  1.6 ]])






array([[-1.37 , -1.37 , -1.37 ],
       [ 0.509,  0.509,  0.509],
       [ 0.44 ,  0.44 ,  0.44 ],
       [ 1.6  ,  1.6  ,  1.6  ]])
</code></pre><h2 id="ufunc高级应用"><a href="#ufunc高级应用" class="headerlink" title="ufunc高级应用"></a>ufunc高级应用</h2><h3 id="ufunc实例方法"><a href="#ufunc实例方法" class="headerlink" title="ufunc实例方法"></a>ufunc实例方法</h3><p><code>reduce</code>通过一系列的二元运算对其值进行聚合（可指明轴向）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">10</span>)</div><div class="line">np.add.reduce(arr)</div><div class="line">arr.sum()</div></pre></td></tr></table></figure><pre><code>45






45
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">np.random.seed(<span class="number">12346</span>)</div></pre></td></tr></table></figure><p>这里聚合的是逻辑与操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">arr = randn(<span class="number">5</span>, <span class="number">5</span>)</div><div class="line">arr</div><div class="line">arr[::<span class="number">2</span>].sort(<span class="number">1</span>) <span class="comment"># sort a few rows</span></div><div class="line">arr</div><div class="line">arr[:, :<span class="number">-1</span>] &lt; arr[:, <span class="number">1</span>:]</div><div class="line">np.logical_and.reduce(arr[:, :<span class="number">-1</span>] &lt; arr[:, <span class="number">1</span>:], axis=<span class="number">1</span>)</div></pre></td></tr></table></figure><pre><code>array([[-0.7066,  0.4268, -0.2776, -0.8283, -2.7628],
       [ 0.9835,  0.4378, -0.8496,  0.7188,  0.7329],
       [ 0.5047, -0.7893,  0.5392,  1.2907,  0.8676],
       [ 0.4113,  0.4459, -0.3172, -1.0493,  1.3459],
       [ 0.356 , -0.0915, -0.535 , -0.036 , -0.2591]])






array([[-2.7628, -0.8283, -0.7066, -0.2776,  0.4268],
       [ 0.9835,  0.4378, -0.8496,  0.7188,  0.7329],
       [-0.7893,  0.5047,  0.5392,  0.8676,  1.2907],
       [ 0.4113,  0.4459, -0.3172, -1.0493,  1.3459],
       [-0.535 , -0.2591, -0.0915, -0.036 ,  0.356 ]])






array([[ True,  True,  True,  True],
       [False, False,  True,  True],
       [ True,  True,  True,  True],
       [ True, False, False,  True],
       [ True,  True,  True,  True]], dtype=bool)






array([ True, False,  True, False,  True], dtype=bool)
</code></pre><p>相对于<code>reduce</code>只输出最后结果，<code>accumulate</code>保留中间结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">15</span>).reshape((<span class="number">3</span>, <span class="number">5</span>))</div><div class="line">np.add.accumulate(arr, axis=<span class="number">1</span>)</div></pre></td></tr></table></figure><pre><code>array([[ 0,  1,  3,  6, 10],
       [ 5, 11, 18, 26, 35],
       [10, 21, 33, 46, 60]], dtype=int32)
</code></pre><p><code>outer</code>计算两个数组的叉积</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">3</span>).repeat([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>])</div><div class="line">arr</div><div class="line">np.multiply.outer(arr, np.arange(<span class="number">5</span>))</div></pre></td></tr></table></figure><pre><code>array([0, 1, 1, 2, 2])






array([[0, 0, 0, 0, 0],
       [0, 1, 2, 3, 4],
       [0, 1, 2, 3, 4],
       [0, 2, 4, 6, 8],
       [0, 2, 4, 6, 8]])
</code></pre><p><code>outer</code>输出结果的维度是输入两个数组的维度之和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">result = np.subtract.outer(randn(<span class="number">3</span>, <span class="number">4</span>), randn(<span class="number">5</span>))</div><div class="line">result.shape</div></pre></td></tr></table></figure><pre><code>(3, 4, 5)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr = np.arange(<span class="number">10</span>)</div><div class="line">np.add.reduceat(arr, [<span class="number">0</span>, <span class="number">5</span>, <span class="number">8</span>])</div></pre></td></tr></table></figure><pre><code>array([10, 18, 17], dtype=int32)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = np.multiply.outer(np.arange(<span class="number">4</span>), np.arange(<span class="number">5</span>))</div><div class="line">arr</div><div class="line">np.add.reduceat(arr, [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>], axis=<span class="number">1</span>)</div></pre></td></tr></table></figure><pre><code>array([[ 0,  0,  0,  0,  0],
       [ 0,  1,  2,  3,  4],
       [ 0,  2,  4,  6,  8],
       [ 0,  3,  6,  9, 12]])






array([[ 0,  0,  0],
       [ 1,  5,  4],
       [ 2, 10,  8],
       [ 3, 15, 12]], dtype=int32)
</code></pre><h3 id="自定义-ufuncs"><a href="#自定义-ufuncs" class="headerlink" title="自定义 ufuncs"></a>自定义 ufuncs</h3><p>两种不同的调用方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_elements</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line">add_them = np.frompyfunc(add_elements, <span class="number">2</span>, <span class="number">1</span>) <span class="comment"># 2 input and 1 output</span></div><div class="line">add_them(np.arange(<span class="number">8</span>), np.arange(<span class="number">8</span>))</div></pre></td></tr></table></figure><pre><code>array([0, 2, 4, 6, 8, 10, 12, 14], dtype=object)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">add_them = np.vectorize(add_elements, otypes=[np.float64])</div><div class="line">add_them(np.arange(<span class="number">8</span>), np.arange(<span class="number">8</span>))</div></pre></td></tr></table></figure><pre><code>array([  0.,   2.,   4.,   6.,   8.,  10.,  12.,  14.])
</code></pre><p>自己实现的还是比不上内置优化过的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = randn(<span class="number">10000</span>)</div><div class="line">%timeit add_them(arr, arr)</div><div class="line">%timeit np.add(arr, arr)</div></pre></td></tr></table></figure><pre><code>100 loops, best of 3: 1.81 ms per loop
The slowest run took 16.51 times longer than the fastest. This could mean that an intermediate result is being cached.
100000 loops, best of 3: 3.65 µs per loop
</code></pre><h2 id="结构化和记录式数组"><a href="#结构化和记录式数组" class="headerlink" title="结构化和记录式数组"></a>结构化和记录式数组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dtype = [(<span class="string">'x'</span>, np.float64), (<span class="string">'y'</span>, np.int32)]</div><div class="line">sarr = np.array([(<span class="number">1.5</span>, <span class="number">6</span>), (np.pi, <span class="number">-2</span>)], dtype=dtype)</div><div class="line">sarr</div></pre></td></tr></table></figure><pre><code>array([(1.5, 6), (3.141592653589793, -2)], 
      dtype=[(&#39;x&#39;, &#39;&lt;f8&#39;), (&#39;y&#39;, &#39;&lt;i4&#39;)])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sarr[<span class="number">0</span>]</div><div class="line">sarr[<span class="number">0</span>][<span class="string">'y'</span>]</div></pre></td></tr></table></figure><pre><code>(1.5, 6)






6
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sarr[<span class="string">'x'</span>]</div></pre></td></tr></table></figure><pre><code>array([ 1.5   ,  3.1416])
</code></pre><h3 id="嵌套dtype和多维字段"><a href="#嵌套dtype和多维字段" class="headerlink" title="嵌套dtype和多维字段"></a>嵌套<code>dtype</code>和多维字段</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dtype = [(<span class="string">'x'</span>, np.int64, <span class="number">3</span>), (<span class="string">'y'</span>, np.int32)]</div><div class="line">arr = np.zeros(<span class="number">4</span>, dtype=dtype)</div><div class="line">arr</div></pre></td></tr></table></figure><pre><code>array([([0, 0, 0], 0), ([0, 0, 0], 0), ([0, 0, 0], 0), ([0, 0, 0], 0)], 
      dtype=[(&#39;x&#39;, &#39;&lt;i8&#39;, (3,)), (&#39;y&#39;, &#39;&lt;i4&#39;)])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr[<span class="number">0</span>][<span class="string">'x'</span>]</div></pre></td></tr></table></figure><pre><code>array([0, 0, 0], dtype=int64)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr[<span class="string">'x'</span>]</div></pre></td></tr></table></figure><pre><code>array([[0, 0, 0],
       [0, 0, 0],
       [0, 0, 0],
       [0, 0, 0]], dtype=int64)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dtype = [(<span class="string">'x'</span>, [(<span class="string">'a'</span>, <span class="string">'f8'</span>), (<span class="string">'b'</span>, <span class="string">'f4'</span>)]), (<span class="string">'y'</span>, np.int32)]</div><div class="line">data = np.array([((<span class="number">1</span>, <span class="number">2</span>), <span class="number">5</span>), ((<span class="number">3</span>, <span class="number">4</span>), <span class="number">6</span>)], dtype=dtype)</div><div class="line">data[<span class="string">'x'</span>]</div><div class="line">data[<span class="string">'y'</span>]</div><div class="line">data[<span class="string">'x'</span>][<span class="string">'a'</span>]</div></pre></td></tr></table></figure><pre><code>array([(1.0, 2.0), (3.0, 4.0)], 
      dtype=[(&#39;a&#39;, &#39;&lt;f8&#39;), (&#39;b&#39;, &#39;&lt;f4&#39;)])






array([5, 6])






array([ 1.,  3.])
</code></pre><h2 id="更多有关排序的话题"><a href="#更多有关排序的话题" class="headerlink" title="更多有关排序的话题"></a>更多有关排序的话题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = randn(<span class="number">6</span>)</div><div class="line">arr.sort()</div><div class="line">arr</div></pre></td></tr></table></figure><pre><code>array([-1.3918, -0.2089,  0.2316,  0.728 ,  0.8356,  1.9956])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr = randn(<span class="number">3</span>, <span class="number">5</span>)</div><div class="line">arr</div><div class="line">arr[:, <span class="number">0</span>].sort()  <span class="comment"># Sort first column values in-place</span></div><div class="line">arr</div></pre></td></tr></table></figure><pre><code>array([[ -2.9812e-01,   1.2037e+00,  -1.5768e-02,   7.4395e-01,
          8.6880e-01],
       [ -4.2865e-01,   7.1886e-01,  -1.4510e+00,   1.0510e-01,
         -1.7942e+00],
       [ -2.8792e-04,   6.1168e-01,  -9.1210e-02,  -1.2799e+00,
         -4.0230e-02]])






array([[ -4.2865e-01,   1.2037e+00,  -1.5768e-02,   7.4395e-01,
          8.6880e-01],
       [ -2.9812e-01,   7.1886e-01,  -1.4510e+00,   1.0510e-01,
         -1.7942e+00],
       [ -2.8792e-04,   6.1168e-01,  -9.1210e-02,  -1.2799e+00,
         -4.0230e-02]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr = randn(<span class="number">5</span>)</div><div class="line">arr</div><div class="line">np.sort(arr)</div><div class="line">arr</div></pre></td></tr></table></figure><pre><code>array([-0.9699, -0.5626,  1.1172,  0.2791, -1.1148])






array([-1.1148, -0.9699, -0.5626,  0.2791,  1.1172])






array([-0.9699, -0.5626,  1.1172,  0.2791, -1.1148])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr = randn(<span class="number">3</span>, <span class="number">5</span>)</div><div class="line">arr</div><div class="line">arr.sort(axis=<span class="number">1</span>)</div><div class="line">arr</div></pre></td></tr></table></figure><pre><code>array([[ 0.2266,  0.3405,  2.6439, -1.6262, -0.3976],
       [-1.4821,  1.068 , -0.252 , -0.9331,  2.2639],
       [-0.2311,  1.1472,  0.9287, -0.9023,  1.1761]])






array([[-1.6262, -0.3976,  0.2266,  0.3405,  2.6439],
       [-1.4821, -0.9331, -0.252 ,  1.068 ,  2.2639],
       [-0.9023, -0.2311,  0.9287,  1.1472,  1.1761]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr[:, ::<span class="number">-1</span>]</div></pre></td></tr></table></figure><pre><code>array([[ 2.6439,  0.3405,  0.2266, -0.3976, -1.6262],
       [ 2.2639,  1.068 , -0.252 , -0.9331, -1.4821],
       [ 1.1761,  1.1472,  0.9287, -0.2311, -0.9023]])
</code></pre><h3 id="间接排序-argsort-and-lexsort"><a href="#间接排序-argsort-and-lexsort" class="headerlink" title="间接排序: argsort and lexsort"></a>间接排序: argsort and lexsort</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">values = np.array([<span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>])</div><div class="line">indexer = values.argsort()</div><div class="line">indexer</div><div class="line">values[indexer]</div></pre></td></tr></table></figure><pre><code>array([1, 2, 4, 3, 0], dtype=int64)






array([0, 1, 2, 3, 5])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr = randn(<span class="number">3</span>, <span class="number">5</span>)</div><div class="line">arr[<span class="number">0</span>] = values</div><div class="line">arr</div><div class="line">arr[:, arr[<span class="number">0</span>].argsort()]</div></pre></td></tr></table></figure><pre><code>array([[ 5.    ,  0.    ,  1.    ,  3.    ,  2.    ],
       [ 0.422 ,  0.1187,  1.1352,  1.4363, -1.2487],
       [ 0.1909, -1.0984,  0.7886, -0.5827,  1.1592]])






array([[ 0.    ,  1.    ,  2.    ,  3.    ,  5.    ],
       [ 0.1187,  1.1352, -1.2487,  1.4363,  0.422 ],
       [-1.0984,  0.7886,  1.1592, -0.5827,  0.1909]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">first_name = np.array([<span class="string">'Bob'</span>, <span class="string">'Jane'</span>, <span class="string">'Steve'</span>, <span class="string">'Bill'</span>, <span class="string">'Barbara'</span>])</div><div class="line">last_name = np.array([<span class="string">'Jones'</span>, <span class="string">'Arnold'</span>, <span class="string">'Arnold'</span>, <span class="string">'Jones'</span>, <span class="string">'Walters'</span>])</div><div class="line">sorter = np.lexsort((first_name, last_name))</div><div class="line">zip(last_name[sorter], first_name[sorter])</div></pre></td></tr></table></figure><pre><code>&lt;zip at 0x1d1284f87c8&gt;
</code></pre><h3 id="其他排序算法"><a href="#其他排序算法" class="headerlink" title="其他排序算法"></a>其他排序算法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">values = np.array([<span class="string">'2:first'</span>, <span class="string">'2:second'</span>, <span class="string">'1:first'</span>, <span class="string">'1:second'</span>, <span class="string">'1:third'</span>])</div><div class="line">key = np.array([<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</div><div class="line">indexer = key.argsort(kind=<span class="string">'mergesort'</span>)</div><div class="line">indexer</div><div class="line">values.take(indexer)</div></pre></td></tr></table></figure><pre><code>array([2, 3, 4, 0, 1], dtype=int64)






array([&#39;1:first&#39;, &#39;1:second&#39;, &#39;1:third&#39;, &#39;2:first&#39;, &#39;2:second&#39;], 
      dtype=&#39;&lt;U8&#39;)
</code></pre><h3 id="numpy-searchsorted-在有序数组中查找元素"><a href="#numpy-searchsorted-在有序数组中查找元素" class="headerlink" title="numpy.searchsorted: 在有序数组中查找元素"></a>numpy.searchsorted: 在有序数组中查找元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">15</span>])</div><div class="line">arr.searchsorted(<span class="number">9</span>)</div></pre></td></tr></table></figure><pre><code>3
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.searchsorted([<span class="number">0</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">16</span>])</div></pre></td></tr></table></figure><pre><code>array([0, 3, 3, 5], dtype=int64)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</div><div class="line">arr.searchsorted([<span class="number">0</span>, <span class="number">1</span>])</div><div class="line">arr.searchsorted([<span class="number">0</span>, <span class="number">1</span>], side=<span class="string">'right'</span>)</div></pre></td></tr></table></figure><pre><code>array([0, 3], dtype=int64)






array([3, 7], dtype=int64)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">data = np.floor(np.random.uniform(<span class="number">0</span>, <span class="number">10000</span>, size=<span class="number">50</span>))</div><div class="line">bins = np.array([<span class="number">0</span>, <span class="number">100</span>, <span class="number">1000</span>, <span class="number">5000</span>, <span class="number">10000</span>])</div><div class="line">data</div></pre></td></tr></table></figure><pre><code>array([  143.,  8957.,   309.,  2349.,  5503.,  2754.,  4408.,  4259.,
        3313.,  3364.,  2492.,  9977.,  4704.,  5538.,  6089.,  5864.,
        6926.,  3677.,  8698.,  1832.,  8931.,  6631.,  5322.,  3712.,
        9350.,  3945.,  9514.,  3683.,  8568.,  8247.,  7087.,  7630.,
        3392.,  8320.,  1973.,   982.,  1672.,  7052.,  6230.,  3894.,
        1832.,  9488.,   755.,  8522.,  1858.,  5417.,  6162.,  7517.,
        9827.,  4458.])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">labels = bins.searchsorted(data)</div><div class="line">labels</div></pre></td></tr></table></figure><pre><code>array([2, 4, 2, 3, 4, 3, 3, 3, 3, 3, 3, 4, 3, 4, 4, 4, 4, 3, 4, 3, 4, 4, 4,
       3, 4, 3, 4, 3, 4, 4, 4, 4, 3, 4, 3, 2, 3, 4, 4, 3, 3, 4, 2, 4, 3, 4,
       4, 4, 4, 3], dtype=int64)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Series(data).groupby(labels).mean()</div></pre></td></tr></table></figure><pre><code>2     547.250000
3    3178.550000
4    7591.038462
dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">np.digitize(data, bins)</div></pre></td></tr></table></figure><pre><code>array([2, 4, 2, 3, 4, 3, 3, 3, 3, 3, 3, 4, 3, 4, 4, 4, 4, 3, 4, 3, 4, 4, 4,
       3, 4, 3, 4, 3, 4, 4, 4, 4, 3, 4, 3, 2, 3, 4, 4, 3, 3, 4, 2, 4, 3, 4,
       4, 4, 4, 3], dtype=int64)
</code></pre><h2 id="NumPy-matrix-class"><a href="#NumPy-matrix-class" class="headerlink" title="NumPy matrix class"></a>NumPy matrix class</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">X =  np.array([[ <span class="number">8.82768214</span>,  <span class="number">3.82222409</span>, <span class="number">-1.14276475</span>,  <span class="number">2.04411587</span>],</div><div class="line">               [ <span class="number">3.82222409</span>,  <span class="number">6.75272284</span>,  <span class="number">0.83909108</span>,  <span class="number">2.08293758</span>],</div><div class="line">               [<span class="number">-1.14276475</span>,  <span class="number">0.83909108</span>,  <span class="number">5.01690521</span>,  <span class="number">0.79573241</span>],</div><div class="line">               [ <span class="number">2.04411587</span>,  <span class="number">2.08293758</span>,  <span class="number">0.79573241</span>,  <span class="number">6.24095859</span>]])</div><div class="line">X[:, <span class="number">0</span>]  <span class="comment"># one-dimensional</span></div><div class="line">y = X[:, :<span class="number">1</span>]  <span class="comment"># two-dimensional by slicing</span></div><div class="line">X</div><div class="line">y</div></pre></td></tr></table></figure><pre><code>array([ 8.8277,  3.8222, -1.1428,  2.0441])






array([[ 8.8277,  3.8222, -1.1428,  2.0441],
       [ 3.8222,  6.7527,  0.8391,  2.0829],
       [-1.1428,  0.8391,  5.0169,  0.7957],
       [ 2.0441,  2.0829,  0.7957,  6.241 ]])






array([[ 8.8277],
       [ 3.8222],
       [-1.1428],
       [ 2.0441]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">np.dot(y.T, np.dot(X, y))</div></pre></td></tr></table></figure><pre><code>array([[ 1195.468]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Xm = np.matrix(X)</div><div class="line">ym = Xm[:, <span class="number">0</span>]</div><div class="line">Xm</div><div class="line">ym</div><div class="line">ym.T * Xm * ym</div></pre></td></tr></table></figure><pre><code>matrix([[ 8.8277,  3.8222, -1.1428,  2.0441],
        [ 3.8222,  6.7527,  0.8391,  2.0829],
        [-1.1428,  0.8391,  5.0169,  0.7957],
        [ 2.0441,  2.0829,  0.7957,  6.241 ]])






matrix([[ 8.8277],
        [ 3.8222],
        [-1.1428],
        [ 2.0441]])






matrix([[ 1195.468]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Xm.I * X</div></pre></td></tr></table></figure><pre><code>matrix([[  1.0000e+00,   6.9616e-17,  -4.0136e-17,   8.1258e-17],
        [ -2.3716e-17,   1.0000e+00,   2.2230e-17,  -2.5721e-17],
        [  1.0957e-16,   5.0783e-18,   1.0000e+00,   7.8658e-18],
        [ -5.7092e-17,  -3.7777e-18,   6.2391e-18,   1.0000e+00]])
</code></pre><h2 id="高级数组输入输出"><a href="#高级数组输入输出" class="headerlink" title="高级数组输入输出"></a>高级数组输入输出</h2><h3 id="内存映像文件"><a href="#内存映像文件" class="headerlink" title="内存映像文件"></a>内存映像文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mmap = np.memmap(<span class="string">'mymmap'</span>, dtype=<span class="string">'float64'</span>, mode=<span class="string">'w+'</span>, shape=(<span class="number">10000</span>, <span class="number">10000</span>))</div><div class="line">mmap</div></pre></td></tr></table></figure><pre><code>memmap([[ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       ..., 
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.],
       [ 0.,  0.,  0., ...,  0.,  0.,  0.]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">section = mmap[:<span class="number">5</span>]</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">section[:] = np.random.randn(<span class="number">5</span>, <span class="number">10000</span>)</div><div class="line">mmap.flush()</div><div class="line">mmap</div><div class="line"><span class="keyword">del</span> mmap</div></pre></td></tr></table></figure><pre><code>memmap([[-1.273 , -0.1547,  0.7817, ...,  0.3421,  1.0272, -1.8742],
       [-0.3544, -3.1195,  0.1256, ..., -0.4476,  0.4863, -0.8311],
       [-1.1117,  0.8186,  2.3934, ...,  0.1061,  1.4123,  0.6489],
       ..., 
       [ 0.    ,  0.    ,  0.    , ...,  0.    ,  0.    ,  0.    ],
       [ 0.    ,  0.    ,  0.    , ...,  0.    ,  0.    ,  0.    ],
       [ 0.    ,  0.    ,  0.    , ...,  0.    ,  0.    ,  0.    ]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mmap = np.memmap(<span class="string">'mymmap'</span>, dtype=<span class="string">'float64'</span>, shape=(<span class="number">10000</span>, <span class="number">10000</span>))</div><div class="line">mmap</div></pre></td></tr></table></figure><pre><code>memmap([[-1.273 , -0.1547,  0.7817, ...,  0.3421,  1.0272, -1.8742],
       [-0.3544, -3.1195,  0.1256, ..., -0.4476,  0.4863, -0.8311],
       [-1.1117,  0.8186,  2.3934, ...,  0.1061,  1.4123,  0.6489],
       ..., 
       [ 0.    ,  0.    ,  0.    , ...,  0.    ,  0.    ,  0.    ],
       [ 0.    ,  0.    ,  0.    , ...,  0.    ,  0.    ,  0.    ],
       [ 0.    ,  0.    ,  0.    , ...,  0.    ,  0.    ,  0.    ]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">%xdel mmap</div><div class="line">!<span class="keyword">del</span> mymmap</div></pre></td></tr></table></figure><pre><code>NameError: name &#39;mmap&#39; is not defined
C:\Users\Ewan\Downloads\pydata-book-master\mymmap


The process cannot access the file because it is being used by another process.
</code></pre><p>​</p><h2 id="性能建议"><a href="#性能建议" class="headerlink" title="性能建议"></a>性能建议</h2><h3 id="连续内存的重要性"><a href="#连续内存的重要性" class="headerlink" title="连续内存的重要性"></a>连续内存的重要性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">arr_c = np.ones((<span class="number">1000</span>, <span class="number">1000</span>), order=<span class="string">'C'</span>)</div><div class="line">arr_f = np.ones((<span class="number">1000</span>, <span class="number">1000</span>), order=<span class="string">'F'</span>)</div><div class="line">arr_c.flags</div><div class="line">arr_f.flags</div><div class="line">arr_f.flags.f_contiguous</div></pre></td></tr></table></figure><pre><code>  C_CONTIGUOUS : True
  F_CONTIGUOUS : False
  OWNDATA : True
  WRITEABLE : True
  ALIGNED : True
  UPDATEIFCOPY : False






  C_CONTIGUOUS : False
  F_CONTIGUOUS : True
  OWNDATA : True
  WRITEABLE : True
  ALIGNED : True
  UPDATEIFCOPY : False






True
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">%timeit arr_c.sum(<span class="number">1</span>)</div><div class="line">%timeit arr_f.sum(<span class="number">1</span>)</div></pre></td></tr></table></figure><pre><code>1000 loops, best of 3: 848 µs per loop
1000 loops, best of 3: 582 µs per loop
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr_f.copy(<span class="string">'C'</span>).flags</div></pre></td></tr></table></figure><pre><code>  C_CONTIGUOUS : True
  F_CONTIGUOUS : False
  OWNDATA : True
  WRITEABLE : True
  ALIGNED : True
  UPDATEIFCOPY : False
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr_c[:<span class="number">50</span>].flags.contiguous</div><div class="line">arr_c[:, :<span class="number">50</span>].flags</div></pre></td></tr></table></figure><pre><code>True






  C_CONTIGUOUS : False
  F_CONTIGUOUS : False
  OWNDATA : False
  WRITEABLE : True
  ALIGNED : True
  UPDATEIFCOPY : False
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">%xdel arr_c</div><div class="line">%xdel arr_f</div><div class="line">%cd ..</div></pre></td></tr></table></figure><pre><code>C:\Users\Ewan\Downloads
</code></pre><p>​</p><h2 id="其他加速手段-Cython-f2py-C"><a href="#其他加速手段-Cython-f2py-C" class="headerlink" title="其他加速手段: Cython, f2py, C"></a>其他加速手段: Cython, f2py, C</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">from numpy cimport ndarray, float64_t</div><div class="line"></div><div class="line">def sum_elements(ndarray[float64_t] arr):</div><div class="line">    cdef Py_ssize_t i, n = len(arr)</div><div class="line">    cdef float64_t result = 0</div><div class="line"></div><div class="line">    for i in range(n):</div><div class="line">        result += arr[i]</div><div class="line"></div><div class="line">    return result</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Numpy高级应用&quot;&gt;&lt;a href=&quot;#Numpy高级应用&quot; class=&quot;headerlink&quot; title=&quot;Numpy高级应用&quot;&gt;&lt;/a&gt;Numpy高级应用&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="pandas" scheme="http://yoursite.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>GFW Break</title>
    <link href="http://yoursite.com/2017/03/08/GFW-Break/"/>
    <id>http://yoursite.com/2017/03/08/GFW-Break/</id>
    <published>2017-03-08T13:08:27.000Z</published>
    <updated>2017-03-09T03:14:45.841Z</updated>
    
    <content type="html"><![CDATA[<p>（Beta版本， 留待以后完善）</p><hr><h1 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h1><p>百度网盘链接：<a href="http://pan.baidu.com/s/1gftCmd1" target="_blank" rel="external">http://pan.baidu.com/s/1gftCmd1</a></p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol><li><p>解压</p></li><li><p>解压后的目录如下：</p><p>​</p></li></ol><p><img src="http://o7ie0tcjk.bkt.clouddn.com/tools/shadowsocks/unzip.png" alt="unzip"></p><ol><li><p>打开软件：</p><p>​</p></li></ol><p><img src="http://o7ie0tcjk.bkt.clouddn.com/tools/shadowsocks/open.png" alt="open"></p><ol><li><p>界面如下：</p><p>​</p><p><img src="http://o7ie0tcjk.bkt.clouddn.com/tools/shadowsocks/menu.png" alt="menu"></p><p>​</p><p>​</p></li></ol><p>这里需要填一些东西：</p><ol><li>Server IP</li><li>Server Port</li><li>Password</li></ol><p>具体值（sscat.txt）我放在了网盘里，链接：<a href="http://pan.baidu.com/s/1gftCmd1" target="_blank" rel="external">http://pan.baidu.com/s/1gftCmd1</a></p><ol><li><p>启动软件：</p><p>​</p><p><img src="http://o7ie0tcjk.bkt.clouddn.com/tools/shadowsocks/start.png" alt="start"></p><p>​</p></li></ol><p>右键这个小飞机图标（可能你的颜色看起来不一样，是暗蓝色），会出现如下界面：</p><p><img src="http://o7ie0tcjk.bkt.clouddn.com/tools/shadowsocks/setting.png" alt="setting"></p><p>勾选上第一项，然后将鼠标移到第二项上：</p><p><img src="http://o7ie0tcjk.bkt.clouddn.com/tools/shadowsocks/pac.png" alt="pac"></p><p>选择PAC模式（这个模式会自动检测你所进入的网站是否需要翻墙，所以选择这个模式就可以了，如果不行的话，勾选下面的Global即可）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（Beta版本， 留待以后完善）&lt;/p&gt;&lt;hr&gt;&lt;h1 id=&quot;软件下载&quot;&gt;&lt;a href=&quot;#软件下载&quot; class=&quot;headerlink&quot; title=&quot;软件下载&quot;&gt;&lt;/a&gt;软件下载&lt;/h1&gt;&lt;p&gt;百度网盘链接：&lt;a href=&quot;http://pan.baidu.co
    
    </summary>
    
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>python data analysis learning note Ch10</title>
    <link href="http://yoursite.com/2017/03/08/python-data-analysis-learning-note-Ch10/"/>
    <id>http://yoursite.com/2017/03/08/python-data-analysis-learning-note-Ch10/</id>
    <published>2017-03-08T09:16:30.000Z</published>
    <updated>2017-03-08T09:24:48.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> randn</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">pd.options.display.max_rows = <span class="number">12</span></div><div class="line">np.set_printoptions(precision=<span class="number">4</span>, suppress=<span class="keyword">True</span>)</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">plt.rc(<span class="string">'figure'</span>, figsize=(<span class="number">12</span>, <span class="number">4</span>))</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</div><div class="line">InteractiveShell.ast_node_interactivity = <span class="string">"all"</span></div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%matplotlib inline</div></pre></td></tr></table></figure><h2 id="日期和时间数据类型及工具"><a href="#日期和时间数据类型及工具" class="headerlink" title="日期和时间数据类型及工具"></a>日期和时间数据类型及工具</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line">now = datetime.now()</div><div class="line">now</div></pre></td></tr></table></figure><pre><code>datetime.datetime(2017, 3, 8, 14, 47, 50, 32019)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">now.year, now.month, now.day</div></pre></td></tr></table></figure><pre><code>(2017, 3, 8)
</code></pre><p>返回值（天数，秒数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">delta = datetime(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">7</span>) - datetime(<span class="number">2008</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">8</span>, <span class="number">15</span>)</div><div class="line">delta</div></pre></td></tr></table></figure><pre><code>datetime.timedelta(926, 56700)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delta.days</div></pre></td></tr></table></figure><pre><code>926
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delta.seconds</div></pre></td></tr></table></figure><pre><code>56700
</code></pre><p><code>timedelta</code> 天数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</div><div class="line">start = datetime(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">7</span>)</div><div class="line">start + timedelta(<span class="number">12</span>)</div></pre></td></tr></table></figure><pre><code>datetime.datetime(2011, 1, 19, 0, 0)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">start - <span class="number">2</span> * timedelta(<span class="number">12</span>)</div></pre></td></tr></table></figure><pre><code>datetime.datetime(2010, 12, 14, 0, 0)
</code></pre><h3 id="字符串和datatime的相互转换"><a href="#字符串和datatime的相互转换" class="headerlink" title="字符串和datatime的相互转换"></a>字符串和<code>datatime</code>的相互转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stamp = datetime(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure><p>使用<code>str</code>直接转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">str(stamp)</div></pre></td></tr></table></figure><pre><code>&#39;2011-01-03 00:00:00&#39;
</code></pre><p>格式化转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stamp.strftime(<span class="string">'%Y-%m-%d'</span>)</div></pre></td></tr></table></figure><pre><code>&#39;2011-01-03&#39;
</code></pre><p>逆转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">value = <span class="string">'2011-01-03'</span></div><div class="line">datetime.strptime(value, <span class="string">'%Y-%m-%d'</span>)</div></pre></td></tr></table></figure><pre><code>datetime.datetime(2011, 1, 3, 0, 0)
</code></pre><p>批量转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">datestrs = [<span class="string">'7/6/2011'</span>, <span class="string">'8/6/2011'</span>]</div><div class="line">[datetime.strptime(x, <span class="string">'%m/%d/%Y'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> datestrs]</div></pre></td></tr></table></figure><pre><code>[datetime.datetime(2011, 7, 6, 0, 0), datetime.datetime(2011, 8, 6, 0, 0)]
</code></pre><p>总是写格式很麻烦，直接调用<code>parser</code>解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> dateutil.parser <span class="keyword">import</span> parse</div><div class="line">parse(<span class="string">'2011-01-03'</span>)</div></pre></td></tr></table></figure><pre><code>datetime.datetime(2011, 1, 3, 0, 0)
</code></pre><p>可以解析任意格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">parse(<span class="string">'Jan 31, 1997 10:45 PM'</span>)</div></pre></td></tr></table></figure><pre><code>datetime.datetime(1997, 1, 31, 22, 45)
</code></pre><p>指定格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">parse(<span class="string">'6/12/2011'</span>, dayfirst=<span class="keyword">True</span>)</div></pre></td></tr></table></figure><pre><code>datetime.datetime(2011, 12, 6, 0, 0)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">datestrs</div></pre></td></tr></table></figure><pre><code>[&#39;7/6/2011&#39;, &#39;8/6/2011&#39;]
</code></pre><p><code>pandas</code>的<code>API</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pd.to_datetime(datestrs)</div><div class="line"><span class="comment"># note: output changed (no '00:00:00' anymore)</span></div></pre></td></tr></table></figure><pre><code>DatetimeIndex([&#39;2011-07-06&#39;, &#39;2011-08-06&#39;], dtype=&#39;datetime64[ns]&#39;, freq=None)
</code></pre><p><code>None</code>也可以转换，只不过会变成缺失值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">idx = pd.to_datetime(datestrs + [<span class="keyword">None</span>])</div><div class="line">idx</div></pre></td></tr></table></figure><pre><code>DatetimeIndex([&#39;2011-07-06&#39;, &#39;2011-08-06&#39;, &#39;NaT&#39;], dtype=&#39;datetime64[ns]&#39;, freq=None)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">idx[<span class="number">2</span>]</div></pre></td></tr></table></figure><pre><code>NaT
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pd.isnull(idx)</div></pre></td></tr></table></figure><pre><code>array([False, False,  True], dtype=bool)
</code></pre><h2 id="时间序列基础"><a href="#时间序列基础" class="headerlink" title="时间序列基础"></a>时间序列基础</h2><p>将行索引变成时间类型，也就是时间戳</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line">dates = [datetime(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">2</span>), datetime(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">5</span>), datetime(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">7</span>),</div><div class="line">         datetime(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">8</span>), datetime(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">10</span>), datetime(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">12</span>)]</div><div class="line">ts = Series(np.random.randn(<span class="number">6</span>), index=dates)</div><div class="line">ts</div></pre></td></tr></table></figure><pre><code>2011-01-02   -0.296854
2011-01-05   -1.968663
2011-01-07   -0.484492
2011-01-08   -0.517927
2011-01-10   -0.348697
2011-01-12    0.102276
dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">type(ts)</div><div class="line"><span class="comment"># note: output changed to "pandas.core.series.Series"</span></div></pre></td></tr></table></figure><pre><code>pandas.core.series.Series
</code></pre><p>拥有一个特定的类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.index</div></pre></td></tr></table></figure><pre><code>DatetimeIndex([&#39;2011-01-02&#39;, &#39;2011-01-05&#39;, &#39;2011-01-07&#39;, &#39;2011-01-08&#39;,
               &#39;2011-01-10&#39;, &#39;2011-01-12&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=None)
</code></pre><p>可以直接进行加法运算，相同的时间戳会进行匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts + ts[::<span class="number">2</span>]</div></pre></td></tr></table></figure><pre><code>2011-01-02   -0.593708
2011-01-05         NaN
2011-01-07   -0.968984
2011-01-08         NaN
2011-01-10   -0.697394
2011-01-12         NaN
dtype: float64
</code></pre><p>以纳秒形式存储时间戳</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ts.index.dtype</div><div class="line"><span class="comment"># note: output changed from dtype('datetime64[ns]') to dtype('&lt;M8[ns]')</span></div></pre></td></tr></table></figure><pre><code>dtype(&#39;&lt;M8[ns]&#39;)
</code></pre><p>行索引就会变成时间戳类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">stamp = ts.index[<span class="number">0</span>]</div><div class="line">stamp</div><div class="line"><span class="comment"># note: output changed from &lt;Timestamp: 2011-01-02 00:00:00&gt; to Timestamp('2011-01-02 00:00:00')</span></div></pre></td></tr></table></figure><pre><code>Timestamp(&#39;2011-01-02 00:00:00&#39;)
</code></pre><h3 id="索引、选取、子集构造"><a href="#索引、选取、子集构造" class="headerlink" title="索引、选取、子集构造"></a>索引、选取、子集构造</h3><p>时间戳索引与正常索引行为一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">stamp = ts.index[<span class="number">2</span>]</div><div class="line">ts[stamp]</div></pre></td></tr></table></figure><pre><code>-0.4844920247591406
</code></pre><p>可以直接通过传入与行索引相匹配的时间戳进行索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts[<span class="string">'1/10/2011'</span>]</div></pre></td></tr></table></figure><pre><code>-0.34869693931763396
</code></pre><p>换个格式也可以，会自动转换为<code>datatime</code>，只要最后转换成的时间戳是相同的，任意格式都可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts[<span class="string">'20110110'</span>]</div></pre></td></tr></table></figure><pre><code>-0.34869693931763396
</code></pre><p>通过<code>periods</code>参数来指定往后顺延的时间长短</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">longer_ts = Series(np.random.randn(<span class="number">1000</span>),</div><div class="line">                   index=pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">1000</span>))</div><div class="line">longer_ts</div></pre></td></tr></table></figure><pre><code>2000-01-01    0.871808
2000-01-02   -0.025158
2000-01-03    0.132813
2000-01-04   -2.006494
2000-01-05   -0.988423
2000-01-06    0.775930
                ...   
2002-09-21   -0.186519
2002-09-22    0.881745
2002-09-23   -1.335826
2002-09-24    0.418774
2002-09-25    0.970405
2002-09-26    0.636320
Freq: D, dtype: float64
</code></pre><p>时间戳的特殊之处在于可以进行年份以及月份等的选取，相当于一个多维索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">longer_ts[<span class="string">'2001'</span>]</div></pre></td></tr></table></figure><pre><code>2001-01-01   -1.799866
2001-01-02    0.499890
2001-01-03   -0.409970
2001-01-04   -0.808111
2001-01-05   -1.220433
2001-01-06    0.581235
                ...   
2001-12-26   -0.312186
2001-12-27   -0.804940
2001-12-28   -0.572741
2001-12-29   -0.175605
2001-12-30    0.693675
2001-12-31   -0.196274
Freq: D, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">longer_ts[<span class="string">'2001-05'</span>]</div></pre></td></tr></table></figure><pre><code>2001-05-01   -2.783535
2001-05-02    1.386292
2001-05-03    0.153705
2001-05-04   -0.571590
2001-05-05   -0.933012
2001-05-06    0.579244
                ...   
2001-05-26    0.080809
2001-05-27    0.652650
2001-05-28    0.862616
2001-05-29   -0.967580
2001-05-30    0.907069
2001-05-31    0.551137
Freq: D, dtype: float64
</code></pre><p>同样可以进行切片，只不过是按照时间的先后度量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts[datetime(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">7</span>):]</div></pre></td></tr></table></figure><pre><code>2011-01-07   -0.484492
2011-01-08   -0.517927
2011-01-10   -0.348697
2011-01-12    0.102276
dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts</div></pre></td></tr></table></figure><pre><code>2011-01-02   -0.296854
2011-01-05   -1.968663
2011-01-07   -0.484492
2011-01-08   -0.517927
2011-01-10   -0.348697
2011-01-12    0.102276
dtype: float64
</code></pre><p>而且切片不需要进行索引匹配，只需要指定时间范围即可切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts[<span class="string">'1/6/2011'</span>:<span class="string">'1/11/2011'</span>]</div></pre></td></tr></table></figure><pre><code>2011-01-07   -0.484492
2011-01-08   -0.517927
2011-01-10   -0.348697
dtype: float64
</code></pre><p>一个可以实现同样功能的内置方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.truncate(after=<span class="string">'1/9/2011'</span>)</div></pre></td></tr></table></figure><pre><code>2011-01-02   -0.296854
2011-01-05   -1.968663
2011-01-07   -0.484492
2011-01-08   -0.517927
dtype: float64
</code></pre><p>这里的<code>freq</code>参数指定了选取的频率，这里的是每一个星期三</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dates = pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">100</span>, freq=<span class="string">'W-WED'</span>)</div><div class="line">long_df = DataFrame(np.random.randn(<span class="number">100</span>, <span class="number">4</span>),</div><div class="line">                    index=dates,</div><div class="line">                    columns=[<span class="string">'Colorado'</span>, <span class="string">'Texas'</span>, <span class="string">'New York'</span>, <span class="string">'Ohio'</span>])</div><div class="line">long_df.ix[<span class="string">'5-2001'</span>]</div></pre></td></tr></table></figure><div><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>Colorado</th><th>Texas</th><th>New York</th><th>Ohio</th></tr></thead><tbody><tr><th>2001-05-02</th><td>0.506207</td><td>-1.116218</td><td>0.656575</td><td>0.212606</td></tr><tr><th>2001-05-09</th><td>-1.306963</td><td>-0.054373</td><td>-1.165053</td><td>-1.319361</td></tr><tr><th>2001-05-16</th><td>0.891692</td><td>-0.463900</td><td>1.642267</td><td>0.644972</td></tr><tr><th>2001-05-23</th><td>-0.025283</td><td>2.363886</td><td>-0.367988</td><td>0.827882</td></tr><tr><th>2001-05-30</th><td>-1.501301</td><td>-2.534553</td><td>0.256369</td><td>0.268207</td></tr></tbody></table></div><h3 id="带有重复索引的时间序列"><a href="#带有重复索引的时间序列" class="headerlink" title="带有重复索引的时间序列"></a>带有重复索引的时间序列</h3><p>直接创建时间戳索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dates = pd.DatetimeIndex([<span class="string">'1/1/2000'</span>, <span class="string">'1/2/2000'</span>, <span class="string">'1/2/2000'</span>, <span class="string">'1/2/2000'</span>,</div><div class="line">                          <span class="string">'1/3/2000'</span>])</div><div class="line">dup_ts = Series(np.arange(<span class="number">5</span>), index=dates)</div><div class="line">dup_ts</div></pre></td></tr></table></figure><pre><code>2000-01-01    0
2000-01-02    1
2000-01-02    2
2000-01-02    3
2000-01-03    4
dtype: int32
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dup_ts.index.is_unique</div></pre></td></tr></table></figure><pre><code>False
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dup_ts[<span class="string">'1/3/2000'</span>]  <span class="comment"># not duplicated</span></div></pre></td></tr></table></figure><pre><code>4
</code></pre><p>如果有重复的时间索引，则会将满足条件的全部输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dup_ts[<span class="string">'1/2/2000'</span>]  <span class="comment"># duplicated</span></div></pre></td></tr></table></figure><pre><code>2000-01-02    1
2000-01-02    2
2000-01-02    3
dtype: int32
</code></pre><p>因此可以直接根据时间戳进行索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grouped = dup_ts.groupby(level=<span class="number">0</span>)</div><div class="line">grouped.mean()</div></pre></td></tr></table></figure><pre><code>2000-01-01    0
2000-01-02    2
2000-01-03    4
dtype: int32
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grouped.count()</div></pre></td></tr></table></figure><pre><code>2000-01-01    1
2000-01-02    3
2000-01-03    1
dtype: int64
</code></pre><h2 id="日期的范围、频率以及移动"><a href="#日期的范围、频率以及移动" class="headerlink" title="日期的范围、频率以及移动"></a>日期的范围、频率以及移动</h2><p><code>pandas</code>中的时间序列一般被认为是不规则的，也就是说没有固定的频率。但是有时候需要以某种相对固定的频率进行分析，比如每日、每月、每15分钟等（这样自然会在时间序列中引入缺失值）。<code>pandas</code>拥有一整套标准时间序列频率以及用于重采样、频率推断、生成固定频率日期范围的工具</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts</div></pre></td></tr></table></figure><pre><code>2011-01-02   -0.296854
2011-01-05   -1.968663
2011-01-07   -0.484492
2011-01-08   -0.517927
2011-01-10   -0.348697
2011-01-12    0.102276
dtype: float64
</code></pre><p>例如，我们可以将之前那个时间序列转换为一个具有固定频率（每日）的时间序列。只需要调用resample即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.resample(<span class="string">'D'</span>).mean()</div></pre></td></tr></table></figure><pre><code>2011-01-02   -0.296854
2011-01-03         NaN
2011-01-04         NaN
2011-01-05   -1.968663
2011-01-06         NaN
2011-01-07   -0.484492
2011-01-08   -0.517927
2011-01-09         NaN
2011-01-10   -0.348697
2011-01-11         NaN
2011-01-12    0.102276
Freq: D, dtype: float64
</code></pre><h3 id="生成日期范围"><a href="#生成日期范围" class="headerlink" title="生成日期范围"></a>生成日期范围</h3><p><code>data_range</code>函数， 指定始末</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">index = pd.date_range(<span class="string">'4/1/2012'</span>, <span class="string">'6/1/2012'</span>)</div><div class="line">index</div></pre></td></tr></table></figure><pre><code>DatetimeIndex([&#39;2012-04-01&#39;, &#39;2012-04-02&#39;, &#39;2012-04-03&#39;, &#39;2012-04-04&#39;,
               &#39;2012-04-05&#39;, &#39;2012-04-06&#39;, &#39;2012-04-07&#39;, &#39;2012-04-08&#39;,
               &#39;2012-04-09&#39;, &#39;2012-04-10&#39;, &#39;2012-04-11&#39;, &#39;2012-04-12&#39;,
               &#39;2012-04-13&#39;, &#39;2012-04-14&#39;, &#39;2012-04-15&#39;, &#39;2012-04-16&#39;,
               &#39;2012-04-17&#39;, &#39;2012-04-18&#39;, &#39;2012-04-19&#39;, &#39;2012-04-20&#39;,
               &#39;2012-04-21&#39;, &#39;2012-04-22&#39;, &#39;2012-04-23&#39;, &#39;2012-04-24&#39;,
               &#39;2012-04-25&#39;, &#39;2012-04-26&#39;, &#39;2012-04-27&#39;, &#39;2012-04-28&#39;,
               &#39;2012-04-29&#39;, &#39;2012-04-30&#39;, &#39;2012-05-01&#39;, &#39;2012-05-02&#39;,
               &#39;2012-05-03&#39;, &#39;2012-05-04&#39;, &#39;2012-05-05&#39;, &#39;2012-05-06&#39;,
               &#39;2012-05-07&#39;, &#39;2012-05-08&#39;, &#39;2012-05-09&#39;, &#39;2012-05-10&#39;,
               &#39;2012-05-11&#39;, &#39;2012-05-12&#39;, &#39;2012-05-13&#39;, &#39;2012-05-14&#39;,
               &#39;2012-05-15&#39;, &#39;2012-05-16&#39;, &#39;2012-05-17&#39;, &#39;2012-05-18&#39;,
               &#39;2012-05-19&#39;, &#39;2012-05-20&#39;, &#39;2012-05-21&#39;, &#39;2012-05-22&#39;,
               &#39;2012-05-23&#39;, &#39;2012-05-24&#39;, &#39;2012-05-25&#39;, &#39;2012-05-26&#39;,
               &#39;2012-05-27&#39;, &#39;2012-05-28&#39;, &#39;2012-05-29&#39;, &#39;2012-05-30&#39;,
               &#39;2012-05-31&#39;, &#39;2012-06-01&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;)
</code></pre><p>只指定起始， 以及长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pd.date_range(start=<span class="string">'4/1/2012'</span>, periods=<span class="number">20</span>)</div></pre></td></tr></table></figure><pre><code>DatetimeIndex([&#39;2012-04-01&#39;, &#39;2012-04-02&#39;, &#39;2012-04-03&#39;, &#39;2012-04-04&#39;,
               &#39;2012-04-05&#39;, &#39;2012-04-06&#39;, &#39;2012-04-07&#39;, &#39;2012-04-08&#39;,
               &#39;2012-04-09&#39;, &#39;2012-04-10&#39;, &#39;2012-04-11&#39;, &#39;2012-04-12&#39;,
               &#39;2012-04-13&#39;, &#39;2012-04-14&#39;, &#39;2012-04-15&#39;, &#39;2012-04-16&#39;,
               &#39;2012-04-17&#39;, &#39;2012-04-18&#39;, &#39;2012-04-19&#39;, &#39;2012-04-20&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;)
</code></pre><p>只指定结尾，以及长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pd.date_range(end=<span class="string">'6/1/2012'</span>, periods=<span class="number">20</span>)</div></pre></td></tr></table></figure><pre><code>DatetimeIndex([&#39;2012-05-13&#39;, &#39;2012-05-14&#39;, &#39;2012-05-15&#39;, &#39;2012-05-16&#39;,
               &#39;2012-05-17&#39;, &#39;2012-05-18&#39;, &#39;2012-05-19&#39;, &#39;2012-05-20&#39;,
               &#39;2012-05-21&#39;, &#39;2012-05-22&#39;, &#39;2012-05-23&#39;, &#39;2012-05-24&#39;,
               &#39;2012-05-25&#39;, &#39;2012-05-26&#39;, &#39;2012-05-27&#39;, &#39;2012-05-28&#39;,
               &#39;2012-05-29&#39;, &#39;2012-05-30&#39;, &#39;2012-05-31&#39;, &#39;2012-06-01&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;)
</code></pre><p>指定始末，以及采样频率， <code>BM = business end of month</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pd.date_range(<span class="string">'1/1/2000'</span>, <span class="string">'12/1/2000'</span>, freq=<span class="string">'BM'</span>)</div></pre></td></tr></table></figure><pre><code>DatetimeIndex([&#39;2000-01-31&#39;, &#39;2000-02-29&#39;, &#39;2000-03-31&#39;, &#39;2000-04-28&#39;,
               &#39;2000-05-31&#39;, &#39;2000-06-30&#39;, &#39;2000-07-31&#39;, &#39;2000-08-31&#39;,
               &#39;2000-09-29&#39;, &#39;2000-10-31&#39;, &#39;2000-11-30&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;BM&#39;)
</code></pre><p>默认peroids指的是天数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pd.date_range(<span class="string">'5/2/2012 12:56:31'</span>, periods=<span class="number">5</span>)</div></pre></td></tr></table></figure><pre><code>DatetimeIndex([&#39;2012-05-02 12:56:31&#39;, &#39;2012-05-03 12:56:31&#39;,
               &#39;2012-05-04 12:56:31&#39;, &#39;2012-05-05 12:56:31&#39;,
               &#39;2012-05-06 12:56:31&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;)
</code></pre><p>可以省略时间戳</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pd.date_range(<span class="string">'5/2/2012 12:56:31'</span>, periods=<span class="number">5</span>, normalize=<span class="keyword">True</span>)</div></pre></td></tr></table></figure><pre><code>DatetimeIndex([&#39;2012-05-02&#39;, &#39;2012-05-03&#39;, &#39;2012-05-04&#39;, &#39;2012-05-05&#39;,
               &#39;2012-05-06&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;)
</code></pre><h3 id="频率和日期偏移量"><a href="#频率和日期偏移量" class="headerlink" title="频率和日期偏移量"></a>频率和日期偏移量</h3><p>偏移量可以采用特定单位的时间对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pandas.tseries.offsets <span class="keyword">import</span> Hour, Minute</div><div class="line">hour = Hour()</div><div class="line">hour</div></pre></td></tr></table></figure><pre><code>&lt;Hour&gt;
</code></pre><p>4个小时，简单粗暴</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">four_hours = Hour(<span class="number">4</span>)</div><div class="line">four_hours</div></pre></td></tr></table></figure><pre><code>&lt;4 * Hours&gt;
</code></pre><p>每隔四个小时进行采样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pd.date_range(<span class="string">'1/1/2000'</span>, <span class="string">'1/3/2000 23:59'</span>, freq=<span class="string">'4h'</span>)</div></pre></td></tr></table></figure><pre><code>DatetimeIndex([&#39;2000-01-01 00:00:00&#39;, &#39;2000-01-01 04:00:00&#39;,
               &#39;2000-01-01 08:00:00&#39;, &#39;2000-01-01 12:00:00&#39;,
               &#39;2000-01-01 16:00:00&#39;, &#39;2000-01-01 20:00:00&#39;,
               &#39;2000-01-02 00:00:00&#39;, &#39;2000-01-02 04:00:00&#39;,
               &#39;2000-01-02 08:00:00&#39;, &#39;2000-01-02 12:00:00&#39;,
               &#39;2000-01-02 16:00:00&#39;, &#39;2000-01-02 20:00:00&#39;,
               &#39;2000-01-03 00:00:00&#39;, &#39;2000-01-03 04:00:00&#39;,
               &#39;2000-01-03 08:00:00&#39;, &#39;2000-01-03 12:00:00&#39;,
               &#39;2000-01-03 16:00:00&#39;, &#39;2000-01-03 20:00:00&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;4H&#39;)
</code></pre><p>两个半小时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hour(<span class="number">2</span>) + Minute(<span class="number">30</span>)</div></pre></td></tr></table></figure><pre><code>&lt;150 * Minutes&gt;
</code></pre><p>也可以直接使用这种类似于自然语言的形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">10</span>, freq=<span class="string">'1h30min'</span>)</div></pre></td></tr></table></figure><pre><code>DatetimeIndex([&#39;2000-01-01 00:00:00&#39;, &#39;2000-01-01 01:30:00&#39;,
               &#39;2000-01-01 03:00:00&#39;, &#39;2000-01-01 04:30:00&#39;,
               &#39;2000-01-01 06:00:00&#39;, &#39;2000-01-01 07:30:00&#39;,
               &#39;2000-01-01 09:00:00&#39;, &#39;2000-01-01 10:30:00&#39;,
               &#39;2000-01-01 12:00:00&#39;, &#39;2000-01-01 13:30:00&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;90T&#39;)
</code></pre><h4 id="Week-of-month-dates-（WOM日期）"><a href="#Week-of-month-dates-（WOM日期）" class="headerlink" title="Week of month dates （WOM日期）"></a>Week of month dates （WOM日期）</h4><p>每月第三个星期五</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rng = pd.date_range(<span class="string">'1/1/2012'</span>, <span class="string">'9/1/2012'</span>, freq=<span class="string">'WOM-3FRI'</span>)</div><div class="line">list(rng)</div></pre></td></tr></table></figure><pre><code>[Timestamp(&#39;2012-01-20 00:00:00&#39;, offset=&#39;WOM-3FRI&#39;),
 Timestamp(&#39;2012-02-17 00:00:00&#39;, offset=&#39;WOM-3FRI&#39;),
 Timestamp(&#39;2012-03-16 00:00:00&#39;, offset=&#39;WOM-3FRI&#39;),
 Timestamp(&#39;2012-04-20 00:00:00&#39;, offset=&#39;WOM-3FRI&#39;),
 Timestamp(&#39;2012-05-18 00:00:00&#39;, offset=&#39;WOM-3FRI&#39;),
 Timestamp(&#39;2012-06-15 00:00:00&#39;, offset=&#39;WOM-3FRI&#39;),
 Timestamp(&#39;2012-07-20 00:00:00&#39;, offset=&#39;WOM-3FRI&#39;),
 Timestamp(&#39;2012-08-17 00:00:00&#39;, offset=&#39;WOM-3FRI&#39;)]
</code></pre><h3 id="移动（超前或滞后）数据"><a href="#移动（超前或滞后）数据" class="headerlink" title="移动（超前或滞后）数据"></a>移动（超前或滞后）数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ts = Series(np.random.randn(<span class="number">4</span>),</div><div class="line">            index=pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">4</span>, freq=<span class="string">'M'</span>))</div><div class="line">ts</div></pre></td></tr></table></figure><pre><code>2000-01-31    1.294798
2000-02-29   -1.907732
2000-03-31   -1.407750
2000-04-30    0.544825
Freq: M, dtype: float64
</code></pre><p>整体数据前移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.shift(<span class="number">2</span>)</div></pre></td></tr></table></figure><pre><code>2000-01-31         NaN
2000-02-29         NaN
2000-03-31    1.294798
2000-04-30   -1.907732
Freq: M, dtype: float64
</code></pre><p>整体数据后移，有点类似于位运算中的移位操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.shift(<span class="number">-2</span>)</div></pre></td></tr></table></figure><pre><code>2000-01-31   -1.407750
2000-02-29    0.544825
2000-03-31         NaN
2000-04-30         NaN
Freq: M, dtype: float64
</code></pre><p>移位之后数据对齐</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts / ts.shift(<span class="number">1</span>) - <span class="number">1</span></div></pre></td></tr></table></figure><pre><code>2000-01-31         NaN
2000-02-29   -2.473382
2000-03-31   -0.262082
2000-04-30   -1.387018
Freq: M, dtype: float64
</code></pre><p>加入<code>freq</code>之后就是在行索引上进行时间前移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.shift(<span class="number">2</span>, freq=<span class="string">'M'</span>)</div></pre></td></tr></table></figure><pre><code>2000-03-31    1.294798
2000-04-30   -1.907732
2000-05-31   -1.407750
2000-06-30    0.544825
Freq: M, dtype: float64
</code></pre><p>在天数上进行前移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.shift(<span class="number">3</span>, freq=<span class="string">'D'</span>)</div></pre></td></tr></table></figure><pre><code>2000-02-03    1.294798
2000-03-03   -1.907732
2000-04-03   -1.407750
2000-05-03    0.544825
dtype: float64
</code></pre><p>另一种实现方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.shift(<span class="number">1</span>, freq=<span class="string">'3D'</span>)</div></pre></td></tr></table></figure><pre><code>2000-02-03    1.294798
2000-03-03   -1.907732
2000-04-03   -1.407750
2000-05-03    0.544825
dtype: float64
</code></pre><p>换一个频率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.shift(<span class="number">1</span>, freq=<span class="string">'90T'</span>)</div></pre></td></tr></table></figure><pre><code>2000-01-31 01:30:00    1.294798
2000-02-29 01:30:00   -1.907732
2000-03-31 01:30:00   -1.407750
2000-04-30 01:30:00    0.544825
Freq: M, dtype: float64
</code></pre><h4 id="通过偏移量对日期进行位移"><a href="#通过偏移量对日期进行位移" class="headerlink" title="通过偏移量对日期进行位移"></a>通过偏移量对日期进行位移</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pandas.tseries.offsets <span class="keyword">import</span> Day, MonthEnd</div><div class="line">now = datetime(<span class="number">2011</span>, <span class="number">11</span>, <span class="number">17</span>)</div><div class="line">now + <span class="number">3</span> * Day()</div></pre></td></tr></table></figure><pre><code>Timestamp(&#39;2011-11-20 00:00:00&#39;)
</code></pre><p>直接移位到月末，是一个相对位移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">now + MonthEnd()</div></pre></td></tr></table></figure><pre><code>Timestamp(&#39;2011-11-30 00:00:00&#39;)
</code></pre><p>传入的参数表示第几个月的月末</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">now + MonthEnd(<span class="number">2</span>)</div></pre></td></tr></table></figure><pre><code>Timestamp(&#39;2011-12-31 00:00:00&#39;)
</code></pre><p>换一种方式实现，“主语”不同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">offset = MonthEnd()</div><div class="line">offset.rollforward(now)</div></pre></td></tr></table></figure><pre><code>Timestamp(&#39;2011-11-30 00:00:00&#39;)
</code></pre><p>往回走，上一个月的月末</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">offset.rollback(now)</div></pre></td></tr></table></figure><pre><code>Timestamp(&#39;2011-10-31 00:00:00&#39;)
</code></pre><p>对日期进行移位之后分组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ts = Series(np.random.randn(<span class="number">20</span>),</div><div class="line">            index=pd.date_range(<span class="string">'1/15/2000'</span>, periods=<span class="number">20</span>, freq=<span class="string">'4d'</span>))</div><div class="line">ts.groupby(offset.rollforward).mean()</div></pre></td></tr></table></figure><pre><code>2000-01-31   -0.610639
2000-02-29    0.029121
2000-03-31   -0.089587
dtype: float64
</code></pre><p>另一种方式也可以达到相同的效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.resample(<span class="string">'M'</span>, how=<span class="string">'mean'</span>)</div></pre></td></tr></table></figure><pre><code>C:\Users\Ewan\Anaconda3\lib\site-packages\ipykernel\__main__.py:1: FutureWarning: how in .resample() is deprecated
the new syntax is .resample(...).mean()
  if __name__ == &#39;__main__&#39;:





2000-01-31   -0.610639
2000-02-29    0.029121
2000-03-31   -0.089587
Freq: M, dtype: float64
</code></pre><h2 id="时区处理"><a href="#时区处理" class="headerlink" title="时区处理"></a>时区处理</h2><p>显示一些时区</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pytz</div><div class="line">pytz.common_timezones[<span class="number">-5</span>:]</div></pre></td></tr></table></figure><pre><code>[&#39;US/Eastern&#39;, &#39;US/Hawaii&#39;, &#39;US/Mountain&#39;, &#39;US/Pacific&#39;, &#39;UTC&#39;]
</code></pre><p>显示某个时区的具体信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tz = pytz.timezone(<span class="string">'US/Eastern'</span>)</div><div class="line">tz</div></pre></td></tr></table></figure><pre><code>&lt;DstTzInfo &#39;US/Eastern&#39; LMT-1 day, 19:04:00 STD&gt;
</code></pre><h3 id="本地化和转换"><a href="#本地化和转换" class="headerlink" title="本地化和转换"></a>本地化和转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rng = pd.date_range(<span class="string">'3/9/2012 9:30'</span>, periods=<span class="number">6</span>, freq=<span class="string">'D'</span>)</div><div class="line">ts = Series(np.random.randn(len(rng)), index=rng)</div><div class="line">ts</div></pre></td></tr></table></figure><pre><code>2012-03-09 09:30:00    0.065144
2012-03-10 09:30:00   -0.391505
2012-03-11 09:30:00    1.207495
2012-03-12 09:30:00    1.516354
2012-03-13 09:30:00   -0.253149
2012-03-14 09:30:00   -0.768138
Freq: D, dtype: float64
</code></pre><p>没有指定时区的时候默认时区为None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(ts.index.tz)</div></pre></td></tr></table></figure><pre><code>None
</code></pre><p>​</p><p>指定时区</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pd.date_range(<span class="string">'3/9/2012 9:30'</span>, periods=<span class="number">10</span>, freq=<span class="string">'D'</span>, tz=<span class="string">'UTC'</span>)</div></pre></td></tr></table></figure><pre><code>DatetimeIndex([&#39;2012-03-09 09:30:00+00:00&#39;, &#39;2012-03-10 09:30:00+00:00&#39;,
               &#39;2012-03-11 09:30:00+00:00&#39;, &#39;2012-03-12 09:30:00+00:00&#39;,
               &#39;2012-03-13 09:30:00+00:00&#39;, &#39;2012-03-14 09:30:00+00:00&#39;,
               &#39;2012-03-15 09:30:00+00:00&#39;, &#39;2012-03-16 09:30:00+00:00&#39;,
               &#39;2012-03-17 09:30:00+00:00&#39;, &#39;2012-03-18 09:30:00+00:00&#39;],
              dtype=&#39;datetime64[ns, UTC]&#39;, freq=&#39;D&#39;)
</code></pre><p>进行时区的转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ts_utc = ts.tz_localize(<span class="string">'UTC'</span>)</div><div class="line">ts_utc</div></pre></td></tr></table></figure><pre><code>2012-03-09 09:30:00+00:00    0.065144
2012-03-10 09:30:00+00:00   -0.391505
2012-03-11 09:30:00+00:00    1.207495
2012-03-12 09:30:00+00:00    1.516354
2012-03-13 09:30:00+00:00   -0.253149
2012-03-14 09:30:00+00:00   -0.768138
Freq: D, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts_utc.index</div></pre></td></tr></table></figure><pre><code>DatetimeIndex([&#39;2012-03-09 09:30:00+00:00&#39;, &#39;2012-03-10 09:30:00+00:00&#39;,
               &#39;2012-03-11 09:30:00+00:00&#39;, &#39;2012-03-12 09:30:00+00:00&#39;,
               &#39;2012-03-13 09:30:00+00:00&#39;, &#39;2012-03-14 09:30:00+00:00&#39;],
              dtype=&#39;datetime64[ns, UTC]&#39;, freq=&#39;D&#39;)
</code></pre><p>继续转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts_utc.tz_convert(<span class="string">'US/Eastern'</span>)</div></pre></td></tr></table></figure><pre><code>2012-03-09 04:30:00-05:00    0.065144
2012-03-10 04:30:00-05:00   -0.391505
2012-03-11 05:30:00-04:00    1.207495
2012-03-12 05:30:00-04:00    1.516354
2012-03-13 05:30:00-04:00   -0.253149
2012-03-14 05:30:00-04:00   -0.768138
Freq: D, dtype: float64
</code></pre><p>依旧是转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ts_eastern = ts.tz_localize(<span class="string">'US/Eastern'</span>)</div><div class="line">ts_eastern.tz_convert(<span class="string">'UTC'</span>)</div></pre></td></tr></table></figure><pre><code>2012-03-09 14:30:00+00:00    0.065144
2012-03-10 14:30:00+00:00   -0.391505
2012-03-11 13:30:00+00:00    1.207495
2012-03-12 13:30:00+00:00    1.516354
2012-03-13 13:30:00+00:00   -0.253149
2012-03-14 13:30:00+00:00   -0.768138
Freq: D, dtype: float64
</code></pre><p>转转转</p><p>ts_eastern.tz_convert(‘Europe/Berlin’)</p><p>转换之前必须要进行本地化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.index.tz_localize(<span class="string">'Asia/Shanghai'</span>)</div></pre></td></tr></table></figure><h3 id="操作时区意识型TimeStamp对象"><a href="#操作时区意识型TimeStamp对象" class="headerlink" title="操作时区意识型TimeStamp对象"></a>操作时区意识型<code>TimeStamp</code>对象</h3><p>初始化时间戳，本地化，时区转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">stamp = pd.Timestamp(<span class="string">'2011-03-12 04:00'</span>)</div><div class="line">stamp_utc = stamp.tz_localize(<span class="string">'utc'</span>)</div><div class="line">stamp_utc.tz_convert(<span class="string">'US/Eastern'</span>)</div></pre></td></tr></table></figure><pre><code>Timestamp(&#39;2011-03-11 23:00:00-0500&#39;, tz=&#39;US/Eastern&#39;)
</code></pre><p>显式地初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">stamp_moscow = pd.Timestamp(<span class="string">'2011-03-12 04:00'</span>, tz=<span class="string">'Europe/Moscow'</span>)</div><div class="line">stamp_moscow</div></pre></td></tr></table></figure><pre><code>Timestamp(&#39;2011-03-12 04:00:00+0300&#39;, tz=&#39;Europe/Moscow&#39;)
</code></pre><p>自1970年1月1日起计算的纳秒数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stamp_utc.value</div></pre></td></tr></table></figure><pre><code>1299902400000000000
</code></pre><p>这个值是绝对的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stamp_utc.tz_convert(<span class="string">'US/Eastern'</span>).value</div></pre></td></tr></table></figure><pre><code>1299902400000000000
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 30 minutes before DST transition</span></div><div class="line"><span class="keyword">from</span> pandas.tseries.offsets <span class="keyword">import</span> Hour</div><div class="line">stamp = pd.Timestamp(<span class="string">'2012-03-12 01:30'</span>, tz=<span class="string">'US/Eastern'</span>)</div><div class="line">stamp</div></pre></td></tr></table></figure><pre><code>Timestamp(&#39;2012-03-12 01:30:00-0400&#39;, tz=&#39;US/Eastern&#39;)
</code></pre><p>进行时间的位移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stamp + Hour()</div></pre></td></tr></table></figure><pre><code>Timestamp(&#39;2012-03-12 02:30:00-0400&#39;, tz=&#39;US/Eastern&#39;)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 90 minutes before DST transition</span></div><div class="line">stamp = pd.Timestamp(<span class="string">'2012-11-04 00:30'</span>, tz=<span class="string">'US/Eastern'</span>)</div><div class="line">stamp</div></pre></td></tr></table></figure><pre><code>Timestamp(&#39;2012-11-04 00:30:00-0400&#39;, tz=&#39;US/Eastern&#39;)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stamp + <span class="number">2</span> * Hour()</div></pre></td></tr></table></figure><pre><code>Timestamp(&#39;2012-11-04 01:30:00-0500&#39;, tz=&#39;US/Eastern&#39;)
</code></pre><h3 id="不同时区之间的运算"><a href="#不同时区之间的运算" class="headerlink" title="不同时区之间的运算"></a>不同时区之间的运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rng = pd.date_range(<span class="string">'3/7/2012 9:30'</span>, periods=<span class="number">10</span>, freq=<span class="string">'B'</span>)</div><div class="line">ts = Series(np.random.randn(len(rng)), index=rng)</div><div class="line">ts</div></pre></td></tr></table></figure><pre><code>2012-03-07 09:30:00   -0.461750
2012-03-08 09:30:00    0.947394
2012-03-09 09:30:00    0.703239
2012-03-12 09:30:00    0.266519
2012-03-13 09:30:00    0.302334
2012-03-14 09:30:00   -0.000725
2012-03-15 09:30:00    0.305446
2012-03-16 09:30:00   -1.605358
2012-03-19 09:30:00    1.306474
2012-03-20 09:30:00    0.865511
Freq: B, dtype: float64
</code></pre><p>最终结果会变成<code>UTC</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ts1 = ts[:<span class="number">7</span>].tz_localize(<span class="string">'Europe/London'</span>)</div><div class="line">ts2 = ts1[<span class="number">2</span>:].tz_convert(<span class="string">'Europe/Moscow'</span>)</div><div class="line">result = ts1 + ts2</div><div class="line">result.index</div></pre></td></tr></table></figure><pre><code>DatetimeIndex([&#39;2012-03-07 09:30:00+00:00&#39;, &#39;2012-03-08 09:30:00+00:00&#39;,
               &#39;2012-03-09 09:30:00+00:00&#39;, &#39;2012-03-12 09:30:00+00:00&#39;,
               &#39;2012-03-13 09:30:00+00:00&#39;, &#39;2012-03-14 09:30:00+00:00&#39;,
               &#39;2012-03-15 09:30:00+00:00&#39;],
              dtype=&#39;datetime64[ns, UTC]&#39;, freq=&#39;B&#39;)
</code></pre><h2 id="时期及其算术运算"><a href="#时期及其算术运算" class="headerlink" title="时期及其算术运算"></a>时期及其算术运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p = pd.Period(<span class="number">2007</span>, freq=<span class="string">'A-DEC'</span>)</div><div class="line">p</div></pre></td></tr></table></figure><pre><code>Period(&#39;2007&#39;, &#39;A-DEC&#39;)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p + <span class="number">5</span></div></pre></td></tr></table></figure><pre><code>Period(&#39;2012&#39;, &#39;A-DEC&#39;)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p - <span class="number">2</span></div></pre></td></tr></table></figure><pre><code>Period(&#39;2005&#39;, &#39;A-DEC&#39;)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pd.Period(<span class="string">'2014'</span>, freq=<span class="string">'A-DEC'</span>) - p</div></pre></td></tr></table></figure><pre><code>7
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rng = pd.period_range(<span class="string">'1/1/2000'</span>, <span class="string">'6/30/2000'</span>, freq=<span class="string">'M'</span>)</div><div class="line">rng</div></pre></td></tr></table></figure><pre><code>PeriodIndex([&#39;2000-01&#39;, &#39;2000-02&#39;, &#39;2000-03&#39;, &#39;2000-04&#39;, &#39;2000-05&#39;, &#39;2000-06&#39;], dtype=&#39;int64&#39;, freq=&#39;M&#39;)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Series(np.random.randn(<span class="number">6</span>), index=rng)</div></pre></td></tr></table></figure><pre><code>2000-01    0.061389
2000-02    0.059265
2000-03    0.779627
2000-04   -0.068995
2000-05   -0.451276
2000-06   -1.531821
Freq: M, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">values = [<span class="string">'2001Q3'</span>, <span class="string">'2002Q2'</span>, <span class="string">'2003Q1'</span>]</div><div class="line">index = pd.PeriodIndex(values, freq=<span class="string">'Q-DEC'</span>)</div><div class="line">index</div></pre></td></tr></table></figure><pre><code>PeriodIndex([&#39;2001Q3&#39;, &#39;2002Q2&#39;, &#39;2003Q1&#39;], dtype=&#39;int64&#39;, freq=&#39;Q-DEC&#39;)
</code></pre><h3 id="时区的频率转换"><a href="#时区的频率转换" class="headerlink" title="时区的频率转换"></a>时区的频率转换</h3><p>以十二月为结尾的一个年时期</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p = pd.Period(<span class="string">'2007'</span>, freq=<span class="string">'A-DEC'</span>)</div><div class="line">p.asfreq(<span class="string">'M'</span>, how=<span class="string">'start'</span>)</div></pre></td></tr></table></figure><pre><code>Period(&#39;2007-01&#39;, &#39;M&#39;)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p.asfreq(<span class="string">'M'</span>, how=<span class="string">'end'</span>)</div></pre></td></tr></table></figure><pre><code>Period(&#39;2007-12&#39;, &#39;M&#39;)
</code></pre><p>以六月份结尾的一个年时期</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p = pd.Period(<span class="string">'2007'</span>, freq=<span class="string">'A-JUN'</span>)</div><div class="line">p.asfreq(<span class="string">'M'</span>, <span class="string">'start'</span>)</div></pre></td></tr></table></figure><pre><code>Period(&#39;2006-07&#39;, &#39;M&#39;)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p.asfreq(<span class="string">'M'</span>, <span class="string">'end'</span>)</div></pre></td></tr></table></figure><pre><code>Period(&#39;2007-06&#39;, &#39;M&#39;)
</code></pre><p>2007年8月是属于以六月结尾的2008年的时期中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p = pd.Period(<span class="string">'Aug-2007'</span>, <span class="string">'M'</span>)</div><div class="line">p.asfreq(<span class="string">'A-JUN'</span>)</div></pre></td></tr></table></figure><pre><code>Period(&#39;2008&#39;, &#39;A-JUN&#39;)
</code></pre><p>相当于一个批量操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rng = pd.period_range(<span class="string">'2006'</span>, <span class="string">'2009'</span>, freq=<span class="string">'A-DEC'</span>)</div><div class="line">ts = Series(np.random.randn(len(rng)), index=rng)</div><div class="line">ts</div></pre></td></tr></table></figure><pre><code>2006    0.634252
2007   -0.738716
2008    0.398145
2009   -1.226529
Freq: A-DEC, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.asfreq(<span class="string">'M'</span>, how=<span class="string">'start'</span>)</div></pre></td></tr></table></figure><pre><code>2006-01    0.634252
2007-01   -0.738716
2008-01    0.398145
2009-01   -1.226529
Freq: M, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.asfreq(<span class="string">'B'</span>, how=<span class="string">'end'</span>)</div></pre></td></tr></table></figure><pre><code>2006-12-29    0.634252
2007-12-31   -0.738716
2008-12-31    0.398145
2009-12-31   -1.226529
Freq: B, dtype: float64
</code></pre><h3 id="按季度计算的时间频率"><a href="#按季度计算的时间频率" class="headerlink" title="按季度计算的时间频率"></a>按季度计算的时间频率</h3><p>以一月为截止的第四个季度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p = pd.Period(<span class="string">'2012Q4'</span>, freq=<span class="string">'Q-JAN'</span>)</div><div class="line">p</div></pre></td></tr></table></figure><pre><code>Period(&#39;2012Q4&#39;, &#39;Q-JAN&#39;)
</code></pre><p>第四个季度的起始日</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p.asfreq(<span class="string">'D'</span>, <span class="string">'start'</span>)</div></pre></td></tr></table></figure><pre><code>Period(&#39;2011-11-01&#39;, &#39;D&#39;)
</code></pre><p>结束日</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p.asfreq(<span class="string">'D'</span>, <span class="string">'end'</span>)</div></pre></td></tr></table></figure><pre><code>Period(&#39;2012-01-31&#39;, &#39;D&#39;)
</code></pre><p>截止日前一天的下午四点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p4pm = (p.asfreq(<span class="string">'B'</span>, <span class="string">'e'</span>) - <span class="number">1</span>).asfreq(<span class="string">'T'</span>, <span class="string">'s'</span>) + <span class="number">16</span> * <span class="number">60</span></div><div class="line">p4pm</div></pre></td></tr></table></figure><pre><code>Period(&#39;2012-01-30 16:00&#39;, &#39;T&#39;)
</code></pre><p>转化成时间戳对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p4pm.to_timestamp()</div></pre></td></tr></table></figure><pre><code>Timestamp(&#39;2012-01-30 16:00:00&#39;)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rng = pd.period_range(<span class="string">'2011Q3'</span>, <span class="string">'2012Q4'</span>, freq=<span class="string">'Q-JAN'</span>)</div><div class="line">ts = Series(np.arange(len(rng)), index=rng)</div><div class="line">ts</div></pre></td></tr></table></figure><pre><code>2011Q3    0
2011Q4    1
2012Q1    2
2012Q2    3
2012Q3    4
2012Q4    5
Freq: Q-JAN, dtype: int32
</code></pre><p>批量转化为时间戳</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">new_rng = (rng.asfreq(<span class="string">'B'</span>, <span class="string">'e'</span>) - <span class="number">1</span>).asfreq(<span class="string">'T'</span>, <span class="string">'s'</span>) + <span class="number">16</span> * <span class="number">60</span></div><div class="line">ts.index = new_rng.to_timestamp()</div><div class="line">ts</div></pre></td></tr></table></figure><pre><code>2010-10-28 16:00:00    0
2011-01-28 16:00:00    1
2011-04-28 16:00:00    2
2011-07-28 16:00:00    3
2011-10-28 16:00:00    4
2012-01-30 16:00:00    5
dtype: int32
</code></pre><h3 id="将时间戳转化为时期（以及其逆过程）"><a href="#将时间戳转化为时期（以及其逆过程）" class="headerlink" title="将时间戳转化为时期（以及其逆过程）"></a>将时间戳转化为时期（以及其逆过程）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rng = pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">3</span>, freq=<span class="string">'M'</span>)</div><div class="line">ts = Series(randn(<span class="number">3</span>), index=rng)</div><div class="line">pts = ts.to_period()</div><div class="line">ts</div></pre></td></tr></table></figure><pre><code>2000-01-31    0.239752
2000-02-29   -0.469201
2000-03-31    2.835243
Freq: M, dtype: float64
</code></pre><p>默认以月份为单位进行转化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pts</div></pre></td></tr></table></figure><pre><code>2000-01    0.239752
2000-02   -0.469201
2000-03    2.835243
Freq: M, dtype: float64
</code></pre><p>转化为月份为单位的时期</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rng = pd.date_range(<span class="string">'1/29/2000'</span>, periods=<span class="number">6</span>, freq=<span class="string">'D'</span>)</div><div class="line">ts2 = Series(randn(<span class="number">6</span>), index=rng)</div><div class="line">ts2.to_period(<span class="string">'M'</span>)</div></pre></td></tr></table></figure><pre><code>2000-01    1.126773
2000-01   -0.979309
2000-01   -0.784376
2000-02   -1.490820
2000-02    1.125043
2000-02    0.421830
Freq: M, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pts = ts.to_period()</div><div class="line">pts</div></pre></td></tr></table></figure><pre><code>2000-01    0.239752
2000-02   -0.469201
2000-03    2.835243
Freq: M, dtype: float64
</code></pre><p>逆向转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pts.to_timestamp(how=<span class="string">'end'</span>)</div></pre></td></tr></table></figure><pre><code>2000-01-31    0.239752
2000-02-29   -0.469201
2000-03-31    2.835243
Freq: M, dtype: float64
</code></pre><h3 id="通过数组创建PeriodIndex"><a href="#通过数组创建PeriodIndex" class="headerlink" title="通过数组创建PeriodIndex"></a>通过数组创建<code>PeriodIndex</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data = pd.read_csv(<span class="string">'ch08/macrodata.csv'</span>)</div><div class="line">data.year</div></pre></td></tr></table></figure><pre><code>0      1959.0
1      1959.0
2      1959.0
3      1959.0
4      1960.0
5      1960.0
        ...  
197    2008.0
198    2008.0
199    2008.0
200    2009.0
201    2009.0
202    2009.0
Name: year, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data.quarter</div></pre></td></tr></table></figure><pre><code>0      1.0
1      2.0
2      3.0
3      4.0
4      1.0
5      2.0
      ... 
197    2.0
198    3.0
199    4.0
200    1.0
201    2.0
202    3.0
Name: quarter, dtype: float64
</code></pre><p>将年份和季度数据统一起来转化为时期索引数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">index = pd.PeriodIndex(year=data.year, quarter=data.quarter, freq=<span class="string">'Q-DEC'</span>)</div><div class="line">index</div></pre></td></tr></table></figure><pre><code>PeriodIndex([&#39;1959Q1&#39;, &#39;1959Q2&#39;, &#39;1959Q3&#39;, &#39;1959Q4&#39;, &#39;1960Q1&#39;, &#39;1960Q2&#39;,
             &#39;1960Q3&#39;, &#39;1960Q4&#39;, &#39;1961Q1&#39;, &#39;1961Q2&#39;,
             ...
             &#39;2007Q2&#39;, &#39;2007Q3&#39;, &#39;2007Q4&#39;, &#39;2008Q1&#39;, &#39;2008Q2&#39;, &#39;2008Q3&#39;,
             &#39;2008Q4&#39;, &#39;2009Q1&#39;, &#39;2009Q2&#39;, &#39;2009Q3&#39;],
            dtype=&#39;int64&#39;, length=203, freq=&#39;Q-DEC&#39;)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data.index = index</div><div class="line">data.infl</div></pre></td></tr></table></figure><pre><code>1959Q1    0.00
1959Q2    2.34
1959Q3    2.74
1959Q4    0.27
1960Q1    2.31
1960Q2    0.14
          ... 
2008Q2    8.53
2008Q3   -3.16
2008Q4   -8.79
2009Q1    0.94
2009Q2    3.37
2009Q3    3.56
Freq: Q-DEC, Name: infl, dtype: float64
</code></pre><h2 id="重采样以及频率转换"><a href="#重采样以及频率转换" class="headerlink" title="重采样以及频率转换"></a>重采样以及频率转换</h2><p>相当于进行了一次分组操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rng = pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">100</span>, freq=<span class="string">'D'</span>)</div><div class="line">ts = Series(randn(len(rng)), index=rng)</div><div class="line">ts.resample(<span class="string">'M'</span>, how=<span class="string">'mean'</span>)</div></pre></td></tr></table></figure><pre><code>C:\Users\Ewan\Anaconda3\lib\site-packages\ipykernel\__main__.py:3: FutureWarning: how in .resample() is deprecated
the new syntax is .resample(...).mean()
  app.launch_new_instance()





2000-01-31   -0.055153
2000-02-29    0.189412
2000-03-31   -0.075940
2000-04-30   -0.239036
Freq: M, dtype: float64
</code></pre><p>换个索引的形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.resample(<span class="string">'M'</span>, how=<span class="string">'mean'</span>, kind=<span class="string">'period'</span>)</div></pre></td></tr></table></figure><pre><code>C:\Users\Ewan\Anaconda3\lib\site-packages\ipykernel\__main__.py:1: FutureWarning: how in .resample() is deprecated
the new syntax is .resample(...).mean()
  if __name__ == &#39;__main__&#39;:





2000-01   -0.055153
2000-02    0.189412
2000-03   -0.075940
2000-04   -0.239036
Freq: M, dtype: float64
</code></pre><h3 id="降采样"><a href="#降采样" class="headerlink" title="降采样"></a>降采样</h3><p>按照分钟进行采样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rng = pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">12</span>, freq=<span class="string">'T'</span>)</div><div class="line">ts = Series(np.arange(<span class="number">12</span>), index=rng)</div><div class="line">ts</div></pre></td></tr></table></figure><pre><code>2000-01-01 00:00:00     0
2000-01-01 00:01:00     1
2000-01-01 00:02:00     2
2000-01-01 00:03:00     3
2000-01-01 00:04:00     4
2000-01-01 00:05:00     5
2000-01-01 00:06:00     6
2000-01-01 00:07:00     7
2000-01-01 00:08:00     8
2000-01-01 00:09:00     9
2000-01-01 00:10:00    10
2000-01-01 00:11:00    11
Freq: T, dtype: int32
</code></pre><p>每5分钟降采样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ts.resample(<span class="string">'5min'</span>).sum()</div><div class="line"><span class="comment"># note: output changed (as the default changed from closed='right', label='right' to closed='left', label='left'</span></div></pre></td></tr></table></figure><pre><code>2000-01-01 00:00:00    10
2000-01-01 00:05:00    35
2000-01-01 00:10:00    21
Freq: 5T, dtype: int32
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.resample(<span class="string">'5min'</span>, closed=<span class="string">'left'</span>).sum()</div></pre></td></tr></table></figure><pre><code>2000-01-01 00:00:00    10
2000-01-01 00:05:00    35
2000-01-01 00:10:00    21
Freq: 5T, dtype: int32
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.resample(<span class="string">'5min'</span>, closed=<span class="string">'left'</span>, label=<span class="string">'left'</span>).sum()</div></pre></td></tr></table></figure><pre><code>2000-01-01 00:00:00    10
2000-01-01 00:05:00    35
2000-01-01 00:10:00    21
Freq: 5T, dtype: int32
</code></pre><p>加了个时间的偏移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.resample(<span class="string">'5min'</span>, loffset=<span class="string">'-1s'</span>).sum()</div></pre></td></tr></table></figure><pre><code>1999-12-31 23:59:59    10
2000-01-01 00:04:59    35
2000-01-01 00:09:59    21
Freq: 5T, dtype: int32
</code></pre><h4 id="Open-High-Low-Close-OHLC-降采样"><a href="#Open-High-Low-Close-OHLC-降采样" class="headerlink" title="Open-High-Low-Close (OHLC) 降采样"></a>Open-High-Low-Close (OHLC) 降采样</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts</div></pre></td></tr></table></figure><pre><code>2000-01-01 00:00:00     0
2000-01-01 00:01:00     1
2000-01-01 00:02:00     2
2000-01-01 00:03:00     3
2000-01-01 00:04:00     4
2000-01-01 00:05:00     5
2000-01-01 00:06:00     6
2000-01-01 00:07:00     7
2000-01-01 00:08:00     8
2000-01-01 00:09:00     9
2000-01-01 00:10:00    10
2000-01-01 00:11:00    11
Freq: T, dtype: int32
</code></pre><p>以5分钟为单位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ts.resample(<span class="string">'5min'</span>).ohlc()</div><div class="line"><span class="comment"># note: output changed because of changed defaults</span></div></pre></td></tr></table></figure><div><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>open</th><th>high</th><th>low</th><th>close</th></tr></thead><tbody><tr><th>2000-01-01 00:00:00</th><td>0</td><td>4</td><td>0</td><td>4</td></tr><tr><th>2000-01-01 00:05:00</th><td>5</td><td>9</td><td>5</td><td>9</td></tr><tr><th>2000-01-01 00:10:00</th><td>10</td><td>11</td><td>10</td><td>11</td></tr></tbody></table></div><h4 id="通过GroupBy进行重采样"><a href="#通过GroupBy进行重采样" class="headerlink" title="通过GroupBy进行重采样"></a>通过GroupBy进行重采样</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rng = pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">100</span>, freq=<span class="string">'D'</span>)</div><div class="line">ts = Series(np.arange(<span class="number">100</span>), index=rng)</div><div class="line">ts.groupby(<span class="keyword">lambda</span> x: x.month).mean()</div></pre></td></tr></table></figure><pre><code>1    15
2    45
3    75
4    95
dtype: int32
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.groupby(<span class="keyword">lambda</span> x: x.weekday).mean()</div></pre></td></tr></table></figure><pre><code>0    47.5
1    48.5
2    49.5
3    50.5
4    51.5
5    49.0
6    50.0
dtype: float64
</code></pre><h3 id="升采样和插值"><a href="#升采样和插值" class="headerlink" title="升采样和插值"></a>升采样和插值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">frame = DataFrame(np.random.randn(<span class="number">2</span>, <span class="number">4</span>),</div><div class="line">                  index=pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">2</span>, freq=<span class="string">'W-WED'</span>),</div><div class="line">                  columns=[<span class="string">'Colorado'</span>, <span class="string">'Texas'</span>, <span class="string">'New York'</span>, <span class="string">'Ohio'</span>])</div><div class="line">frame</div></pre></td></tr></table></figure><div><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>Colorado</th><th>Texas</th><th>New York</th><th>Ohio</th></tr></thead><tbody><tr><th>2000-01-05</th><td>0.360773</td><td>0.506429</td><td>1.166424</td><td>1.402336</td></tr><tr><th>2000-01-12</th><td>-0.587124</td><td>0.612993</td><td>-0.796000</td><td>-0.341138</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df_daily = frame.resample(<span class="string">'D'</span>).mean()</div><div class="line">df_daily</div></pre></td></tr></table></figure><div><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>Colorado</th><th>Texas</th><th>New York</th><th>Ohio</th></tr></thead><tbody><tr><th>2000-01-05</th><td>0.360773</td><td>0.506429</td><td>1.166424</td><td>1.402336</td></tr><tr><th>2000-01-06</th><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><th>2000-01-07</th><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><th>2000-01-08</th><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><th>2000-01-09</th><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><th>2000-01-10</th><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><th>2000-01-11</th><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><th>2000-01-12</th><td>-0.587124</td><td>0.612993</td><td>-0.796000</td><td>-0.341138</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">frame.resample(<span class="string">'D'</span>).ffill()</div></pre></td></tr></table></figure><div><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>Colorado</th><th>Texas</th><th>New York</th><th>Ohio</th></tr></thead><tbody><tr><th>2000-01-05</th><td>0.360773</td><td>0.506429</td><td>1.166424</td><td>1.402336</td></tr><tr><th>2000-01-06</th><td>0.360773</td><td>0.506429</td><td>1.166424</td><td>1.402336</td></tr><tr><th>2000-01-07</th><td>0.360773</td><td>0.506429</td><td>1.166424</td><td>1.402336</td></tr><tr><th>2000-01-08</th><td>0.360773</td><td>0.506429</td><td>1.166424</td><td>1.402336</td></tr><tr><th>2000-01-09</th><td>0.360773</td><td>0.506429</td><td>1.166424</td><td>1.402336</td></tr><tr><th>2000-01-10</th><td>0.360773</td><td>0.506429</td><td>1.166424</td><td>1.402336</td></tr><tr><th>2000-01-11</th><td>0.360773</td><td>0.506429</td><td>1.166424</td><td>1.402336</td></tr><tr><th>2000-01-12</th><td>-0.587124</td><td>0.612993</td><td>-0.796000</td><td>-0.341138</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">frame.resample(<span class="string">'D'</span>).ffill(limit=<span class="number">2</span>)</div></pre></td></tr></table></figure><div><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>Colorado</th><th>Texas</th><th>New York</th><th>Ohio</th></tr></thead><tbody><tr><th>2000-01-05</th><td>0.360773</td><td>0.506429</td><td>1.166424</td><td>1.402336</td></tr><tr><th>2000-01-06</th><td>0.360773</td><td>0.506429</td><td>1.166424</td><td>1.402336</td></tr><tr><th>2000-01-07</th><td>0.360773</td><td>0.506429</td><td>1.166424</td><td>1.402336</td></tr><tr><th>2000-01-08</th><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><th>2000-01-09</th><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><th>2000-01-10</th><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><th>2000-01-11</th><td>NaN</td><td>NaN</td><td>NaN</td><td>NaN</td></tr><tr><th>2000-01-12</th><td>-0.587124</td><td>0.612993</td><td>-0.796000</td><td>-0.341138</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">frame.resample(<span class="string">'W-THU'</span>).ffill()</div></pre></td></tr></table></figure><div><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>Colorado</th><th>Texas</th><th>New York</th><th>Ohio</th></tr></thead><tbody><tr><th>2000-01-06</th><td>0.360773</td><td>0.506429</td><td>1.166424</td><td>1.402336</td></tr><tr><th>2000-01-13</th><td>-0.587124</td><td>0.612993</td><td>-0.796000</td><td>-0.341138</td></tr></tbody></table></div><h3 id="通过时期进行重采样"><a href="#通过时期进行重采样" class="headerlink" title="通过时期进行重采样"></a>通过时期进行重采样</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">frame = DataFrame(np.random.randn(<span class="number">24</span>, <span class="number">4</span>),</div><div class="line">                  index=pd.period_range(<span class="string">'1-2000'</span>, <span class="string">'12-2001'</span>, freq=<span class="string">'M'</span>),</div><div class="line">                  columns=[<span class="string">'Colorado'</span>, <span class="string">'Texas'</span>, <span class="string">'New York'</span>, <span class="string">'Ohio'</span>])</div><div class="line">frame[:<span class="number">5</span>]</div></pre></td></tr></table></figure><div><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>Colorado</th><th>Texas</th><th>New York</th><th>Ohio</th></tr></thead><tbody><tr><th>2000-01</th><td>-0.254340</td><td>0.401110</td><td>-0.931350</td><td>-0.872552</td></tr><tr><th>2000-02</th><td>0.390968</td><td>-0.815357</td><td>-1.656213</td><td>-2.251621</td></tr><tr><th>2000-03</th><td>0.206297</td><td>0.197394</td><td>0.927518</td><td>-0.657257</td></tr><tr><th>2000-04</th><td>-0.451709</td><td>0.908598</td><td>-0.187902</td><td>-0.498082</td></tr><tr><th>2000-05</th><td>-0.215150</td><td>-0.042141</td><td>-0.738733</td><td>2.499246</td></tr></tbody></table></div><p>以年为单位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">annual_frame = frame.resample(<span class="string">'A-DEC'</span>).mean()</div><div class="line">annual_frame</div></pre></td></tr></table></figure><div><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>Colorado</th><th>Texas</th><th>New York</th><th>Ohio</th></tr></thead><tbody><tr><th>2000</th><td>-0.049383</td><td>0.037021</td><td>-0.272851</td><td>-0.140984</td></tr><tr><th>2001</th><td>-0.183766</td><td>-0.291993</td><td>0.340941</td><td>0.209276</td></tr></tbody></table></div><p>以季度为单位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Q-DEC: Quarterly, year ending in December</span></div><div class="line">annual_frame.resample(<span class="string">'Q-DEC'</span>).ffill()</div><div class="line"><span class="comment"># note: output changed, default value changed from convention='end' to convention='start' + 'start' changed to span-like</span></div><div class="line"><span class="comment"># also the following cells</span></div></pre></td></tr></table></figure><div><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>Colorado</th><th>Texas</th><th>New York</th><th>Ohio</th></tr></thead><tbody><tr><th>2000Q1</th><td>-0.049383</td><td>0.037021</td><td>-0.272851</td><td>-0.140984</td></tr><tr><th>2000Q2</th><td>-0.049383</td><td>0.037021</td><td>-0.272851</td><td>-0.140984</td></tr><tr><th>2000Q3</th><td>-0.049383</td><td>0.037021</td><td>-0.272851</td><td>-0.140984</td></tr><tr><th>2000Q4</th><td>-0.049383</td><td>0.037021</td><td>-0.272851</td><td>-0.140984</td></tr><tr><th>2001Q1</th><td>-0.183766</td><td>-0.291993</td><td>0.340941</td><td>0.209276</td></tr><tr><th>2001Q2</th><td>-0.183766</td><td>-0.291993</td><td>0.340941</td><td>0.209276</td></tr><tr><th>2001Q3</th><td>-0.183766</td><td>-0.291993</td><td>0.340941</td><td>0.209276</td></tr><tr><th>2001Q4</th><td>-0.183766</td><td>-0.291993</td><td>0.340941</td><td>0.209276</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">annual_frame.resample(<span class="string">'Q-DEC'</span>, fill_method=<span class="string">'ffill'</span>, convention=<span class="string">'start'</span>)</div></pre></td></tr></table></figure><pre><code>C:\Users\Ewan\Anaconda3\lib\site-packages\ipykernel\__main__.py:1: FutureWarning: fill_method is deprecated to .resample()
the new syntax is .resample(...).ffill()
  if __name__ == &#39;__main__&#39;:
</code></pre><div><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>Colorado</th><th>Texas</th><th>New York</th><th>Ohio</th></tr></thead><tbody><tr><th>2000Q1</th><td>-0.049383</td><td>0.037021</td><td>-0.272851</td><td>-0.140984</td></tr><tr><th>2000Q2</th><td>-0.049383</td><td>0.037021</td><td>-0.272851</td><td>-0.140984</td></tr><tr><th>2000Q3</th><td>-0.049383</td><td>0.037021</td><td>-0.272851</td><td>-0.140984</td></tr><tr><th>2000Q4</th><td>-0.049383</td><td>0.037021</td><td>-0.272851</td><td>-0.140984</td></tr><tr><th>2001Q1</th><td>-0.183766</td><td>-0.291993</td><td>0.340941</td><td>0.209276</td></tr><tr><th>2001Q2</th><td>-0.183766</td><td>-0.291993</td><td>0.340941</td><td>0.209276</td></tr><tr><th>2001Q3</th><td>-0.183766</td><td>-0.291993</td><td>0.340941</td><td>0.209276</td></tr><tr><th>2001Q4</th><td>-0.183766</td><td>-0.291993</td><td>0.340941</td><td>0.209276</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">annual_frame.resample(<span class="string">'Q-MAR'</span>, fill_method=<span class="string">'ffill'</span>)</div></pre></td></tr></table></figure><pre><code>C:\Users\Ewan\Anaconda3\lib\site-packages\ipykernel\__main__.py:1: FutureWarning: fill_method is deprecated to .resample()
the new syntax is .resample(...).ffill()
  if __name__ == &#39;__main__&#39;:
</code></pre><div><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>Colorado</th><th>Texas</th><th>New York</th><th>Ohio</th></tr></thead><tbody><tr><th>2000Q4</th><td>-0.049383</td><td>0.037021</td><td>-0.272851</td><td>-0.140984</td></tr><tr><th>2001Q1</th><td>-0.049383</td><td>0.037021</td><td>-0.272851</td><td>-0.140984</td></tr><tr><th>2001Q2</th><td>-0.049383</td><td>0.037021</td><td>-0.272851</td><td>-0.140984</td></tr><tr><th>2001Q3</th><td>-0.049383</td><td>0.037021</td><td>-0.272851</td><td>-0.140984</td></tr><tr><th>2001Q4</th><td>-0.183766</td><td>-0.291993</td><td>0.340941</td><td>0.209276</td></tr><tr><th>2002Q1</th><td>-0.183766</td><td>-0.291993</td><td>0.340941</td><td>0.209276</td></tr><tr><th>2002Q2</th><td>-0.183766</td><td>-0.291993</td><td>0.340941</td><td>0.209276</td></tr><tr><th>2002Q3</th><td>-0.183766</td><td>-0.291993</td><td>0.340941</td><td>0.209276</td></tr></tbody></table></div><h2 id="时间序列绘图"><a href="#时间序列绘图" class="headerlink" title="时间序列绘图"></a>时间序列绘图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">close_px_all = pd.read_csv(<span class="string">'ch09/stock_px.csv'</span>, parse_dates=<span class="keyword">True</span>, index_col=<span class="number">0</span>)</div><div class="line">close_px = close_px_all[[<span class="string">'AAPL'</span>, <span class="string">'MSFT'</span>, <span class="string">'XOM'</span>]]</div><div class="line">close_px = close_px.resample(<span class="string">'B'</span>, fill_method=<span class="string">'ffill'</span>)</div><div class="line">close_px.info()</div></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
DatetimeIndex: 2292 entries, 2003-01-02 to 2011-10-14
Freq: B
Data columns (total 3 columns):
AAPL    2292 non-null float64
MSFT    2292 non-null float64
XOM     2292 non-null float64
dtypes: float64(3)
memory usage: 71.6 KB


C:\Users\Ewan\Anaconda3\lib\site-packages\ipykernel\__main__.py:3: FutureWarning: fill_method is deprecated to .resample()
the new syntax is .resample(...).ffill()
  app.launch_new_instance()
</code></pre><p>按年绘图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">close_px[<span class="string">'AAPL'</span>].plot()</div></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1fb1f85a080&gt;
</code></pre><p><img src="http://o7ie0tcjk.bkt.clouddn.com/pydata/ch10/output_270_1.png" alt="png"></p><p>按月绘图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">close_px.ix[<span class="string">'2009'</span>].plot()</div></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1fb20c4d550&gt;
</code></pre><p><img src="http://o7ie0tcjk.bkt.clouddn.com/pydata/ch10/output_272_1.png" alt="png"></p><p>按天绘图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">close_px[<span class="string">'AAPL'</span>].ix[<span class="string">'01-2011'</span>:<span class="string">'03-2011'</span>].plot()</div></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1fb21235668&gt;
</code></pre><p><img src="http://o7ie0tcjk.bkt.clouddn.com/pydata/ch10/output_274_1.png" alt="png"></p><p>按季度绘图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">appl_q = close_px[<span class="string">'AAPL'</span>].resample(<span class="string">'Q-DEC'</span>, fill_method=<span class="string">'ffill'</span>)</div><div class="line">appl_q.ix[<span class="string">'2009'</span>:].plot()</div></pre></td></tr></table></figure><pre><code>C:\Users\Ewan\Anaconda3\lib\site-packages\ipykernel\__main__.py:1: FutureWarning: fill_method is deprecated to .resample()
the new syntax is .resample(...).ffill()
  if __name__ == &#39;__main__&#39;:





&lt;matplotlib.axes._subplots.AxesSubplot at 0x1fb21346c50&gt;
</code></pre><p><img src="http://o7ie0tcjk.bkt.clouddn.com/pydata/ch10/output_276_2.png" alt="png"></p><h2 id="移动窗口函数"><a href="#移动窗口函数" class="headerlink" title="移动窗口函数"></a>移动窗口函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">close_px = close_px.asfreq(<span class="string">'B'</span>).fillna(method=<span class="string">'ffill'</span>)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">close_px.AAPL.plot()</div><div class="line">pd.rolling_mean(close_px.AAPL, <span class="number">250</span>).plot()</div></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1fb213b95f8&gt;



C:\Users\Ewan\Anaconda3\lib\site-packages\ipykernel\__main__.py:2: FutureWarning: pd.rolling_mean is deprecated for Series and will be removed in a future version, replace with 
    Series.rolling(window=250,center=False).mean()
  from ipykernel import kernelapp as app





&lt;matplotlib.axes._subplots.AxesSubplot at 0x1fb213b95f8&gt;
</code></pre><p><img src="http://o7ie0tcjk.bkt.clouddn.com/pydata/ch10/output_279_3.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plt.figure()</div></pre></td></tr></table></figure><pre><code>&lt;matplotlib.figure.Figure at 0x1fb212fb550&gt;




&lt;matplotlib.figure.Figure at 0x1fb212fb550&gt;
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">appl_std250 = pd.rolling_std(close_px.AAPL, <span class="number">250</span>, min_periods=<span class="number">10</span>)</div><div class="line">appl_std250[<span class="number">5</span>:<span class="number">12</span>]</div></pre></td></tr></table></figure><pre><code>C:\Users\Ewan\Anaconda3\lib\site-packages\ipykernel\__main__.py:1: FutureWarning: pd.rolling_std is deprecated for Series and will be removed in a future version, replace with 
    Series.rolling(window=250,min_periods=10,center=False).std()
  if __name__ == &#39;__main__&#39;:





2003-01-09         NaN
2003-01-10         NaN
2003-01-13         NaN
2003-01-14         NaN
2003-01-15    0.077496
2003-01-16    0.074760
2003-01-17    0.112368
Freq: B, Name: AAPL, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">appl_std250.plot()</div></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1fb21466ba8&gt;
</code></pre><p><img src="http://o7ie0tcjk.bkt.clouddn.com/pydata/ch10/output_282_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Define expanding mean in terms of rolling_mean</span></div><div class="line">expanding_mean = <span class="keyword">lambda</span> x: rolling_mean(x, len(x), min_periods=<span class="number">1</span>)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pd.rolling_mean(close_px, <span class="number">60</span>).plot(logy=<span class="keyword">True</span>)</div></pre></td></tr></table></figure><pre><code>C:\Users\Ewan\Anaconda3\lib\site-packages\ipykernel\__main__.py:1: FutureWarning: pd.rolling_mean is deprecated for DataFrame and will be removed in a future version, replace with 
    DataFrame.rolling(window=60,center=False).mean()
  if __name__ == &#39;__main__&#39;:





&lt;matplotlib.axes._subplots.AxesSubplot at 0x1fb21571208&gt;
</code></pre><p><img src="http://o7ie0tcjk.bkt.clouddn.com/pydata/ch10/output_284_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plt.close(<span class="string">'all'</span>)</div></pre></td></tr></table></figure><h3 id="指数加权函数"><a href="#指数加权函数" class="headerlink" title="指数加权函数"></a>指数加权函数</h3><p>更好的拟合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">fig, axes = plt.subplots(nrows=<span class="number">2</span>, ncols=<span class="number">1</span>, sharex=<span class="keyword">True</span>, sharey=<span class="keyword">True</span>,</div><div class="line">                         figsize=(<span class="number">12</span>, <span class="number">7</span>))</div><div class="line"></div><div class="line">aapl_px = close_px.AAPL[<span class="string">'2005'</span>:<span class="string">'2009'</span>]</div><div class="line"></div><div class="line">ma60 = pd.rolling_mean(aapl_px, <span class="number">60</span>, min_periods=<span class="number">50</span>)</div><div class="line">ewma60 = pd.ewma(aapl_px, span=<span class="number">60</span>)</div><div class="line"></div><div class="line">aapl_px.plot(style=<span class="string">'k-'</span>, ax=axes[<span class="number">0</span>])</div><div class="line">ma60.plot(style=<span class="string">'k--'</span>, ax=axes[<span class="number">0</span>])</div><div class="line">aapl_px.plot(style=<span class="string">'k-'</span>, ax=axes[<span class="number">1</span>])</div><div class="line">ewma60.plot(style=<span class="string">'k--'</span>, ax=axes[<span class="number">1</span>])</div><div class="line">axes[<span class="number">0</span>].set_title(<span class="string">'Simple MA'</span>)</div><div class="line">axes[<span class="number">1</span>].set_title(<span class="string">'Exponentially-weighted MA'</span>)</div></pre></td></tr></table></figure><pre><code>C:\Users\Ewan\Anaconda3\lib\site-packages\ipykernel\__main__.py:6: FutureWarning: pd.rolling_mean is deprecated for Series and will be removed in a future version, replace with 
    Series.rolling(window=60,min_periods=50,center=False).mean()
C:\Users\Ewan\Anaconda3\lib\site-packages\ipykernel\__main__.py:7: FutureWarning: pd.ewm_mean is deprecated for Series and will be removed in a future version, replace with 
    Series.ewm(span=60,ignore_na=False,min_periods=0,adjust=True).mean()





&lt;matplotlib.axes._subplots.AxesSubplot at 0x1fb21983b70&gt;






&lt;matplotlib.axes._subplots.AxesSubplot at 0x1fb21983b70&gt;






&lt;matplotlib.axes._subplots.AxesSubplot at 0x1fb219c9a20&gt;






&lt;matplotlib.axes._subplots.AxesSubplot at 0x1fb219c9a20&gt;






&lt;matplotlib.text.Text at 0x1fb219b10b8&gt;






&lt;matplotlib.text.Text at 0x1fb219efcc0&gt;
</code></pre><p><img src="http://o7ie0tcjk.bkt.clouddn.com/pydata/ch10/output_288_7.png" alt="png"></p><h3 id="二元移动窗口函数"><a href="#二元移动窗口函数" class="headerlink" title="二元移动窗口函数"></a>二元移动窗口函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">close_px</div><div class="line">spx_px = close_px_all[<span class="string">'SPX'</span>]</div></pre></td></tr></table></figure><div><table border="1" class="dataframe"><thead><tr style="text-align:right"><th></th><th>AAPL</th><th>MSFT</th><th>XOM</th></tr></thead><tbody><tr><th>2003-01-02</th><td>7.40</td><td>21.11</td><td>29.22</td></tr><tr><th>2003-01-03</th><td>7.45</td><td>21.14</td><td>29.24</td></tr><tr><th>2003-01-06</th><td>7.45</td><td>21.52</td><td>29.96</td></tr><tr><th>2003-01-07</th><td>7.43</td><td>21.93</td><td>28.95</td></tr><tr><th>2003-01-08</th><td>7.28</td><td>21.31</td><td>28.83</td></tr><tr><th>2003-01-09</th><td>7.34</td><td>21.93</td><td>29.44</td></tr><tr><th>...</th><td>...</td><td>...</td><td>...</td></tr><tr><th>2011-10-07</th><td>369.80</td><td>26.25</td><td>73.56</td></tr><tr><th>2011-10-10</th><td>388.81</td><td>26.94</td><td>76.28</td></tr><tr><th>2011-10-11</th><td>400.29</td><td>27.00</td><td>76.27</td></tr><tr><th>2011-10-12</th><td>402.19</td><td>26.96</td><td>77.16</td></tr><tr><th>2011-10-13</th><td>408.43</td><td>27.18</td><td>76.37</td></tr><tr><th>2011-10-14</th><td>422.00</td><td>27.27</td><td>78.11</td></tr></tbody></table><p>2292 rows × 3 columns</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">spx_rets = spx_px / spx_px.shift(<span class="number">1</span>) - <span class="number">1</span></div><div class="line">returns = close_px.pct_change()</div><div class="line">corr = pd.rolling_corr(returns.AAPL, spx_rets, <span class="number">125</span>, min_periods=<span class="number">100</span>)</div><div class="line">corr.plot()</div></pre></td></tr></table></figure><pre><code>C:\Users\Ewan\Anaconda3\lib\site-packages\ipykernel\__main__.py:3: FutureWarning: pd.rolling_corr is deprecated for Series and will be removed in a future version, replace with 
    Series.rolling(window=125,min_periods=100).corr(other=&lt;Series&gt;)
  app.launch_new_instance()





&lt;matplotlib.axes._subplots.AxesSubplot at 0x1fb21a93438&gt;
</code></pre><p><img src="http://o7ie0tcjk.bkt.clouddn.com/pydata/ch10/output_291_2.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">corr = pd.rolling_corr(returns, spx_rets, <span class="number">125</span>, min_periods=<span class="number">100</span>)</div><div class="line">corr.plot()</div></pre></td></tr></table></figure><pre><code>C:\Users\Ewan\Anaconda3\lib\site-packages\ipykernel\__main__.py:1: FutureWarning: pd.rolling_corr is deprecated for DataFrame and will be removed in a future version, replace with 
    DataFrame.rolling(window=125,min_periods=100).corr(other=&lt;Series&gt;)
  if __name__ == &#39;__main__&#39;:





&lt;matplotlib.axes._subplots.AxesSubplot at 0x1fb22b21438&gt;
</code></pre><p><img src="http://o7ie0tcjk.bkt.clouddn.com/pydata/ch10/output_292_2.png" alt="png"></p><h3 id="用户自定义移动窗口函数"><a href="#用户自定义移动窗口函数" class="headerlink" title="用户自定义移动窗口函数"></a>用户自定义移动窗口函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> percentileofscore</div><div class="line">score_at_2percent = <span class="keyword">lambda</span> x: percentileofscore(x, <span class="number">0.02</span>)</div><div class="line">result = pd.rolling_apply(returns.AAPL, <span class="number">250</span>, score_at_2percent)</div><div class="line">result.plot()</div></pre></td></tr></table></figure><pre><code>C:\Users\Ewan\Anaconda3\lib\site-packages\ipykernel\__main__.py:3: FutureWarning: pd.rolling_apply is deprecated for Series and will be removed in a future version, replace with 
    Series.rolling(window=250,center=False).apply(kwargs=&lt;dict&gt;,args=&lt;tuple&gt;,func=&lt;function&gt;)
  app.launch_new_instance()





&lt;matplotlib.axes._subplots.AxesSubplot at 0x1fb3dbdd2e8&gt;
</code></pre><p><img src="http://o7ie0tcjk.bkt.clouddn.com/pydata/ch10/output_294_2.png" alt="png"></p><h2 id="性能和内存使用方面的注意事项"><a href="#性能和内存使用方面的注意事项" class="headerlink" title="性能和内存使用方面的注意事项"></a>性能和内存使用方面的注意事项</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rng = pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">10000000</span>, freq=<span class="string">'10ms'</span>)</div><div class="line">ts = Series(np.random.randn(len(rng)), index=rng)</div><div class="line">ts</div></pre></td></tr></table></figure><pre><code>2000-01-01 00:00:00.000   -0.428577
2000-01-01 00:00:00.010    1.650203
2000-01-01 00:00:00.020   -0.064777
2000-01-01 00:00:00.030   -0.219433
2000-01-01 00:00:00.040    1.907433
2000-01-01 00:00:00.050    0.103347
                             ...   
2000-01-02 03:46:39.940    0.989446
2000-01-02 03:46:39.950    2.333137
2000-01-02 03:46:39.960    0.354455
2000-01-02 03:46:39.970    0.353224
2000-01-02 03:46:39.980   -0.862868
2000-01-02 03:46:39.990    2.007468
Freq: 10L, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.resample(<span class="string">'15min'</span>).ohlc().info()</div></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
DatetimeIndex: 11112 entries, 2000-01-01 00:00:00 to 2000-04-25 17:45:00
Freq: 15T
Data columns (total 4 columns):
open     11112 non-null float64
high     11112 non-null float64
low      11112 non-null float64
close    11112 non-null float64
dtypes: float64(4)
memory usage: 434.1 KB
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%timeit ts.resample(<span class="string">'15min'</span>).ohlc()</div></pre></td></tr></table></figure><pre><code>10 loops, best of 3: 123 ms per loop
</code></pre><p>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rng = pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">10000000</span>, freq=<span class="string">'1s'</span>)</div><div class="line">ts = Series(np.random.randn(len(rng)), index=rng)</div><div class="line">%timeit ts.resample(<span class="string">'15s'</span>).ohlc()</div></pre></td></tr></table></figure><pre><code>1 loop, best of 3: 192 ms per loop
</code></pre><p>​</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;时间序列&quot;&gt;&lt;a href=&quot;#时间序列&quot; class=&quot;headerlink&quot; title=&quot;时间序列&quot;&gt;&lt;/a&gt;时间序列&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="pandas" scheme="http://yoursite.com/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>cs231n Assignment#1 two layer net</title>
    <link href="http://yoursite.com/2017/03/08/cs231n-Assignment-1-two-layer-net/"/>
    <id>http://yoursite.com/2017/03/08/cs231n-Assignment-1-two-layer-net/</id>
    <published>2017-03-08T08:03:35.000Z</published>
    <updated>2017-03-08T08:15:07.115Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Implementing-a-Neural-Network"><a href="#Implementing-a-Neural-Network" class="headerlink" title="Implementing a Neural Network"></a>Implementing a Neural Network</h1><p>In this exercise we will develop a neural network with fully-connected layers to perform classification, and test it out on the CIFAR-10 dataset.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># A bit of setup</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="keyword">from</span> cs231n.classifiers.neural_net <span class="keyword">import</span> TwoLayerNet</div><div class="line"></div><div class="line">%matplotlib inline</div><div class="line">plt.rcParams[<span class="string">'figure.figsize'</span>] = (<span class="number">10.0</span>, <span class="number">8.0</span>) <span class="comment"># set default size of plots</span></div><div class="line">plt.rcParams[<span class="string">'image.interpolation'</span>] = <span class="string">'nearest'</span></div><div class="line">plt.rcParams[<span class="string">'image.cmap'</span>] = <span class="string">'gray'</span></div><div class="line"></div><div class="line"><span class="comment"># for auto-reloading external modules</span></div><div class="line"><span class="comment"># see http://stackoverflow.com/questions/1907993/autoreload-of-modules-in-ipython</span></div><div class="line">%load_ext autoreload</div><div class="line">%autoreload <span class="number">2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rel_error</span><span class="params">(x, y)</span>:</span></div><div class="line">  <span class="string">""" returns relative error """</span></div><div class="line">  <span class="keyword">return</span> np.max(np.abs(x - y) / (np.maximum(<span class="number">1e-8</span>, np.abs(x) + np.abs(y))))</div></pre></td></tr></table></figure><p>We will use the class <code>TwoLayerNet</code> in the file <code>cs231n/classifiers/neural_net.py</code> to represent instances of our network. The network parameters are stored in the instance variable <code>self.params</code> where keys are string parameter names and values are numpy arrays. Below, we initialize toy data and a toy model that we will use to develop your implementation.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Create a small net and some toy data to check your implementations.</span></div><div class="line"><span class="comment"># Note that we set the random seed for repeatable experiments.</span></div><div class="line"></div><div class="line">input_size = <span class="number">4</span></div><div class="line">hidden_size = <span class="number">10</span></div><div class="line">num_classes = <span class="number">3</span></div><div class="line">num_inputs = <span class="number">5</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_toy_model</span><span class="params">()</span>:</span></div><div class="line">  np.random.seed(<span class="number">0</span>)</div><div class="line">  <span class="keyword">return</span> TwoLayerNet(input_size, hidden_size, num_classes, std=<span class="number">1e-1</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_toy_data</span><span class="params">()</span>:</span></div><div class="line">  np.random.seed(<span class="number">1</span>)</div><div class="line">  X = <span class="number">10</span> * np.random.randn(num_inputs, input_size)</div><div class="line">  y = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>])</div><div class="line">  <span class="keyword">return</span> X, y</div><div class="line"></div><div class="line">net = init_toy_model()</div><div class="line">X, y = init_toy_data()</div></pre></td></tr></table></figure><h1 id="Forward-pass-compute-scores"><a href="#Forward-pass-compute-scores" class="headerlink" title="Forward pass: compute scores"></a>Forward pass: compute scores</h1><p>Open the file <code>cs231n/classifiers/neural_net.py</code> and look at the method <code>TwoLayerNet.loss</code>. This function is very similar to the loss functions you have written for the SVM and Softmax exercises: It takes the data and weights and computes the class scores, the loss, and the gradients on the parameters.</p><p>Implement the first part of the forward pass which uses the weights and biases to compute the scores for all inputs.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">scores = net.loss(X)</div><div class="line"><span class="keyword">print</span> <span class="string">'Your scores:'</span></div><div class="line"><span class="keyword">print</span> scores</div><div class="line"><span class="keyword">print</span></div><div class="line"><span class="keyword">print</span> <span class="string">'correct scores:'</span></div><div class="line">correct_scores = np.asarray([</div><div class="line">  [<span class="number">-0.81233741</span>, <span class="number">-1.27654624</span>, <span class="number">-0.70335995</span>],</div><div class="line">  [<span class="number">-0.17129677</span>, <span class="number">-1.18803311</span>, <span class="number">-0.47310444</span>],</div><div class="line">  [<span class="number">-0.51590475</span>, <span class="number">-1.01354314</span>, <span class="number">-0.8504215</span> ],</div><div class="line">  [<span class="number">-0.15419291</span>, <span class="number">-0.48629638</span>, <span class="number">-0.52901952</span>],</div><div class="line">  [<span class="number">-0.00618733</span>, <span class="number">-0.12435261</span>, <span class="number">-0.15226949</span>]])</div><div class="line"><span class="keyword">print</span> correct_scores</div><div class="line"><span class="keyword">print</span></div><div class="line"></div><div class="line"><span class="comment"># The difference should be very small. We get &lt; 1e-7</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Difference between your scores and correct scores:'</span></div><div class="line"><span class="keyword">print</span> np.sum(np.abs(scores - correct_scores))</div></pre></td></tr></table></figure><pre><code>Your scores:
[[-0.81233741 -1.27654624 -0.70335995]
 [-0.17129677 -1.18803311 -0.47310444]
 [-0.51590475 -1.01354314 -0.8504215 ]
 [-0.15419291 -0.48629638 -0.52901952]
 [-0.00618733 -0.12435261 -0.15226949]]

correct scores:
[[-0.81233741 -1.27654624 -0.70335995]
 [-0.17129677 -1.18803311 -0.47310444]
 [-0.51590475 -1.01354314 -0.8504215 ]
 [-0.15419291 -0.48629638 -0.52901952]
 [-0.00618733 -0.12435261 -0.15226949]]

Difference between your scores and correct scores:
3.68027204961e-08
</code></pre><h1 id="Forward-pass-compute-loss"><a href="#Forward-pass-compute-loss" class="headerlink" title="Forward pass: compute loss"></a>Forward pass: compute loss</h1><p>In the same function, implement the second part that computes the data and regularizaion loss.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">loss, _ = net.loss(X, y, reg=<span class="number">0.1</span>)</div><div class="line">correct_loss = <span class="number">1.30378789133</span></div><div class="line"></div><div class="line"><span class="comment"># should be very small, we get &lt; 1e-12</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Difference between your loss and correct loss:'</span></div><div class="line"><span class="keyword">print</span> np.sum(np.abs(loss - correct_loss))</div></pre></td></tr></table></figure><pre><code>Difference between your loss and correct loss:
1.79412040779e-13
</code></pre><h1 id="Backward-pass"><a href="#Backward-pass" class="headerlink" title="Backward pass"></a>Backward pass</h1><p>Implement the rest of the function. This will compute the gradient of the loss with respect to the variables <code>W1</code>, <code>b1</code>, <code>W2</code>, and <code>b2</code>. Now that you (hopefully!) have a correctly implemented forward pass, you can debug your backward pass using a numeric gradient check:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> cs231n.gradient_check <span class="keyword">import</span> eval_numerical_gradient</div><div class="line"></div><div class="line"><span class="comment"># Use numeric gradient checking to check your implementation of the backward pass.</span></div><div class="line"><span class="comment"># If your implementation is correct, the difference between the numeric and</span></div><div class="line"><span class="comment"># analytic gradients should be less than 1e-8 for each of W1, W2, b1, and b2.</span></div><div class="line"></div><div class="line">loss, grads = net.loss(X, y, reg=<span class="number">0.1</span>)</div><div class="line"></div><div class="line"><span class="comment"># these should all be less than 1e-8 or so</span></div><div class="line"><span class="keyword">for</span> param_name <span class="keyword">in</span> grads:</div><div class="line">  f = <span class="keyword">lambda</span> W: net.loss(X, y, reg=<span class="number">0.1</span>)[<span class="number">0</span>]</div><div class="line">  param_grad_num = eval_numerical_gradient(f, net.params[param_name], verbose=<span class="keyword">False</span>)</div><div class="line">  <span class="keyword">print</span> <span class="string">'%s max relative error: %e'</span> % (param_name, rel_error(param_grad_num, grads[param_name]))</div></pre></td></tr></table></figure><pre><code>W1 max relative error: 3.669858e-09
W2 max relative error: 3.440708e-09
b2 max relative error: 3.865028e-11
b1 max relative error: 2.738422e-09
</code></pre><h1 id="Train-the-network"><a href="#Train-the-network" class="headerlink" title="Train the network"></a>Train the network</h1><p>To train the network we will use stochastic gradient descent (SGD), similar to the SVM and Softmax classifiers. Look at the function <code>TwoLayerNet.train</code> and fill in the missing sections to implement the training procedure. This should be very similar to the training procedure you used for the SVM and Softmax classifiers. You will also have to implement <code>TwoLayerNet.predict</code>, as the training process periodically performs prediction to keep track of accuracy over time while the network trains.</p><p>Once you have implemented the method, run the code below to train a two-layer network on toy data. You should achieve a training loss less than 0.2.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">net = init_toy_model()</div><div class="line">stats = net.train(X, y, X, y,</div><div class="line">            learning_rate=<span class="number">1e-1</span>, reg=<span class="number">1e-5</span>,</div><div class="line">            num_iters=<span class="number">100</span>, verbose=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'Final training loss: '</span>, stats[<span class="string">'loss_history'</span>][<span class="number">-1</span>]</div><div class="line"></div><div class="line"><span class="comment"># plot the loss history</span></div><div class="line">plt.plot(stats[<span class="string">'loss_history'</span>])</div><div class="line">plt.xlabel(<span class="string">'iteration'</span>)</div><div class="line">plt.ylabel(<span class="string">'training loss'</span>)</div><div class="line">plt.title(<span class="string">'Training Loss history'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><pre><code>Final training loss:  0.0171496079387
</code></pre><p>​</p><p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n/assignment/01/two_layer_net/output_11_1.png" alt="png"></p><h1 id="Load-the-data"><a href="#Load-the-data" class="headerlink" title="Load the data"></a>Load the data</h1><p>Now that you have implemented a two-layer network that passes gradient checks and works on toy data, it’s time to load up our favorite CIFAR-10 data so we can use it to train a classifier on a real dataset.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> cs231n.data_utils <span class="keyword">import</span> load_CIFAR10</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_CIFAR10_data</span><span class="params">(num_training=<span class="number">49000</span>, num_validation=<span class="number">1000</span>, num_test=<span class="number">1000</span>)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Load the CIFAR-10 dataset from disk and perform preprocessing to prepare</div><div class="line">    it for the two-layer neural net classifier. These are the same steps as</div><div class="line">    we used for the SVM, but condensed to a single function.  </div><div class="line">    """</div><div class="line">    <span class="comment"># Load the raw CIFAR-10 data</span></div><div class="line">    cifar10_dir = <span class="string">'cs231n/datasets/cifar-10-batches-py'</span></div><div class="line">    X_train, y_train, X_test, y_test = load_CIFAR10(cifar10_dir)</div><div class="line">        </div><div class="line">    <span class="comment"># Subsample the data</span></div><div class="line">    mask = range(num_training, num_training + num_validation)</div><div class="line">    X_val = X_train[mask]</div><div class="line">    y_val = y_train[mask]</div><div class="line">    mask = range(num_training)</div><div class="line">    X_train = X_train[mask]</div><div class="line">    y_train = y_train[mask]</div><div class="line">    mask = range(num_test)</div><div class="line">    X_test = X_test[mask]</div><div class="line">    y_test = y_test[mask]</div><div class="line"></div><div class="line">    <span class="comment"># Normalize the data: subtract the mean image</span></div><div class="line">    mean_image = np.mean(X_train, axis=<span class="number">0</span>)</div><div class="line">    X_train -= mean_image</div><div class="line">    X_val -= mean_image</div><div class="line">    X_test -= mean_image</div><div class="line"></div><div class="line">    <span class="comment"># Reshape data to rows</span></div><div class="line">    X_train = X_train.reshape(num_training, <span class="number">-1</span>)</div><div class="line">    X_val = X_val.reshape(num_validation, <span class="number">-1</span>)</div><div class="line">    X_test = X_test.reshape(num_test, <span class="number">-1</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> X_train, y_train, X_val, y_val, X_test, y_test</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Invoke the above function to get our data.</span></div><div class="line">X_train, y_train, X_val, y_val, X_test, y_test = get_CIFAR10_data()</div><div class="line"><span class="keyword">print</span> <span class="string">'Train data shape: '</span>, X_train.shape</div><div class="line"><span class="keyword">print</span> <span class="string">'Train labels shape: '</span>, y_train.shape</div><div class="line"><span class="keyword">print</span> <span class="string">'Validation data shape: '</span>, X_val.shape</div><div class="line"><span class="keyword">print</span> <span class="string">'Validation labels shape: '</span>, y_val.shape</div><div class="line"><span class="keyword">print</span> <span class="string">'Test data shape: '</span>, X_test.shape</div><div class="line"><span class="keyword">print</span> <span class="string">'Test labels shape: '</span>, y_test.shape</div></pre></td></tr></table></figure><pre><code>Train data shape:  (49000L, 3072L)
Train labels shape:  (49000L,)
Validation data shape:  (1000L, 3072L)
Validation labels shape:  (1000L,)
Test data shape:  (1000L, 3072L)
Test labels shape:  (1000L,)
</code></pre><h1 id="Train-a-network"><a href="#Train-a-network" class="headerlink" title="Train a network"></a>Train a network</h1><p>To train our network we will use SGD with momentum. In addition, we will adjust the learning rate with an exponential learning rate schedule as optimization proceeds; after each epoch, we will reduce the learning rate by multiplying it by a decay rate.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">input_size = <span class="number">32</span> * <span class="number">32</span> * <span class="number">3</span></div><div class="line">hidden_size = <span class="number">50</span></div><div class="line">num_classes = <span class="number">10</span></div><div class="line">net = TwoLayerNet(input_size, hidden_size, num_classes)</div><div class="line"></div><div class="line"><span class="comment"># Train the network</span></div><div class="line">stats = net.train(X_train, y_train, X_val, y_val,</div><div class="line">            num_iters=<span class="number">1000</span>, batch_size=<span class="number">200</span>,</div><div class="line">            learning_rate=<span class="number">1e-4</span>, learning_rate_decay=<span class="number">0.95</span>,</div><div class="line">            reg=<span class="number">0.5</span>, verbose=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># Predict on the validation set</span></div><div class="line">val_acc = (net.predict(X_val) == y_val).mean()</div><div class="line"><span class="keyword">print</span> <span class="string">'Validation accuracy: '</span>, val_acc</div></pre></td></tr></table></figure><pre><code>iteration 0 / 1000: loss 2.302954
iteration 100 / 1000: loss 2.302550
iteration 200 / 1000: loss 2.297648
iteration 300 / 1000: loss 2.259602
iteration 400 / 1000: loss 2.204170
iteration 500 / 1000: loss 2.118565
iteration 600 / 1000: loss 2.051535
iteration 700 / 1000: loss 1.988466
iteration 800 / 1000: loss 2.006591
iteration 900 / 1000: loss 1.951473
Validation accuracy:  0.287
</code></pre><h1 id="Debug-the-training"><a href="#Debug-the-training" class="headerlink" title="Debug the training"></a>Debug the training</h1><p>With the default parameters we provided above, you should get a validation accuracy of about 0.29 on the validation set. This isn’t very good.</p><p>One strategy for getting insight into what’s wrong is to plot the loss function and the accuracies on the training and validation sets during optimization.</p><p>Another strategy is to visualize the weights that were learned in the first layer of the network. In most neural networks trained on visual data, the first layer weights typically show some visible structure when visualized.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Plot the loss function and train / validation accuracies</span></div><div class="line">plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>)</div><div class="line">plt.plot(stats[<span class="string">'loss_history'</span>])</div><div class="line">plt.title(<span class="string">'Loss history'</span>)</div><div class="line">plt.xlabel(<span class="string">'Iteration'</span>)</div><div class="line">plt.ylabel(<span class="string">'Loss'</span>)</div><div class="line"></div><div class="line">plt.subplot(<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>)</div><div class="line">plt.plot(stats[<span class="string">'train_acc_history'</span>], label=<span class="string">'train'</span>)</div><div class="line">plt.plot(stats[<span class="string">'val_acc_history'</span>], label=<span class="string">'val'</span>)</div><div class="line">plt.title(<span class="string">'Classification accuracy history'</span>)</div><div class="line">plt.xlabel(<span class="string">'Epoch'</span>)</div><div class="line">plt.ylabel(<span class="string">'Clasification accuracy'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure><p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n/assignment/01/two_layer_net/output_17_0.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> cs231n.vis_utils <span class="keyword">import</span> visualize_grid</div><div class="line"></div><div class="line"><span class="comment"># Visualize the weights of the network</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_net_weights</span><span class="params">(net)</span>:</span></div><div class="line">  W1 = net.params[<span class="string">'W1'</span>]</div><div class="line">  W1 = W1.reshape(<span class="number">32</span>, <span class="number">32</span>, <span class="number">3</span>, <span class="number">-1</span>).transpose(<span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</div><div class="line">  plt.imshow(visualize_grid(W1, padding=<span class="number">3</span>).astype(<span class="string">'uint8'</span>))</div><div class="line">  plt.gca().axis(<span class="string">'off'</span>)</div><div class="line">  plt.show()</div><div class="line"></div><div class="line">show_net_weights(net)</div></pre></td></tr></table></figure><p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n/assignment/01/two_layer_net/output_18_0.png" alt="png"></p><h1 id="Tune-your-hyperparameters"><a href="#Tune-your-hyperparameters" class="headerlink" title="Tune your hyperparameters"></a>Tune your hyperparameters</h1><p><strong>What’s wrong?</strong>. Looking at the visualizations above, we see that the loss is decreasing more or less linearly, which seems to suggest that the learning rate may be too low. Moreover, there is no gap between the training and validation accuracy, suggesting that the model we used has low capacity, and that we should increase its size. On the other hand, with a very large model we would expect to see more overfitting, which would manifest itself as a very large gap between the training and validation accuracy.</p><p><strong>Tuning</strong>. Tuning the hyperparameters and developing intuition for how they affect the final performance is a large part of using Neural Networks, so we want you to get a lot of practice. Below, you should experiment with different values of the various hyperparameters, including hidden layer size, learning rate, numer of training epochs, and regularization strength. You might also consider tuning the learning rate decay, but you should be able to get good performance using the default value.</p><p><strong>Approximate results</strong>. You should be aim to achieve a classification accuracy of greater than 48% on the validation set. Our best network gets over 52% on the validation set.</p><p><strong>Experiment</strong>: You goal in this exercise is to get as good of a result on CIFAR-10 as you can, with a fully-connected Neural Network. For every 1% above 52% on the Test set we will award you with one extra bonus point. Feel free implement your own techniques (e.g. PCA to reduce dimensionality, or adding dropout, or adding features to the solver, etc.).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">best_net = <span class="keyword">None</span> <span class="comment"># store the best model into this </span></div><div class="line"></div><div class="line"><span class="comment">#################################################################################</span></div><div class="line"><span class="comment"># <span class="doctag">TODO:</span> Tune hyperparameters using the validation set. Store your best trained  #</span></div><div class="line"><span class="comment"># model in best_net.                                                            #</span></div><div class="line"><span class="comment">#                                                                               #</span></div><div class="line"><span class="comment"># To help debug your network, it may help to use visualizations similar to the  #</span></div><div class="line"><span class="comment"># ones we used above; these visualizations will have significant qualitative    #</span></div><div class="line"><span class="comment"># differences from the ones we saw above for the poorly tuned network.          #</span></div><div class="line"><span class="comment">#                                                                               #</span></div><div class="line"><span class="comment"># Tweaking hyperparameters by hand can be fun, but you might find it useful to  #</span></div><div class="line"><span class="comment"># write code to sweep through possible combinations of hyperparameters          #</span></div><div class="line"><span class="comment"># automatically like we did on the previous exercises.                          #</span></div><div class="line"><span class="comment">#################################################################################</span></div><div class="line">best_val = <span class="number">-1</span></div><div class="line">best_stats = <span class="keyword">None</span></div><div class="line">learning_rates = [<span class="number">1e-1</span>, <span class="number">1e-2</span>, <span class="number">1e-3</span>, <span class="number">1e-4</span>]</div><div class="line">regularization_strengths = [<span class="number">1e-1</span>, <span class="number">1e-2</span>, <span class="number">1e-3</span>, <span class="number">1e-4</span>]</div><div class="line">batch_sizes = [<span class="number">200</span>, <span class="number">400</span>, <span class="number">800</span>]</div><div class="line">hidden_sizes = [<span class="number">80</span>, <span class="number">160</span>, <span class="number">320</span>]</div><div class="line">results = &#123;&#125;</div><div class="line">iters = <span class="number">2000</span></div><div class="line">total_size = <span class="number">144</span></div><div class="line">i = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> lr <span class="keyword">in</span> learning_rates:</div><div class="line">    <span class="keyword">for</span> rs <span class="keyword">in</span> regularization_strengths:</div><div class="line">        <span class="keyword">for</span> bs <span class="keyword">in</span> batch_sizes:</div><div class="line">            <span class="keyword">for</span> hs <span class="keyword">in</span> hidden_sizes:</div><div class="line">                i += <span class="number">1</span></div><div class="line">                <span class="keyword">print</span> i, <span class="string">'/'</span>, total_size</div><div class="line">                net = TwoLayerNet(input_size, hs, num_classes)</div><div class="line"></div><div class="line">                <span class="comment"># Train the network</span></div><div class="line">                stats = net.train(X_train, y_train, X_val, y_val,</div><div class="line">                            num_iters=iters, batch_size=bs,</div><div class="line">                            learning_rate=lr, learning_rate_decay=<span class="number">0.95</span>,</div><div class="line">                            reg=rs)</div><div class="line"></div><div class="line">                y_train_pred = net.predict(X_train)</div><div class="line">                acc_train = np.mean(y_train == y_train_pred)</div><div class="line">                y_val_pred = net.predict(X_val)</div><div class="line">                acc_val = np.mean(y_val == y_val_pred)</div><div class="line"></div><div class="line">                results[(lr, rs, bs, hs)] = (acc_train, acc_val)</div><div class="line"></div><div class="line">                <span class="keyword">if</span> best_val &lt; acc_val:</div><div class="line">                    best_stats = stats</div><div class="line">                    best_val = acc_val</div><div class="line">                    best_net = net</div><div class="line"></div><div class="line"><span class="comment"># Print out results.</span></div><div class="line"><span class="comment"># for lr, reg, bs, hs in sorted(results):</span></div><div class="line"><span class="comment">#     train_accuracy, val_accuracy = results[(lr, reg, bs, hs)]</span></div><div class="line"><span class="comment">#     print 'lr %e reg %e bs %e hs %e train accuracy: %f val accuracy: %f' % (</span></div><div class="line"><span class="comment">#                 lr, reg, bs, hs, train_accuracy, val_accuracy)</span></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'best validation accuracy achieved during cross-validation: %f'</span> % best_val</div><div class="line"><span class="comment">#################################################################################</span></div><div class="line"><span class="comment">#                               END OF YOUR CODE                                #</span></div><div class="line"><span class="comment">#################################################################################</span></div></pre></td></tr></table></figure><pre><code>1 / 144
</code></pre><p>​</p><pre><code>cs231n\classifiers\neural_net.py:104: RuntimeWarning: overflow encountered in exp
  exp_scores = np.exp(scores)
cs231n\classifiers\neural_net.py:105: RuntimeWarning: invalid value encountered in divide
  a2 = exp_scores / np.sum(exp_scores, axis=1, keepdims=True)
cs231n\classifiers\neural_net.py:107: RuntimeWarning: divide by zero encountered in log
  correct_log_probs = -np.log(a2[range(N), y])
cs231n\classifiers\neural_net.py:81: RuntimeWarning: invalid value encountered in maximum
  a1 = np.maximum(0, z1)
cs231n\classifiers\neural_net.py:131: RuntimeWarning: invalid value encountered in less_equal
  dhidden[z1 &lt;= 0] = 0
cs231n\classifiers\neural_net.py:247: RuntimeWarning: invalid value encountered in maximum
  a1 = np.maximum(0, z1)  # pass through ReLU activation function


2 / 144
3 / 144
4 / 144
5 / 144
6 / 144
7 / 144
8 / 144
9 / 144
10 / 144
11 / 144
12 / 144
13 / 144
14 / 144
15 / 144
16 / 144
17 / 144
18 / 144
19 / 144
20 / 144
21 / 144
22 / 144
23 / 144
24 / 144
25 / 144
26 / 144
27 / 144
28 / 144
29 / 144
30 / 144
31 / 144
32 / 144
33 / 144
34 / 144
35 / 144
36 / 144
37 / 144
38 / 144
39 / 144
40 / 144
41 / 144
42 / 144
43 / 144
44 / 144
45 / 144
46 / 144
47 / 144
48 / 144
49 / 144
50 / 144
51 / 144
52 / 144
53 / 144
54 / 144
55 / 144
56 / 144
57 / 144
58 / 144
59 / 144
60 / 144
61 / 144
62 / 144
63 / 144
64 / 144
65 / 144
66 / 144
67 / 144
68 / 144
69 / 144
70 / 144
71 / 144
72 / 144
73 / 144
74 / 144
75 / 144
76 / 144
77 / 144
78 / 144
79 / 144
80 / 144
81 / 144
82 / 144
83 / 144
84 / 144
85 / 144
86 / 144
87 / 144
88 / 144
89 / 144
90 / 144
91 / 144
92 / 144
93 / 144
94 / 144
95 / 144
96 / 144
97 / 144
98 / 144
99 / 144
100 / 144
101 / 144
102 / 144
103 / 144
104 / 144
105 / 144
106 / 144
107 / 144
108 / 144
109 / 144
110 / 144
111 / 144
112 / 144
113 / 144
114 / 144
115 / 144
116 / 144
117 / 144
118 / 144
119 / 144
120 / 144
121 / 144
122 / 144
123 / 144
124 / 144
125 / 144
126 / 144
127 / 144
128 / 144
129 / 144
130 / 144
131 / 144
132 / 144
133 / 144
134 / 144
135 / 144
136 / 144
137 / 144
138 / 144
139 / 144
140 / 144
141 / 144
142 / 144
143 / 144
144 / 144
best validation accuracy achieved during cross-validation: 0.540000
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># visualize the weights of the best network</span></div><div class="line">show_net_weights(best_net)</div></pre></td></tr></table></figure><p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n/assignment/01/two_layer_net/output_21_0.png" alt="png"></p><h1 id="Run-on-the-test-set"><a href="#Run-on-the-test-set" class="headerlink" title="Run on the test set"></a>Run on the test set</h1><p>When you are done experimenting, you should evaluate your final trained network on the test set; you should get above 48%.</p><p><strong>We will give you extra bonus point for every 1% of accuracy above 52%.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">test_acc = (best_net.predict(X_test) == y_test).mean()</div><div class="line"><span class="keyword">print</span> <span class="string">'Test accuracy: '</span>, test_acc</div></pre></td></tr></table></figure><pre><code>Test accuracy:  0.531
</code></pre><p>​</p><h1 id="Codes"><a href="#Codes" class="headerlink" title="Codes"></a>Codes</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoLayerNet</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    A two-layer fully-connected neural network. The net has an input dimension of</div><div class="line">    N, a hidden layer dimension of H, and performs classification over C classes.</div><div class="line">    We train the network with a softmax loss function and L2 regularization on the</div><div class="line">    weight matrices. The network uses a ReLU nonlinearity after the first fully</div><div class="line">    connected layer.</div><div class="line"></div><div class="line">    In other words, the network has the following architecture:</div><div class="line"></div><div class="line">    input - fully connected layer - ReLU - fully connected layer - softmax</div><div class="line"></div><div class="line">    The outputs of the second fully-connected layer are the scores for each class.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_size, hidden_size, output_size, std=<span class="number">1e-4</span>)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Initialize the model. Weights are initialized to small random values and</div><div class="line">        biases are initialized to zero. Weights and biases are stored in the</div><div class="line">        variable self.params, which is a dictionary with the following keys:</div><div class="line"></div><div class="line">        W1: First layer weights; has shape (D, H)</div><div class="line">        b1: First layer biases; has shape (H,)</div><div class="line">        W2: Second layer weights; has shape (H, C)</div><div class="line">        b2: Second layer biases; has shape (C,)</div><div class="line"></div><div class="line">        Inputs:</div><div class="line">        - input_size: The dimension D of the input data.</div><div class="line">        - hidden_size: The number of neurons H in the hidden layer.</div><div class="line">        - output_size: The number of classes C.</div><div class="line">        """</div><div class="line">        self.params = &#123;&#125;</div><div class="line">        self.params[<span class="string">'W1'</span>] = std * np.random.randn(input_size, hidden_size)</div><div class="line">        self.params[<span class="string">'b1'</span>] = np.zeros(hidden_size)</div><div class="line">        self.params[<span class="string">'W2'</span>] = std * np.random.randn(hidden_size, output_size)</div><div class="line">        self.params[<span class="string">'b2'</span>] = np.zeros(output_size)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(self, X, y=None, reg=<span class="number">0.0</span>)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Compute the loss and gradients for a two layer fully connected neural</div><div class="line">        network.</div><div class="line"></div><div class="line">        Inputs:</div><div class="line">        - X: Input data of shape (N, D). Each X[i] is a training sample.</div><div class="line">        - y: Vector of training labels. y[i] is the label for X[i], and each y[i] is</div><div class="line">          an integer in the range 0 &lt;= y[i] &lt; C. This parameter is optional; if it</div><div class="line">          is not passed then we only return scores, and if it is passed then we</div><div class="line">          instead return the loss and gradients.</div><div class="line">        - reg: Regularization strength.</div><div class="line"></div><div class="line">        Returns:</div><div class="line">        If y is None, return a matrix scores of shape (N, C) where scores[i, c] is</div><div class="line">        the score for class c on input X[i].</div><div class="line"></div><div class="line">        If y is not None, instead return a tuple of:</div><div class="line">        - loss: Loss (data loss and regularization loss) for this batch of training</div><div class="line">          samples.</div><div class="line">        - grads: Dictionary mapping parameter names to gradients of those parameters</div><div class="line">          with respect to the loss function; has the same keys as self.params.</div><div class="line">        """</div><div class="line">        <span class="comment"># Unpack variables from the params dictionary</span></div><div class="line">        W1, b1 = self.params[<span class="string">'W1'</span>], self.params[<span class="string">'b1'</span>]</div><div class="line">        W2, b2 = self.params[<span class="string">'W2'</span>], self.params[<span class="string">'b2'</span>]</div><div class="line">        N, D = X.shape</div><div class="line"></div><div class="line">        <span class="comment"># Compute the forward pass</span></div><div class="line">        scores = <span class="keyword">None</span></div><div class="line">        <span class="comment">#############################################################################</span></div><div class="line">        <span class="comment"># <span class="doctag">TODO:</span> Perform the forward pass, computing the class scores for the input. #</span></div><div class="line">        <span class="comment"># Store the result in the scores variable, which should be an array of      #</span></div><div class="line">        <span class="comment"># shape (N,C).                                                             #</span></div><div class="line">        <span class="comment">#############################################################################</span></div><div class="line">        <span class="comment"># First layer pre-activation</span></div><div class="line">        z1 = X.dot(W1) + b1</div><div class="line"></div><div class="line">        <span class="comment"># First layer activation</span></div><div class="line">        a1 = np.maximum(<span class="number">0</span>, z1)</div><div class="line"></div><div class="line">        <span class="comment"># Second layer pre-activation</span></div><div class="line">        z2 = a1.dot(W2) + b2</div><div class="line"></div><div class="line">        scores = z2</div><div class="line">        <span class="comment">#############################################################################</span></div><div class="line">        <span class="comment">#                              END OF YOUR CODE                             #</span></div><div class="line">        <span class="comment">#############################################################################</span></div><div class="line"></div><div class="line">        <span class="comment"># If the targets are not given then jump out, we're done</span></div><div class="line">        <span class="keyword">if</span> y <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> scores</div><div class="line"></div><div class="line">        <span class="comment"># Compute the loss</span></div><div class="line">        loss = <span class="keyword">None</span></div><div class="line">        <span class="comment">#############################################################################</span></div><div class="line">        <span class="comment"># <span class="doctag">TODO:</span> Finish the forward pass, and compute the loss. This should include  #</span></div><div class="line">        <span class="comment"># both the data loss and L2 regularization for W1 and W2. Store the result  #</span></div><div class="line">        <span class="comment"># in the variable loss, which should be a scalar. Use the Softmax           #</span></div><div class="line">        <span class="comment"># classifier loss. So that your results match ours, multiply the            #</span></div><div class="line">        <span class="comment"># regularization loss by 0.5                                                #</span></div><div class="line">        <span class="comment">#############################################################################</span></div><div class="line">        exp_scores = np.exp(scores)</div><div class="line">        a2 = exp_scores / np.sum(exp_scores, axis=<span class="number">1</span>, keepdims=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">        correct_log_probs = -np.log(a2[range(N), y])</div><div class="line">        data_loss = np.sum(correct_log_probs) / N</div><div class="line">        reg_loss = <span class="number">0.5</span> * reg * (np.sum(W1 * W1) + np.sum(W2 * W2))</div><div class="line"></div><div class="line">        loss = data_loss + reg_loss</div><div class="line">        <span class="comment">#############################################################################</span></div><div class="line">        <span class="comment">#                              END OF YOUR CODE                             #</span></div><div class="line">        <span class="comment">#############################################################################</span></div><div class="line"></div><div class="line">        <span class="comment"># Backward pass: compute gradients</span></div><div class="line">        grads = &#123;&#125;</div><div class="line">        <span class="comment">#############################################################################</span></div><div class="line">        <span class="comment"># <span class="doctag">TODO:</span> Compute the backward pass, computing the derivatives of the weights #</span></div><div class="line">        <span class="comment"># and biases. Store the results in the grads dictionary. For example,       #</span></div><div class="line">        <span class="comment"># grads['W1'] should store the gradient on W1, and be a matrix of same size #</span></div><div class="line">        <span class="comment">#############################################################################</span></div><div class="line">        dscores = a2</div><div class="line">        dscores[range(N), y] -= <span class="number">1</span></div><div class="line">        dscores /= N</div><div class="line"></div><div class="line">        grads[<span class="string">'W2'</span>] = np.dot(a1.T, dscores)</div><div class="line">        grads[<span class="string">'b2'</span>] = np.sum(dscores, axis=<span class="number">0</span>)</div><div class="line"></div><div class="line">        dhidden = np.dot(dscores, W2.T)</div><div class="line">        dhidden[z1 &lt;= <span class="number">0</span>] = <span class="number">0</span></div><div class="line"></div><div class="line">        grads[<span class="string">'W1'</span>] = np.dot(X.T, dhidden)</div><div class="line">        grads[<span class="string">'b1'</span>] = np.sum(dhidden, axis=<span class="number">0</span>)</div><div class="line"></div><div class="line">        grads[<span class="string">'W2'</span>] += reg * W2</div><div class="line">        grads[<span class="string">'W1'</span>] += reg * W1</div><div class="line">        <span class="comment">#############################################################################</span></div><div class="line">        <span class="comment">#                              END OF YOUR CODE                             #</span></div><div class="line">        <span class="comment">#############################################################################</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> loss, grads</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, X, y, X_val, y_val,</span></span></div><div class="line">              learning_rate=<span class="number">1e-3</span>, learning_rate_decay=<span class="number">0.95</span>,</div><div class="line">              reg=<span class="number">1e-5</span>, num_iters=<span class="number">100</span>,</div><div class="line">              batch_size=<span class="number">200</span>, verbose=False):</div><div class="line">        <span class="string">"""</span></div><div class="line">        Train this neural network using stochastic gradient descent.</div><div class="line"></div><div class="line">        Inputs:</div><div class="line">        - X: A numpy array of shape (N, D) giving training data.</div><div class="line">        - y: A numpy array f shape (N,) giving training labels; y[i] = c means that</div><div class="line">          X[i] has label c, where 0 &lt;= c &lt; C.</div><div class="line">        - X_val: A numpy array of shape (N_val, D) giving validation data.</div><div class="line">        - y_val: A numpy array of shape (N_val,) giving validation labels.</div><div class="line">        - learning_rate: Scalar giving learning rate for optimization.</div><div class="line">        - learning_rate_decay: Scalar giving factor used to decay the learning rate</div><div class="line">          after each epoch.</div><div class="line">        - reg: Scalar giving regularization strength.</div><div class="line">        - num_iters: Number of steps to take when optimizing.</div><div class="line">        - batch_size: Number of training examples to use per step.</div><div class="line">        - verbose: boolean; if true print progress during optimization.</div><div class="line">        """</div><div class="line">        num_train = X.shape[<span class="number">0</span>]</div><div class="line">        iterations_per_epoch = max(num_train / batch_size, <span class="number">1</span>)</div><div class="line"></div><div class="line">        <span class="comment"># Use SGD to optimize the parameters in self.model</span></div><div class="line">        loss_history = []</div><div class="line">        train_acc_history = []</div><div class="line">        val_acc_history = []</div><div class="line"></div><div class="line">        <span class="keyword">for</span> it <span class="keyword">in</span> xrange(num_iters):</div><div class="line">            X_batch = <span class="keyword">None</span></div><div class="line">            y_batch = <span class="keyword">None</span></div><div class="line"></div><div class="line">            <span class="comment">#########################################################################</span></div><div class="line">            <span class="comment"># <span class="doctag">TODO:</span> Create a random minibatch of training data and labels, storing  #</span></div><div class="line">            <span class="comment"># them in X_batch and y_batch respectively.                             #</span></div><div class="line">            <span class="comment">#########################################################################</span></div><div class="line">            sample_indices = np.random.choice(num_train, batch_size)</div><div class="line">            X_batch = X[sample_indices]</div><div class="line">            y_batch = y[sample_indices]</div><div class="line">            <span class="comment">#########################################################################</span></div><div class="line">            <span class="comment">#                             END OF YOUR CODE                          #</span></div><div class="line">            <span class="comment">#########################################################################</span></div><div class="line"></div><div class="line">            <span class="comment"># Compute loss and gradients using the current minibatch</span></div><div class="line">            loss, grads = self.loss(X_batch, y=y_batch, reg=reg)</div><div class="line">            loss_history.append(loss)</div><div class="line"></div><div class="line">            <span class="comment">#########################################################################</span></div><div class="line">            <span class="comment"># <span class="doctag">TODO:</span> Use the gradients in the grads dictionary to update the         #</span></div><div class="line">            <span class="comment"># parameters of the network (stored in the dictionary self.params)      #</span></div><div class="line">            <span class="comment"># using stochastic gradient descent. You'll need to use the gradients   #</span></div><div class="line">            <span class="comment"># stored in the grads dictionary defined above.                         #</span></div><div class="line">            <span class="comment">#########################################################################</span></div><div class="line">            self.params[<span class="string">'W1'</span>] += -learning_rate * grads[<span class="string">'W1'</span>]</div><div class="line">            self.params[<span class="string">'b1'</span>] += -learning_rate * grads[<span class="string">'b1'</span>]</div><div class="line">            self.params[<span class="string">'W2'</span>] += -learning_rate * grads[<span class="string">'W2'</span>]</div><div class="line">            self.params[<span class="string">'b2'</span>] += -learning_rate * grads[<span class="string">'b2'</span>]</div><div class="line">            <span class="comment">#########################################################################</span></div><div class="line">            <span class="comment">#                             END OF YOUR CODE                          #</span></div><div class="line">            <span class="comment">#########################################################################</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> verbose <span class="keyword">and</span> it % <span class="number">100</span> == <span class="number">0</span>:</div><div class="line">                <span class="keyword">print</span> <span class="string">'iteration %d / %d: loss %f'</span> % (it, num_iters, loss)</div><div class="line"></div><div class="line">            <span class="comment"># Every epoch, check train and val accuracy and decay learning rate.</span></div><div class="line">            <span class="keyword">if</span> it % iterations_per_epoch == <span class="number">0</span>:</div><div class="line">                <span class="comment"># Check accuracy</span></div><div class="line">                train_acc = (self.predict(X_batch) == y_batch).mean()</div><div class="line">                val_acc = (self.predict(X_val) == y_val).mean()</div><div class="line">                train_acc_history.append(train_acc)</div><div class="line">                val_acc_history.append(val_acc)</div><div class="line"></div><div class="line">                <span class="comment"># Decay learning rate</span></div><div class="line">                learning_rate *= learning_rate_decay</div><div class="line"></div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="string">'loss_history'</span>: loss_history,</div><div class="line">            <span class="string">'train_acc_history'</span>: train_acc_history,</div><div class="line">            <span class="string">'val_acc_history'</span>: val_acc_history,</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Use the trained weights of this two-layer network to predict labels for</div><div class="line">        data points. For each data point we predict scores for each of the C</div><div class="line">        classes, and assign each data point to the class with the highest score.</div><div class="line"></div><div class="line">        Inputs:</div><div class="line">        - X: A numpy array of shape (N, D) giving N D-dimensional data points to</div><div class="line">          classify.</div><div class="line"></div><div class="line">        Returns:</div><div class="line">        - y_pred: A numpy array of shape (N,) giving predicted labels for each of</div><div class="line">          the elements of X. For all i, y_pred[i] = c means that X[i] is predicted</div><div class="line">          to have class c, where 0 &lt;= c &lt; C.</div><div class="line">        """</div><div class="line">        y_pred = <span class="keyword">None</span></div><div class="line"></div><div class="line">        <span class="comment">###########################################################################</span></div><div class="line">        <span class="comment"># <span class="doctag">TODO:</span> Implement this function; it should be VERY simple!                #</span></div><div class="line">        <span class="comment">###########################################################################</span></div><div class="line">        z1 = X.dot(self.params[<span class="string">'W1'</span>]) + self.params[<span class="string">'b1'</span>]</div><div class="line">        a1 = np.maximum(<span class="number">0</span>, z1)  <span class="comment"># pass through ReLU activation function</span></div><div class="line">        scores = a1.dot(self.params[<span class="string">'W2'</span>]) + self.params[<span class="string">'b2'</span>]</div><div class="line">        y_pred = np.argmax(scores, axis=<span class="number">1</span>)</div><div class="line">        <span class="comment">###########################################################################</span></div><div class="line">        <span class="comment">#                              END OF YOUR CODE                           #</span></div><div class="line">        <span class="comment">###########################################################################</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> y_pred</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Implementing-a-Neural-Network&quot;&gt;&lt;a href=&quot;#Implementing-a-Neural-Network&quot; class=&quot;headerlink&quot; title=&quot;Implementing a Neural Network&quot;&gt;&lt;/a
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>python data analysis learning note 09</title>
    <link href="http://yoursite.com/2017/03/07/python-data-analysis-learning-note-09/"/>
    <id>http://yoursite.com/2017/03/07/python-data-analysis-learning-note-09/</id>
    <published>2017-03-07T07:37:24.000Z</published>
    <updated>2017-03-07T07:50:31.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据聚合与分组运算"><a href="#数据聚合与分组运算" class="headerlink" title="数据聚合与分组运算"></a>数据聚合与分组运算</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</div><div class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> randn</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">np.random.seed(<span class="number">12345</span>)</div><div class="line">plt.rc(<span class="string">'figure'</span>, figsize=(<span class="number">10</span>, <span class="number">6</span>))</div><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line">np.set_printoptions(precision=<span class="number">4</span>)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pd.options.display.notebook_repr_html = <span class="keyword">False</span></div><div class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</div><div class="line">InteractiveShell.ast_node_interactivity = <span class="string">"all"</span></div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%matplotlib inline</div></pre></td></tr></table></figure><h2 id="GroupBy-机制"><a href="#GroupBy-机制" class="headerlink" title="GroupBy 机制"></a>GroupBy 机制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">df = DataFrame(&#123;<span class="string">'key1'</span> : [<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>],</div><div class="line">                <span class="string">'key2'</span> : [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>],</div><div class="line">                <span class="string">'data1'</span> : np.random.randn(<span class="number">5</span>),</div><div class="line">                <span class="string">'data2'</span> : np.random.randn(<span class="number">5</span>)&#125;)</div><div class="line">df</div></pre></td></tr></table></figure><pre><code>      data1     data2 key1 key2
0 -0.204708  1.393406    a  one
1  0.478943  0.092908    a  two
2 -0.519439  0.281746    b  one
3 -0.555730  0.769023    b  two
4  1.965781  1.246435    a  one
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grouped = df[<span class="string">'data1'</span>].groupby(df[<span class="string">'key1'</span>])</div><div class="line">grouped</div></pre></td></tr></table></figure><pre><code>&lt;pandas.core.groupby.SeriesGroupBy object at 0x0000000008BAFA90&gt;
</code></pre><p>变量<code>groupby</code>是一个<code>GroupBy</code>对象。它实际还没有进行任何计算，只有进行计算之后才能显示结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grouped.mean()</div></pre></td></tr></table></figure><pre><code>key1
a    0.746672
b   -0.537585
Name: data1, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">means = df[<span class="string">'data1'</span>].groupby([df[<span class="string">'key1'</span>], df[<span class="string">'key2'</span>]]).mean()</div><div class="line">means</div></pre></td></tr></table></figure><pre><code>key1  key2
a     one     0.880536
      two     0.478943
b     one    -0.519439
      two    -0.555730
Name: data1, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">means.unstack()</div></pre></td></tr></table></figure><pre><code>key2       one       two
key1                    
a     0.880536  0.478943
b    -0.519439 -0.555730
</code></pre><p>只要长度相同即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">states = np.array([<span class="string">'Ohio'</span>, <span class="string">'California'</span>, <span class="string">'California'</span>, <span class="string">'Ohio'</span>, <span class="string">'Ohio'</span>])</div><div class="line">years = np.array([<span class="number">2005</span>, <span class="number">2005</span>, <span class="number">2006</span>, <span class="number">2005</span>, <span class="number">2006</span>])</div><div class="line">df[<span class="string">'data1'</span>].groupby([states, years]).mean()</div></pre></td></tr></table></figure><pre><code>California  2005    0.478943
            2006   -0.519439
Ohio        2005   -0.380219
            2006    1.965781
Name: data1, dtype: float64
</code></pre><p>只要数值型数据才会出现在结果中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.groupby(<span class="string">'key1'</span>).mean()</div></pre></td></tr></table></figure><pre><code>         data1     data2
key1                    
a     0.746672  0.910916
b    -0.537585  0.525384
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.groupby([<span class="string">'key1'</span>, <span class="string">'key2'</span>]).mean()</div></pre></td></tr></table></figure><pre><code>              data1     data2
key1 key2                    
a    one   0.880536  1.319920
     two   0.478943  0.092908
b    one  -0.519439  0.281746
     two  -0.555730  0.769023
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.groupby([<span class="string">'key1'</span>, <span class="string">'key2'</span>]).size()</div></pre></td></tr></table></figure><pre><code>key1  key2
a     one     2
      two     1
b     one     1
      two     1
dtype: int64
</code></pre><h3 id="对分组进行迭代"><a href="#对分组进行迭代" class="headerlink" title="对分组进行迭代"></a>对分组进行迭代</h3><p>显示分组数据（要通过这种迭代的方式才能显示）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.groupby(<span class="string">'key1'</span>)</div></pre></td></tr></table></figure><pre><code>&lt;pandas.core.groupby.DataFrameGroupBy object at 0x0000000034BC8CF8&gt;
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">df</div><div class="line"><span class="keyword">for</span> name, group <span class="keyword">in</span> df.groupby(<span class="string">'key1'</span>):</div><div class="line">    print(name)</div><div class="line">    print(group)</div></pre></td></tr></table></figure><pre><code>      data1     data2 key1 key2
0 -0.204708  1.393406    a  one
1  0.478943  0.092908    a  two
2 -0.519439  0.281746    b  one
3 -0.555730  0.769023    b  two
4  1.965781  1.246435    a  one



a
      data1     data2 key1 key2
0 -0.204708  1.393406    a  one
1  0.478943  0.092908    a  two
4  1.965781  1.246435    a  one
b
      data1     data2 key1 key2
2 -0.519439  0.281746    b  one
3 -0.555730  0.769023    b  two
</code></pre><p>同样进行迭代才能显示结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (k1, k2), group <span class="keyword">in</span> df.groupby([<span class="string">'key1'</span>, <span class="string">'key2'</span>]):</div><div class="line">    print((k1, k2))</div><div class="line">    print(group)</div></pre></td></tr></table></figure><pre><code>(&#39;a&#39;, &#39;one&#39;)
      data1     data2 key1 key2
0 -0.204708  1.393406    a  one
4  1.965781  1.246435    a  one
(&#39;a&#39;, &#39;two&#39;)
      data1     data2 key1 key2
1  0.478943  0.092908    a  two
(&#39;b&#39;, &#39;one&#39;)
      data1     data2 key1 key2
2 -0.519439  0.281746    b  one
(&#39;b&#39;, &#39;two&#39;)
     data1     data2 key1 key2
3 -0.55573  0.769023    b  two
</code></pre><p>将分组结果转化成一个字典（要先转化为一个列表）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pieces = dict(list(df.groupby(<span class="string">'key1'</span>)))</div><div class="line">pieces[<span class="string">'b'</span>]</div></pre></td></tr></table></figure><pre><code>      data1     data2 key1 key2
2 -0.519439  0.281746    b  one
3 -0.555730  0.769023    b  two
</code></pre><p>显示每一项的数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.dtypes</div></pre></td></tr></table></figure><pre><code>data1    float64
data2    float64
key1      object
key2      object
dtype: object
</code></pre><p>对列进行分组…按照数据类型来？！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grouped = df.groupby(df.dtypes, axis=<span class="number">1</span>)</div><div class="line">dict(list(grouped))</div></pre></td></tr></table></figure><pre><code>{dtype(&#39;float64&#39;):       data1     data2
 0 -0.204708  1.393406
 1  0.478943  0.092908
 2 -0.519439  0.281746
 3 -0.555730  0.769023
 4  1.965781  1.246435, dtype(&#39;O&#39;):   key1 key2
 0    a  one
 1    a  two
 2    b  one
 3    b  two
 4    a  one}
</code></pre><h3 id="选择一列或一组列"><a href="#选择一列或一组列" class="headerlink" title="选择一列或一组列"></a>选择一列或一组列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df.groupby(<span class="string">'key1'</span>)[<span class="string">'data1'</span>]</div><div class="line">df.groupby(<span class="string">'key1'</span>)[[<span class="string">'data2'</span>]]</div></pre></td></tr></table></figure><pre><code>&lt;pandas.core.groupby.SeriesGroupBy object at 0x0000000034BDC2E8&gt;






&lt;pandas.core.groupby.DataFrameGroupBy object at 0x0000000015EDF2B0&gt;
</code></pre><p>上述代码是以下代码的语法糖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df[<span class="string">'data1'</span>].groupby(df[<span class="string">'key1'</span>])</div><div class="line">df[[<span class="string">'data2'</span>]].groupby(df[<span class="string">'key1'</span>])</div></pre></td></tr></table></figure><pre><code>&lt;pandas.core.groupby.SeriesGroupBy object at 0x0000000034BDC8D0&gt;






&lt;pandas.core.groupby.DataFrameGroupBy object at 0x0000000034BDC898&gt;
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df.groupby([<span class="string">'key1'</span>, <span class="string">'key2'</span>])[[<span class="string">'data2'</span>]].mean()</div></pre></td></tr></table></figure><pre><code>              data2
key1 key2          
a    one   1.319920
     two   0.092908
b    one   0.281746
     two   0.769023
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s_grouped = df.groupby([<span class="string">'key1'</span>, <span class="string">'key2'</span>])[<span class="string">'data2'</span>]</div><div class="line">s_grouped</div></pre></td></tr></table></figure><pre><code>&lt;pandas.core.groupby.SeriesGroupBy object at 0x0000000034BDC6A0&gt;
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s_grouped.mean()</div></pre></td></tr></table></figure><pre><code>key1  key2
a     one     1.319920
      two     0.092908
b     one     0.281746
      two     0.769023
Name: data2, dtype: float64
</code></pre><h3 id="通过字典或Series进行分组"><a href="#通过字典或Series进行分组" class="headerlink" title="通过字典或Series进行分组"></a>通过字典或Series进行分组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">people = DataFrame(np.random.randn(<span class="number">5</span>, <span class="number">5</span>),</div><div class="line">                   columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>],</div><div class="line">                   index=[<span class="string">'Joe'</span>, <span class="string">'Steve'</span>, <span class="string">'Wes'</span>, <span class="string">'Jim'</span>, <span class="string">'Travis'</span>])</div><div class="line">people.ix[<span class="number">2</span>:<span class="number">3</span>, [<span class="string">'b'</span>, <span class="string">'c'</span>]] = np.nan <span class="comment"># Add a few NA values</span></div><div class="line">people</div></pre></td></tr></table></figure><pre><code>               a         b         c         d         e
Joe     1.007189 -1.296221  0.274992  0.228913  1.352917
Steve   0.886429 -2.001637 -0.371843  1.669025 -0.438570
Wes    -0.539741       NaN       NaN -1.021228 -0.577087
Jim     0.124121  0.302614  0.523772  0.000940  1.343810
Travis -0.713544 -0.831154 -2.370232 -1.860761 -0.860757
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mapping = &#123;<span class="string">'a'</span>: <span class="string">'red'</span>, <span class="string">'b'</span>: <span class="string">'red'</span>, <span class="string">'c'</span>: <span class="string">'blue'</span>,</div><div class="line">           <span class="string">'d'</span>: <span class="string">'blue'</span>, <span class="string">'e'</span>: <span class="string">'red'</span>, <span class="string">'f'</span> : <span class="string">'orange'</span>&#125;</div></pre></td></tr></table></figure><p>会跳过NA值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">by_column = people.groupby(mapping, axis=<span class="number">1</span>)</div><div class="line">by_column.sum()</div></pre></td></tr></table></figure><pre><code>            blue       red
Joe     0.503905  1.063885
Steve   1.297183 -1.553778
Wes    -1.021228 -1.116829
Jim     0.524712  1.770545
Travis -4.230992 -2.405455
</code></pre><p>上述功能同样可以通过Series实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">map_series = Series(mapping)</div><div class="line">map_series</div></pre></td></tr></table></figure><pre><code>a       red
b       red
c      blue
d      blue
e       red
f    orange
dtype: object
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">people.groupby(map_series, axis=<span class="number">1</span>).count()</div></pre></td></tr></table></figure><pre><code>        blue  red
Joe        2    3
Steve      2    3
Wes        1    2
Jim        2    3
Travis     2    3
</code></pre><h3 id="通过函数进行分组"><a href="#通过函数进行分组" class="headerlink" title="通过函数进行分组"></a>通过函数进行分组</h3><p>根据人名长度进行分组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">people.groupby(len).sum()</div></pre></td></tr></table></figure><pre><code>          a         b         c         d         e
3  0.591569 -0.993608  0.798764 -0.791374  2.119639
5  0.886429 -2.001637 -0.371843  1.669025 -0.438570
6 -0.713544 -0.831154 -2.370232 -1.860761 -0.860757
</code></pre><p>再加一个分组度量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">key_list = [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'two'</span>]</div><div class="line">people.groupby([len, key_list]).min()</div></pre></td></tr></table></figure><pre><code>              a         b         c         d         e
3 one -0.539741 -1.296221  0.274992 -1.021228 -0.577087
  two  0.124121  0.302614  0.523772  0.000940  1.343810
5 one  0.886429 -2.001637 -0.371843  1.669025 -0.438570
6 two -0.713544 -0.831154 -2.370232 -1.860761 -0.860757
</code></pre><h3 id="根据索引级别分组"><a href="#根据索引级别分组" class="headerlink" title="根据索引级别分组"></a>根据索引级别分组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">columns = pd.MultiIndex.from_arrays([[<span class="string">'US'</span>, <span class="string">'US'</span>, <span class="string">'US'</span>, <span class="string">'JP'</span>, <span class="string">'JP'</span>],</div><div class="line">                                    [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>]], names=[<span class="string">'cty'</span>, <span class="string">'tenor'</span>])</div><div class="line">hier_df = DataFrame(np.random.randn(<span class="number">4</span>, <span class="number">5</span>), columns=columns)</div><div class="line">hier_df</div></pre></td></tr></table></figure><pre><code>cty          US                            JP          
tenor         1         3         5         1         3
0      0.560145 -1.265934  0.119827 -1.063512  0.332883
1     -2.359419 -0.199543 -1.541996 -0.970736 -1.307030
2      0.286350  0.377984 -0.753887  0.331286  1.349742
3      0.069877  0.246674 -0.011862  1.004812  1.327195
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hier_df.groupby(level=<span class="string">'cty'</span>, axis=<span class="number">1</span>).count()</div></pre></td></tr></table></figure><pre><code>cty  JP  US
0     2   3
1     2   3
2     2   3
3     2   3
</code></pre><h2 id="数据聚合"><a href="#数据聚合" class="headerlink" title="数据聚合"></a>数据聚合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df</div></pre></td></tr></table></figure><pre><code>      data1     data2 key1 key2
0 -0.204708  1.393406    a  one
1  0.478943  0.092908    a  two
2 -0.519439  0.281746    b  one
3 -0.555730  0.769023    b  two
4  1.965781  1.246435    a  one
</code></pre><p>对分组后的数据进行相应操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grouped = df.groupby(<span class="string">'key1'</span>)</div><div class="line">grouped[<span class="string">'data1'</span>].quantile(<span class="number">0.9</span>)</div></pre></td></tr></table></figure><pre><code>key1
a    1.668413
b   -0.523068
Name: data1, dtype: float64
</code></pre><p>通过函数进行聚合操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">peak_to_peak</span><span class="params">(arr)</span>:</span></div><div class="line">    <span class="keyword">return</span> arr.max() - arr.min()</div><div class="line">grouped.agg(peak_to_peak)</div></pre></td></tr></table></figure><pre><code>         data1     data2
key1                    
a     2.170488  1.300498
b     0.036292  0.487276
</code></pre><p>列出分组后数据的一些常用属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grouped.describe()</div></pre></td></tr></table></figure><pre><code>               data1     data2
key1                          
a    count  3.000000  3.000000
     mean   0.746672  0.910916
     std    1.109736  0.712217
     min   -0.204708  0.092908
     25%    0.137118  0.669671
     50%    0.478943  1.246435
     75%    1.222362  1.319920
     max    1.965781  1.393406
b    count  2.000000  2.000000
     mean  -0.537585  0.525384
     std    0.025662  0.344556
     min   -0.555730  0.281746
     25%   -0.546657  0.403565
     50%   -0.537585  0.525384
     75%   -0.528512  0.647203
     max   -0.519439  0.769023
</code></pre><p>导入一个数据集用于接下来更加高级的聚合操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tips = pd.read_csv(<span class="string">'ch08/tips.csv'</span>)</div><div class="line"><span class="comment"># Add tip percentage of total bill</span></div><div class="line">tips[<span class="string">'tip_pct'</span>] = tips[<span class="string">'tip'</span>] / tips[<span class="string">'total_bill'</span>]</div><div class="line">tips[:<span class="number">6</span>]</div></pre></td></tr></table></figure><pre><code>   total_bill   tip     sex smoker  day    time  size_   tip_pct
0       16.99  1.01  Female     No  Sun  Dinner      2  0.059447
1       10.34  1.66    Male     No  Sun  Dinner      3  0.160542
2       21.01  3.50    Male     No  Sun  Dinner      3  0.166587
3       23.68  3.31    Male     No  Sun  Dinner      2  0.139780
4       24.59  3.61  Female     No  Sun  Dinner      4  0.146808
5       25.29  4.71    Male     No  Sun  Dinner      4  0.186240
</code></pre><h3 id="面向列的多函数应用"><a href="#面向列的多函数应用" class="headerlink" title="面向列的多函数应用"></a>面向列的多函数应用</h3><p>根据性别以及是否吸烟进行分类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grouped = tips.groupby([<span class="string">'sex'</span>, <span class="string">'smoker'</span>])</div></pre></td></tr></table></figure><p>算出不同类型的顾客所给的小费占总花费的比例的平均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grouped_pct = grouped[<span class="string">'tip_pct'</span>]</div><div class="line">grouped_pct.agg(<span class="string">'mean'</span>)</div></pre></td></tr></table></figure><pre><code>sex     smoker
Female  No        0.156921
        Yes       0.182150
Male    No        0.160669
        Yes       0.152771
Name: tip_pct, dtype: float64
</code></pre><p>同时算出比例的均值、标准差以及范围大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grouped_pct.agg([<span class="string">'mean'</span>, <span class="string">'std'</span>, peak_to_peak])</div></pre></td></tr></table></figure><pre><code>                   mean       std  peak_to_peak
sex    smoker                                  
Female No      0.156921  0.036421      0.195876
       Yes     0.182150  0.071595      0.360233
Male   No      0.160669  0.041849      0.220186
       Yes     0.152771  0.090588      0.674707
</code></pre><p>起一个别名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grouped_pct.agg([(<span class="string">'foo'</span>, <span class="string">'mean'</span>), (<span class="string">'bar'</span>, np.std)])</div></pre></td></tr></table></figure><pre><code>                    foo       bar
sex    smoker                    
Female No      0.156921  0.036421
       Yes     0.182150  0.071595
Male   No      0.160669  0.041849
       Yes     0.152771  0.090588
</code></pre><p>对分组后的数据的两个属性分别做三个不同的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">functions = [<span class="string">'count'</span>, <span class="string">'mean'</span>, <span class="string">'max'</span>]</div><div class="line">result = grouped[<span class="string">'tip_pct'</span>, <span class="string">'total_bill'</span>].agg(functions)</div><div class="line">result</div></pre></td></tr></table></figure><pre><code>              tip_pct                     total_bill                  
                count      mean       max      count       mean    max
sex    smoker                                                         
Female No          54  0.156921  0.252672         54  18.105185  35.83
       Yes         33  0.182150  0.416667         33  17.977879  44.30
Male   No          97  0.160669  0.291990         97  19.791237  48.33
       Yes         60  0.152771  0.710345         60  22.284500  50.81
</code></pre><p>提取出上述两个属性中的一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result[<span class="string">'tip_pct'</span>]</div></pre></td></tr></table></figure><pre><code>               count      mean       max
sex    smoker                           
Female No         54  0.156921  0.252672
       Yes        33  0.182150  0.416667
Male   No         97  0.160669  0.291990
       Yes        60  0.152771  0.710345
</code></pre><p>对多个属性进行多个操作的同时进行起别名的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ftuples = [(<span class="string">'Durchschnitt'</span>, <span class="string">'mean'</span>), (<span class="string">'Abweichung'</span>, np.var)]</div><div class="line">grouped[<span class="string">'tip_pct'</span>, <span class="string">'total_bill'</span>].agg(ftuples)</div></pre></td></tr></table></figure><pre><code>                   tip_pct              total_bill           
              Durchschnitt Abweichung Durchschnitt Abweichung
sex    smoker                                                
Female No         0.156921   0.001327    18.105185  53.092422
       Yes        0.182150   0.005126    17.977879  84.451517
Male   No         0.160669   0.001751    19.791237  76.152961
       Yes        0.152771   0.008206    22.284500  98.244673
</code></pre><p>对不同的列进行不同的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grouped.agg(&#123;<span class="string">'tip'</span> : np.max, <span class="string">'size_'</span> : <span class="string">'sum'</span>&#125;)</div></pre></td></tr></table></figure><pre><code>               size_   tip
sex    smoker             
Female No        140   5.2
       Yes        74   6.5
Male   No        263   9.0
       Yes       150  10.0
</code></pre><p>对不同的列进行数量不同类型不同的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grouped.agg(&#123;<span class="string">'tip_pct'</span> : [<span class="string">'min'</span>, <span class="string">'max'</span>, <span class="string">'mean'</span>, <span class="string">'std'</span>],</div><div class="line">             <span class="string">'size_'</span> : <span class="string">'sum'</span>&#125;)</div></pre></td></tr></table></figure><pre><code>                tip_pct                               size_
                    min       max      mean       std   sum
sex    smoker                                              
Female No      0.056797  0.252672  0.156921  0.036421   140
       Yes     0.056433  0.416667  0.182150  0.071595    74
Male   No      0.071804  0.291990  0.160669  0.041849   263
       Yes     0.035638  0.710345  0.152771  0.090588   150
</code></pre><h3 id="以无索引的形式返回聚合数据"><a href="#以无索引的形式返回聚合数据" class="headerlink" title="以无索引的形式返回聚合数据"></a>以无索引的形式返回聚合数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tips.groupby([<span class="string">'sex'</span>, <span class="string">'smoker'</span>], as_index=<span class="keyword">False</span>).mean()</div></pre></td></tr></table></figure><pre><code>      sex smoker  total_bill       tip     size_   tip_pct
0  Female     No   18.105185  2.773519  2.592593  0.156921
1  Female    Yes   17.977879  2.931515  2.242424  0.182150
2    Male     No   19.791237  3.113402  2.711340  0.160669
3    Male    Yes   22.284500  3.051167  2.500000  0.152771
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tips.groupby([<span class="string">'sex'</span>, <span class="string">'smoker'</span>], as_index=<span class="keyword">True</span>).mean()</div></pre></td></tr></table></figure><pre><code>               total_bill       tip     size_   tip_pct
sex    smoker                                          
Female No       18.105185  2.773519  2.592593  0.156921
       Yes      17.977879  2.931515  2.242424  0.182150
Male   No       19.791237  3.113402  2.711340  0.160669
       Yes      22.284500  3.051167  2.500000  0.152771
</code></pre><h2 id="分组级运算和转换"><a href="#分组级运算和转换" class="headerlink" title="分组级运算和转换"></a>分组级运算和转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df</div></pre></td></tr></table></figure><pre><code>      data1     data2 key1 key2
0 -0.204708  1.393406    a  one
1  0.478943  0.092908    a  two
2 -0.519439  0.281746    b  one
3 -0.555730  0.769023    b  two
4  1.965781  1.246435    a  one
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">k1_means = df.groupby(<span class="string">'key1'</span>).mean().add_prefix(<span class="string">'mean_'</span>)</div><div class="line">k1_means</div></pre></td></tr></table></figure><pre><code>      mean_data1  mean_data2
key1                        
a       0.746672    0.910916
b      -0.537585    0.525384
</code></pre><p>保留原索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pd.merge(df, k1_means, left_on=<span class="string">'key1'</span>, right_index=<span class="keyword">True</span>)</div></pre></td></tr></table></figure><pre><code>      data1     data2 key1 key2  mean_data1  mean_data2
0 -0.204708  1.393406    a  one    0.746672    0.910916
1  0.478943  0.092908    a  two    0.746672    0.910916
4  1.965781  1.246435    a  one    0.746672    0.910916
2 -0.519439  0.281746    b  one   -0.537585    0.525384
3 -0.555730  0.769023    b  two   -0.537585    0.525384
</code></pre><p>另一个例子，以更简洁的方式实现上述功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">people</div></pre></td></tr></table></figure><pre><code>               a         b         c         d         e
Joe     1.007189 -1.296221  0.274992  0.228913  1.352917
Steve   0.886429 -2.001637 -0.371843  1.669025 -0.438570
Wes    -0.539741       NaN       NaN -1.021228 -0.577087
Jim     0.124121  0.302614  0.523772  0.000940  1.343810
Travis -0.713544 -0.831154 -2.370232 -1.860761 -0.860757
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">key = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>]</div><div class="line">people.groupby(key).mean()</div></pre></td></tr></table></figure><pre><code>            a         b         c         d         e
one -0.082032 -1.063687 -1.047620 -0.884358 -0.028309
two  0.505275 -0.849512  0.075965  0.834983  0.452620
</code></pre><p>将聚合后的结果放回原来数据中合适的位置（标量进行广播）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">people.groupby(key).transform(np.mean)</div></pre></td></tr></table></figure><pre><code>               a         b         c         d         e
Joe    -0.082032 -1.063687 -1.047620 -0.884358 -0.028309
Steve   0.505275 -0.849512  0.075965  0.834983  0.452620
Wes    -0.082032 -1.063687 -1.047620 -0.884358 -0.028309
Jim     0.505275 -0.849512  0.075965  0.834983  0.452620
Travis -0.082032 -1.063687 -1.047620 -0.884358 -0.028309
</code></pre><p>同时减去均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">demean</span><span class="params">(arr)</span>:</span></div><div class="line">    <span class="keyword">return</span> arr - arr.mean()</div><div class="line">demeaned = people.groupby(key).transform(demean)</div><div class="line">demeaned</div></pre></td></tr></table></figure><pre><code>               a         b         c         d         e
Joe     1.089221 -0.232534  1.322612  1.113271  1.381226
Steve   0.381154 -1.152125 -0.447807  0.834043 -0.891190
Wes    -0.457709       NaN       NaN -0.136869 -0.548778
Jim    -0.381154  1.152125  0.447807 -0.834043  0.891190
Travis -0.631512  0.232534 -1.322612 -0.976402 -0.832448
</code></pre><p>检验一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">demeaned.groupby(key).mean()</div></pre></td></tr></table></figure><pre><code>                a             b    c             d    e
one  0.000000e+00 -1.110223e-16  0.0  7.401487e-17  0.0
two -2.775558e-17  0.000000e+00  0.0  0.000000e+00  0.0
</code></pre><h3 id="Apply-一般性的-“拆分-应用-合并”"><a href="#Apply-一般性的-“拆分-应用-合并”" class="headerlink" title="Apply: 一般性的 “拆分-应用-合并”"></a>Apply: 一般性的 “拆分-应用-合并”</h3><p>小费数据，根据某一个属性从大到小进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(df, n=<span class="number">5</span>, column=<span class="string">'tip_pct'</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> df.sort_values(by=column)[-n:]</div><div class="line">top(tips, n=<span class="number">6</span>)</div></pre></td></tr></table></figure><pre><code>     total_bill   tip     sex smoker  day    time  size_   tip_pct
109       14.31  4.00  Female    Yes  Sat  Dinner      2  0.279525
183       23.17  6.50    Male    Yes  Sun  Dinner      4  0.280535
232       11.61  3.39    Male     No  Sat  Dinner      2  0.291990
67         3.07  1.00  Female    Yes  Sat  Dinner      1  0.325733
178        9.60  4.00  Female    Yes  Sun  Dinner      2  0.416667
172        7.25  5.15    Male    Yes  Sun  Dinner      2  0.710345
</code></pre><p>在分组后的数据集上进行上述排序操作，说明分组后的每一组都是一个DataFrame对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tips.groupby(<span class="string">'smoker'</span>).apply(top)</div></pre></td></tr></table></figure><pre><code>            total_bill   tip     sex smoker   day    time  size_   tip_pct
smoker                                                                    
No     88        24.71  5.85    Male     No  Thur   Lunch      2  0.236746
       185       20.69  5.00    Male     No   Sun  Dinner      5  0.241663
       51        10.29  2.60  Female     No   Sun  Dinner      2  0.252672
       149        7.51  2.00    Male     No  Thur   Lunch      2  0.266312
       232       11.61  3.39    Male     No   Sat  Dinner      2  0.291990
Yes    109       14.31  4.00  Female    Yes   Sat  Dinner      2  0.279525
       183       23.17  6.50    Male    Yes   Sun  Dinner      4  0.280535
       67         3.07  1.00  Female    Yes   Sat  Dinner      1  0.325733
       178        9.60  4.00  Female    Yes   Sun  Dinner      2  0.416667
       172        7.25  5.15    Male    Yes   Sun  Dinner      2  0.710345
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tips.groupby([<span class="string">'smoker'</span>, <span class="string">'day'</span>]).apply(top, n=<span class="number">1</span>, column=<span class="string">'total_bill'</span>)</div></pre></td></tr></table></figure><pre><code>                 total_bill    tip     sex smoker   day    time  size_  \
smoker day                                                               
No     Fri  94        22.75   3.25  Female     No   Fri  Dinner      2   
       Sat  212       48.33   9.00    Male     No   Sat  Dinner      4   
       Sun  156       48.17   5.00    Male     No   Sun  Dinner      6   
       Thur 142       41.19   5.00    Male     No  Thur   Lunch      5   
Yes    Fri  95        40.17   4.73    Male    Yes   Fri  Dinner      4   
       Sat  170       50.81  10.00    Male    Yes   Sat  Dinner      3   
       Sun  182       45.35   3.50    Male    Yes   Sun  Dinner      3   
       Thur 197       43.11   5.00  Female    Yes  Thur   Lunch      4   

                  tip_pct  
smoker day                 
No     Fri  94   0.142857  
       Sat  212  0.186220  
       Sun  156  0.103799  
       Thur 142  0.121389  
Yes    Fri  95   0.117750  
       Sat  170  0.196812  
       Sun  182  0.077178  
       Thur 197  0.115982  
</code></pre><p>获取分组后数据某一列的统计数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">result = tips.groupby(<span class="string">'smoker'</span>)[<span class="string">'tip_pct'</span>].describe()</div><div class="line">result</div></pre></td></tr></table></figure><pre><code>smoker       
No      count    151.000000
        mean       0.159328
        std        0.039910
        min        0.056797
        25%        0.136906
        50%        0.155625
        75%        0.185014
        max        0.291990
Yes     count     93.000000
        mean       0.163196
        std        0.085119
        min        0.035638
        25%        0.106771
        50%        0.153846
        75%        0.195059
        max        0.710345
Name: tip_pct, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result.unstack(<span class="string">'smoker'</span>)</div></pre></td></tr></table></figure><pre><code>smoker          No        Yes
count   151.000000  93.000000
mean      0.159328   0.163196
std       0.039910   0.085119
min       0.056797   0.035638
25%       0.136906   0.106771
50%       0.155625   0.153846
75%       0.185014   0.195059
max       0.291990   0.710345
</code></pre><p>grouped 根据性别以及是否吸烟进行分组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f = <span class="keyword">lambda</span> x: x.describe()</div><div class="line">grouped.apply(f)</div></pre></td></tr></table></figure><pre><code>                     total_bill        tip      size_    tip_pct
sex    smoker                                                   
Female No     count   54.000000  54.000000  54.000000  54.000000
              mean    18.105185   2.773519   2.592593   0.156921
              std      7.286455   1.128425   1.073146   0.036421
              min      7.250000   1.000000   1.000000   0.056797
              25%     12.650000   2.000000   2.000000   0.139708
              50%     16.690000   2.680000   2.000000   0.149691
              75%     20.862500   3.437500   3.000000   0.181630
              max     35.830000   5.200000   6.000000   0.252672
       Yes    count   33.000000  33.000000  33.000000  33.000000
              mean    17.977879   2.931515   2.242424   0.182150
              std      9.189751   1.219916   0.613917   0.071595
              min      3.070000   1.000000   1.000000   0.056433
              25%     12.760000   2.000000   2.000000   0.152439
              50%     16.270000   2.880000   2.000000   0.173913
              75%     22.120000   3.500000   2.000000   0.198216
              max     44.300000   6.500000   4.000000   0.416667
Male   No     count   97.000000  97.000000  97.000000  97.000000
              mean    19.791237   3.113402   2.711340   0.160669
              std      8.726566   1.489559   0.989094   0.041849
              min      7.510000   1.250000   2.000000   0.071804
              25%     13.810000   2.000000   2.000000   0.131810
              50%     18.240000   2.740000   2.000000   0.157604
              75%     22.820000   3.710000   3.000000   0.186220
              max     48.330000   9.000000   6.000000   0.291990
       Yes    count   60.000000  60.000000  60.000000  60.000000
              mean    22.284500   3.051167   2.500000   0.152771
              std      9.911845   1.500120   0.892530   0.090588
              min      7.250000   1.000000   1.000000   0.035638
              25%     15.272500   2.000000   2.000000   0.101845
              50%     20.390000   3.000000   2.000000   0.141015
              75%     28.572500   3.820000   3.000000   0.191697
              max     50.810000  10.000000   5.000000   0.710345
</code></pre><h4 id="禁止分组键"><a href="#禁止分组键" class="headerlink" title="禁止分组键"></a>禁止分组键</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tips.groupby(<span class="string">'smoker'</span>, group_keys=<span class="keyword">True</span>).apply(top)</div></pre></td></tr></table></figure><pre><code>            total_bill   tip     sex smoker   day    time  size_   tip_pct
smoker                                                                    
No     88        24.71  5.85    Male     No  Thur   Lunch      2  0.236746
       185       20.69  5.00    Male     No   Sun  Dinner      5  0.241663
       51        10.29  2.60  Female     No   Sun  Dinner      2  0.252672
       149        7.51  2.00    Male     No  Thur   Lunch      2  0.266312
       232       11.61  3.39    Male     No   Sat  Dinner      2  0.291990
Yes    109       14.31  4.00  Female    Yes   Sat  Dinner      2  0.279525
       183       23.17  6.50    Male    Yes   Sun  Dinner      4  0.280535
       67         3.07  1.00  Female    Yes   Sat  Dinner      1  0.325733
       178        9.60  4.00  Female    Yes   Sun  Dinner      2  0.416667
       172        7.25  5.15    Male    Yes   Sun  Dinner      2  0.710345
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tips.groupby(<span class="string">'smoker'</span>, group_keys=<span class="keyword">False</span>).apply(top)</div></pre></td></tr></table></figure><pre><code>     total_bill   tip     sex smoker   day    time  size_   tip_pct
88        24.71  5.85    Male     No  Thur   Lunch      2  0.236746
185       20.69  5.00    Male     No   Sun  Dinner      5  0.241663
51        10.29  2.60  Female     No   Sun  Dinner      2  0.252672
149        7.51  2.00    Male     No  Thur   Lunch      2  0.266312
232       11.61  3.39    Male     No   Sat  Dinner      2  0.291990
109       14.31  4.00  Female    Yes   Sat  Dinner      2  0.279525
183       23.17  6.50    Male    Yes   Sun  Dinner      4  0.280535
67         3.07  1.00  Female    Yes   Sat  Dinner      1  0.325733
178        9.60  4.00  Female    Yes   Sun  Dinner      2  0.416667
172        7.25  5.15    Male    Yes   Sun  Dinner      2  0.710345
</code></pre><h3 id="分位数与桶分析"><a href="#分位数与桶分析" class="headerlink" title="分位数与桶分析"></a>分位数与桶分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">frame = DataFrame(&#123;<span class="string">'data1'</span>: np.random.randn(<span class="number">1000</span>),</div><div class="line">                   <span class="string">'data2'</span>: np.random.randn(<span class="number">1000</span>)&#125;)</div><div class="line">factor = pd.cut(frame.data1, <span class="number">4</span>)</div><div class="line">factor[:<span class="number">10</span>]</div></pre></td></tr></table></figure><pre><code>0     (-1.23, 0.489]
1    (-2.956, -1.23]
2     (-1.23, 0.489]
3     (0.489, 2.208]
4     (-1.23, 0.489]
5     (0.489, 2.208]
6     (-1.23, 0.489]
7     (-1.23, 0.489]
8     (0.489, 2.208]
9     (0.489, 2.208]
Name: data1, dtype: category
Categories (4, object): [(-2.956, -1.23] &lt; (-1.23, 0.489] &lt; (0.489, 2.208] &lt; (2.208, 3.928]]
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stats</span><span class="params">(group)</span>:</span></div><div class="line">    <span class="keyword">return</span> &#123;<span class="string">'min'</span>: group.min(), <span class="string">'max'</span>: group.max(),</div><div class="line">            <span class="string">'count'</span>: group.count(), <span class="string">'mean'</span>: group.mean()&#125;</div><div class="line"></div><div class="line">grouped = frame.data2.groupby(factor)</div><div class="line">grouped.apply(get_stats).unstack()</div><div class="line"></div><div class="line"><span class="comment">#ADAPT the output is not sorted in the book while this is the case now (swap first two lines)</span></div></pre></td></tr></table></figure><pre><code>                 count       max      mean       min
data1                                               
(-2.956, -1.23]   95.0  1.670835 -0.039521 -3.399312
(-1.23, 0.489]   598.0  3.260383 -0.002051 -2.989741
(0.489, 2.208]   297.0  2.954439  0.081822 -3.745356
(2.208, 3.928]    10.0  1.765640  0.024750 -1.929776
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Return quantile numbers</span></div><div class="line">grouping = pd.qcut(frame.data1, <span class="number">10</span>, labels=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">grouped = frame.data2.groupby(grouping)</div><div class="line">grouped.apply(get_stats).unstack()</div></pre></td></tr></table></figure><pre><code>       count       max      mean       min
data1                                     
0      100.0  1.670835 -0.049902 -3.399312
1      100.0  2.628441  0.030989 -1.950098
2      100.0  2.527939 -0.067179 -2.925113
3      100.0  3.260383  0.065713 -2.315555
4      100.0  2.074345 -0.111653 -2.047939
5      100.0  2.184810  0.052130 -2.989741
6      100.0  2.458842 -0.021489 -2.223506
7      100.0  2.954439 -0.026459 -3.056990
8      100.0  2.735527  0.103406 -3.745356
9      100.0  2.377020  0.220122 -2.064111
</code></pre><h3 id="Example-用特定分组的值填充缺失值"><a href="#Example-用特定分组的值填充缺失值" class="headerlink" title="Example: 用特定分组的值填充缺失值"></a>Example: 用特定分组的值填充缺失值</h3><p>填一些缺失值进去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s = Series(np.random.randn(<span class="number">6</span>))</div><div class="line">s[::<span class="number">2</span>] = np.nan</div><div class="line">s</div></pre></td></tr></table></figure><pre><code>0         NaN
1   -0.125921
2         NaN
3   -0.884475
4         NaN
5    0.227290
dtype: float64
</code></pre><p>用均值填充缺失值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s.fillna(s.mean())</div></pre></td></tr></table></figure><pre><code>0   -0.261035
1   -0.125921
2   -0.261035
3   -0.884475
4   -0.261035
5    0.227290
dtype: float64
</code></pre><p>同样，填一些缺失值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">states = [<span class="string">'Ohio'</span>, <span class="string">'New York'</span>, <span class="string">'Vermont'</span>, <span class="string">'Florida'</span>,</div><div class="line">          <span class="string">'Oregon'</span>, <span class="string">'Nevada'</span>, <span class="string">'California'</span>, <span class="string">'Idaho'</span>]</div><div class="line">group_key = [<span class="string">'East'</span>] * <span class="number">4</span> + [<span class="string">'West'</span>] * <span class="number">4</span></div><div class="line">data = Series(np.random.randn(<span class="number">8</span>), index=states)</div><div class="line">data[[<span class="string">'Vermont'</span>, <span class="string">'Nevada'</span>, <span class="string">'Idaho'</span>]] = np.nan</div><div class="line">data</div></pre></td></tr></table></figure><pre><code>Ohio          0.922264
New York     -2.153545
Vermont            NaN
Florida      -0.375842
Oregon        0.329939
Nevada             NaN
California    1.105913
Idaho              NaN
dtype: float64
</code></pre><p>计算分组均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data.groupby(group_key).mean()</div></pre></td></tr></table></figure><pre><code>East   -0.535707
West    0.717926
dtype: float64
</code></pre><p>这里的<code>g</code>指代调用<code>apply</code>的主体，也就是<code>data.groupby(group_key)</code>分组后的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fill_mean = <span class="keyword">lambda</span> g: g.fillna(g.mean())</div><div class="line">data.groupby(group_key).apply(fill_mean)</div></pre></td></tr></table></figure><pre><code>Ohio          0.922264
New York     -2.153545
Vermont      -0.535707
Florida      -0.375842
Oregon        0.329939
Nevada        0.717926
California    1.105913
Idaho         0.717926
dtype: float64
</code></pre><p>由于<code>groupby</code>操作后得到的结果类似于一个字典，字典<code>key</code>是组名，<code>value</code>是一个<code>DataFrame Object</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fill_values = &#123;<span class="string">'East'</span>: <span class="number">0.5</span>, <span class="string">'West'</span>: <span class="number">-1</span>&#125;</div><div class="line">fill_func = <span class="keyword">lambda</span> g: g.fillna(fill_values[g.name])</div><div class="line"></div><div class="line">data.groupby(group_key).apply(fill_func)</div></pre></td></tr></table></figure><pre><code>Ohio          0.922264
New York     -2.153545
Vermont       0.500000
Florida      -0.375842
Oregon        0.329939
Nevada       -1.000000
California    1.105913
Idaho        -1.000000
dtype: float64
</code></pre><h3 id="Example-随机采样和排列"><a href="#Example-随机采样和排列" class="headerlink" title="Example: 随机采样和排列"></a>Example: 随机采样和排列</h3><p>构造扑克牌</p><p>红桃<code>Hearts</code>, 黑桃<code>Spades</code>, 梅花<code>Clubs</code>, 方片<code>Diamonds</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Hearts, Spades, Clubs, Diamonds</span></div><div class="line">suits = [<span class="string">'H'</span>, <span class="string">'S'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>]</div><div class="line">card_val = (list(range(<span class="number">1</span>, <span class="number">11</span>)) + [<span class="number">10</span>] * <span class="number">3</span>) * <span class="number">4</span></div><div class="line">base_names = [<span class="string">'A'</span>] + range(<span class="number">2</span>, <span class="number">11</span>) + [<span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'Q'</span>]</div><div class="line">cards = []</div><div class="line"><span class="keyword">for</span> suit <span class="keyword">in</span> [<span class="string">'H'</span>, <span class="string">'S'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>]:</div><div class="line">    cards.extend(str(num) + suit <span class="keyword">for</span> num <span class="keyword">in</span> base_names)</div><div class="line"></div><div class="line">deck = Series(card_val, index=cards)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deck[:<span class="number">13</span>]</div></pre></td></tr></table></figure><pre><code>AH      1
2H      2
3H      3
4H      4
5H      5
6H      6
7H      7
8H      8
9H      9
10H    10
JH     10
KH     10
QH     10
dtype: int64
</code></pre><p>随机抽牌</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">(deck, n=<span class="number">5</span>)</span>:</span></div><div class="line">    <span class="keyword">return</span> deck.take(np.random.permutation(len(deck))[:n])</div><div class="line">draw(deck)</div></pre></td></tr></table></figure><pre><code>AD     1
8C     8
5H     5
KC    10
2C     2
dtype: int64
</code></pre><p>分类抽牌</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">get_suit = <span class="keyword">lambda</span> card: card[<span class="number">-1</span>] <span class="comment"># last letter is suit</span></div><div class="line">deck.groupby(get_suit).apply(draw, n=<span class="number">2</span>)</div></pre></td></tr></table></figure><pre><code>C  2C     2
   3C     3
D  KD    10
   8D     8
H  KH    10
   3H     3
S  2S     2
   4S     4
dtype: int64
</code></pre><p>去掉分组键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># alternatively</span></div><div class="line">deck.groupby(get_suit, group_keys=<span class="keyword">False</span>).apply(draw, n=<span class="number">2</span>)</div></pre></td></tr></table></figure><pre><code>KC    10
JC    10
AD     1
5D     5
5H     5
6H     6
7S     7
KS    10
dtype: int64
</code></pre><h3 id="Example-分组加权平均数和相关系数"><a href="#Example-分组加权平均数和相关系数" class="headerlink" title="Example: 分组加权平均数和相关系数"></a>Example: 分组加权平均数和相关系数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">df = DataFrame(&#123;<span class="string">'category'</span>: [<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>],</div><div class="line">                <span class="string">'data'</span>: np.random.randn(<span class="number">8</span>),</div><div class="line">                <span class="string">'weights'</span>: np.random.rand(<span class="number">8</span>)&#125;)</div><div class="line">df</div></pre></td></tr></table></figure><pre><code>  category      data   weights
0        a  1.561587  0.957515
1        a  1.219984  0.347267
2        a -0.482239  0.581362
3        a  0.315667  0.217091
4        b -0.047852  0.894406
5        b -0.454145  0.918564
6        b -0.556774  0.277825
7        b  0.253321  0.955905
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">grouped = df.groupby(<span class="string">'category'</span>)</div><div class="line">get_wavg = <span class="keyword">lambda</span> g: np.average(g[<span class="string">'data'</span>], weights=g[<span class="string">'weights'</span>])</div><div class="line">grouped.apply(get_wavg)</div></pre></td></tr></table></figure><pre><code>category
a    0.811643
b   -0.122262
dtype: float64
</code></pre><p><code>stock</code>数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">close_px = pd.read_csv(<span class="string">'ch09/stock_px.csv'</span>, parse_dates=<span class="keyword">True</span>, index_col=<span class="number">0</span>)</div><div class="line">close_px.info()</div></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
DatetimeIndex: 2214 entries, 2003-01-02 to 2011-10-14
Data columns (total 4 columns):
AAPL    2214 non-null float64
MSFT    2214 non-null float64
XOM     2214 non-null float64
SPX     2214 non-null float64
dtypes: float64(4)
memory usage: 86.5 KB
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">close_px[<span class="number">-4</span>:]</div></pre></td></tr></table></figure><pre><code>              AAPL   MSFT    XOM      SPX
2011-10-11  400.29  27.00  76.27  1195.54
2011-10-12  402.19  26.96  77.16  1207.25
2011-10-13  408.43  27.18  76.37  1203.66
2011-10-14  422.00  27.27  78.11  1224.58
</code></pre><p>计算相关系数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rets = close_px.pct_change().dropna()</div><div class="line">spx_corr = <span class="keyword">lambda</span> x: x.corrwith(x[<span class="string">'SPX'</span>])</div><div class="line">by_year = rets.groupby(<span class="keyword">lambda</span> x: x.year)</div><div class="line">by_year.apply(spx_corr)</div></pre></td></tr></table></figure><pre><code>          AAPL      MSFT       XOM  SPX
2003  0.541124  0.745174  0.661265  1.0
2004  0.374283  0.588531  0.557742  1.0
2005  0.467540  0.562374  0.631010  1.0
2006  0.428267  0.406126  0.518514  1.0
2007  0.508118  0.658770  0.786264  1.0
2008  0.681434  0.804626  0.828303  1.0
2009  0.707103  0.654902  0.797921  1.0
2010  0.710105  0.730118  0.839057  1.0
2011  0.691931  0.800996  0.859975  1.0
</code></pre><p><code>lambda</code>看来有很大用处</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Annual correlation of Apple with Microsoft</span></div><div class="line">by_year.apply(<span class="keyword">lambda</span> g: g[<span class="string">'AAPL'</span>].corr(g[<span class="string">'MSFT'</span>]))</div></pre></td></tr></table></figure><pre><code>2003    0.480868
2004    0.259024
2005    0.300093
2006    0.161735
2007    0.417738
2008    0.611901
2009    0.432738
2010    0.571946
2011    0.581987
dtype: float64
</code></pre><h3 id="Example-分组级线型回归"><a href="#Example-分组级线型回归" class="headerlink" title="Example: 分组级线型回归"></a>Example: 分组级线型回归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">regress</span><span class="params">(data, yvar, xvars)</span>:</span></div><div class="line">    Y = data[yvar]</div><div class="line">    X = data[xvars]</div><div class="line">    X[<span class="string">'intercept'</span>] = <span class="number">1.</span></div><div class="line">    result = sm.OLS(Y, X).fit()</div><div class="line">    <span class="keyword">return</span> result.params</div></pre></td></tr></table></figure><p>这样传参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">by_year.apply(regress, <span class="string">'AAPL'</span>, [<span class="string">'SPX'</span>])</div></pre></td></tr></table></figure><pre><code>           SPX  intercept
2003  1.195406   0.000710
2004  1.363463   0.004201
2005  1.766415   0.003246
2006  1.645496   0.000080
2007  1.198761   0.003438
2008  0.968016  -0.001110
2009  0.879103   0.002954
2010  1.052608   0.001261
2011  0.806605   0.001514
</code></pre><h2 id="透视表和交叉表"><a href="#透视表和交叉表" class="headerlink" title="透视表和交叉表"></a>透视表和交叉表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tips[:<span class="number">10</span>]</div></pre></td></tr></table></figure><pre><code>   total_bill   tip     sex smoker  day    time  size_   tip_pct
0       16.99  1.01  Female     No  Sun  Dinner      2  0.059447
1       10.34  1.66    Male     No  Sun  Dinner      3  0.160542
2       21.01  3.50    Male     No  Sun  Dinner      3  0.166587
3       23.68  3.31    Male     No  Sun  Dinner      2  0.139780
4       24.59  3.61  Female     No  Sun  Dinner      4  0.146808
5       25.29  4.71    Male     No  Sun  Dinner      4  0.186240
6        8.77  2.00    Male     No  Sun  Dinner      2  0.228050
7       26.88  3.12    Male     No  Sun  Dinner      4  0.116071
8       15.04  1.96    Male     No  Sun  Dinner      2  0.130319
9       14.78  3.23    Male     No  Sun  Dinner      2  0.218539
</code></pre><p><code>pivot_table</code>默认情况相当于分组后进行<code>mean()</code>操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tips.pivot_table(index=[<span class="string">'sex'</span>, <span class="string">'smoker'</span>])</div></pre></td></tr></table></figure><pre><code>                  size_       tip   tip_pct  total_bill
sex    smoker                                          
Female No      2.592593  2.773519  0.156921   18.105185
       Yes     2.242424  2.931515  0.182150   17.977879
Male   No      2.711340  3.113402  0.160669   19.791237
       Yes     2.500000  3.051167  0.152771   22.284500
</code></pre><p>指定分组度量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tips.pivot_table([<span class="string">'tip_pct'</span>, <span class="string">'size_'</span>], index=[<span class="string">'sex'</span>, <span class="string">'day'</span>],</div><div class="line">                 columns=<span class="string">'smoker'</span>)</div></pre></td></tr></table></figure><pre><code>              tip_pct               size_          
smoker             No       Yes        No       Yes
sex    day                                         
Female Fri   0.165296  0.209129  2.500000  2.000000
       Sat   0.147993  0.163817  2.307692  2.200000
       Sun   0.165710  0.237075  3.071429  2.500000
       Thur  0.155971  0.163073  2.480000  2.428571
Male   Fri   0.138005  0.144730  2.000000  2.125000
       Sat   0.162132  0.139067  2.656250  2.629630
       Sun   0.158291  0.173964  2.883721  2.600000
       Thur  0.165706  0.164417  2.500000  2.300000
</code></pre><p>增加ALL列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tips.pivot_table([<span class="string">'tip_pct'</span>, <span class="string">'size_'</span>], index=[<span class="string">'sex'</span>, <span class="string">'day'</span>],</div><div class="line">                 columns=<span class="string">'smoker'</span>, margins=<span class="keyword">True</span>)</div></pre></td></tr></table></figure><pre><code>              tip_pct                         size_                    
smoker             No       Yes       All        No       Yes       All
sex    day                                                             
Female Fri   0.165296  0.209129  0.199388  2.500000  2.000000  2.111111
       Sat   0.147993  0.163817  0.156470  2.307692  2.200000  2.250000
       Sun   0.165710  0.237075  0.181569  3.071429  2.500000  2.944444
       Thur  0.155971  0.163073  0.157525  2.480000  2.428571  2.468750
Male   Fri   0.138005  0.144730  0.143385  2.000000  2.125000  2.100000
       Sat   0.162132  0.139067  0.151577  2.656250  2.629630  2.644068
       Sun   0.158291  0.173964  0.162344  2.883721  2.600000  2.810345
       Thur  0.165706  0.164417  0.165276  2.500000  2.300000  2.433333
All          0.159328  0.163196  0.160803  2.668874  2.408602  2.569672
</code></pre><p>更换一个分组度量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tips.pivot_table(<span class="string">'tip_pct'</span>, index=[<span class="string">'sex'</span>, <span class="string">'smoker'</span>], columns=<span class="string">'day'</span>,</div><div class="line">                 aggfunc=len, margins=<span class="keyword">True</span>)</div></pre></td></tr></table></figure><pre><code>day             Fri   Sat   Sun  Thur    All
sex    smoker                               
Female No       2.0  13.0  14.0  25.0   54.0
       Yes      7.0  15.0   4.0   7.0   33.0
Male   No       2.0  32.0  43.0  20.0   97.0
       Yes      8.0  27.0  15.0  10.0   60.0
All            19.0  87.0  76.0  62.0  244.0
</code></pre><p>分组计数并填充（可能存在空组合）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tips.pivot_table(<span class="string">'size_'</span>, index=[<span class="string">'time'</span>, <span class="string">'sex'</span>, <span class="string">'smoker'</span>],</div><div class="line">                 columns=<span class="string">'day'</span>, aggfunc=<span class="string">'sum'</span>, fill_value=<span class="number">0</span>)</div></pre></td></tr></table></figure><pre><code>day                   Fri  Sat  Sun  Thur
time   sex    smoker                     
Dinner Female No        2   30   43     2
              Yes       8   33   10     0
       Male   No        4   85  124     0
              Yes      12   71   39     0
Lunch  Female No        3    0    0    60
              Yes       6    0    0    17
       Male   No        0    0    0    50
              Yes       5    0    0    23
</code></pre><h3 id="交叉表-crosstab"><a href="#交叉表-crosstab" class="headerlink" title="交叉表: crosstab"></a>交叉表: crosstab</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> StringIO <span class="keyword">import</span> StringIO</div><div class="line">data = <span class="string">"""\</span></div><div class="line">Sample    Gender    Handedness</div><div class="line">1    Female    Right-handed</div><div class="line">2    Male    Left-handed</div><div class="line">3    Female    Right-handed</div><div class="line">4    Male    Right-handed</div><div class="line">5    Male    Left-handed</div><div class="line">6    Male    Right-handed</div><div class="line">7    Female    Right-handed</div><div class="line">8    Female    Left-handed</div><div class="line">9    Male    Right-handed</div><div class="line">10    Female    Right-handed"""</div><div class="line">data = pd.read_table(StringIO(data), sep=<span class="string">'\s+'</span>)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data</div></pre></td></tr></table></figure><pre><code>   Sample  Gender    Handedness
0       1  Female  Right-handed
1       2    Male   Left-handed
2       3  Female  Right-handed
3       4    Male  Right-handed
4       5    Male   Left-handed
5       6    Male  Right-handed
6       7  Female  Right-handed
7       8  Female   Left-handed
8       9    Male  Right-handed
9      10  Female  Right-handed
</code></pre><p>交叉表就是在…计数…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pd.crosstab(data.Gender, data.Handedness, margins=<span class="keyword">True</span>)</div></pre></td></tr></table></figure><pre><code>Handedness  Left-handed  Right-handed  All
Gender                                    
Female                1             4    5
Male                  2             3    5
All                   3             7   10
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pd.crosstab([tips.time, tips.day], tips.smoker, margins=<span class="keyword">True</span>)</div></pre></td></tr></table></figure><pre><code>smoker        No  Yes  All
time   day                
Dinner Fri     3    9   12
       Sat    45   42   87
       Sun    57   19   76
       Thur    1    0    1
Lunch  Fri     1    6    7
       Thur   44   17   61
All          151   93  244
</code></pre><h2 id="Example-2012-联邦选举委员会数据库"><a href="#Example-2012-联邦选举委员会数据库" class="headerlink" title="Example: 2012 联邦选举委员会数据库"></a>Example: 2012 联邦选举委员会数据库</h2><p>这个数据库包括赞助人的姓名，职业、雇主、地址以及出资额等信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fec = pd.read_csv(<span class="string">'ch09/P00000001-ALL.csv'</span>)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fec.info()</div></pre></td></tr></table></figure><pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 1001731 entries, 0 to 1001730
Data columns (total 16 columns):
cmte_id              1001731 non-null object
cand_id              1001731 non-null object
cand_nm              1001731 non-null object
contbr_nm            1001731 non-null object
contbr_city          1001712 non-null object
contbr_st            1001727 non-null object
contbr_zip           1001620 non-null object
contbr_employer      988002 non-null object
contbr_occupation    993301 non-null object
contb_receipt_amt    1001731 non-null float64
contb_receipt_dt     1001731 non-null object
receipt_desc         14166 non-null object
memo_cd              92482 non-null object
memo_text            97770 non-null object
form_tp              1001731 non-null object
file_num             1001731 non-null int64
dtypes: float64(1), int64(1), object(14)
memory usage: 122.3+ MB
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fec.ix[<span class="number">123456</span>]</div></pre></td></tr></table></figure><pre><code>cmte_id                             C00431445
cand_id                             P80003338
cand_nm                         Obama, Barack
contbr_nm                         ELLMAN, IRA
contbr_city                             TEMPE
contbr_st                                  AZ
contbr_zip                          852816719
contbr_employer      ARIZONA STATE UNIVERSITY
contbr_occupation                   PROFESSOR
contb_receipt_amt                          50
contb_receipt_dt                    01-DEC-11
receipt_desc                              NaN
memo_cd                                   NaN
memo_text                                 NaN
form_tp                                 SA17A
file_num                               772372
Name: 123456, dtype: object
</code></pre><p>输出全部候选人名单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">unique_cands = fec.cand_nm.unique()</div><div class="line">unique_cands</div></pre></td></tr></table></figure><pre><code>array([&#39;Bachmann, Michelle&#39;, &#39;Romney, Mitt&#39;, &#39;Obama, Barack&#39;,
       &quot;Roemer, Charles E. &#39;Buddy&#39; III&quot;, &#39;Pawlenty, Timothy&#39;,
       &#39;Johnson, Gary Earl&#39;, &#39;Paul, Ron&#39;, &#39;Santorum, Rick&#39;, &#39;Cain, Herman&#39;,
       &#39;Gingrich, Newt&#39;, &#39;McCotter, Thaddeus G&#39;, &#39;Huntsman, Jon&#39;,
       &#39;Perry, Rick&#39;], dtype=object)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unique_cands[<span class="number">2</span>]</div></pre></td></tr></table></figure><pre><code>&#39;Obama, Barack&#39;
</code></pre><p>政党映射</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">parties = &#123;<span class="string">'Bachmann, Michelle'</span>: <span class="string">'Republican'</span>,</div><div class="line">           <span class="string">'Cain, Herman'</span>: <span class="string">'Republican'</span>,</div><div class="line">           <span class="string">'Gingrich, Newt'</span>: <span class="string">'Republican'</span>,</div><div class="line">           <span class="string">'Huntsman, Jon'</span>: <span class="string">'Republican'</span>,</div><div class="line">           <span class="string">'Johnson, Gary Earl'</span>: <span class="string">'Republican'</span>,</div><div class="line">           <span class="string">'McCotter, Thaddeus G'</span>: <span class="string">'Republican'</span>,</div><div class="line">           <span class="string">'Obama, Barack'</span>: <span class="string">'Democrat'</span>,</div><div class="line">           <span class="string">'Paul, Ron'</span>: <span class="string">'Republican'</span>,</div><div class="line">           <span class="string">'Pawlenty, Timothy'</span>: <span class="string">'Republican'</span>,</div><div class="line">           <span class="string">'Perry, Rick'</span>: <span class="string">'Republican'</span>,</div><div class="line">           <span class="string">"Roemer, Charles E. 'Buddy' III"</span>: <span class="string">'Republican'</span>,</div><div class="line">           <span class="string">'Romney, Mitt'</span>: <span class="string">'Republican'</span>,</div><div class="line">           <span class="string">'Santorum, Rick'</span>: <span class="string">'Republican'</span>&#125;</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fec.cand_nm[<span class="number">123456</span>:<span class="number">123461</span>]</div></pre></td></tr></table></figure><pre><code>123456    Obama, Barack
123457    Obama, Barack
123458    Obama, Barack
123459    Obama, Barack
123460    Obama, Barack
Name: cand_nm, dtype: object
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fec.cand_nm[<span class="number">123456</span>:<span class="number">123461</span>].map(parties)</div></pre></td></tr></table></figure><pre><code>123456    Democrat
123457    Democrat
123458    Democrat
123459    Democrat
123460    Democrat
Name: cand_nm, dtype: object
</code></pre><p>根据以上创建的映射，在原数据集中添加一列<code>party</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Add it as a column</span></div><div class="line">fec[<span class="string">'party'</span>] = fec.cand_nm.map(parties)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fec[<span class="string">'party'</span>].value_counts()</div></pre></td></tr></table></figure><pre><code>Democrat      593746
Republican    407985
Name: party, dtype: int64
</code></pre><p>看看出资额是正是负</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(fec.contb_receipt_amt &gt; <span class="number">0</span>).value_counts()</div></pre></td></tr></table></figure><pre><code>True     991475
False     10256
Name: contb_receipt_amt, dtype: int64
</code></pre><p>调整出资额为正</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fec = fec[fec.contb_receipt_amt &gt; <span class="number">0</span>]</div></pre></td></tr></table></figure><p>筛选候选人</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fec_mrbo = fec[fec.cand_nm.isin([<span class="string">'Obama, Barack'</span>, <span class="string">'Romney, Mitt'</span>])]</div></pre></td></tr></table></figure><h3 id="根据职业和雇主统计赞助信息"><a href="#根据职业和雇主统计赞助信息" class="headerlink" title="根据职业和雇主统计赞助信息"></a>根据职业和雇主统计赞助信息</h3><p>统计职业信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fec.contbr_occupation.value_counts()[:<span class="number">10</span>]</div></pre></td></tr></table></figure><pre><code>RETIRED                                   233990
INFORMATION REQUESTED                      35107
ATTORNEY                                   34286
HOMEMAKER                                  29931
PHYSICIAN                                  23432
INFORMATION REQUESTED PER BEST EFFORTS     21138
ENGINEER                                   14334
TEACHER                                    13990
CONSULTANT                                 13273
PROFESSOR                                  12555
Name: contbr_occupation, dtype: int64
</code></pre><p>筛选出一些不符合规格的信息映射到正常信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">occ_mapping = &#123;</div><div class="line">   <span class="string">'INFORMATION REQUESTED PER BEST EFFORTS'</span> : <span class="string">'NOT PROVIDED'</span>,</div><div class="line">   <span class="string">'INFORMATION REQUESTED'</span> : <span class="string">'NOT PROVIDED'</span>,</div><div class="line">   <span class="string">'INFORMATION REQUESTED (BEST EFFORTS)'</span> : <span class="string">'NOT PROVIDED'</span>,</div><div class="line">   <span class="string">'C.E.O.'</span>: <span class="string">'CEO'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># If no mapping provided, return x</span></div><div class="line">f = <span class="keyword">lambda</span> x: occ_mapping.get(x, x)</div><div class="line">fec.contbr_occupation = fec.contbr_occupation.map(f)</div></pre></td></tr></table></figure><p>以上巧妙运用了get方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">emp_mapping = &#123;</div><div class="line">   <span class="string">'INFORMATION REQUESTED PER BEST EFFORTS'</span> : <span class="string">'NOT PROVIDED'</span>,</div><div class="line">   <span class="string">'INFORMATION REQUESTED'</span> : <span class="string">'NOT PROVIDED'</span>,</div><div class="line">   <span class="string">'SELF'</span> : <span class="string">'SELF-EMPLOYED'</span>,</div><div class="line">   <span class="string">'SELF EMPLOYED'</span> : <span class="string">'SELF-EMPLOYED'</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># If no mapping provided, return x</span></div><div class="line">f = <span class="keyword">lambda</span> x: emp_mapping.get(x, x)</div><div class="line">fec.contbr_employer = fec.contbr_employer.map(f)</div></pre></td></tr></table></figure><p>根据职业以及候选人政党分组，统计出资额总和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">by_occupation = fec.pivot_table(<span class="string">'contb_receipt_amt'</span>,</div><div class="line">                                index=<span class="string">'contbr_occupation'</span>,</div><div class="line">                                columns=<span class="string">'party'</span>, aggfunc=<span class="string">'sum'</span>)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">over_2mm = by_occupation[by_occupation.sum(<span class="number">1</span>) &gt; <span class="number">2000000</span>]</div><div class="line">over_2mm</div></pre></td></tr></table></figure><pre><code>party                 Democrat    Republican
contbr_occupation                           
ATTORNEY           11141982.97  7.477194e+06
CEO                 2074974.79  4.211041e+06
CONSULTANT          2459912.71  2.544725e+06
ENGINEER             951525.55  1.818374e+06
EXECUTIVE           1355161.05  4.138850e+06
HOMEMAKER           4248875.80  1.363428e+07
INVESTOR             884133.00  2.431769e+06
LAWYER              3160478.87  3.912243e+05
MANAGER              762883.22  1.444532e+06
NOT PROVIDED        4866973.96  2.056547e+07
OWNER               1001567.36  2.408287e+06
PHYSICIAN           3735124.94  3.594320e+06
PRESIDENT           1878509.95  4.720924e+06
PROFESSOR           2165071.08  2.967027e+05
REAL ESTATE          528902.09  1.625902e+06
RETIRED            25305116.38  2.356124e+07
SELF-EMPLOYED        672393.40  1.640253e+06
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">over_2mm.plot(kind=<span class="string">'barh'</span>)</div></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x340fb4e0&gt;
</code></pre><p><img src="http://o7ie0tcjk.bkt.clouddn.com/pydata/ch09/output_202_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_top_amounts</span><span class="params">(group, key, n=<span class="number">5</span>)</span>:</span></div><div class="line">    totals = group.groupby(key)[<span class="string">'contb_receipt_amt'</span>].sum()</div><div class="line"></div><div class="line">    <span class="comment"># Order totals by key in descending order</span></div><div class="line">    <span class="keyword">return</span> totals.sort_values()[-n:]</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grouped = fec_mrbo.groupby(<span class="string">'cand_nm'</span>)</div><div class="line">grouped.apply(get_top_amounts, <span class="string">'contbr_occupation'</span>, n=<span class="number">7</span>)</div></pre></td></tr></table></figure><pre><code>cand_nm        contbr_occupation                     
Obama, Barack  CONSULTANT                                 2459912.71
               LAWYER                                     3160478.87
               PHYSICIAN                                  3735124.94
               HOMEMAKER                                  4248875.80
               INFORMATION REQUESTED                      4866973.96
               ATTORNEY                                  11141982.97
               RETIRED                                   25305116.38
Romney, Mitt   C.E.O.                                     1968386.11
               EXECUTIVE                                  2300947.03
               PRESIDENT                                  2491244.89
               ATTORNEY                                   5364718.82
               HOMEMAKER                                  8147446.22
               INFORMATION REQUESTED PER BEST EFFORTS    11396894.84
               RETIRED                                   11508473.59
Name: contb_receipt_amt, dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grouped.apply(get_top_amounts, <span class="string">'contbr_employer'</span>, n=<span class="number">10</span>)</div></pre></td></tr></table></figure><pre><code>cand_nm        contbr_employer                       
Obama, Barack  MICROSOFT                                   215585.36
               VOLUNTEER                                   257104.00
               STUDENT                                     318831.45
               SELF EMPLOYED                               469290.00
               SELF                                       1076531.20
               HOMEMAKER                                  2605408.54
               INFORMATION REQUESTED                      5053480.37
               NOT EMPLOYED                               8586308.70
               SELF-EMPLOYED                             17080985.96
               RETIRED                                   22694358.85
Romney, Mitt   H.I.G. CAPITAL                              139500.00
               BARCLAYS CAPITAL                            162750.00
               GOLDMAN SACH &amp; CO.                          238250.00
               MORGAN STANLEY                              267266.00
               CREDIT SUISSE                               281150.00
               STUDENT                                     496490.94
               SELF-EMPLOYED                              7409860.98
               HOMEMAKER                                  8147196.22
               RETIRED                                   11506225.71
               INFORMATION REQUESTED PER BEST EFFORTS    12059527.24
Name: contb_receipt_amt, dtype: float64
</code></pre><h3 id="根据出资额分组"><a href="#根据出资额分组" class="headerlink" title="根据出资额分组"></a>根据出资额分组</h3><p>不出意外果然要用到桶</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bins = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>, <span class="number">10000</span>, <span class="number">100000</span>, <span class="number">1000000</span>, <span class="number">10000000</span>])</div><div class="line">labels = pd.cut(fec_mrbo.contb_receipt_amt, bins)</div><div class="line">labels[:<span class="number">10</span>]</div></pre></td></tr></table></figure><pre><code>411      (10, 100]
412    (100, 1000]
413    (100, 1000]
414      (10, 100]
415      (10, 100]
416      (10, 100]
417    (100, 1000]
418      (10, 100]
419    (100, 1000]
420      (10, 100]
Name: contb_receipt_amt, dtype: category
Categories (8, object): [(0, 1] &lt; (1, 10] &lt; (10, 100] &lt; (100, 1000] &lt; (1000, 10000] &lt; (10000, 100000] &lt; (100000, 1000000] &lt; (1000000, 10000000]]
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grouped = fec_mrbo.groupby([<span class="string">'cand_nm'</span>, labels])</div><div class="line">grouped.size().unstack(<span class="number">0</span>)</div></pre></td></tr></table></figure><pre><code>cand_nm              Obama, Barack  Romney, Mitt
contb_receipt_amt                               
(0, 1]                       493.0          77.0
(1, 10]                    40070.0        3681.0
(10, 100]                 372280.0       31853.0
(100, 1000]               153991.0       43357.0
(1000, 10000]              22284.0       26186.0
(10000, 100000]                2.0           1.0
(100000, 1000000]              3.0           NaN
(1000000, 10000000]            4.0           NaN
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bucket_sums = grouped.contb_receipt_amt.sum().unstack(<span class="number">0</span>)</div><div class="line">bucket_sums</div></pre></td></tr></table></figure><pre><code>cand_nm              Obama, Barack  Romney, Mitt
contb_receipt_amt                               
(0, 1]                      318.24         77.00
(1, 10]                  337267.62      29819.66
(10, 100]              20288981.41    1987783.76
(100, 1000]            54798531.46   22363381.69
(1000, 10000]          51753705.67   63942145.42
(10000, 100000]           59100.00      12700.00
(100000, 1000000]       1490683.08           NaN
(1000000, 10000000]     7148839.76           NaN
</code></pre><p>计算比例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">normed_sums = bucket_sums.div(bucket_sums.sum(axis=<span class="number">1</span>), axis=<span class="number">0</span>)</div><div class="line">normed_sums</div></pre></td></tr></table></figure><pre><code>cand_nm              Obama, Barack  Romney, Mitt
contb_receipt_amt                               
(0, 1]                    0.805182      0.194818
(1, 10]                   0.918767      0.081233
(10, 100]                 0.910769      0.089231
(100, 1000]               0.710176      0.289824
(1000, 10000]             0.447326      0.552674
(10000, 100000]           0.823120      0.176880
(100000, 1000000]         1.000000           NaN
(1000000, 10000000]       1.000000           NaN
</code></pre><p>画个图看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">normed_sums[:<span class="number">-2</span>].plot(kind=<span class="string">'barh'</span>, stacked=<span class="keyword">True</span>)</div></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x14c4db00&gt;
</code></pre><p><img src="http://o7ie0tcjk.bkt.clouddn.com/pydata/ch09/output_214_1.png" alt="png"></p><h3 id="根据州统计赞助信息"><a href="#根据州统计赞助信息" class="headerlink" title="根据州统计赞助信息"></a>根据州统计赞助信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">grouped = fec_mrbo.groupby([<span class="string">'cand_nm'</span>, <span class="string">'contbr_st'</span>])</div><div class="line">totals = grouped.contb_receipt_amt.sum().unstack(<span class="number">0</span>).fillna(<span class="number">0</span>)</div><div class="line">totals = totals[totals.sum(<span class="number">1</span>) &gt; <span class="number">100000</span>]</div><div class="line">totals[:<span class="number">10</span>]</div></pre></td></tr></table></figure><pre><code>cand_nm    Obama, Barack  Romney, Mitt
contbr_st                             
AK             281840.15      86204.24
AL             543123.48     527303.51
AR             359247.28     105556.00
AZ            1506476.98    1888436.23
CA           23824984.24   11237636.60
CO            2132429.49    1506714.12
CT            2068291.26    3499475.45
DC            4373538.80    1025137.50
DE             336669.14      82712.00
FL            7318178.58    8338458.81
</code></pre><p><code>Mitt is so...poorly...</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">percent = totals.div(totals.sum(<span class="number">1</span>), axis=<span class="number">0</span>)</div><div class="line">percent[:<span class="number">10</span>]</div></pre></td></tr></table></figure><pre><code>cand_nm    Obama, Barack  Romney, Mitt
contbr_st                             
AK              0.765778      0.234222
AL              0.507390      0.492610
AR              0.772902      0.227098
AZ              0.443745      0.556255
CA              0.679498      0.320502
CO              0.585970      0.414030
CT              0.371476      0.628524
DC              0.810113      0.189887
DE              0.802776      0.197224
FL              0.467417      0.532583
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;数据聚合与分组运算&quot;&gt;&lt;a href=&quot;#数据聚合与分组运算&quot; class=&quot;headerlink&quot; title=&quot;数据聚合与分组运算&quot;&gt;&lt;/a&gt;数据聚合与分组运算&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="pandas" scheme="http://yoursite.com/tags/pandas/"/>
    
  </entry>
  
</feed>
