<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Abracdabra</title>
  <subtitle>Do it yourself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-23T12:01:11.467Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ewan Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Solution for Bracket in markdown link address</title>
    <link href="http://yoursite.com/2017/04/23/%C2%96Solution-for-Bracket-in-markdown-link-address/"/>
    <id>http://yoursite.com/2017/04/23/Solution-for-Bracket-in-markdown-link-address/</id>
    <published>2017-04-23T11:56:40.000Z</published>
    <updated>2017-04-23T12:01:11.467Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown创造一个链接或者图片是使用 <code>[title](link)</code> 和 <code>![title](link)</code>.</p><p>我们可以避免<code>[]</code>内出现中括号, 或者使用转义.</p><p>但是在小括号的链接里面就可能会出问题. 有些网址上面会具有小括号. 例如,</p><p><a href="https://github.com/CjTouzi/Learning-RSpark/blob/master/Zaharia%20M.%2C%20et%20al.%20Learning%20Spark%20%28O%27Reilly%2C%202015%29%28274s%29.pdf" target="_blank" rel="external">https://github.com/CjTouzi/Learning-RSpark/blob/master/Zaharia%20M.%2C%20et%20al.%20Learning%20Spark%20%28O%27Reilly%2C%202015%29%28274s%29.pdf</a></p><p>解决方法:</p><p><code>%28</code> 代替<code>(</code>, <code>%29</code>代替<code>)</code> 主要是后者会歧义链接部分的结束. 这是使用url符号码去代替ascii的符号. 能够解决这个问题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown创造一个链接或者图片是使用 &lt;code&gt;[title](link)&lt;/code&gt; 和 &lt;code&gt;![title](link)&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;我们可以避免&lt;code&gt;[]&lt;/code&gt;内出现中括号, 或者使用转义.&lt;/p&gt;&lt;p&gt;但是在小括号的链
    
    </summary>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>The first course of the Spark</title>
    <link href="http://yoursite.com/2017/04/23/The-first-course-of-the-Spark/"/>
    <id>http://yoursite.com/2017/04/23/The-first-course-of-the-Spark/</id>
    <published>2017-04-23T09:37:04.000Z</published>
    <updated>2017-04-23T11:54:53.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>扩充了MapReduce计算模型</li><li>基于内存的计算</li><li>能够进行批处理、迭代式计算、交互查询和流处理<ul><li>降低里维护成本</li></ul></li><li>提供了Python、Java、Scala、SQL的API和丰富的内置库</li><li>可以与Hadoop、Kafka等整合</li></ul><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p><img src="http://o7ie0tcjk.bkt.clouddn.com/spark/first_course/spark_components.png" alt="components"></p><h2 id="Spark-Core"><a href="#Spark-Core" class="headerlink" title="Spark Core"></a>Spark Core</h2><p>Spark Core contains the basic functionality of Spark, including components for task scheduling, memory management, fault recovery, interacting with storage systems, and more. Spark Core is also home to the API that defines <em>resilient distributed datasets</em> (RDDs), which are Spark’s main programming abstraction. RDDs represent a collection of items distributed across many compute nodes that can be manipulated in parallel. Spark Core provides many APIs for building and manipulating these collections.</p><h2 id="Spark-SQL"><a href="#Spark-SQL" class="headerlink" title="Spark SQL"></a>Spark SQL</h2><p>Spark SQL is Spark’s package for working with structured data. It allows querying data via SQL as well as the Apache Hive variant of SQL—called the Hive Query Language (HQL)—and it supports many sources of data, including Hive tables, Parquet, and JSON. Beyond providing a SQL interface to Spark, Spark SQL allows developers to intermix SQL queries with the programmatic data manipulations supported by RDDs in Python, Java, and Scala, all within a single application, thus combining SQL with complex analytics. This tight integration with the rich computing environment provided by Spark makes Spark SQL unlike any other open source data warehouse tool. Spark SQL was added to Spark in version 1.0.</p><p>Shark was an older SQL-on-Spark project out of the University of California, Berkeley, that modified Apache Hive to run on Spark. It has now been replaced by Spark SQL to provide better integration with the Spark engine and language APIs.</p><h2 id="Spark-Streaming"><a href="#Spark-Streaming" class="headerlink" title="Spark Streaming"></a>Spark Streaming</h2><p>Spark Streaming is a Spark component that enables processing of live streams of data. Examples of data streams include logfiles generated by production web servers, or queues of messages containing status updates posted by users of a web service. Spark Streaming provides an API for manipulating data streams that closely matches the Spark Core’s RDD API, making it easy for programmers to learn the project and move between applications that manipulate data stored in memory, on disk, or arriving in real time. Underneath its API, Spark Streaming was designed to provide the same degree of fault tolerance, throughput, and scalability as Spark Core.</p><h2 id="MLlib"><a href="#MLlib" class="headerlink" title="MLlib"></a>MLlib</h2><p>Spark comes with a library containing common machine learning (ML) functionality, called MLlib. MLlib provides multiple types of machine learning algorithms, including classification, regression, clustering, and collaborative filtering, as well as supporting functionality such as model evaluation and data import. It also provides some lower-level ML primitives, including a generic gradient descent optimization algorithm. All of these methods are designed to scale out across a cluster.</p><h2 id="GraphX"><a href="#GraphX" class="headerlink" title="GraphX"></a>GraphX</h2><p>GraphX is a library for manipulating graphs (e.g., a social network’s friend graph) and performing graph-parallel computations. Like Spark Streaming and Spark SQL, GraphX extends the Spark RDD API, allowing us to create a directed graph with arbitrary properties attached to each vertex and edge. GraphX also provides various operators for manipulating graphs (e.g., <code>subgraph</code> and <code>mapVertices</code>) and a library of common graph algorithms (e.g., PageRank and triangle counting).</p><h2 id="Cluster-Managers"><a href="#Cluster-Managers" class="headerlink" title="Cluster Managers"></a>Cluster Managers</h2><p>Under the hood, Spark is designed to efficiently scale up from one to many thousands of compute nodes. To achieve this while maximizing flexibility, Spark can run over a variety of <em>cluster managers</em>, including Hadoop YARN, Apache Mesos, and a simple cluster manager included in Spark itself called the Standalone Scheduler. If you are just installing Spark on an empty set of machines, the Standalone Scheduler provides an easy way to get started; if you already have a Hadoop YARN or Mesos cluster, however, Spark’s support for these cluster managers allows your applications to also run on them.</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li>Spark由Scala编写，运行于JVM上，运行环境为Java 7+</li><li>如果使用Python API，需要安装Python 2.6+ 或者Python 3.4+</li><li>Spark 1.6.2 — Scala 2.10 / Spark 2.0.0 — Scala 2.11</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="http://spark.apache.org/downloads.html" target="_blank" rel="external">http://spark.apache.org/downloads.html</a></p><p>不需要Hadoop集群；如果已经搭建好Hadoop集群，可下载相应版本</p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>README.md<ul><li>Contains short instructions for getting started with Spark.</li></ul></li><li>bin<ul><li>Contains executable files that can be used to interact with Spark in various ways (e.g., the Spark shell, which we will cover later in this chapter).</li></ul></li><li>core, streaming, python, …<ul><li>Contains the source code of major components of the Spark project.</li></ul></li><li>examples<ul><li>Contains some helpful Spark standalone jobs that you can look at and run tolearn about the Spark API.</li></ul></li></ul><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><ul><li>Python Shell<ul><li><code>bin/pyspark</code></li></ul></li><li>Scala Shell<ul><li><code>bin/spark-shell</code></li></ul></li></ul><h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><h2 id="Scala安装"><a href="#Scala安装" class="headerlink" title="Scala安装"></a>Scala安装</h2><p><a href="https://www.scala-lang.org/download/" target="_blank" rel="external">https://www.scala-lang.org/download/</a></p><p>注意版本对应</p><h2 id="IntelliJ-IDEA安装"><a href="#IntelliJ-IDEA安装" class="headerlink" title="IntelliJ IDEA安装"></a>IntelliJ IDEA安装</h2><p><a href="https://www.jetbrains.com/idea/#chooseYourEdition" target="_blank" rel="external">https://www.jetbrains.com/idea/#chooseYourEdition</a></p><p>可以申请教育账号</p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p><code>File-Settings-Plugins</code> 搜索Scala，安装</p><h3 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h3><p><code>File-New-Project-Scala-SBT</code></p><p>同样注意版本匹配（这里用的是Spark 2.1.0, Scala 2.11.11）</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>需要定义使用的Spark版本</p><p><code>build.sbt</code>追加</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">libraryDependencies ++= <span class="type">Seq</span>(</div><div class="line">  <span class="string">"org.apache.spark"</span> %% <span class="string">"spark-core"</span> % <span class="string">"2.1.0"</span></div><div class="line">)</div></pre></td></tr></table></figure><p>重建项目即可</p><h3 id="源程序编写"><a href="#源程序编写" class="headerlink" title="源程序编写"></a>源程序编写</h3><p><code>New-Scala Class-Class to Object</code></p><p><code>WordCount.scala</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkContext</span>, <span class="type">SparkConf</span>&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">  * Created by root on 4/23/17.</div><div class="line">  */</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"wordcount"</span>)</div><div class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</div><div class="line"></div><div class="line">    <span class="keyword">val</span> input = sc.textFile(<span class="string">"/home/hduser/Anaconda2-4.3.1-Linux-x86_64.sh"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">val</span> lines = input.flatMap(line =&gt; line.split(<span class="string">" "</span>))</div><div class="line">    <span class="keyword">val</span> count = lines.map(word =&gt; (word, <span class="number">1</span>)).reduceByKey&#123;<span class="keyword">case</span> (x, y) =&gt; x + y&#125;</div><div class="line">    <span class="keyword">val</span> output = count.saveAsTextFile(<span class="string">"/home/hduser/scala_wordcount_demo_output"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p><code>File-Project Structure-Project Setting-Artifacts-Add-JAR-From modules with dependencies</code></p><p><code>Build-Build Artifacts-Build</code></p><h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><ul><li>启动master<ul><li><code>sbin/start-master.sh</code></li></ul></li><li>启动worker<ul><li><code>bin/spark-class org.apache.spark.deploy.worker.Worker spark://Ubuntu:7077</code></li><li>注意这里的spark服务器地址可以通过浏览器输入<code>localhost:8080</code>来查看</li></ul></li><li>提交作业<ul><li><code>bin/spark-submit --master spark://Ubuntu:7077 --class WordCount /home/hduser/scala_demo.jar</code></li><li>注意这里的<code>scala_demo.jar</code>文件为打包阶段生成</li></ul></li></ul><h1 id="TODO-RDDs"><a href="#TODO-RDDs" class="headerlink" title="TODO: RDDs"></a>TODO: RDDs</h1><p><a href="https://github.com/CjTouzi/Learning-RSpark/blob/master/Zaharia%20M.%2C%20et%20al.%20Learning%20Spark%20%28O%27Reilly%2C%202015%29%28274s%29.pdf" target="_blank" rel="external">Zaharia M., et al. Learning Spark (O’Reilly, 2015)(274s).pdf</a></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li>慕课网 <a href="http://www.imooc.com/learn/814" target="_blank" rel="external">http://www.imooc.com/learn/814</a></li><li>Zaharia M., et al. Learning Spark (O’Reilly, 2015)(274s).pdf</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;扩充了MapReduce计算模型&lt;/li&gt;&lt;li&gt;基于内存的计算&lt;/li&gt;&lt;li&gt;能够进行批处理、迭代式计算、交互查询和流处理&lt;u
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="spark" scheme="http://yoursite.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Implement k-means on the hadoop platform</title>
    <link href="http://yoursite.com/2017/04/21/Implement-k-means-on-the-hadoop-platform/"/>
    <id>http://yoursite.com/2017/04/21/Implement-k-means-on-the-hadoop-platform/</id>
    <published>2017-04-21T05:44:53.000Z</published>
    <updated>2017-04-21T06:14:35.823Z</updated>
    
    <content type="html"><![CDATA[<p>首先在单机上搭一个伪分布式环境，主要是对<code>*-site.xml</code>配置文件进行修改，具体修改如下：</p><p><code>core-site.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="comment">&lt;!-- core-site.xml --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure><p><code>hdfs-site.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="comment">&lt;!-- hdfs-site.xml --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure><p><code>yarn-site.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="comment">&lt;!-- yarn-site.xml --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure><p><code>mapred-site.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="comment">&lt;!-- mapred-site.xml --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure><p>然后启动<code>hadoop</code>，启动的流程如下：</p><ol><li><code>start-dfs.sh</code></li><li><code>start-yarn.sh</code></li><li><code>mr-jobhistory-daemon.sh start historyserver</code></li></ol><p><strong>注意，以上命令能够得到正确执行的前提是已经将<code>hadoop</code>的安装目录下的<code>bin</code>目录加到环境变量中</strong></p><p>由于很久没有使用<code>Java</code>，所以采用<code>Python</code>实现，这里需要用到一个<code>package</code>，也就是<code>mrjob</code></p><p>首先计划一下实现步骤：</p><p>[ Mapper ]</p><p><strong>Accepts</strong></p><ul><li>data</li><li>global constant representing the list of centers</li></ul><p><strong>Computes</strong></p><ul><li>the nearest center for each data instance</li></ul><p><strong>Emits</strong></p><ul><li>nearest centers (<strong>key</strong>) and points (<strong>value</strong>).</li></ul><hr><p>[ Reducer ]</p><p><strong>Accepts</strong></p><ul><li>center instance / coordinate (<strong>key</strong>)</li><li>points (<strong>value</strong>)</li></ul><p><strong>Computes</strong></p><ul><li>the new centers based on clusters</li></ul><p><strong>Emits</strong></p><ul><li>new centers</li></ul><p>You will provide the next epoch of K-Means with:</p><ol><li>the same data from your initial epoch</li><li>the centers emitted from the reducer as global constants</li></ol><p>Repeat until your stopping criteria are met.</p><p>如果要用<code>Python</code>进行相关的<code>Hadoop</code>操作的话，肯定是要使用<code>hadoop streaming</code>的，但是存在一个问题，也就是<code>streaming</code>流程只能跑一遍，但是很显然，作为一个<code>machine learning</code>算法，<code>k-means</code>是类似于<code>EM</code>算法要经过多步迭代的，那么最容易想到的就是使用shell脚本多次调用相关命令，但是这样显得十分<code>ugly</code>，因此可以采用<code>mrjob</code>包来帮助我们完成这个工作。</p><p>从上面看来，我们需要两个文件，一个是<code>python</code>实现的<code>map-reduce</code>，另一个是<code>mrjob</code>的<code>job</code>文件，相当于<code>master</code>，下面列出这两个文件，因为实现比较简单，因此不作过多解释.</p><p><code>kmeans.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> mrjob.job <span class="keyword">import</span> MRJob</div><div class="line"><span class="keyword">import</span> mrjob</div><div class="line"><span class="comment"># MRJob is a python class which will be overloaded</span></div><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MRKMeans</span><span class="params">(MRJob)</span>:</span></div><div class="line"></div><div class="line">    SORT_VALUES = <span class="keyword">True</span></div><div class="line">    OUTPUT_PROTOCOL = mrjob.protocol.RawProtocol</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dist_vec</span><span class="params">(self, v1, v2)</span>:</span></div><div class="line">        <span class="comment"># calculate the ditance between two vectors (in two dimensions)</span></div><div class="line">        <span class="keyword">return</span> sqrt((v2[<span class="number">0</span>] - v1[<span class="number">0</span>]) * (v2[<span class="number">0</span>] - v1[<span class="number">0</span>]) + (v2[<span class="number">1</span>] - v1[<span class="number">1</span>]) * (v2[<span class="number">1</span>] - v1[<span class="number">1</span>]))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">configure_options</span><span class="params">(self)</span>:</span></div><div class="line">        super(MRKMeans, self).configure_options()</div><div class="line">        <span class="comment"># the line below define that the file folowing the --c option is the</span></div><div class="line">        <span class="comment"># centroid and is loadable</span></div><div class="line">        self.add_file_option(<span class="string">'--c'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_centroids</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Definition : extracts centroids from the centroids file define afetr --c flag</div><div class="line">        Out : Return the list of centroids</div><div class="line">        """</div><div class="line">        <span class="comment"># self.options.c is the name of the file following --c option</span></div><div class="line">        f = open(self.options.c, <span class="string">'r'</span>)</div><div class="line">        centroids = []</div><div class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.read().split(<span class="string">'\n'</span>):</div><div class="line">            <span class="keyword">if</span> line:</div><div class="line">                x, y = line.split(<span class="string">', '</span>)</div><div class="line">                centroids.append([float(x), float(y)])</div><div class="line">        f.close()</div><div class="line">        <span class="keyword">return</span> centroids</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mapper</span><span class="params">(self, _, lines)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Definition : Mapper take centroids extract form get_centroids()</div><div class="line">        and the point cloud and for each point, calculate the distance</div><div class="line">        to the centroids, find the mininum of it</div><div class="line">        Out : yield the point with it's class</div><div class="line">        """</div><div class="line">        centroids = self.get_centroids()</div><div class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> lines.split(<span class="string">'\n'</span>):</div><div class="line">            x, y = l.split(<span class="string">', '</span>)</div><div class="line">            point = [float(x), float(y)]</div><div class="line">            min_dist = <span class="number">100000000.0</span></div><div class="line">            classe = <span class="number">0</span></div><div class="line">            <span class="comment"># iterate over the centroids (Here we know that we are doing a 3means)</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">                dist = self.dist_vec(point, centroids[i])</div><div class="line">                <span class="keyword">if</span> dist &lt; min_dist:</div><div class="line">                    min_dist = dist</div><div class="line">                    classe = i</div><div class="line">            <span class="keyword">yield</span> classe, point</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combiner</span><span class="params">(self, k, v)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Definition : Calculate for each class, at the end of the mapper,</div><div class="line">        before reducer, the medium point of each class</div><div class="line">        Out: return for each class, the centroids for each mapper</div><div class="line">        """</div><div class="line">        count = <span class="number">0</span></div><div class="line">        moy_x = moy_y = <span class="number">0.0</span></div><div class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> v:</div><div class="line">            count += <span class="number">1</span></div><div class="line">            moy_x += t[<span class="number">0</span>]</div><div class="line">            moy_y += t[<span class="number">1</span>]</div><div class="line">        <span class="keyword">yield</span> k, (moy_x / count, moy_y / count)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reducer</span><span class="params">(self, k, v)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Definition : for each class, get all the tmp centroids from each</div><div class="line">        combiner and calculate the new centroids.</div><div class="line">        """</div><div class="line">        <span class="comment"># k is class and v are medium points linked to the class</span></div><div class="line">        count = <span class="number">0</span></div><div class="line">        moy_x = moy_y = <span class="number">0.0</span></div><div class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> v:</div><div class="line">            count += <span class="number">1</span></div><div class="line">            moy_x += t[<span class="number">0</span>]</div><div class="line">            moy_y += t[<span class="number">1</span>]</div><div class="line">        <span class="keyword">print</span> str(k) + <span class="string">", "</span> + str(moy_x / count) + <span class="string">", "</span> + str(moy_y / count)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># just run mapreduce !</span></div><div class="line">    MRKMeans.run()</div></pre></td></tr></table></figure><p><code>main.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> mrjob.job <span class="keyword">import</span> MRJob</div><div class="line"><span class="keyword">from</span> kmeans <span class="keyword">import</span> MRKMeans</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> os.path</div><div class="line"><span class="keyword">import</span> shutil</div><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">input_c = <span class="string">"centroids"</span></div><div class="line"></div><div class="line">CENTROIDS_FILE = <span class="string">"/home/hduser/tmp/centroid"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_c</span><span class="params">(job, runner)</span>:</span></div><div class="line">    c = []</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> runner.stream_output():</div><div class="line">        <span class="comment"># print "stream_output: ", line</span></div><div class="line">        key, value = job.parse_output_line(line)</div><div class="line">        c.append(key)</div><div class="line">    <span class="keyword">return</span> c</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_first_c</span><span class="params">(fname)</span>:</span></div><div class="line">    f = open(fname, <span class="string">'r'</span>)</div><div class="line">    centroids = []</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.read().split(<span class="string">'\n'</span>):</div><div class="line">        <span class="keyword">if</span> line:</div><div class="line">            x, y = line.split(<span class="string">', '</span>)</div><div class="line">            centroids.append([float(x), float(y)])</div><div class="line">    f.close()</div><div class="line">    <span class="keyword">return</span> centroids</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_c</span><span class="params">(centroids)</span>:</span></div><div class="line">    f = open(CENTROIDS_FILE, <span class="string">"w"</span>)</div><div class="line">    centroids.sort()</div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> centroids:</div><div class="line">        k, cx, cy = c.split(<span class="string">', '</span>)</div><div class="line">        <span class="comment"># print c</span></div><div class="line">        f.write(<span class="string">"%s, %s\n"</span> % (cx, cy))</div><div class="line">    f.close()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dist_vec</span><span class="params">(v1, v2)</span>:</span></div><div class="line">    <span class="keyword">return</span> sqrt((v2[<span class="number">0</span>] - v1[<span class="number">0</span>]) * (v2[<span class="number">0</span>] - v1[<span class="number">0</span>]) + (v2[<span class="number">1</span>] - v1[<span class="number">1</span>]) * (v2[<span class="number">1</span>] - v1[<span class="number">1</span>]))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">diff</span><span class="params">(cs1, cs2)</span>:</span></div><div class="line">    max_dist = <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">        dist = dist_vec(cs1[i], cs2[i])</div><div class="line">        <span class="keyword">if</span> dist &gt; max_dist:</div><div class="line">            max_dist = dist</div><div class="line"></div><div class="line">    <span class="keyword">return</span> max_dist</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line"></div><div class="line">    args = sys.argv[<span class="number">1</span>:]</div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(CENTROIDS_FILE):</div><div class="line">        shutil.copy(input_c, CENTROIDS_FILE)</div><div class="line"></div><div class="line">    old_c = get_first_c(input_c)</div><div class="line"></div><div class="line">    i = <span class="number">1</span></div><div class="line">    start = time.time()</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"Iteration #%i"</span> % i</div><div class="line">        mr_job = MRKMeans(args=args + [<span class="string">'--c='</span> + CENTROIDS_FILE])</div><div class="line">        <span class="comment"># print "start runner.."</span></div><div class="line"></div><div class="line">        <span class="keyword">with</span> mr_job.make_runner() <span class="keyword">as</span> runner:</div><div class="line">            runner.run()</div><div class="line">            centroids = get_c(mr_job, runner)</div><div class="line"></div><div class="line">        <span class="comment"># print "mr result: ", centroids</span></div><div class="line">        write_c(centroids)</div><div class="line">        n_c = get_first_c(CENTROIDS_FILE)</div><div class="line">        <span class="comment"># print "old_c", old_c</span></div><div class="line">        <span class="comment"># print "n_c", n_c </span></div><div class="line">        max_d = diff(n_c, old_c)</div><div class="line">        <span class="comment"># print "dist max = "+str(max_d)</span></div><div class="line">        <span class="keyword">if</span> max_d &lt; <span class="number">0.01</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            old_c = n_c</div><div class="line">            i = i + <span class="number">1</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"used time: "</span>, time.time() - start, <span class="string">'s'</span></div></pre></td></tr></table></figure><p>根据上面写的实现步骤可以看出，我们需要两个文件，一个存储输入数据，另一个存储<code>centroids</code>，由于只是一个demo，因此在这里我简化了具体问题。设所有的数据都是二维数据点，并且聚类个数为3。当然，如果真的是在大数据上进行工业级的处理的话，还是推荐使用<code>Spark</code>。下面列出这两个文件：</p><p><code>kmeans_data</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>, <span class="number">2</span></div><div class="line"><span class="number">2</span>, <span class="number">3</span></div><div class="line"><span class="number">1</span>, <span class="number">3.5</span></div><div class="line"><span class="number">4</span>, <span class="number">3.5</span></div><div class="line"><span class="number">3</span>, <span class="number">4.2</span></div><div class="line"><span class="number">2</span>, <span class="number">1.6</span></div><div class="line"><span class="number">5</span>, <span class="number">2.3</span></div><div class="line"><span class="number">1.5</span>, <span class="number">2.3</span></div><div class="line"><span class="number">3</span>, <span class="number">5.2</span></div><div class="line"><span class="number">2</span>, <span class="number">3</span></div><div class="line"><span class="number">1</span>, <span class="number">3.5</span></div><div class="line"><span class="number">4</span>, <span class="number">3.5</span></div><div class="line"><span class="number">3</span>, <span class="number">4.2</span></div><div class="line"><span class="number">2</span>, <span class="number">1.6</span></div><div class="line"><span class="number">5</span>, <span class="number">2.3</span></div><div class="line"><span class="number">1.5</span>, <span class="number">2.3</span></div><div class="line"><span class="number">3</span>, <span class="number">5</span></div></pre></td></tr></table></figure><p><code>centroids</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1, 2</div><div class="line">2, 3</div><div class="line">1, 3.5</div></pre></td></tr></table></figure><p>按照以下方式运行：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python main.py kmeans_data -r hadoop</div></pre></td></tr></table></figure><p>结果显示如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Iteration #<span class="number">1</span></div><div class="line">No handlers could be found <span class="keyword">for</span> logger <span class="string">"mrjob.hadoop"</span></div><div class="line">old_c [[<span class="number">1.0</span>, <span class="number">2.0</span>], [<span class="number">2.0</span>, <span class="number">3.0</span>], [<span class="number">1.0</span>, <span class="number">3.5</span>]]</div><div class="line">n_c [[<span class="number">1.625</span>, <span class="number">1.95833333333</span>], [<span class="number">3.4</span>, <span class="number">3.62</span>], [<span class="number">1.0</span>, <span class="number">3.5</span>]]</div><div class="line">Iteration #<span class="number">2</span></div><div class="line">old_c [[<span class="number">1.625</span>, <span class="number">1.95833333333</span>], [<span class="number">3.4</span>, <span class="number">3.62</span>], [<span class="number">1.0</span>, <span class="number">3.5</span>]]</div><div class="line">n_c [[<span class="number">1.72916666667</span>, <span class="number">2.2625</span>], [<span class="number">3.75</span>, <span class="number">3.775</span>], [<span class="number">1.0</span>, <span class="number">3.5</span>]]</div><div class="line">Iteration #<span class="number">3</span></div><div class="line">old_c [[<span class="number">1.72916666667</span>, <span class="number">2.2625</span>], [<span class="number">3.75</span>, <span class="number">3.775</span>], [<span class="number">1.0</span>, <span class="number">3.5</span>]]</div><div class="line">n_c [[<span class="number">1.72916666667</span>, <span class="number">2.2625</span>], [<span class="number">3.75</span>, <span class="number">3.775</span>], [<span class="number">1.0</span>, <span class="number">3.5</span>]]</div><div class="line">time:  <span class="number">148.277868032</span></div></pre></td></tr></table></figure><p>最后生成结果文件：</p><p><code>centroid</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.72916666667</span>, <span class="number">2.2625</span></div><div class="line"><span class="number">3.75</span>, <span class="number">3.775</span></div><div class="line"><span class="number">1.0</span>, <span class="number">3.5</span></div></pre></td></tr></table></figure><p>根据以上可以看出，对于小数据集，效率反而会比较低，因为整个程序运行过程中大部分的时间都没有花在实际的算法运行上。</p><p><strong>TODO：</strong></p><ol><li>用常规方法实现，作为baseline</li><li>在大数据集上继续实验，观察结果</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先在单机上搭一个伪分布式环境，主要是对&lt;code&gt;*-site.xml&lt;/code&gt;配置文件进行修改，具体修改如下：&lt;/p&gt;&lt;p&gt;&lt;code&gt;core-site.xml&lt;/code&gt;&lt;/p&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Something about cloudera</title>
    <link href="http://yoursite.com/2017/04/20/Something-about-cloudera/"/>
    <id>http://yoursite.com/2017/04/20/Something-about-cloudera/</id>
    <published>2017-04-20T01:55:41.000Z</published>
    <updated>2017-04-20T01:59:40.353Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现了一个神器，cloudera</p><p><a href="https://www.cloudera.com/" target="_blank" rel="external">https://www.cloudera.com/</a></p><p>它其实是一个集成了Hadoop生态系统的CentOS 6.7的VM，可以跑在Docker、Virtual Box或者VMware上</p><p><a href="https://www.cloudera.com/downloads/quickstart_vms/5-10.html" target="_blank" rel="external">https://www.cloudera.com/downloads/quickstart_vms/5-10.html</a></p><p>虚拟机配置的时候需要分配至少8G的RAM以及2个Cores。</p><p>另外，第一次启动会有些慢，请耐心等待。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近发现了一个神器，cloudera&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.cloudera.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.cloudera.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;它其实是一个集成了
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop Distributed Filesystem notes</title>
    <link href="http://yoursite.com/2017/04/18/Hadoop-Distributed-Filesystem-notes/"/>
    <id>http://yoursite.com/2017/04/18/Hadoop-Distributed-Filesystem-notes/</id>
    <published>2017-04-18T03:53:51.000Z</published>
    <updated>2017-04-18T08:27:03.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HDFS-Concepts"><a href="#HDFS-Concepts" class="headerlink" title="HDFS Concepts"></a>HDFS Concepts</h2><h3 id="Blocks"><a href="#Blocks" class="headerlink" title="Blocks"></a>Blocks</h3><ul><li>128 MB by default<ul><li>HDFS blocks are large compared to disk blocks, and the reason is to minimize the cost<br>of seeks.</li></ul></li><li>Having a block abstraction for a distributed filesystem brings several benefits<ul><li>A file can be larger than any single disk in the network.</li><li>Simplifies the storage subsystem.</li><li>Providing fault tolerance and availability.</li></ul></li><li><code>% hdfs fsck / -files -blocks</code></li></ul><h3 id="Namenodes-and-Datanodes"><a href="#Namenodes-and-Datanodes" class="headerlink" title="Namenodes and Datanodes"></a>Namenodes and Datanodes</h3><ul><li>An HDFS cluster has two types of nodes operating in a master−worker pattern<ul><li>namenode (the master)</li><li>datanodes (workers)</li></ul></li><li>Without the namenode, the filesystem cannot be used<ul><li>For this reason, it is important to make the namenode resilient to failure</li><li>The first way is to back up the files that make up the persistent state of the filesystem<br>metadata.</li><li>It is also possible to run a secondary namenode</li></ul></li></ul><h3 id="Block-Caching"><a href="#Block-Caching" class="headerlink" title="Block Caching"></a>Block Caching</h3><ul><li>For frequently accessed files the blocks may be explicitly cached in the datanode’s memory, in an off-heap block cache. By default, a block is cached in only one datanode’s memory.</li></ul><h3 id="HDFS-Federation"><a href="#HDFS-Federation" class="headerlink" title="HDFS Federation"></a>HDFS Federation</h3><ul><li>one namenode might manage all the files rooted under /user, say, and a second name‐<br>node might handle files under /share.<ul><li>namespace volume</li><li>block pool</li></ul></li><li>namenodes do not communicate with one another</li></ul><h3 id="HDFS-High-Avalibility"><a href="#HDFS-High-Avalibility" class="headerlink" title="HDFS High Avalibility"></a>HDFS High Avalibility</h3><ul><li>The new namenode is not able to serve requests until it has<ul><li>loaded its namespace image into memory</li><li>replayed its edit log</li><li>received enough block reports from the datanodes to leave safe mode.</li></ul></li><li>On large clusters with many files and blocks, the time it takes for a namenode to start from cold can be 30 minutes or more.</li><li>Hadoop 2 remedied this situation by adding support for HDFS high availability (HA).<ul><li>there are a pair of namenodes in an active-standby configuration. In the event of the failure of the active namenode, the standby takes over its duties to continue servicing client requests without a significant interruption.</li></ul></li><li>There are two choices for the highly available shared storage<ul><li>NFS filer</li><li>quorum journal manager (QJM)</li><li>The actual observed failover time will be longer in practice (around a minute or so)</li></ul></li><li>The transition from the active namenode to the standby is managed by a new entity in<br>the system called the failover controller<ul><li>default implementation uses ZooKeeper to ensure that only one namenode is active.</li><li>The QJM only allows one namenode to write to the edit log at one time</li></ul></li></ul><h2 id="The-Command-Line-Interface"><a href="#The-Command-Line-Interface" class="headerlink" title="The Command-Line Interface"></a>The Command-Line Interface</h2><h3 id="Basic-Filesystem-Operations"><a href="#Basic-Filesystem-Operations" class="headerlink" title="Basic Filesystem Operations"></a>Basic Filesystem Operations</h3><ul><li><p>copying a file from the local filesystem to HDFS</p><ul><li><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">% hadoop fs -copyFromLocal input/docs/quangle.txt \</div><div class="line"> hdfs:<span class="comment">//localhost/user/tom/quangle.txt</span></div></pre></td></tr></table></figure></li></ul></li><li><p>copy the file back to the local filesystem and check whether it’s the same</p><ul><li><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">% hadoop fs -copyToLocal quangle.txt quangle.copy.txt</div><div class="line">% md5 input/docs/quangle.txt quangle.copy.txt</div><div class="line">e7891a2627cf263a079fb0f18256ffb2 input/docs/quangle.txt</div><div class="line">MD5 (quangle.copy.txt) = e7891a2627cf263a079fb0f18256ffb2</div></pre></td></tr></table></figure></li></ul></li><li><p>create a directory first just to see how it is displayed in the listing</p><ul><li><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">% hadoop fs -mkdir books</div><div class="line">% hadoop fs -ls .</div><div class="line">Found <span class="number">2</span> items</div><div class="line">drwxr-xr-x - tom supergroup <span class="number">0</span> <span class="number">2014</span><span class="number">-10</span><span class="number">-04</span> <span class="number">13</span>:<span class="number">22</span> books</div><div class="line">-rw-r--r-- <span class="number">1</span> tom supergroup <span class="number">119</span> <span class="number">2014</span><span class="number">-10</span><span class="number">-04</span> <span class="number">13</span>:<span class="number">21</span> quangle.txt</div></pre></td></tr></table></figure></li></ul></li></ul><h2 id="The-Java-Interface"><a href="#The-Java-Interface" class="headerlink" title="The Java Interface"></a>The Java Interface</h2><h3 id="Reading-Data-from-a-Hadoop-URL"><a href="#Reading-Data-from-a-Hadoop-URL" class="headerlink" title="Reading Data from a Hadoop URL"></a>Reading Data from a Hadoop URL</h3><p><em>Example. Displaying files from a Hadoop filesystem on standard output using a URLStreamHandler</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// cc URLCat Displays files from a Hadoop filesystem on standard output using a URLStreamHandler</span></div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FsUrlStreamHandlerFactory;</div><div class="line"><span class="keyword">import</span> org.a</div><div class="line">  pache.hadoop.io.IOUtils;</div><div class="line"></div><div class="line"><span class="comment">// vv URLCat</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLCat</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> &#123;</div><div class="line">    URL.setURLStreamHandlerFactory(<span class="keyword">new</span> FsUrlStreamHandlerFactory());</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    InputStream in = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      in = <span class="keyword">new</span> URL(args[<span class="number">0</span>]).openStream();</div><div class="line">      IOUtils.copyBytes(in, System.out, <span class="number">4096</span>, <span class="keyword">false</span>);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      IOUtils.closeStream(in);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ^^ URLCat</span></div></pre></td></tr></table></figure><p><strong>There’s a little bit more work required to make Java recognize Hadoop’s hdfs URL scheme. This is achieved by calling the setURLStreamHandlerFactory() method on URL with an instance of FsUrlStreamHandlerFactory. This method can be called only once per JVM, so it is typically executed in a static block.</strong></p><p>Here’s a sample run:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">% <span class="keyword">export</span> HADOOP_CLASSPATH=hadoop-examples.jar</div><div class="line">% hadoop URLCat hdfs:<span class="comment">//localhost/user/tom/quangle.txt</span></div><div class="line">On the top of the Crumpetty Tree</div><div class="line">The Quangle Wangle sat,</div><div class="line">But his face you could not see,</div><div class="line">On account of his Beaver Hat.</div></pre></td></tr></table></figure><h3 id="Reading-Data-Using-the-FileSystem-API"><a href="#Reading-Data-Using-the-FileSystem-API" class="headerlink" title="Reading Data Using the FileSystem API"></a>Reading Data Using the FileSystem API</h3><p><em>Example. Displaying files from a Hadoop filesystem on standard output by using the FileSystem directly</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// cc FileSystemCat Displays files from a Hadoop filesystem on standard output by using the FileSystem directly</span></div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.net.URI;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</div><div class="line"></div><div class="line"><span class="comment">// vv FileSystemCat</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemCat</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    String uri = args[<span class="number">0</span>];</div><div class="line">    Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">    FileSystem fs = FileSystem.get(URI.create(uri), conf);</div><div class="line">    InputStream in = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      in = fs.open(<span class="keyword">new</span> Path(uri));</div><div class="line">      IOUtils.copyBytes(in, System.out, <span class="number">4096</span>, <span class="keyword">false</span>);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      IOUtils.closeStream(in);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ^^ FileSystemCat</span></div></pre></td></tr></table></figure><p>The program runs as follows:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">% hadoop FileSystemCat hdfs:<span class="comment">//localhost/user/tom/quangle.txt</span></div><div class="line">On the top of the Crumpetty Tree</div><div class="line">The Quangle Wangle sat,</div><div class="line">But his face you could not see,</div><div class="line">On account of his Beaver Hat.</div></pre></td></tr></table></figure><h4 id="FSDataInputStream"><a href="#FSDataInputStream" class="headerlink" title="FSDataInputStream"></a>FSDataInputStream</h4><p><em>Example. Displaying files from a Hadoop filesystem on standard output twice, by using seek()</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// cc FileSystemDoubleCat Displays files from a Hadoop filesystem on standard output twice, by using seek</span></div><div class="line"><span class="keyword">import</span> java.net.URI;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</div><div class="line"></div><div class="line"><span class="comment">// vv FileSystemDoubleCat</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemDoubleCat</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    String uri = args[<span class="number">0</span>];</div><div class="line">    Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">    FileSystem fs = FileSystem.get(URI.create(uri), conf);</div><div class="line">    FSDataInputStream in = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      in = fs.open(<span class="keyword">new</span> Path(uri));</div><div class="line">      IOUtils.copyBytes(in, System.out, <span class="number">4096</span>, <span class="keyword">false</span>);</div><div class="line">      in.seek(<span class="number">0</span>); <span class="comment">// go back to the start of the file</span></div><div class="line">      IOUtils.copyBytes(in, System.out, <span class="number">4096</span>, <span class="keyword">false</span>);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      IOUtils.closeStream(in);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ^^ FileSystemDoubleCat</span></div></pre></td></tr></table></figure><p>Here’s the result of running it on a small file:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">% hadoop FileSystemDoubleCat hdfs:<span class="comment">//localhost/user/tom/quangle.txt</span></div><div class="line">On the top of the Crumpetty Tree</div><div class="line">The Quangle Wangle sat,</div><div class="line">But his face you could not see,</div><div class="line">On account of his Beaver Hat.</div><div class="line">On the top of the Crumpetty Tree</div><div class="line">The Quangle Wangle sat,</div><div class="line">But his face you could not see,</div><div class="line">On account of his Beaver Hat.</div></pre></td></tr></table></figure><h3 id="Writing-Data"><a href="#Writing-Data" class="headerlink" title="Writing Data"></a>Writing Data</h3><p><em>Example. Copying a local file to a Hadoop filesystem</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// cc FileCopyWithProgress Copies a local file to a Hadoop filesystem, and shows progress</span></div><div class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.net.URI;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.util.Progressable;</div><div class="line"></div><div class="line"><span class="comment">// vv FileCopyWithProgress</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileCopyWithProgress</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    String localSrc = args[<span class="number">0</span>];</div><div class="line">    String dst = args[<span class="number">1</span>];</div><div class="line">    </div><div class="line">    InputStream in = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(localSrc));</div><div class="line">    </div><div class="line">    Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">    FileSystem fs = FileSystem.get(URI.create(dst), conf);</div><div class="line">    OutputStream out = fs.create(<span class="keyword">new</span> Path(dst), <span class="keyword">new</span> Progressable() &#123;</div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">progress</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.print(<span class="string">"."</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    IOUtils.copyBytes(in, out, <span class="number">4096</span>, <span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ^^ FileCopyWithProgress</span></div></pre></td></tr></table></figure><p>Typical usage:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">% hadoop FileCopyWithProgress input/docs/<span class="number">1400</span><span class="number">-8.</span>txt</div><div class="line">hdfs:<span class="comment">//localhost/user/tom/1400-8.txt</span></div><div class="line">.................</div></pre></td></tr></table></figure><h3 id="Querying-the-Filesystem"><a href="#Querying-the-Filesystem" class="headerlink" title="Querying the Filesystem"></a>Querying the Filesystem</h3><p>The <code>FileStatus</code> class encapsulates filesystem metadata for files and directories, including file length, block size, replication, modification time, ownership, and permission information.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowFileStatusTest</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> MiniDFSCluster cluster; <span class="comment">// use an in-process HDFS cluster for testing</span></div><div class="line">  <span class="keyword">private</span> FileSystem fs;</div><div class="line"></div><div class="line">  <span class="meta">@Before</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">    <span class="keyword">if</span> (System.getProperty(<span class="string">"test.build.data"</span>) == <span class="keyword">null</span>) &#123;</div><div class="line">      System.setProperty(<span class="string">"test.build.data"</span>, <span class="string">"/tmp"</span>);</div><div class="line">    &#125;</div><div class="line">    cluster = <span class="keyword">new</span> MiniDFSCluster.Builder(conf).build();</div><div class="line">    fs = cluster.getFileSystem();</div><div class="line">    OutputStream out = fs.create(<span class="keyword">new</span> Path(<span class="string">"/dir/file"</span>));</div><div class="line">    out.write(<span class="string">"content"</span>.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">    out.close();</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@After</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (fs != <span class="keyword">null</span>) &#123; fs.close(); &#125;</div><div class="line">    <span class="keyword">if</span> (cluster != <span class="keyword">null</span>) &#123; cluster.shutdown(); &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span>(expected = FileNotFoundException.class)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">throwsFileNotFoundForNonExistentFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    fs.getFileStatus(<span class="keyword">new</span> Path(<span class="string">"no-such-file"</span>));</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileStatusForFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    Path file = <span class="keyword">new</span> Path(<span class="string">"/dir/file"</span>);</div><div class="line">    FileStatus stat = fs.getFileStatus(file);</div><div class="line">    assertThat(stat.getPath().toUri().getPath(), is(<span class="string">"/dir/file"</span>));</div><div class="line">    assertThat(stat.isDirectory(), is(<span class="keyword">false</span>));</div><div class="line">    assertThat(stat.getLen(), is(<span class="number">7L</span>));</div><div class="line">    assertThat(stat.getModificationTime(),</div><div class="line">    is(lessThanOrEqualTo(System.currentTimeMillis())));</div><div class="line">    assertThat(stat.getReplication(), is((<span class="keyword">short</span>) <span class="number">1</span>));</div><div class="line">    assertThat(stat.getBlockSize(), is(<span class="number">128</span> * <span class="number">1024</span> * <span class="number">1024L</span>));</div><div class="line">    assertThat(stat.getOwner(), is(System.getProperty(<span class="string">"user.name"</span>)));</div><div class="line">    assertThat(stat.getGroup(), is(<span class="string">"supergroup"</span>));</div><div class="line">    assertThat(stat.getPermission().toString(), is(<span class="string">"rw-r--r--"</span>));</div><div class="line"> &#125;</div><div class="line"> </div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileStatusForDirectory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    Path dir = <span class="keyword">new</span> Path(<span class="string">"/dir"</span>);</div><div class="line">    FileStatus stat = fs.getFileStatus(dir);</div><div class="line">    assertThat(stat.getPath().toUri().getPath(), is(<span class="string">"/dir"</span>));</div><div class="line">    assertThat(stat.isDirectory(), is(<span class="keyword">true</span>));</div><div class="line">    assertThat(stat.getLen(), is(<span class="number">0L</span>));</div><div class="line">    assertThat(stat.getModificationTime(),</div><div class="line">    is(lessThanOrEqualTo(System.currentTimeMillis())));</div><div class="line">    assertThat(stat.getReplication(), is((<span class="keyword">short</span>) <span class="number">0</span>));</div><div class="line">    assertThat(stat.getBlockSize(), is(<span class="number">0L</span>));</div><div class="line">    assertThat(stat.getOwner(), is(System.getProperty(<span class="string">"user.name"</span>)));</div><div class="line">    assertThat(stat.getGroup(), is(<span class="string">"supergroup"</span>));</div><div class="line">    assertThat(stat.getPermission().toString(), is(<span class="string">"rwxr-xr-x"</span>));</div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="Listing-files"><a href="#Listing-files" class="headerlink" title="Listing files"></a>Listing files</h4><p><em>Example. Showing the file statuses for a collection of paths in a Hadoop filesystem</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// cc ListStatus Shows the file statuses for a collection of paths in a Hadoop filesystem </span></div><div class="line"><span class="keyword">import</span> java.net.URI;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileStatus;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileUtil;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"></div><div class="line"><span class="comment">// vv ListStatus</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListStatus</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    String uri = args[<span class="number">0</span>];</div><div class="line">    Configuration conf = <span class="keyword">new</span> Configuration();</div><div class="line">    FileSystem fs = FileSystem.get(URI.create(uri), conf);</div><div class="line">    </div><div class="line">    Path[] paths = <span class="keyword">new</span> Path[args.length];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paths.length; i++) &#123;</div><div class="line">      paths[i] = <span class="keyword">new</span> Path(args[i]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    FileStatus[] status = fs.listStatus(paths);</div><div class="line">    Path[] listedPaths = FileUtil.stat2Paths(status);</div><div class="line">    <span class="keyword">for</span> (Path p : listedPaths) &#123;</div><div class="line">      System.out.println(p);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ^^ ListStatus</span></div></pre></td></tr></table></figure><p>We can use this program to find the union of directory listings for a collection of paths:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">% hadoop ListStatus hdfs:<span class="comment">//localhost/ hdfs://localhost/user/tom</span></div><div class="line">hdfs:<span class="comment">//localhost/user</span></div><div class="line">hdfs:<span class="comment">//localhost/user/tom/books</span></div><div class="line">hdfs:<span class="comment">//localhost/user/tom/quangle.txt</span></div></pre></td></tr></table></figure><h2 id="DataFlow"><a href="#DataFlow" class="headerlink" title="DataFlow"></a>DataFlow</h2><h3 id="Anatomy-of-a-File-Read"><a href="#Anatomy-of-a-File-Read" class="headerlink" title="Anatomy of a File Read"></a>Anatomy of a File Read</h3><p><img src="http://o7ie0tcjk.bkt.clouddn.com/hadoop/ch03/hdfs_dataflow_read.png" alt="read"></p><h4 id="Network-Topology-and-Hadoop"><a href="#Network-Topology-and-Hadoop" class="headerlink" title="Network Topology and Hadoop"></a>Network Topology and Hadoop</h4><p><img src="http://o7ie0tcjk.bkt.clouddn.com/hadoop/ch03/hdfs_dataflow_distance.png" alt="distance"></p><p><strong>Mathematically inclined readers will notice that this is an example of a distance metric.</strong></p><h3 id="Anatomy-of-a-File-Write"><a href="#Anatomy-of-a-File-Write" class="headerlink" title="Anatomy of a File Write"></a>Anatomy of a File Write</h3><p><img src="http://o7ie0tcjk.bkt.clouddn.com/hadoop/ch03/hdfs_dataflow_write.png" alt="write"></p><p>A typical replica pipeline:</p><p><img src="http://o7ie0tcjk.bkt.clouddn.com/hadoop/ch03/hdfs_dataflow_replica.png" alt="replica"></p><h2 id="Coherency-Model"><a href="#Coherency-Model" class="headerlink" title="Coherency Model"></a>Coherency Model</h2><p>After creating a file, it is visible in the filesystem namespace, as expected:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Path p = <span class="keyword">new</span> Path(<span class="string">"p"</span>);</div><div class="line">fs.create(p);</div><div class="line">assertThat(fs.exists(p), is(<span class="keyword">true</span>));</div></pre></td></tr></table></figure><p>However, any content written to the file is not guaranteed to be visible, even if the stream is flushed. So, the file appears to have a length of zero:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Path p = <span class="keyword">new</span> Path(<span class="string">"p"</span>);</div><div class="line">OutputStream out = fs.create(p);</div><div class="line">out.write(<span class="string">"content"</span>.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">out.flush();</div><div class="line">assertThat(fs.getFileStatus(p).getLen(), is(<span class="number">0L</span>));</div></pre></td></tr></table></figure><p>HDFS provides a way to force all buffers to be flushed to the datanodes via the hflush() method on FSDataOutputStream. After a successful return from hflush(), HDFS guarantees that the data written up to that point in the file has reached all the datanodes in the write pipeline and is visible to all new readers:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Path p = <span class="keyword">new</span> Path(<span class="string">"p"</span>);</div><div class="line">FSDataOutputStream out = fs.create(p);</div><div class="line">out.write(<span class="string">"content"</span>.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">out.hflush();</div><div class="line">assertThat(fs.getFileStatus(p).getLen(), is(((<span class="keyword">long</span>) <span class="string">"content"</span>.length())));</div></pre></td></tr></table></figure><p>Note that hflush() does not guarantee that the datanodes have written the data to disk, only that it’s in the datanodes’ memory (so in the event of a data center power outage, for example, data could be lost). For this stronger guarantee, use hsync() instead.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">FileOutputStream out = <span class="keyword">new</span> FileOutputStream(localFile);</div><div class="line">out.write(<span class="string">"content"</span>.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">out.flush(); <span class="comment">// flush to operating system</span></div><div class="line">out.getFD().sync(); <span class="comment">// sync to disk</span></div><div class="line">assertThat(localFile.length(), is(((<span class="keyword">long</span>) <span class="string">"content"</span>.length())));</div></pre></td></tr></table></figure><p>Closing a file in HDFS performs an implicit hflush(), too:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Path p = <span class="keyword">new</span> Path(<span class="string">"p"</span>);</div><div class="line">OutputStream out = fs.create(p);</div><div class="line">out.write(<span class="string">"content"</span>.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">out.close();</div><div class="line">assertThat(fs.getFileStatus(p).getLen(), is(((<span class="keyword">long</span>) <span class="string">"content"</span>.length())));</div></pre></td></tr></table></figure><h2 id="Parallel-Copying-with-distcp"><a href="#Parallel-Copying-with-distcp" class="headerlink" title="Parallel Copying with distcp"></a>Parallel Copying with distcp</h2><p>One use for distcp is as an efficient replacement for hadoop fs -cp. For example, you can copy one file to another with:</p><p><code>% hadoop distcp file1 file2</code></p><p>You can also copy directories:</p><p><code>% hadoop distcp dir1 dir2</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HDFS-Concepts&quot;&gt;&lt;a href=&quot;#HDFS-Concepts&quot; class=&quot;headerlink&quot; title=&quot;HDFS Concepts&quot;&gt;&lt;/a&gt;HDFS Concepts&lt;/h2&gt;&lt;h3 id=&quot;Blocks&quot;&gt;&lt;a href=&quot;#Blo
    
    </summary>
    
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop namenode not getting started</title>
    <link href="http://yoursite.com/2017/04/18/Hadoop-namenode-not-getting-started/"/>
    <id>http://yoursite.com/2017/04/18/Hadoop-namenode-not-getting-started/</id>
    <published>2017-04-18T02:06:40.000Z</published>
    <updated>2017-04-18T02:15:12.035Z</updated>
    
    <content type="html"><![CDATA[<ol><li>First delete all contents from temporary folder: <code>rm -rf &lt;tmp dir&gt;</code> (my was /usr/local/hadoop/tmp)</li><li>Format the namenode: <code>bin/hadoop namenode -format</code></li><li>Start all processes again<ol><li><code>bin/start-dfs.sh</code></li><li><code>bin/start-yarn.sh</code></li><li><code>bin/mr-jobhistory-daemon.sh start historyserver</code></li></ol></li></ol><p>You may consider rolling back as well using checkpoint (if you had it enabled).</p>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;&lt;li&gt;First delete all contents from temporary folder: &lt;code&gt;rm -rf &amp;lt;tmp dir&amp;gt;&lt;/code&gt; (my was /usr/local/hadoop/tmp)&lt;/li&gt;&lt;li&gt;Format t
    
    </summary>
    
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop ch02 MapReduce notes</title>
    <link href="http://yoursite.com/2017/04/17/Hadoop-ch02-MapReduce-notes/"/>
    <id>http://yoursite.com/2017/04/17/Hadoop-ch02-MapReduce-notes/</id>
    <published>2017-04-17T09:32:26.000Z</published>
    <updated>2017-04-17T11:36:52.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h2><p>首先我们有一个数据集，关于天气的，然后它的每一条记录是这样的：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="number">0057</span></div><div class="line"><span class="number">332130</span> <span class="comment"># USAF weather station identifier</span></div><div class="line"><span class="number">99999</span> <span class="comment"># WBAN weather station identifier</span></div><div class="line"><span class="number">19500101</span> <span class="comment"># observation date</span></div><div class="line"><span class="number">0300</span> <span class="comment"># observation time</span></div><div class="line"><span class="number">4</span></div><div class="line">+<span class="number">51317</span> <span class="comment"># latitude (degrees x 1000)</span></div><div class="line">+<span class="number">02</span>8783 <span class="comment"># longitude (degrees x 1000)</span></div><div class="line">FM-<span class="number">12</span></div><div class="line">+<span class="number">0171</span> <span class="comment"># elevation (meters)</span></div><div class="line"><span class="number">99999</span></div><div class="line">V02<span class="number">0</span></div><div class="line"><span class="number">320</span> <span class="comment"># wind direction (degrees)</span></div><div class="line"><span class="number">1</span> <span class="comment"># quality code</span></div><div class="line">N</div><div class="line"><span class="number">0072</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">00450</span> <span class="comment"># sky ceiling height (meters)</span></div><div class="line"><span class="number">1</span> <span class="comment"># quality code</span></div><div class="line">C</div><div class="line">N</div><div class="line"><span class="number">010000</span> <span class="comment"># visibility distance (meters)</span></div><div class="line"><span class="number">1</span> <span class="comment"># quality code</span></div><div class="line">N</div><div class="line"><span class="number">9</span></div><div class="line">-<span class="number">012</span>8 <span class="comment"># air temperature (degrees Celsius x 10)</span></div><div class="line"><span class="number">1</span> <span class="comment"># quality code</span></div><div class="line">-<span class="number">013</span>9 <span class="comment"># dew point temperature (degrees Celsius x 10)</span></div><div class="line"><span class="number">1</span> <span class="comment"># quality code</span></div><div class="line"><span class="number">10268</span> <span class="comment"># atmospheric pressure (hectopascals x 10)</span></div><div class="line"><span class="number">1</span> <span class="comment"># quality code</span></div></pre></td></tr></table></figure><p>当然以上数据是经过处理之后的，一开始它长这样：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">0067011</span>990999991950051507004...<span class="number">9999999</span>N9+<span class="number">00001</span>+<span class="number">99999999999</span>...</div><div class="line"><span class="number">0043011</span>990999991950051512004...<span class="number">9999999</span>N9+<span class="number">00221</span>+<span class="number">99999999999</span>...</div><div class="line"><span class="number">0043011</span>990999991950051518004...<span class="number">9999999</span>N9-<span class="number">00111</span>+<span class="number">99999999999</span>...</div><div class="line"><span class="number">0043012650</span>999991949032412004...<span class="number">0500001</span>N9+<span class="number">01111</span>+<span class="number">99999999999</span>...</div><div class="line"><span class="number">0043012650</span>999991949032418004...<span class="number">0500001</span>N9+<span class="number">007</span>81+<span class="number">99999999999</span>...</div></pre></td></tr></table></figure><p>Hmmm….</p><p>这个天气数据集按照<code>气象站编号-年份</code>的形式来组织的：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">010010</span>-<span class="number">99999</span>-<span class="number">1990</span>.gz</div><div class="line"><span class="number">010014</span>-<span class="number">99999</span>-<span class="number">1990</span>.gz</div><div class="line"><span class="number">010015</span>-<span class="number">99999</span>-<span class="number">1990</span>.gz</div><div class="line"><span class="number">010016</span>-<span class="number">99999</span>-<span class="number">1990</span>.gz</div><div class="line"><span class="number">010017</span>-<span class="number">99999</span>-<span class="number">1990</span>.gz</div><div class="line"><span class="number">010030</span>-<span class="number">99999</span>-<span class="number">1990</span>.gz</div><div class="line"><span class="number">010040</span>-<span class="number">99999</span>-<span class="number">1990</span>.gz</div><div class="line"><span class="number">0100</span>8<span class="number">0</span>-<span class="number">99999</span>-<span class="number">1990</span>.gz</div><div class="line"><span class="number">010100</span>-<span class="number">99999</span>-<span class="number">1990</span>.gz</div><div class="line"><span class="number">010150</span>-<span class="number">99999</span>-<span class="number">1990</span>.gz</div></pre></td></tr></table></figure><p>这个原始数据显然用起来不方便，所以按照年份给它聚个类，用了如下方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">hadoop jar $HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-*.jar \</div><div class="line">  -D mapred.reduce.tasks=<span class="number">0</span> \</div><div class="line">  -D mapred.map.tasks.speculative.execution=<span class="literal">false</span> \</div><div class="line">  -D mapred.task.timeout=<span class="number">12000000</span> \</div><div class="line">  -input ncdc_files.txt \</div><div class="line">  -inputformat org.apache.hadoop.mapred.lib.NLineInputFormat \</div><div class="line">  -output output \</div><div class="line">  -mapper load_ncdc_map.sh \</div><div class="line">  -file load_ncdc_map.sh</div></pre></td></tr></table></figure><p>然后里面用到的<code>ncdc_files</code>以及<code>load_ncdc_map.sh</code>这两个文件是这样的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1901.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1902.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1903.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1904.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1905.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1906.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1907.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1908.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1909.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1910.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1911.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1912.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1913.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1914.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1915.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1916.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1917.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1918.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1919.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1920.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1921.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1922.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1923.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1924.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1925.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1926.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1927.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1928.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1929.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1930.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1931.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1932.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1933.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1934.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1935.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1936.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1937.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1938.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1939.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1940.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1941.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1942.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1943.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1944.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1945.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1946.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1947.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1948.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1949.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1950.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1951.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1952.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1953.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1954.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1955.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1956.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1957.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1958.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1959.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1960.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1961.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1962.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1963.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1964.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1965.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1966.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1967.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1968.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1969.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1970.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1971.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1972.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1973.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1974.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1975.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1976.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1977.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1978.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1979.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1980.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1981.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1982.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1983.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1984.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1985.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1986.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1987.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1988.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1989.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1990.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1991.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1992.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1993.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1994.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1995.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1996.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1997.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1998.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-1999.tar.bz2</span></div><div class="line">s3n:<span class="comment">//hadoopbook/ncdc/raw/isd-2000.tar.bz2</span></div></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env bash</div><div class="line"></div><div class="line"># NLineInputFormat gives a single line: key is offset, value is S3 URI</div><div class="line">read offset s3file</div><div class="line"></div><div class="line"># Retrieve file from S3 to local disk</div><div class="line">echo "reporter:status:Retrieving $s3file" &gt;&amp;2</div><div class="line">$HADOOP_INSTALL/bin/hadoop fs -get $s3file .</div><div class="line"></div><div class="line"># Un-bzip and un-tar the local file</div><div class="line">target=`basename $s3file .tar.bz2`</div><div class="line">mkdir -p $target</div><div class="line">echo "reporter:status:Un-tarring $s3file to $target" &gt;&amp;2</div><div class="line">tar jxf `basename $s3file` -C $target</div><div class="line"></div><div class="line"># Un-gzip each station file and concat into one file</div><div class="line">echo "reporter:status:Un-gzipping $target" &gt;&amp;2</div><div class="line">for file in $target/*/*</div><div class="line">do</div><div class="line">  gunzip -c $file &gt;&gt; $target.all</div><div class="line">  echo "reporter:status:Processed $file" &gt;&amp;2</div><div class="line">done</div><div class="line"></div><div class="line"># Put gzipped version into HDFS</div><div class="line">echo "reporter:status:Gzipping $target and putting in HDFS" &gt;&amp;2</div><div class="line">gzip -c $target.all | $HADOOP_INSTALL/bin/hadoop fs -put - gz/$target.gz</div></pre></td></tr></table></figure><p>嗯…顺便说一句，这个文件是存在<code>AWS</code>上的，所以想用的话要有一个<code>AWS</code>账号，想要有个账号呢，你得先有个可以支付美刀的信用卡。</p><p>Hmmmmm…</p><p>其实作者给的<code>sample data</code>也挺好的我觉得，<a href="https://github.com/tomwhite/hadoop-book/tree/master/input/ncdc" target="_blank" rel="external">在这里</a>.</p><p>那么我们的问题就是说，找出每一年的最高的温度。先看看不用<code>Hadoop</code>的实现方法，事实证明我<code>shell</code>脚本还是宝刀未老的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#!<span class="regexp">/usr/</span>bin/env bash</div><div class="line"><span class="keyword">for</span> year <span class="keyword">in</span> all<span class="comment">/*</span></div><div class="line">do</div><div class="line"> echo -ne `basename $year .gz`"\t"</div><div class="line"> gunzip -c $year | \</div><div class="line"> awk '&#123; temp = substr($0, 88, 5) + 0;</div><div class="line"> q = substr($0, 93, 1);</div><div class="line"> if (temp !=9999 &amp;&amp; q ~ /[01459]/ &amp;&amp; temp &gt; max) max = temp &#125;</div><div class="line"> END &#123; print max &#125;'</div><div class="line">done</div></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">% ./max_temperature.sh</div><div class="line"><span class="number">1901</span> <span class="number">317</span></div><div class="line"><span class="number">1902</span> <span class="number">244</span></div><div class="line"><span class="number">1903</span> <span class="number">289</span></div><div class="line"><span class="number">1904</span> <span class="number">256</span></div><div class="line"><span class="number">1905</span> <span class="number">283</span></div><div class="line">...</div></pre></td></tr></table></figure><p>啊嘞，还不错的样子，但是对于大数据速度还是慢了点儿，所以直接上<code>Hadoop</code>看看。</p><p>对于以上的问题呢，<code>MapReduce</code>是这样解决的</p><p><img src="http://o7ie0tcjk.bkt.clouddn.com/hadoop/ch02/mapred_pipeline.png" alt="mapred_pipeline"></p><p>注意了，上面一行是<code>hadoop</code>的术语，下面呢，其实就是<code>Unix</code>的<code>pipe</code>了，这给我们不用<code>Java</code>来实现提供了可能。</p><p>好了下面开始coding了，拿起键盘就是GAN</p><p>为了实现我们的任务，我们需要三个java文件，一个<code>mapper</code>，一个<code>reducer</code>。这俩是苦工，还要一个监工。</p><p><code>Mapper</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// cc MaxTemperatureMapper Mapper for maximum temperature example</span></div><div class="line"><span class="comment">// vv MaxTemperatureMapper</span></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxTemperatureMapper</span></span></div><div class="line">  <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; &#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MISSING = <span class="number">9999</span>;</div><div class="line">  </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span></span></div><div class="line">      <span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">    </div><div class="line">    String line = value.toString();</div><div class="line">    String year = line.substring(<span class="number">15</span>, <span class="number">19</span>);</div><div class="line">    <span class="keyword">int</span> airTemperature;</div><div class="line">    <span class="keyword">if</span> (line.charAt(<span class="number">87</span>) == <span class="string">'+'</span>) &#123; <span class="comment">// parseInt doesn't like leading plus signs</span></div><div class="line">      airTemperature = Integer.parseInt(line.substring(<span class="number">88</span>, <span class="number">92</span>));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      airTemperature = Integer.parseInt(line.substring(<span class="number">87</span>, <span class="number">92</span>));</div><div class="line">    &#125;</div><div class="line">    String quality = line.substring(<span class="number">92</span>, <span class="number">93</span>);</div><div class="line">    <span class="keyword">if</span> (airTemperature != MISSING &amp;&amp; quality.matches(<span class="string">"[01459]"</span>)) &#123;</div><div class="line">      context.write(<span class="keyword">new</span> Text(year), <span class="keyword">new</span> IntWritable(airTemperature));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ^^ MaxTemperatureMapper</span></div></pre></td></tr></table></figure><p><code>Reducer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// cc MaxTemperatureReducer Reducer for maximum temperature example</span></div><div class="line"><span class="comment">// vv MaxTemperatureReducer</span></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxTemperatureReducer</span></span></div><div class="line">  <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; &#123;</div><div class="line">  </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values,</span></span></div><div class="line">      Context context)</div><div class="line">      <span class="keyword">throws</span> IOException, InterruptedException &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> maxValue = Integer.MIN_VALUE;</div><div class="line">    <span class="keyword">for</span> (IntWritable value : values) &#123;</div><div class="line">      maxValue = Math.max(maxValue, value.get());</div><div class="line">    &#125;</div><div class="line">    context.write(key, <span class="keyword">new</span> IntWritable(maxValue));</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ^^ MaxTemperatureReducer</span></div></pre></td></tr></table></figure><p><code>Job</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// cc MaxTemperature Application to find the maximum temperature in the weather dataset</span></div><div class="line"><span class="comment">// vv MaxTemperature</span></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxTemperature</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">if</span> (args.length != <span class="number">2</span>) &#123;</div><div class="line">      System.err.println(<span class="string">"Usage: MaxTemperature &lt;input path&gt; &lt;output path&gt;"</span>);</div><div class="line">      System.exit(-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Job job = <span class="keyword">new</span> Job();</div><div class="line">    job.setJarByClass(MaxTemperature.class);</div><div class="line">    job.setJobName(<span class="string">"Max temperature"</span>);</div><div class="line"></div><div class="line">    FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</div><div class="line">    FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</div><div class="line">    </div><div class="line">    job.setMapperClass(MaxTemperatureMapper.class);</div><div class="line">    job.setReducerClass(MaxTemperatureReducer.class);</div><div class="line"></div><div class="line">    job.setOutputKeyClass(Text.class);</div><div class="line">    job.setOutputValueClass(IntWritable.class);</div><div class="line">    </div><div class="line">    System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ^^ MaxTemperature</span></div></pre></td></tr></table></figure><p>然后这么运行：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">% <span class="keyword">export</span> HADOOP_CLASSPATH=hadoop-examples.jar</div><div class="line">% hadoop MaxTemperature input/ncdc/sample.txt output</div></pre></td></tr></table></figure><p>但是如果数据量非常大的话，需要在<code>Mapper</code>和<code>Reducer</code>之间传递大量的数据，这个时候可以引入<code>Combiner</code>，它的机理是这样的。假如我有两个<code>mapper</code>，它们的输出结果是这样子的：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1950</span>, <span class="number">0</span>)</div><div class="line">(<span class="number">1950</span>, <span class="number">20</span>)</div><div class="line">(<span class="number">1950</span>, <span class="number">10</span>)</div></pre></td></tr></table></figure><p>以及这样子的：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1950</span>, <span class="number">25</span>)</div><div class="line">(<span class="number">1950</span>, <span class="number">15</span>)</div></pre></td></tr></table></figure><p>如果没有<code>combiner</code>的话，它们会先变成这样子：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1950</span>, [<span class="number">0</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">15</span>])</div></pre></td></tr></table></figure><p>然后作为<code>reducer</code>的输入，但是如果加入了<code>combiner</code>的话，相当于上面的问题变成了这样</p><p><code>max(0, 20, 10, 25, 15) = max(max(0, 20, 10), max(25, 15)) = max(20, 25) = 25</code></p><p>是不是简单多了。但是注意了，并不是所有的问题都是这样，比如下面这个问题：</p><p><code>mean(0, 20, 10, 25, 15) = 14</code></p><p><code>mean(mean(0, 20, 10), mean(25, 15)) = mean(10, 20) = 15</code></p><p>所以说要根据具体情况来定，不能直接套用。</p><p>好了我们继续<code>combiner</code>的话题，我们怎么把这货加到<code>hadoop</code>的流程中去呢，其实很简单，这样就可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// cc MaxTemperatureWithCombiner Application to find the maximum temperature, using a combiner function for efficiency</span></div><div class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</div><div class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</div><div class="line"></div><div class="line"><span class="comment">// vv MaxTemperatureWithCombiner</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxTemperatureWithCombiner</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">if</span> (args.length != <span class="number">2</span>) &#123;</div><div class="line">      System.err.println(<span class="string">"Usage: MaxTemperatureWithCombiner &lt;input path&gt; "</span> +</div><div class="line">          <span class="string">"&lt;output path&gt;"</span>);</div><div class="line">      System.exit(-<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Job job = <span class="keyword">new</span> Job();</div><div class="line">    job.setJarByClass(MaxTemperatureWithCombiner.class);</div><div class="line">    job.setJobName(<span class="string">"Max temperature"</span>);</div><div class="line"></div><div class="line">    FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</div><div class="line">    FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</div><div class="line">    </div><div class="line">    job.setMapperClass(MaxTemperatureMapper.class);</div><div class="line">    <span class="comment">/*[*/</span>job.setCombinerClass(MaxTemperatureReducer.class)<span class="comment">/*]*/</span>;</div><div class="line">    job.setReducerClass(MaxTemperatureReducer.class);</div><div class="line"></div><div class="line">    job.setOutputKeyClass(Text.class);</div><div class="line">    job.setOutputValueClass(IntWritable.class);</div><div class="line">    </div><div class="line">    System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ^^ MaxTemperatureWithCombiner</span></div></pre></td></tr></table></figure><p>没错，<code>combiner</code>和<code>reducer</code>是一样的。其实仔细想想这也很自然，因为它们俩实际实现的功能是一样的。</p><h2 id="Hadoop-Streaming"><a href="#Hadoop-Streaming" class="headerlink" title="Hadoop Streaming"></a>Hadoop Streaming</h2><p>作为一个<code>machine learning</code>专业的，有时候用<code>Java</code>还是感觉挺不爽的，哪有<code>Python</code>啊，<code>Ruby</code>啊这种脚本语言方便嘛。所以<code>hadoop</code>还是很人性地提供了解决方法，就是标题所表示的技术。直接看代码怎么用吧。</p><h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><p><code>Map</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env ruby</span></div><div class="line"></div><div class="line">STDIN.each_line <span class="keyword">do</span> <span class="params">|line|</span></div><div class="line">  val = line</div><div class="line">  year, temp, q = val[<span class="number">15</span>,<span class="number">4</span>], val[<span class="number">87</span>,<span class="number">5</span>], val[<span class="number">92</span>,<span class="number">1</span>]</div><div class="line">  puts <span class="string">"<span class="subst">#&#123;year&#125;</span>\t<span class="subst">#&#123;temp&#125;</span>"</span> <span class="keyword">if</span> (temp != <span class="string">"+9999"</span> &amp;&amp; q =~ <span class="regexp">/[01459]/</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p><code>Reduce</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env ruby</span></div><div class="line"></div><div class="line">last_key, max_val = <span class="literal">nil</span>, -<span class="number">1000000</span></div><div class="line">STDIN.each_line <span class="keyword">do</span> <span class="params">|line|</span></div><div class="line">  key, val = line.split(<span class="string">"\t"</span>)</div><div class="line">  <span class="keyword">if</span> last_key &amp;&amp; last_key != key</div><div class="line">    puts <span class="string">"<span class="subst">#&#123;last_key&#125;</span>\t<span class="subst">#&#123;max_val&#125;</span>"</span></div><div class="line">    last_key, max_val = key, val.to_i</div><div class="line">  <span class="keyword">else</span></div><div class="line">    last_key, max_val = key, [max_val, val.to_i].max</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line">puts <span class="string">"<span class="subst">#&#123;last_key&#125;</span>\t<span class="subst">#&#123;max_val&#125;</span>"</span> <span class="keyword">if</span> last_key</div></pre></td></tr></table></figure><p>然后这样调用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">% hadoop jar $HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-*.jar \</div><div class="line"> -input input/ncdc/sample.txt \</div><div class="line"> -output output \</div><div class="line"> -mapper ch02-mr-intro/src/main/ruby/max_temperature_map.rb \</div><div class="line"> -reducer ch02-mr-intro/src/main/ruby/max_temperature_reduce.rb</div></pre></td></tr></table></figure><p>是不是很方便？如果要加上<code>combiner</code>的话，更方便了，都不用再写额外的文件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">% hadoop jar $HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-*.jar \</div><div class="line"> -files ch02-mr-intro/src/main/ruby/max_temperature_map.rb,\</div><div class="line">ch02-mr-intro/src/main/ruby/max_temperature_reduce.rb \</div><div class="line"> -input input/ncdc/all \</div><div class="line"> -output output \</div><div class="line"> -mapper ch02-mr-intro/src/main/ruby/max_temperature_map.rb \</div><div class="line"> -combiner ch02-mr-intro/src/main/ruby/max_temperature_reduce.rb \</div><div class="line"> -reducer ch02-mr-intro/src/main/ruby/max_temperature_reduce.rb</div></pre></td></tr></table></figure><p>注意，以上的<code>-files</code>命令是为了在集群环境下运行时，将脚本复制到各子节点上。</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>啊，<code>Python</code>大大出场，其实和<code>Ruby</code>没啥区别。</p><p><code>Map</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</div><div class="line">  val = line.strip()</div><div class="line">  (year, temp, q) = (val[<span class="number">15</span>:<span class="number">19</span>], val[<span class="number">87</span>:<span class="number">92</span>], val[<span class="number">92</span>:<span class="number">93</span>])</div><div class="line">  <span class="keyword">if</span> (temp != <span class="string">"+9999"</span> <span class="keyword">and</span> re.match(<span class="string">"[01459]"</span>, q)):</div><div class="line">    <span class="keyword">print</span> <span class="string">"%s\t%s"</span> % (year, temp)</div></pre></td></tr></table></figure><p><code>Reduce</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">(last_key, max_val) = (<span class="keyword">None</span>, -sys.maxint)</div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</div><div class="line">  (key, val) = line.strip().split(<span class="string">"\t"</span>)</div><div class="line">  <span class="keyword">if</span> last_key <span class="keyword">and</span> last_key != key:</div><div class="line">    <span class="keyword">print</span> <span class="string">"%s\t%s"</span> % (last_key, max_val)</div><div class="line">    (last_key, max_val) = (key, int(val))</div><div class="line">  <span class="keyword">else</span>:</div><div class="line">    (last_key, max_val) = (key, max(max_val, int(val)))</div><div class="line"></div><div class="line"><span class="keyword">if</span> last_key:</div><div class="line">  <span class="keyword">print</span> <span class="string">"%s\t%s"</span> % (last_key, max_val)</div></pre></td></tr></table></figure><p>运行都是一样的，就不多做赘述了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MapReduce&quot;&gt;&lt;a href=&quot;#MapReduce&quot; class=&quot;headerlink&quot; title=&quot;MapReduce&quot;&gt;&lt;/a&gt;MapReduce&lt;/h2&gt;&lt;p&gt;首先我们有一个数据集，关于天气的，然后它的每一条记录是这样的：&lt;/p&gt;&lt;figure
    
    </summary>
    
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning [ECNU] Assignment 1</title>
    <link href="http://yoursite.com/2017/04/16/Machine-Learning-ECNU-Assignment-1/"/>
    <id>http://yoursite.com/2017/04/16/Machine-Learning-ECNU-Assignment-1/</id>
    <published>2017-04-16T05:04:17.000Z</published>
    <updated>2017-04-16T05:15:09.386Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Use a crawler to get at least 20 webpages from a website.</strong></p><p><strong>Count theoccurrences of words in the webpages on Hadoop.</strong></p><p>Hand in:</p><ol><li>Each one should crawl different websites, list the website URL, as well as the URLsof the crawled webpages.</li><li><p>Count the word occurrence on Hadoop, code in both JAVA and another language such asPig Latin. print out your code.</p></li><li><p>Print out your result.</p></li></ol><p>Home work due: <strong>4/12</strong></p><p>You are allowed toform a group of no more than 4 fellow students.</p><p><a href="https://github.com/ewanlee/machine-learning-ECNU-/blob/master/Hadoop%20wordcount%20demo_cutted.pdf" target="_blank" rel="external">https://github.com/ewanlee/machine-learning-ECNU-/blob/master/Hadoop%20wordcount%20demo_cutted.pdf</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Use a crawler to get at least 20 webpages from a website.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Count theoccurrences of words in the webpages on
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
      <category term="crawl" scheme="http://yoursite.com/tags/crawl/"/>
    
  </entry>
  
  <entry>
    <title>cs231n Assignments [2 &amp; 3]</title>
    <link href="http://yoursite.com/2017/04/16/cs231n-Assignments-2-3/"/>
    <id>http://yoursite.com/2017/04/16/cs231n-Assignments-2-3/</id>
    <published>2017-04-16T04:39:58.000Z</published>
    <updated>2017-04-16T04:51:45.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Assignment-2"><a href="#Assignment-2" class="headerlink" title="Assignment 2"></a>Assignment 2</h1><p>In this assignment you will practice writing backpropagation code, and training Neural Networks and Convolutional Neural Networks. The goals of this assignment are as follows:</p><ul><li>understand <strong>Neural Networks</strong> and how they are arranged in layered architectures</li><li>understand and be able to implement (vectorized) <strong>backpropagation</strong></li><li>implement various <strong>update rules</strong> used to optimize Neural Networks</li><li>implement <strong>batch normalization</strong> for training deep networks</li><li>implement <strong>dropout</strong> to regularize networks</li><li>effectively <strong>cross-validate</strong> and find the best hyperparameters for Neural Network architecture</li><li>understand the architecture of <strong>Convolutional Neural Networks</strong> and train gain experience with training these models on data</li></ul><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><p>You can work on the assignment in one of two ways: locally on your own machine, or on a virtual machine through Terminal.com.</p><h3 id="Working-in-the-cloud-on-Terminal"><a href="#Working-in-the-cloud-on-Terminal" class="headerlink" title="Working in the cloud on Terminal"></a>Working in the cloud on Terminal</h3><p>Terminal has created a separate subdomain to serve our class, <a href="https://www.stanfordterminalcloud.com/" target="_blank" rel="external">www.stanfordterminalcloud.com</a>. Register your account there. The Assignment 2 snapshot can then be found <a href="https://www.stanfordterminalcloud.com/snapshot/6c95ca2c9866a962964ede3ea5813d4c2410ba48d92cf8d11a93fbb13e08b76a" target="_blank" rel="external">HERE</a>. If you are registered in the class you can contact the TA (see Piazza for more information) to request Terminal credits for use on the assignment. Once you boot up the snapshot everything will be installed for you, and you will be ready to start on your assignment right away. We have written a small tutorial on Terminal <a href="http://cs231n.github.io/terminal-tutorial" target="_blank" rel="external">here</a>.</p><h3 id="Working-locally"><a href="#Working-locally" class="headerlink" title="Working locally"></a>Working locally</h3><p>Get the code as a zip file <a href="http://cs231n.stanford.edu/assignments/2016/winter1516_assignment2.zip" target="_blank" rel="external">here</a>. As for the dependencies:</p><p><strong>[Option 1] Use Anaconda:</strong> The preferred approach for installing all the assignment dependencies is to use<a href="https://www.continuum.io/downloads" target="_blank" rel="external">Anaconda</a>, which is a Python distribution that includes many of the most popular Python packages for science, math, engineering and data analysis. Once you install it you can skip all mentions of requirements and you are ready to go directly to working on the assignment.</p><p><strong>[Option 2] Manual install, virtual environment:</strong> If you do not want to use Anaconda and want to go with a more manual and risky installation route you will likely want to create a <a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/" target="_blank" rel="external">virtual environment</a> for the project. If you choose not to use a virtual environment, it is up to you to make sure that all dependencies for the code are installed globally on your machine. To set up a virtual environment, run the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd assignment2</div><div class="line">sudo pip install virtualenv      # This may already be installed</div><div class="line">virtualenv .env                  # Create a virtual environment</div><div class="line">source .env/bin/activate         # Activate the virtual environment</div><div class="line">pip install -r requirements.txt  # Install dependencies</div><div class="line"># Work on the assignment for a while ...</div><div class="line">deactivate                       # Exit the virtual environment</div></pre></td></tr></table></figure><p><strong>Download data:</strong> Once you have the starter code, you will need to download the CIFAR-10 dataset. Run the following from the <code>assignment2</code> directory:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd cs231n/datasets</div><div class="line">./get_datasets.sh</div></pre></td></tr></table></figure><p><strong>Compile the Cython extension:</strong> Convolutional Neural Networks require a very efficient implementation. We have implemented of the functionality using <a href="http://cython.org/" target="_blank" rel="external">Cython</a>; you will need to compile the Cython extension before you can run the code. From the <code>cs231n</code> directory, run the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py build_ext --inplace</div></pre></td></tr></table></figure><p><strong>Start IPython:</strong> After you have the CIFAR-10 data, you should start the IPython notebook server from the <code>assignment2</code> directory. If you are unfamiliar with IPython, you should read our <a href="http://cs231n.github.io/ipython-tutorial" target="_blank" rel="external">IPython tutorial</a>.</p><p><strong>NOTE:</strong> If you are working in a virtual environment on OSX, you may encounter errors with matplotlib due to the<a href="http://matplotlib.org/faq/virtualenv_faq.html" target="_blank" rel="external">issues described here</a>. You can work around this issue by starting the IPython server using the<code>start_ipython_osx.sh</code> script from the <code>assignment2</code> directory; the script assumes that your virtual environment is named <code>.env</code>.</p><h3 id="Submitting-your-work"><a href="#Submitting-your-work" class="headerlink" title="Submitting your work:"></a>Submitting your work:</h3><p>Whether you work on the assignment locally or using Terminal, once you are done working run the <code>collectSubmission.sh</code> script; this will produce a file called <code>assignment2.zip</code>. Upload this file under the Assignments tab on <a href="https://coursework.stanford.edu/portal/site/W15-CS-231N-01/" target="_blank" rel="external">the coursework</a> page for the course.</p><h3 id="Q1-Fully-connected-Neural-Network-30-points"><a href="#Q1-Fully-connected-Neural-Network-30-points" class="headerlink" title="Q1: Fully-connected Neural Network (30 points)"></a>Q1: Fully-connected Neural Network (30 points)</h3><p>The IPython notebook <a href="https://github.com/ewanlee/cs231n/blob/master/cs231n-assignments/assignment2/FullyConnectedNets.ipynb" target="_blank" rel="external"><code>FullyConnectedNets.ipynb</code></a> will introduce you to our modular layer design, and then use those layers to implement fully-connected networks of arbitrary depth. To optimize these models you will implement several popular update rules.</p><h3 id="Q2-Batch-Normalization-30-points"><a href="#Q2-Batch-Normalization-30-points" class="headerlink" title="Q2: Batch Normalization (30 points)"></a>Q2: Batch Normalization (30 points)</h3><p>In the IPython notebook <a href="https://github.com/ewanlee/cs231n/blob/master/cs231n-assignments/assignment2/BatchNormalization.ipynb" target="_blank" rel="external"><code>BatchNormalization.ipynb</code></a> you will implement batch normalization, and use it to train deep fully-connected networks.</p><h3 id="Q3-Dropout-10-points"><a href="#Q3-Dropout-10-points" class="headerlink" title="Q3: Dropout (10 points)"></a>Q3: Dropout (10 points)</h3><p>The IPython notebook <a href="https://github.com/ewanlee/cs231n/blob/master/cs231n-assignments/assignment2/Dropout.ipynb" target="_blank" rel="external"><code>Dropout.ipynb</code></a> will help you implement Dropout and explore its effects on model generalization.</p><h3 id="Q4-ConvNet-on-CIFAR-10-30-points"><a href="#Q4-ConvNet-on-CIFAR-10-30-points" class="headerlink" title="Q4: ConvNet on CIFAR-10 (30 points)"></a>Q4: ConvNet on CIFAR-10 (30 points)</h3><p>In the IPython Notebook <a href="https://github.com/ewanlee/cs231n/blob/master/cs231n-assignments/assignment2/ConvolutionalNetworks.ipynb" target="_blank" rel="external"><code>ConvolutionalNetworks.ipynb</code></a> you will implement several new layers that are commonly used in convolutional networks. You will train a (shallow) convolutional network on CIFAR-10, and it will then be up to you to train the best network that you can.</p><h3 id="Q5-Do-something-extra-up-to-10-points"><a href="#Q5-Do-something-extra-up-to-10-points" class="headerlink" title="Q5: Do something extra! (up to +10 points)"></a>Q5: Do something extra! (up to +10 points)</h3><p>In the process of training your network, you should feel free to implement anything that you want to get better performance. You can modify the solver, implement additional layers, use different types of regularization, use an ensemble of models, or anything else that comes to mind. If you implement these or other ideas not covered in the assignment then you will be awarded some bonus points.](<a href="https://github.com/ewanlee/cs231n/tree/master/cs231n-assignments/assignment" target="_blank" rel="external">https://github.com/ewanlee/cs231n/tree/master/cs231n-assignments/assignment</a></p><h1 id="Assignment-3"><a href="#Assignment-3" class="headerlink" title="Assignment 3"></a>Assignment 3</h1><p>In this assignment you will implement recurrent networks, and apply them to image captioning on Microsoft COCO. We will also introduce the TinyImageNet dataset, and use a pretrained model on this dataset to explore different applications of image gradients.</p><p>The goals of this assignment are as follows:</p><ul><li>Understand the architecture of <em>recurrent neural networks (RNNs)</em> and how they operate on sequences by sharing weights over time</li><li>Understand the difference between vanilla RNNs and Long-Short Term Memory (LSTM) RNNs</li><li>Understand how to sample from an RNN at test-time</li><li>Understand how to combine convolutional neural nets and recurrent nets to implement an image captioning system</li><li>Understand how a trained convolutional network can be used to compute gradients with respect to the input image</li><li>Implement and different applications of image gradients, including saliency maps, fooling images, class visualizations, feature inversion, and DeepDream.</li></ul><h2 id="Setup-1"><a href="#Setup-1" class="headerlink" title="Setup"></a>Setup</h2><p>You can work on the assignment in one of two ways: locally on your own machine, or on a virtual machine through Terminal.com.</p><h3 id="Working-in-the-cloud-on-Terminal-1"><a href="#Working-in-the-cloud-on-Terminal-1" class="headerlink" title="Working in the cloud on Terminal"></a>Working in the cloud on Terminal</h3><p>Terminal has created a separate subdomain to serve our class, <a href="https://www.stanfordterminalcloud.com/" target="_blank" rel="external">www.stanfordterminalcloud.com</a>. Register your account there. The Assignment 3 snapshot can then be found <a href="https://www.stanfordterminalcloud.com/snapshot/29054ca27bc2e8bda888709ba3d9dd07a172cbbf0824152aac49b14a018ffbe5" target="_blank" rel="external">HERE</a>. If you are registered in the class you can contact the TA (see Piazza for more information) to request Terminal credits for use on the assignment. Once you boot up the snapshot everything will be installed for you, and you will be ready to start on your assignment right away. We have written a small tutorial on Terminal <a href="http://cs231n.github.io/terminal-tutorial" target="_blank" rel="external">here</a>.</p><h3 id="Working-locally-1"><a href="#Working-locally-1" class="headerlink" title="Working locally"></a>Working locally</h3><p>Get the code as a zip file <a href="http://cs231n.stanford.edu/assignments/2016/winter1516_assignment3.zip" target="_blank" rel="external">here</a>. As for the dependencies:</p><p><strong>[Option 1] Use Anaconda:</strong> The preferred approach for installing all the assignment dependencies is to use<a href="https://www.continuum.io/downloads" target="_blank" rel="external">Anaconda</a>, which is a Python distribution that includes many of the most popular Python packages for science, math, engineering and data analysis. Once you install it you can skip all mentions of requirements and you are ready to go directly to working on the assignment.</p><p><strong>[Option 2] Manual install, virtual environment:</strong> If you do not want to use Anaconda and want to go with a more manual and risky installation route you will likely want to create a <a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/" target="_blank" rel="external">virtual environment</a> for the project. If you choose not to use a virtual environment, it is up to you to make sure that all dependencies for the code are installed globally on your machine. To set up a virtual environment, run the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd assignment3</div><div class="line">sudo pip install virtualenv      # This may already be installed</div><div class="line">virtualenv .env                  # Create a virtual environment</div><div class="line">source .env/bin/activate         # Activate the virtual environment</div><div class="line">pip install -r requirements.txt  # Install dependencies</div><div class="line"># Work on the assignment for a while ...</div><div class="line">deactivate                       # Exit the virtual environment</div></pre></td></tr></table></figure><p><strong>Download data:</strong> Once you have the starter code, you will need to download the processed MS-COCO dataset, the TinyImageNet dataset, and the pretrained TinyImageNet model. Run the following from the <code>assignment3</code>directory:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd cs231n/datasets</div><div class="line">./get_coco_captioning.sh</div><div class="line">./get_tiny_imagenet_a.sh</div><div class="line">./get_pretrained_model.sh</div></pre></td></tr></table></figure><p><strong>Compile the Cython extension:</strong> Convolutional Neural Networks require a very efficient implementation. We have implemented of the functionality using <a href="http://cython.org/" target="_blank" rel="external">Cython</a>; you will need to compile the Cython extension before you can run the code. From the <code>cs231n</code> directory, run the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py build_ext --inplace</div></pre></td></tr></table></figure><p><strong>Start IPython:</strong> After you have the data, you should start the IPython notebook server from the <code>assignment3</code>directory. If you are unfamiliar with IPython, you should read our <a href="http://cs231n.github.io/ipython-tutorial" target="_blank" rel="external">IPython tutorial</a>.</p><p><strong>NOTE:</strong> If you are working in a virtual environment on OSX, you may encounter errors with matplotlib due to the<a href="http://matplotlib.org/faq/virtualenv_faq.html" target="_blank" rel="external">issues described here</a>. You can work around this issue by starting the IPython server using the<code>start_ipython_osx.sh</code> script from the <code>assignment3</code> directory; the script assumes that your virtual environment is named <code>.env</code>.</p><h3 id="Submitting-your-work-1"><a href="#Submitting-your-work-1" class="headerlink" title="Submitting your work:"></a>Submitting your work:</h3><p>Whether you work on the assignment locally or using Terminal, once you are done working run the <code>collectSubmission.sh</code> script; this will produce a file called <code>assignment3.zip</code>. Upload this file under the Assignments tab on <a href="https://coursework.stanford.edu/portal/site/W15-CS-231N-01/" target="_blank" rel="external">the coursework</a> page for the course.</p><h3 id="Q1-Image-Captioning-with-Vanilla-RNNs-40-points"><a href="#Q1-Image-Captioning-with-Vanilla-RNNs-40-points" class="headerlink" title="Q1: Image Captioning with Vanilla RNNs (40 points)"></a>Q1: Image Captioning with Vanilla RNNs (40 points)</h3><p>The IPython notebook <a href="https://github.com/ewanlee/cs231n/blob/master/cs231n-assignments/assignment3/RNN_Captioning.ipynb" target="_blank" rel="external"><code>RNN_Captioning.ipynb</code></a> will walk you through the implementation of an image captioning system on MS-COCO using vanilla recurrent networks.</p><h3 id="Q2-Image-Captioning-with-LSTMs-35-points"><a href="#Q2-Image-Captioning-with-LSTMs-35-points" class="headerlink" title="Q2: Image Captioning with LSTMs (35 points)"></a>Q2: Image Captioning with LSTMs (35 points)</h3><p>The IPython notebook <a href="https://github.com/ewanlee/cs231n/blob/master/cs231n-assignments/assignment3/LSTM_Captioning.ipynb" target="_blank" rel="external"><code>LSTM_Captioning.ipynb</code></a>will walk you through the implementation of Long-Short Term Memory (LSTM) RNNs, and apply them to image captioning on MS-COCO.</p><h3 id="Q3-Image-Gradients-Saliency-maps-and-Fooling-Images-10-points"><a href="#Q3-Image-Gradients-Saliency-maps-and-Fooling-Images-10-points" class="headerlink" title="Q3: Image Gradients: Saliency maps and Fooling Images (10 points)"></a>Q3: Image Gradients: Saliency maps and Fooling Images (10 points)</h3><p>The IPython notebook <a href="https://github.com/ewanlee/cs231n/blob/master/cs231n-assignments/assignment3/ImageGradients.ipynb" target="_blank" rel="external"><code>ImageGradients.ipynb</code></a> will introduce the TinyImageNet dataset. You will use a pretrained model on this dataset to compute gradients with respect to the image, and use them to produce saliency maps and fooling images.</p><h3 id="Q4-Image-Generation-Classes-Inversion-DeepDream-15-points"><a href="#Q4-Image-Generation-Classes-Inversion-DeepDream-15-points" class="headerlink" title="Q4: Image Generation: Classes, Inversion, DeepDream (15 points)"></a>Q4: Image Generation: Classes, Inversion, DeepDream (15 points)</h3><p>In the IPython notebook <a href="https://github.com/ewanlee/cs231n/blob/master/cs231n-assignments/assignment3/ImageGeneration.ipynb" target="_blank" rel="external"><code>ImageGeneration.ipynb</code></a> you will use the pretrained TinyImageNet model to generate images. In particular you will generate class visualizations and implement feature inversion and DeepDream.</p><h3 id="Q5-Do-something-extra-up-to-10-points-1"><a href="#Q5-Do-something-extra-up-to-10-points-1" class="headerlink" title="Q5: Do something extra! (up to +10 points)"></a>Q5: Do something extra! (up to +10 points)</h3><p>Given the components of the assignment, try to do something cool. Maybe there is some way to generate images that we did not implement in the assignment?</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Assignment-2&quot;&gt;&lt;a href=&quot;#Assignment-2&quot; class=&quot;headerlink&quot; title=&quot;Assignment 2&quot;&gt;&lt;/a&gt;Assignment 2&lt;/h1&gt;&lt;p&gt;In this assignment you will pr
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
      <category term="cs231n" scheme="http://yoursite.com/tags/cs231n/"/>
    
  </entry>
  
  <entry>
    <title>cs231n Software Packages notes</title>
    <link href="http://yoursite.com/2017/04/13/cs231n-Software-Packages-notes/"/>
    <id>http://yoursite.com/2017/04/13/cs231n-Software-Packages-notes/</id>
    <published>2017-04-13T09:22:10.000Z</published>
    <updated>2017-04-13T10:24:48.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Software-Packages"><a href="#Software-Packages" class="headerlink" title="Software Packages"></a>Software Packages</h1><h2 id="Caffe"><a href="#Caffe" class="headerlink" title="Caffe"></a>Caffe</h2><p><a href="http://caffe.berkeleyvision.org" target="_blank" rel="external">http://caffe.berkeleyvision.org</a></p><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><ul><li>From U.C. Berkeley</li><li>Written in C++</li><li>Has Python and Matlab bindings</li><li>Good for training or finetuning feedforward models</li></ul><h3 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h3><p>Don’t be afraid to read the code!</p><h3 id="Main-classes"><a href="#Main-classes" class="headerlink" title="Main classes"></a>Main classes</h3><ul><li>Blob: Stores data and derivatives</li><li>Layer: Transforms bottom blobs to top blobs</li><li>Net:<ul><li>Many layers</li><li>Computes gradients via forward / backward</li></ul></li><li>Solver: Uses gradients to update weights</li></ul><h3 id="Protocol-Buffers"><a href="#Protocol-Buffers" class="headerlink" title="Protocol Buffers"></a>Protocol Buffers</h3><ul><li><p>“Typed JSON” from Google</p></li><li><p>Define “message types” in .proto files</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">message Person &#123;</div><div class="line">  required <span class="built_in">string</span> name = <span class="number">1</span>;</div><div class="line">  required int32 id = <span class="number">2</span>;</div><div class="line">  optional <span class="built_in">string</span> email = <span class="number">3</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Serialize instances to text files (.prototxt)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">name: <span class="string">"John Doe"</span></div><div class="line">id: <span class="number">1234</span></div><div class="line">email: <span class="string">"jdoe@example.com"</span></div></pre></td></tr></table></figure></li><li><p>Compile classes for different languages</p></li></ul><h3 id="Training-Finetuning"><a href="#Training-Finetuning" class="headerlink" title="Training / Finetuning"></a>Training / Finetuning</h3><ol><li>Convert data (run a script)</li><li>Define net (edit prototxt)</li><li>Define solver (edit prototxt)</li><li>Train (with pretrained weights) (run a script)</li></ol><h4 id="Step1-Convert-Data"><a href="#Step1-Convert-Data" class="headerlink" title="Step1: Convert Data"></a>Step1: Convert Data</h4><ul><li>DataLayer reading from LMDB is the easiest</li><li>Create LMDB using <a href="https://github.com/BVLC/caffe/blob/85bb397acfd383a676c125c75d877642d6b39ff6/tools/convert_imageset.cpp" target="_blank" rel="external">convert_imageset</a></li><li>Need text file where each line is<ul><li>“[path/to/image.jpeg][label]”</li></ul></li><li>Create HDF5 file yourself using h5py</li><li>[extras] some methods:<ul><li>ImageDataLayer: Read from image files</li><li>WindowDataLayer: For detection</li><li>HDF5Layer: Read from HDF5 file</li><li>From memory, using Python interface</li><li>All of these are harder to use (except Python)</li></ul></li></ul><h4 id="Step2-Define-Net"><a href="#Step2-Define-Net" class="headerlink" title="Step2: Define Net"></a>Step2: Define Net</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line">name: <span class="string">"ResNet-152"</span></div><div class="line">input: <span class="string">"data"</span></div><div class="line">input_dim: <span class="number">1</span></div><div class="line">input_dim: <span class="number">3</span></div><div class="line">input_dim: <span class="number">224</span></div><div class="line">input_dim: <span class="number">224</span></div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"data"</span></div><div class="line">	top: <span class="string">"conv1"</span></div><div class="line">	name: <span class="string">"conv1"</span></div><div class="line">	type: <span class="string">"Convolution"</span></div><div class="line">	convolution_param &#123;</div><div class="line">		num_output: <span class="number">64</span></div><div class="line">		kernel_size: <span class="number">7</span></div><div class="line">		pad: <span class="number">3</span></div><div class="line">		stride: <span class="number">2</span></div><div class="line">		bias_term: <span class="literal">false</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"conv1"</span></div><div class="line">	top: <span class="string">"conv1"</span></div><div class="line">	name: <span class="string">"bn_conv1"</span></div><div class="line">	type: <span class="string">"BatchNorm"</span></div><div class="line">	batch_norm_param &#123;</div><div class="line">		use_global_stats: <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"conv1"</span></div><div class="line">	top: <span class="string">"conv1"</span></div><div class="line">	name: <span class="string">"scale_conv1"</span></div><div class="line">	type: <span class="string">"Scale"</span></div><div class="line">	scale_param &#123;</div><div class="line">		bias_term: <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	top: <span class="string">"conv1"</span></div><div class="line">	bottom: <span class="string">"conv1"</span></div><div class="line">	name: <span class="string">"conv1_relu"</span></div><div class="line">	type: <span class="string">"ReLU"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"conv1"</span></div><div class="line">	top: <span class="string">"pool1"</span></div><div class="line">	name: <span class="string">"pool1"</span></div><div class="line">	type: <span class="string">"Pooling"</span></div><div class="line">	pooling_param &#123;</div><div class="line">		kernel_size: <span class="number">3</span></div><div class="line">		stride: <span class="number">2</span></div><div class="line">		pool: MAX</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"pool1"</span></div><div class="line">	top: <span class="string">"res2a_branch1"</span></div><div class="line">	name: <span class="string">"res2a_branch1"</span></div><div class="line">	type: <span class="string">"Convolution"</span></div><div class="line">	convolution_param &#123;</div><div class="line">		num_output: <span class="number">256</span></div><div class="line">		kernel_size: <span class="number">1</span></div><div class="line">		pad: <span class="number">0</span></div><div class="line">		stride: <span class="number">1</span></div><div class="line">		bias_term: <span class="literal">false</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"res2a_branch1"</span></div><div class="line">	top: <span class="string">"res2a_branch1"</span></div><div class="line">	name: <span class="string">"bn2a_branch1"</span></div><div class="line">	type: <span class="string">"BatchNorm"</span></div><div class="line">	batch_norm_param &#123;</div><div class="line">		use_global_stats: <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"res2a_branch1"</span></div><div class="line">	top: <span class="string">"res2a_branch1"</span></div><div class="line">	name: <span class="string">"scale2a_branch1"</span></div><div class="line">	type: <span class="string">"Scale"</span></div><div class="line">	scale_param &#123;</div><div class="line">		bias_term: <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"pool1"</span></div><div class="line">	top: <span class="string">"res2a_branch2a"</span></div><div class="line">	name: <span class="string">"res2a_branch2a"</span></div><div class="line">	type: <span class="string">"Convolution"</span></div><div class="line">	convolution_param &#123;</div><div class="line">		num_output: <span class="number">64</span></div><div class="line">		kernel_size: <span class="number">1</span></div><div class="line">		pad: <span class="number">0</span></div><div class="line">		stride: <span class="number">1</span></div><div class="line">		bias_term: <span class="literal">false</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"res2a_branch2a"</span></div><div class="line">	top: <span class="string">"res2a_branch2a"</span></div><div class="line">	name: <span class="string">"bn2a_branch2a"</span></div><div class="line">	type: <span class="string">"BatchNorm"</span></div><div class="line">	batch_norm_param &#123;</div><div class="line">		use_global_stats: <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">layer &#123;</div><div class="line">	bottom: <span class="string">"res2a_branch2a"</span></div><div class="line">	top: <span class="string">"res2a_branch2a"</span></div><div class="line">	name: <span class="string">"scale2a_branch2a"</span></div><div class="line">	type: <span class="string">"Scale"</span></div><div class="line">	scale_param &#123;</div><div class="line">		bias_term: <span class="literal">true</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>.prototxt can get ugly for big models</li><li><a href="https://github.com/KaimingHe/deep-residual-networks/blob/master/prototxt/ResNet-152-deploy.prototxt" target="_blank" rel="external">ResNet-152 prototxt</a> is 6775 lines long!</li><li>Not “compositional”; can’t easily define a residual block and reuse</li></ul><h4 id="Step2-Define-Net-finetuning"><a href="#Step2-Define-Net-finetuning" class="headerlink" title="Step2: Define Net (finetuning)"></a>Step2: Define Net (finetuning)</h4><ul><li>Same name: weights copied</li><li>Different name: weights reinitialized</li></ul><h4 id="Step3-Define-Solver"><a href="#Step3-Define-Solver" class="headerlink" title="Step3: Define Solver"></a>Step3: Define Solver</h4><ul><li><p>Write a prototxt file defining a <a href="https://github.com/BVLC/caffe/blob/85bb397acfd383a676c125c75d877642d6b39ff6/src/caffe/proto/caffe.proto#L92" target="_blank" rel="external">SolverParameter</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div></pre></td><td class="code"><pre><div class="line">message SolverParameter &#123;</div><div class="line">  <span class="comment">//////////////////////////////////////////////////////////////////////////////</span></div><div class="line">  <span class="comment">// Specifying the train and test networks</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// Exactly one train net must be specified using one of the following fields:</span></div><div class="line">  <span class="comment">//     train_net_param, train_net, net_param, net</span></div><div class="line">  <span class="comment">// One or more test nets may be specified using any of the following fields:</span></div><div class="line">  <span class="comment">//     test_net_param, test_net, net_param, net</span></div><div class="line">  <span class="comment">// If more than one test net field is specified (e.g., both net and</span></div><div class="line">  <span class="comment">// test_net are specified), they will be evaluated in the field order given</span></div><div class="line">  <span class="comment">// above: (1) test_net_param, (2) test_net, (3) net_param/net.</span></div><div class="line">  <span class="comment">// A test_iter must be specified for each test_net.</span></div><div class="line">  <span class="comment">// A test_level and/or a test_stage may also be specified for each test_net.</span></div><div class="line">  <span class="comment">//////////////////////////////////////////////////////////////////////////////</span></div><div class="line"></div><div class="line">  <span class="comment">// Proto filename for the train net, possibly combined with one or more</span></div><div class="line">  <span class="comment">// test nets.</span></div><div class="line">  optional <span class="built_in">string</span> net = <span class="number">24</span>;</div><div class="line">  <span class="comment">// Inline train net param, possibly combined with one or more test nets.</span></div><div class="line">  optional NetParameter net_param = <span class="number">25</span>;</div><div class="line"></div><div class="line">  optional <span class="built_in">string</span> train_net = <span class="number">1</span>; <span class="comment">// Proto filename for the train net.</span></div><div class="line">  repeated <span class="built_in">string</span> test_net = <span class="number">2</span>; <span class="comment">// Proto filenames for the test nets.</span></div><div class="line">  optional NetParameter train_net_param = <span class="number">21</span>; <span class="comment">// Inline train net params.</span></div><div class="line">  repeated NetParameter test_net_param = <span class="number">22</span>; <span class="comment">// Inline test net params.</span></div><div class="line"></div><div class="line">  <span class="comment">// The states for the train/test nets. Must be unspecified or</span></div><div class="line">  <span class="comment">// specified once per net.</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// By default, all states will have solver = true;</span></div><div class="line">  <span class="comment">// train_state will have phase = TRAIN,</span></div><div class="line">  <span class="comment">// and all test_state's will have phase = TEST.</span></div><div class="line">  <span class="comment">// Other defaults are set according to the NetState defaults.</span></div><div class="line">  optional NetState train_state = <span class="number">26</span>;</div><div class="line">  repeated NetState test_state = <span class="number">27</span>;</div><div class="line"></div><div class="line">  <span class="comment">// The number of iterations for each test net.</span></div><div class="line">  repeated int32 test_iter = <span class="number">3</span>;</div><div class="line"></div><div class="line">  <span class="comment">// The number of iterations between two testing phases.</span></div><div class="line">  optional int32 test_interval = <span class="number">4</span> [<span class="keyword">default</span> = <span class="number">0</span>];</div><div class="line">  optional <span class="keyword">bool</span> test_compute_loss = <span class="number">19</span> [<span class="keyword">default</span> = <span class="literal">false</span>];</div><div class="line">  <span class="comment">// If true, run an initial test pass before the first iteration,</span></div><div class="line">  <span class="comment">// ensuring memory availability and printing the starting value of the loss.</span></div><div class="line">  optional <span class="keyword">bool</span> test_initialization = <span class="number">32</span> [<span class="keyword">default</span> = <span class="literal">true</span>];</div><div class="line">  optional <span class="keyword">float</span> base_lr = <span class="number">5</span>; <span class="comment">// The base learning rate</span></div><div class="line">  <span class="comment">// the number of iterations between displaying info. If display = 0, no info</span></div><div class="line">  <span class="comment">// will be displayed.</span></div><div class="line">  optional int32 display = <span class="number">6</span>;</div><div class="line">  <span class="comment">// Display the loss averaged over the last average_loss iterations</span></div><div class="line">  optional int32 average_loss = <span class="number">33</span> [<span class="keyword">default</span> = <span class="number">1</span>];</div><div class="line">  optional int32 max_iter = <span class="number">7</span>; <span class="comment">// the maximum number of iterations</span></div><div class="line">  optional <span class="built_in">string</span> lr_policy = <span class="number">8</span>; <span class="comment">// The learning rate decay policy.</span></div><div class="line">  optional <span class="keyword">float</span> gamma = <span class="number">9</span>; <span class="comment">// The parameter to compute the learning rate.</span></div><div class="line">  optional <span class="keyword">float</span> power = <span class="number">10</span>; <span class="comment">// The parameter to compute the learning rate.</span></div><div class="line">  optional <span class="keyword">float</span> momentum = <span class="number">11</span>; <span class="comment">// The momentum value.</span></div><div class="line">  optional <span class="keyword">float</span> weight_decay = <span class="number">12</span>; <span class="comment">// The weight decay.</span></div><div class="line">  <span class="comment">// regularization types supported: L1 and L2</span></div><div class="line">  <span class="comment">// controlled by weight_decay</span></div><div class="line">  optional <span class="built_in">string</span> regularization_type = <span class="number">29</span> [<span class="keyword">default</span> = <span class="string">"L2"</span>];</div><div class="line">  <span class="comment">// the stepsize for learning rate policy "step"</span></div><div class="line">  optional int32 stepsize = <span class="number">13</span>;</div><div class="line">  <span class="comment">// the stepsize for learning rate policy "multistep"</span></div><div class="line">  repeated int32 stepvalue = <span class="number">34</span>;</div><div class="line"></div><div class="line">  <span class="comment">// Set clip_gradients to &gt;= 0 to clip parameter gradients to that L2 norm,</span></div><div class="line">  <span class="comment">// whenever their actual L2 norm is larger.</span></div><div class="line">  optional <span class="keyword">float</span> clip_gradients = <span class="number">35</span> [<span class="keyword">default</span> = <span class="number">-1</span>];</div><div class="line"></div><div class="line">  optional int32 snapshot = <span class="number">14</span> [<span class="keyword">default</span> = <span class="number">0</span>]; <span class="comment">// The snapshot interval</span></div><div class="line">  optional <span class="built_in">string</span> snapshot_prefix = <span class="number">15</span>; <span class="comment">// The prefix for the snapshot.</span></div><div class="line">  <span class="comment">// whether to snapshot diff in the results or not. Snapshotting diff will help</span></div><div class="line">  <span class="comment">// debugging but the final protocol buffer size will be much larger.</span></div><div class="line">  optional <span class="keyword">bool</span> snapshot_diff = <span class="number">16</span> [<span class="keyword">default</span> = <span class="literal">false</span>];</div><div class="line">  <span class="comment">// the mode solver will use: 0 for CPU and 1 for GPU. Use GPU in default.</span></div><div class="line">  <span class="keyword">enum</span> SolverMode &#123;</div><div class="line">    CPU = <span class="number">0</span>;</div><div class="line">    GPU = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  optional SolverMode solver_mode = <span class="number">17</span> [<span class="keyword">default</span> = GPU];</div><div class="line">  <span class="comment">// the device_id will that be used in GPU mode. Use device_id = 0 in default.</span></div><div class="line">  optional int32 device_id = <span class="number">18</span> [<span class="keyword">default</span> = <span class="number">0</span>];</div><div class="line">  <span class="comment">// If non-negative, the seed with which the Solver will initialize the Caffe</span></div><div class="line">  <span class="comment">// random number generator -- useful for reproducible results. Otherwise,</span></div><div class="line">  <span class="comment">// (and by default) initialize using a seed derived from the system clock.</span></div><div class="line">  optional int64 random_seed = <span class="number">20</span> [<span class="keyword">default</span> = <span class="number">-1</span>];</div><div class="line"></div><div class="line">  <span class="comment">// Solver type</span></div><div class="line">  <span class="keyword">enum</span> SolverType &#123;</div><div class="line">    SGD = <span class="number">0</span>;</div><div class="line">    NESTEROV = <span class="number">1</span>;</div><div class="line">    ADAGRAD = <span class="number">2</span>;</div><div class="line">  &#125;</div><div class="line">  optional SolverType solver_type = <span class="number">30</span> [<span class="keyword">default</span> = SGD];</div><div class="line">  <span class="comment">// numerical stability for AdaGrad</span></div><div class="line">  optional <span class="keyword">float</span> delta = <span class="number">31</span> [<span class="keyword">default</span> = <span class="number">1e-8</span>];</div><div class="line"></div><div class="line">  <span class="comment">// If true, print information about the state of the net that may help with</span></div><div class="line">  <span class="comment">// debugging learning problems.</span></div><div class="line">  optional <span class="keyword">bool</span> debug_info = <span class="number">23</span> [<span class="keyword">default</span> = <span class="literal">false</span>];</div><div class="line"></div><div class="line">  <span class="comment">// If false, don't save a snapshot after training finishes.</span></div><div class="line">  optional <span class="keyword">bool</span> snapshot_after_train = <span class="number">28</span> [<span class="keyword">default</span> = <span class="literal">true</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// A message that stores the solver snapshots</span></div><div class="line">message SolverState &#123;</div><div class="line">  optional int32 iter = <span class="number">1</span>; <span class="comment">// The current iteration</span></div><div class="line">  optional <span class="built_in">string</span> learned_net = <span class="number">2</span>; <span class="comment">// The file that stores the learned net.</span></div><div class="line">  repeated BlobProto history = <span class="number">3</span>; <span class="comment">// The history for sgd solvers</span></div><div class="line">  optional int32 current_step = <span class="number">4</span> [<span class="keyword">default</span> = <span class="number">0</span>]; <span class="comment">// The current step for learning rate</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">enum</span> Phase &#123;</div><div class="line">   TRAIN = <span class="number">0</span>;</div><div class="line">   TEST = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">message NetState &#123;</div><div class="line">  optional Phase phase = <span class="number">1</span> [<span class="keyword">default</span> = TEST];</div><div class="line">  optional int32 level = <span class="number">2</span> [<span class="keyword">default</span> = <span class="number">0</span>];</div><div class="line">  repeated <span class="built_in">string</span> stage = <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">message NetStateRule &#123;</div><div class="line">  <span class="comment">// Set phase to require the NetState have a particular phase (TRAIN or TEST)</span></div><div class="line">  <span class="comment">// to meet this rule.</span></div><div class="line">  optional Phase phase = <span class="number">1</span>;</div><div class="line"></div><div class="line">  <span class="comment">// Set the minimum and/or maximum levels in which the layer should be used.</span></div><div class="line">  <span class="comment">// Leave undefined to meet the rule regardless of level.</span></div><div class="line">  optional int32 min_level = <span class="number">2</span>;</div><div class="line">  optional int32 max_level = <span class="number">3</span>;</div><div class="line"></div><div class="line">  <span class="comment">// Customizable sets of stages to include or exclude.</span></div><div class="line">  <span class="comment">// The net must have ALL of the specified stages and NONE of the specified</span></div><div class="line">  <span class="comment">// "not_stage"s to meet the rule.</span></div><div class="line">  <span class="comment">// (Use multiple NetStateRules to specify conjunctions of stages.)</span></div><div class="line">  repeated <span class="built_in">string</span> stage = <span class="number">4</span>;</div><div class="line">  repeated <span class="built_in">string</span> not_stage = <span class="number">5</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Specifies training parameters (multipliers on global learning constants,</span></div><div class="line"><span class="comment">// and the name and other settings used for weight sharing).</span></div><div class="line">message ParamSpec &#123;</div><div class="line">  <span class="comment">// The names of the parameter blobs -- useful for sharing parameters among</span></div><div class="line">  <span class="comment">// layers, but never required otherwise.  To share a parameter between two</span></div><div class="line">  <span class="comment">// layers, give it a (non-empty) name.</span></div><div class="line">  optional <span class="built_in">string</span> name = <span class="number">1</span>;</div><div class="line"></div><div class="line">  <span class="comment">// Whether to require shared weights to have the same shape, or just the same</span></div><div class="line">  <span class="comment">// count -- defaults to STRICT if unspecified.</span></div><div class="line">  optional DimCheckMode share_mode = <span class="number">2</span>;</div><div class="line">  <span class="keyword">enum</span> DimCheckMode &#123;</div><div class="line">    <span class="comment">// STRICT (default) requires that num, channels, height, width each match.</span></div><div class="line">    STRICT = <span class="number">0</span>;</div><div class="line">    <span class="comment">// PERMISSIVE requires only the count (num*channels*height*width) to match.</span></div><div class="line">    PERMISSIVE = <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// The multiplier on the global learning rate for this parameter.</span></div><div class="line">  optional <span class="keyword">float</span> lr_mult = <span class="number">3</span> [<span class="keyword">default</span> = <span class="number">1.0</span>];</div><div class="line"></div><div class="line">  <span class="comment">// The multiplier on the global weight decay for this parameter.</span></div><div class="line">  optional <span class="keyword">float</span> decay_mult = <span class="number">4</span> [<span class="keyword">default</span> = <span class="number">1.0</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>If finetuning, copy existing solver.prototxt file</p><ul><li>Change net to be your net</li><li>Change snapshot_prefix to your output</li><li>Reduce base learning rate (divide by 100)</li><li>Maybe change max_iter and snapshot</li></ul></li></ul><h4 id="Step-4-Train"><a href="#Step-4-Train" class="headerlink" title="Step 4: Train"></a>Step 4: Train</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">./build/tools/caffe train \</div><div class="line"> -gpu 0 \</div><div class="line"> -model path/to/trainval.prototxt \</div><div class="line"> -solver path/to/solver.prototxt \</div><div class="line"> -weights path/to/pretrained_weights.caffemodel</div><div class="line"> </div><div class="line"> # -gpu -1 for CPU mode</div><div class="line"> # -gpu all for multi-GPU data parallelism</div></pre></td></tr></table></figure><h3 id="Model-Zoo"><a href="#Model-Zoo" class="headerlink" title="Model Zoo"></a>Model Zoo</h3><p><a href="https://github.com/BVLC/caffe/wiki/Model-Zoo" target="_blank" rel="external">https://github.com/BVLC/caffe/wiki/Model-Zoo</a></p><h3 id="Python-Interface"><a href="#Python-Interface" class="headerlink" title="Python Interface"></a>Python Interface</h3><p>Read the code! Two most important files:</p><ul><li><a href="https://github.com/BVLC/caffe/blob/master/python/caffe/_caffe.cpp" target="_blank" rel="external">caffe/python/caffe/_caffe.cpp</a><ul><li>Exports Blob, Layer, Net, and Solver classes</li></ul></li><li><a href="https://github.com/BVLC/caffe/blob/master/python/caffe/pycaffe.py" target="_blank" rel="external">caffe/python/caffe/pycaffe.py</a><ul><li>Adds extra methods to Net class</li></ul></li></ul><p>Good for:</p><ul><li>Interfacing with numpy</li><li>Extract features: Run net forward</li><li>Compute gradients: Run net backward (DeepDream, etc)</li><li>Define layers in Python with numpy (CPU only)</li></ul><h3 id="Pros-Cons"><a href="#Pros-Cons" class="headerlink" title="Pros / Cons"></a>Pros / Cons</h3><ul><li>(+) Good for feedforward networks</li><li>(+) Good for finetuning existing networks</li><li>(+) Train models without writing any code!</li><li>(+) Python interface is pretty useful!</li><li>(-) Need to write C++ / CUDA for new GPU layers</li><li>(-) Not good for recurrent networks</li><li>(-) Cumbersome for big networks (GoogLeNet, ResNet)</li></ul><h2 id="Torch"><a href="#Torch" class="headerlink" title="Torch"></a>Torch</h2><p><a href="http://torch.ch" target="_blank" rel="external">http://torch.ch</a></p><h3 id="Overview-1"><a href="#Overview-1" class="headerlink" title="Overview"></a>Overview</h3><ul><li>From NYU + IDIAP</li><li>Written in C and Lua</li><li>Used a lot a Facebook, DeepMind</li></ul><h3 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h3><p><a href="http://tylerneylon.com/a/learn-lua/" target="_blank" rel="external">Learn Lua in 15 Minutes</a></p><ul><li>High level scripting language, easy to interface with C</li><li>Similar to Javascript:<ul><li>One data structure: table == JS object</li><li>Prototypical inheritance: metatable == JS prototype</li><li>First-class functions</li></ul></li><li>Some gotchas:<ul><li>1-indexed =(</li><li>Variables global by default =(</li><li>Small standard library</li></ul></li></ul><h3 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h3><p>Torch tensors are just like numpy arrays</p><p>Documentation on GitHub:</p><ul><li><a href="https://github.com/torch/torch7/blob/master/doc/tensor.md" target="_blank" rel="external">https://github.com/torch/torch7/blob/master/doc/tensor.md</a></li><li><a href="https://github.com/torch/torch7/blob/master/doc/maths.md" target="_blank" rel="external">https://github.com/torch/torch7/blob/master/doc/maths.md</a></li></ul><h3 id="nn"><a href="#nn" class="headerlink" title="nn"></a>nn</h3><p>nn module lets you easily build and train neural nets</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- our optimization procedure will iterate over the modules, so only share</span></div><div class="line"><span class="comment">-- the parameters</span></div><div class="line">mlp = nn.Sequential()</div><div class="line">linear = nn.Linear(<span class="number">2</span>,<span class="number">2</span>)</div><div class="line">linear_clone = linear:clone(<span class="string">'weight'</span>,<span class="string">'bias'</span>) <span class="comment">-- clone sharing the parameters</span></div><div class="line">mlp:add(linear)</div><div class="line">mlp:add(linear_clone)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">gradUpdate</span><span class="params">(mlp, x, y, criterion, learningRate)</span></span> </div><div class="line">  <span class="keyword">local</span> pred = mlp:forward(x)</div><div class="line">  <span class="keyword">local</span> err = criterion:forward(pred, y)</div><div class="line">  <span class="keyword">local</span> gradCriterion = criterion:backward(pred, y)</div><div class="line">  mlp:zeroGradParameters()</div><div class="line">  mlp:backward(x, gradCriterion)</div><div class="line">  mlp:updateParameters(learningRate)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- our optimization procedure will use all the parameters at once, because</span></div><div class="line"><span class="comment">-- it requires the flattened parameters and gradParameters Tensors. Thus,</span></div><div class="line"><span class="comment">-- we need to share both the parameters and the gradParameters</span></div><div class="line">mlp = nn.Sequential()</div><div class="line">linear = nn.Linear(<span class="number">2</span>,<span class="number">2</span>)</div><div class="line"><span class="comment">-- need to share the parameters and the gradParameters as well</span></div><div class="line">linear_clone = linear:clone(<span class="string">'weight'</span>,<span class="string">'bias'</span>,<span class="string">'gradWeight'</span>,<span class="string">'gradBias'</span>)</div><div class="line">mlp:add(linear)</div><div class="line">mlp:add(linear_clone)</div><div class="line">params, gradParams = mlp:getParameters()</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">gradUpdate</span><span class="params">(mlp, x, y, criterion, learningRate, params, gradParams)</span></span></div><div class="line">  <span class="keyword">local</span> pred = mlp:forward(x)</div><div class="line">  <span class="keyword">local</span> err = criterion:forward(pred, y)</div><div class="line">  <span class="keyword">local</span> gradCriterion = criterion:backward(pred, y)</div><div class="line">  mlp:zeroGradParameters()</div><div class="line">  mlp:backward(x, gradCriterion)</div><div class="line">  <span class="comment">-- adds the gradients to all the parameters at once</span></div><div class="line">  params:add(-learningRate, gradParams)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><h3 id="cunn"><a href="#cunn" class="headerlink" title="cunn"></a>cunn</h3><p>Running on GPU is easy</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> model = nn.Sequential()</div><div class="line">model:add(nn.Linear(<span class="number">2</span>,<span class="number">2</span>))</div><div class="line">model:add(nn.LogSoftMax())</div><div class="line"></div><div class="line">model:cuda()  <span class="comment">-- convert model to CUDA</span></div><div class="line"></div><div class="line"><span class="keyword">local</span> input = torch.Tensor(<span class="number">32</span>,<span class="number">2</span>):uniform()</div><div class="line">input = input:cuda()</div><div class="line"><span class="keyword">local</span> output = model:forward(input)</div><div class="line"></div><div class="line"><span class="keyword">local</span> input = torch.CudaTensor(<span class="number">32</span>,<span class="number">2</span>):uniform()</div><div class="line"><span class="keyword">local</span> output = model:forward(input)</div></pre></td></tr></table></figure><h3 id="optim"><a href="#optim" class="headerlink" title="optim"></a>optim</h3><p>optim package implements different update rules: momentum, Adam, etc</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span> <span class="string">'optim'</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> epoch = <span class="number">1</span>, <span class="number">50</span> <span class="keyword">do</span></div><div class="line">   <span class="comment">-- local function we give to optim</span></div><div class="line">   <span class="comment">-- it takes current weights as input, and outputs the loss</span></div><div class="line">   <span class="comment">-- and the gradient of the loss with respect to the weights</span></div><div class="line">   <span class="comment">-- gradParams is calculated implicitly by calling 'backward',</span></div><div class="line">   <span class="comment">-- because the model's weight and bias gradient tensors</span></div><div class="line">   <span class="comment">-- are simply views onto gradParams</span></div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">feval</span><span class="params">(params)</span></span></div><div class="line">      gradParams:zero()</div><div class="line"></div><div class="line">      <span class="keyword">local</span> outputs = model:forward(batchInputs)</div><div class="line">      <span class="keyword">local</span> loss = criterion:forward(outputs, batchLabels)</div><div class="line">      <span class="keyword">local</span> dloss_doutputs = criterion:backward(outputs, batchLabels)</div><div class="line">      model:backward(batchInputs, dloss_doutputs)</div><div class="line"></div><div class="line">      <span class="keyword">return</span> loss, gradParams</div><div class="line">   <span class="keyword">end</span></div><div class="line">   optim.sgd(feval, params, optimState)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><ul><li>Caffe has Nets and Layers; Torch just has Modules</li><li>Modules are classes written in Lua; easy to read and write</li><li>Forward / backward written in Lua using Tensor methods</li><li>Same code runs on CPU / GPU</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> Linear, parent = torch.class(<span class="string">'nn.Linear'</span>, <span class="string">'nn.Module'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Linear:__init</span><span class="params">(inputSize, outputSize, bias)</span></span></div><div class="line">   parent.__init(self)</div><div class="line">   <span class="keyword">local</span> bias = ((bias == <span class="keyword">nil</span>) <span class="keyword">and</span> <span class="keyword">true</span>) <span class="keyword">or</span> bias</div><div class="line">   self.weight = torch.Tensor(outputSize, inputSize)</div><div class="line">   self.gradWeight = torch.Tensor(outputSize, inputSize)</div><div class="line">   <span class="keyword">if</span> bias <span class="keyword">then</span></div><div class="line">      self.bias = torch.Tensor(outputSize)</div><div class="line">      self.gradBias = torch.Tensor(outputSize)</div><div class="line">   <span class="keyword">end</span></div><div class="line">   self:reset()</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Linear:noBias</span><span class="params">()</span></span></div><div class="line">   self.bias = <span class="keyword">nil</span></div><div class="line">   self.gradBias = <span class="keyword">nil</span></div><div class="line">   <span class="keyword">return</span> self</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Linear:reset</span><span class="params">(stdv)</span></span></div><div class="line">   <span class="keyword">if</span> stdv <span class="keyword">then</span></div><div class="line">      stdv = stdv * <span class="built_in">math</span>.sqrt(<span class="number">3</span>)</div><div class="line">   <span class="keyword">else</span></div><div class="line">      stdv = <span class="number">1.</span>/<span class="built_in">math</span>.sqrt(self.weight:size(<span class="number">2</span>))</div><div class="line">   <span class="keyword">end</span></div><div class="line">   <span class="keyword">if</span> nn.oldSeed <span class="keyword">then</span></div><div class="line">      <span class="keyword">for</span> i=<span class="number">1</span>,self.weight:size(<span class="number">1</span>) <span class="keyword">do</span></div><div class="line">         self.weight:<span class="built_in">select</span>(<span class="number">1</span>, i):apply(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></div><div class="line">            <span class="keyword">return</span> torch.uniform(-stdv, stdv)</div><div class="line">         <span class="keyword">end</span>)</div><div class="line">      <span class="keyword">end</span></div><div class="line">      <span class="keyword">if</span> self.bias <span class="keyword">then</span></div><div class="line">         <span class="keyword">for</span> i=<span class="number">1</span>,self.bias:nElement() <span class="keyword">do</span></div><div class="line">            self.bias[i] = torch.uniform(-stdv, stdv)</div><div class="line">         <span class="keyword">end</span></div><div class="line">      <span class="keyword">end</span></div><div class="line">   <span class="keyword">else</span></div><div class="line">      self.weight:uniform(-stdv, stdv)</div><div class="line">      <span class="keyword">if</span> self.bias <span class="keyword">then</span> self.bias:uniform(-stdv, stdv) <span class="keyword">end</span></div><div class="line">   <span class="keyword">end</span></div><div class="line">   <span class="keyword">return</span> self</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">updateAddBuffer</span><span class="params">(self, input)</span></span></div><div class="line">   <span class="keyword">local</span> nframe = input:size(<span class="number">1</span>)</div><div class="line">   self.addBuffer = self.addBuffer <span class="keyword">or</span> input.new()</div><div class="line">   <span class="keyword">if</span> self.addBuffer:nElement() ~= nframe <span class="keyword">then</span></div><div class="line">      self.addBuffer:resize(nframe):fill(<span class="number">1</span>)</div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Linear:updateOutput</span><span class="params">(input)</span></span></div><div class="line">   <span class="keyword">if</span> input:dim() == <span class="number">1</span> <span class="keyword">then</span></div><div class="line">      self.output:resize(self.weight:size(<span class="number">1</span>))</div><div class="line">      <span class="keyword">if</span> self.bias <span class="keyword">then</span> self.output:copy(self.bias) <span class="keyword">else</span> self.output:zero() <span class="keyword">end</span></div><div class="line">      self.output:addmv(<span class="number">1</span>, self.weight, input)</div><div class="line">   <span class="keyword">elseif</span> input:dim() == <span class="number">2</span> <span class="keyword">then</span></div><div class="line">      <span class="keyword">local</span> nframe = input:size(<span class="number">1</span>)</div><div class="line">      <span class="keyword">local</span> nElement = self.output:nElement()</div><div class="line">      self.output:resize(nframe, self.weight:size(<span class="number">1</span>))</div><div class="line">      <span class="keyword">if</span> self.output:nElement() ~= nElement <span class="keyword">then</span></div><div class="line">         self.output:zero()</div><div class="line">      <span class="keyword">end</span></div><div class="line">      updateAddBuffer(self, input)</div><div class="line">      self.output:addmm(<span class="number">0</span>, self.output, <span class="number">1</span>, input, self.weight:t())</div><div class="line">      <span class="keyword">if</span> self.bias <span class="keyword">then</span> self.output:addr(<span class="number">1</span>, self.addBuffer, self.bias) <span class="keyword">end</span></div><div class="line">   <span class="keyword">else</span></div><div class="line">      <span class="built_in">error</span>(<span class="string">'input must be vector or matrix'</span>)</div><div class="line">   <span class="keyword">end</span></div><div class="line"></div><div class="line">   <span class="keyword">return</span> self.output</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Linear:updateGradInput</span><span class="params">(input, gradOutput)</span></span></div><div class="line">   <span class="keyword">if</span> self.gradInput <span class="keyword">then</span></div><div class="line"></div><div class="line">      <span class="keyword">local</span> nElement = self.gradInput:nElement()</div><div class="line">      self.gradInput:resizeAs(input)</div><div class="line">      <span class="keyword">if</span> self.gradInput:nElement() ~= nElement <span class="keyword">then</span></div><div class="line">         self.gradInput:zero()</div><div class="line">      <span class="keyword">end</span></div><div class="line">      <span class="keyword">if</span> input:dim() == <span class="number">1</span> <span class="keyword">then</span></div><div class="line">         self.gradInput:addmv(<span class="number">0</span>, <span class="number">1</span>, self.weight:t(), gradOutput)</div><div class="line">      <span class="keyword">elseif</span> input:dim() == <span class="number">2</span> <span class="keyword">then</span></div><div class="line">         self.gradInput:addmm(<span class="number">0</span>, <span class="number">1</span>, gradOutput, self.weight)</div><div class="line">      <span class="keyword">end</span></div><div class="line"></div><div class="line">      <span class="keyword">return</span> self.gradInput</div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Linear:accGradParameters</span><span class="params">(input, gradOutput, scale)</span></span></div><div class="line">   scale = scale <span class="keyword">or</span> <span class="number">1</span></div><div class="line">   <span class="keyword">if</span> input:dim() == <span class="number">1</span> <span class="keyword">then</span></div><div class="line">      self.gradWeight:addr(scale, gradOutput, input)</div><div class="line">      <span class="keyword">if</span> self.bias <span class="keyword">then</span> self.gradBias:add(scale, gradOutput) <span class="keyword">end</span></div><div class="line">   <span class="keyword">elseif</span> input:dim() == <span class="number">2</span> <span class="keyword">then</span></div><div class="line">      self.gradWeight:addmm(scale, gradOutput:t(), input)</div><div class="line">      <span class="keyword">if</span> self.bias <span class="keyword">then</span></div><div class="line">         <span class="comment">-- update the size of addBuffer if the input is not the same size as the one we had in last updateGradInput</span></div><div class="line">         updateAddBuffer(self, input)</div><div class="line">         self.gradBias:addmv(scale, gradOutput:t(), self.addBuffer)</div><div class="line">      <span class="keyword">end</span></div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Linear:sharedAccUpdateGradParameters</span><span class="params">(input, gradOutput, lr)</span></span></div><div class="line">   <span class="comment">-- we do not need to accumulate parameters when sharing:</span></div><div class="line">   self:defaultAccUpdateGradParameters(input, gradOutput, lr)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Linear:clearState</span><span class="params">()</span></span></div><div class="line">   <span class="keyword">if</span> self.addBuffer <span class="keyword">then</span> self.addBuffer:set() <span class="keyword">end</span></div><div class="line">   <span class="keyword">return</span> parent.clearState(self)</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Linear:__tostring__</span><span class="params">()</span></span></div><div class="line">  <span class="keyword">return</span> torch.<span class="built_in">type</span>(self) ..</div><div class="line">      <span class="built_in">string</span>.format(<span class="string">'(%d -&gt; %d)'</span>, self.weight:size(<span class="number">2</span>), self.weight:size(<span class="number">1</span>)) ..</div><div class="line">      (self.bias == <span class="keyword">nil</span> <span class="keyword">and</span> <span class="string">' without bias'</span> <span class="keyword">or</span> <span class="string">''</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure><p>Tons of built-in modules and loss functions</p><p><a href="https://github.com/torch/nn" target="_blank" rel="external">https://github.com/torch/nn</a></p><h4 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h4><p>Container modules allow you to combine multiple modules</p><h3 id="nngraph"><a href="#nngraph" class="headerlink" title="nngraph"></a>nngraph</h3><p>A multi-layer network where each layer takes output of previous two layers as input.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">input = nn.Identity()()</div><div class="line">L1 = nn.Tanh()(nn.Linear(<span class="number">10</span>, <span class="number">20</span>)(input))</div><div class="line">L2 = nn.Tanh()(nn.Linear(<span class="number">30</span>, <span class="number">60</span>)(nn.JoinTable(<span class="number">1</span>)(&#123;input, L1&#125;)))</div><div class="line">L3 = nn.Tanh()(nn.Linear(<span class="number">80</span>, <span class="number">160</span>)(nn.JoinTable(<span class="number">1</span>)(&#123;L1, L2&#125;)))</div><div class="line"></div><div class="line">g = nn.gModule(&#123;input&#125;, &#123;L3&#125;)</div><div class="line"></div><div class="line">indata = torch.rand(<span class="number">10</span>)</div><div class="line">gdata = torch.rand(<span class="number">160</span>)</div><div class="line">g:forward(indata)</div><div class="line">g:backward(indata, gdata)</div><div class="line"></div><div class="line">graph.dot(g.fg, <span class="string">'Forward Graph'</span>)</div><div class="line">graph.dot(g.bg, <span class="string">'Backward Graph'</span>)</div></pre></td></tr></table></figure><p><a href="https://github.com/torch/nngraph" target="_blank" rel="external">More Info</a></p><h3 id="Pretrained-Models"><a href="#Pretrained-Models" class="headerlink" title="Pretrained Models"></a>Pretrained Models</h3><ul><li>loadcaffe: Load pretrained Caffe models: AlexNet, VGG, some others<ul><li><a href="https://github.com/szagoruyko/loadcaffe" target="_blank" rel="external">https://github.com/szagoruyko/loadcaffe</a></li></ul></li><li>GoogLeNet v1: <a href="https://github.com/soumith/inception.torch" target="_blank" rel="external">https://github.com/soumith/inception.torch</a></li><li>GoogLeNet v3: <a href="https://github.com/Moodstocks/inception-v3.torch" target="_blank" rel="external">https://github.com/Moodstocks/inception-v3.torch</a></li><li>ResNet: <a href="https://github.com/facebook/fb.resnet.torch" target="_blank" rel="external">https://github.com/facebook/fb.resnet.torch</a></li></ul><h3 id="Package-Management"><a href="#Package-Management" class="headerlink" title="Package Management"></a>Package Management</h3><p>After installing torch, use luarocks to install or update Lua packages</p><p>(Similar to pip install from Python)</p><h3 id="Other-useful-packages"><a href="#Other-useful-packages" class="headerlink" title="Other useful packages"></a>Other useful packages</h3><ul><li>torch.cudnn: Bindings for NVIDIA cuDNN kernels<ul><li><a href="https://github.com/soumith/cudnn.torch" target="_blank" rel="external">https://github.com/soumith/cudnn.torch</a></li></ul></li><li>torch-hdf5: Read and write HDF5 files from Torch<ul><li><a href="https://github.com/deepmind/torch-hdf5" target="_blank" rel="external">https://github.com/deepmind/torch-hdf5</a></li></ul></li><li>lua-cjson: Read and write JSON files from Lua<ul><li><a href="https://luarocks.org/modules/luarocks/lua-cjson" target="_blank" rel="external">https://luarocks.org/modules/luarocks/lua-cjson</a></li></ul></li><li>cltorch, clnn: OpenCL backend for Torch, and port of nn<ul><li><a href="https://github.com/hughperkins/cltorch" target="_blank" rel="external">https://github.com/hughperkins/cltorch</a>, <a href="https://github.com/hughperkins/clnn" target="_blank" rel="external">https://github.com/hughperkins/clnn</a></li></ul></li><li>torch-autograd: Automatic differentiation; sort of like more powerful nngraph, similar to Theano or TensorFlow<ul><li><a href="https://github.com/twitter/torch-autograd" target="_blank" rel="external">https://github.com/twitter/torch-autograd</a></li></ul></li><li>fbcunn: Facebook: FFT conv, multi-GPU (DataParallel, ModelParallel)<ul><li><a href="https://github.com/facebook/fbcunn" target="_blank" rel="external">https://github.com/facebook/fbcunn</a></li></ul></li></ul><h3 id="Typical-Workflow"><a href="#Typical-Workflow" class="headerlink" title="Typical Workflow"></a>Typical Workflow</h3><ol><li>Preprocess data; usually use a Python script to dump data to HDF5</li><li>Train a model in Lua / Torch; read from HDF5 datafile, save trained model to disk</li><li>Use trained model for something, often with an evaluation script</li></ol><p>Example: <a href="https://github.com/jcjohnson/torch-rnn" target="_blank" rel="external">https://github.com/jcjohnson/torch-rnn</a></p><p>Step 1: Preprocess data; usually use a Python script to dump data to HDF5 (<a href="https://github.com/jcjohnson/torch-rnn/blob/master/scripts/preprocess.py" target="_blank" rel="external">https://github.com/jcjohnson/torch-rnn/blob/master/scripts/preprocess.py</a>)<br>Step 2: Train a model in Lua / Torch; read from HDF5 datafile, save trained model to disk (<a href="https://github.com/jcjohnson/torch-rnn/blob/master/train.lua" target="_blank" rel="external">https://github.com/jcjohnson/torch-rnn/blob/master/train.lua</a> )<br>Step 3: Use trained model for something, often with an evaluation script (<a href="https://github.com/jcjohnson/torch-rnn/blob/master/sample.lua" target="_blank" rel="external">https://github.com/jcjohnson/torch-rnn/blob/master/sample.lua</a>)</p><h3 id="Pros-Cons-1"><a href="#Pros-Cons-1" class="headerlink" title="Pros / Cons"></a>Pros / Cons</h3><ul><li>(-) Lua</li><li>(-) Less plug-and-play than Caffe<ul><li>You usually write your own training code</li></ul></li><li>(+) Lots of modular pieces that are easy to combine</li><li>(+) Easy to write your own layer types and run on GPU</li><li>(+) Most of the library code is in Lua, easy to read</li><li>(+) Lots of pretrained models!</li><li>(-) Not great for RNNs</li></ul><h2 id="Theano"><a href="#Theano" class="headerlink" title="Theano"></a>Theano</h2><p><a href="http://deeplearning.net/software/theano/" target="_blank" rel="external">http://deeplearning.net/software/theano/</a></p><h3 id="Overview-2"><a href="#Overview-2" class="headerlink" title="Overview"></a>Overview</h3><ul><li>From Yoshua Bengio’s group at University of Montreal</li><li>Embracing computation graphs, symbolic computation</li><li>High-level wrappers: Keras, Lasagne</li></ul><h3 id="Other-Topics"><a href="#Other-Topics" class="headerlink" title="Other Topics"></a>Other Topics</h3><p><strong>Conditionals</strong>: The <strong>ifelse</strong> and <strong>switch</strong> functions allow conditional control flow in the graph</p><p><strong>Loops</strong>: The <strong>scan</strong> function allows for (some types) of loops in the computational graph; good for RNNs</p><p><strong>Derivatives</strong>: Efficient Jacobian / vector products with R and L operators, symbolic hessians (gradient of gradient)</p><p><strong>Sparse matrices, optimizations, etc</strong></p><h3 id="Multi-GPU"><a href="#Multi-GPU" class="headerlink" title="Multi-GPU"></a>Multi-GPU</h3><p>Experimental model parallelism:<br><a href="http://deeplearning.net/software/theano/tutorial/using_multi_gpu.html" target="_blank" rel="external">http://deeplearning.net/software/theano/tutorial/using_multi_gpu.html</a></p><p>Data parallelism using platoon:<br><a href="https://github.com/mila-udem/platoon" target="_blank" rel="external">https://github.com/mila-udem/platoon</a></p><h3 id="High-level-wrapper"><a href="#High-level-wrapper" class="headerlink" title="High level wrapper"></a>High level wrapper</h3><ul><li>Lasagne</li><li>Keras</li></ul><h3 id="Pretrained-Models-1"><a href="#Pretrained-Models-1" class="headerlink" title="Pretrained Models"></a>Pretrained Models</h3><p><strong>Lasagne Model Zoo</strong> has pretrained common architectures:<br><a href="https://github.com/Lasagne/Recipes/tree/master/modelzoo" target="_blank" rel="external">https://github.com/Lasagne/Recipes/tree/master/modelzoo</a><br><strong>AlexNet with weights</strong>: <a href="https://github.com/uoguelph-mlrg/theano_alexnet" target="_blank" rel="external">https://github.com/uoguelph-mlrg/theano_alexnet</a><br><strong>sklearn-theano</strong>: Run OverFeat and GoogLeNet forward, but no fine-tuning? <a href="http://sklearn-theano.github.io" target="_blank" rel="external">http://sklearn-theano.github.io</a><br><strong>caffe-theano-conversion</strong>: CS 231n project from last year: load models and weights from caffe! Not sure if full-featured <a href="https://github.com/kitofans/caffe-theano-conversion" target="_blank" rel="external">https://github.com/kitofans/caffe-theano-conversion</a></p><h3 id="Pros-Cons-2"><a href="#Pros-Cons-2" class="headerlink" title="Pros / Cons"></a>Pros / Cons</h3><ul><li>(+) Python + numpy</li><li>(+) Computational graph is nice abstraction</li><li>(+) RNNs fit nicely in computational graph</li><li>(-) Raw Theano is somewhat low-level</li><li>(+) High level wrappers (Keras, Lasagne) ease the pain</li><li>(-) Error messages can be unhelpful</li><li>(-) Large models can have long compile times</li><li>(-) Much “fatter” than Torch; more magic</li><li>(-) Patchy support for pretrained models</li></ul><h2 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h2><p><a href="https://www.tensorflow.org" target="_blank" rel="external">https://www.tensorflow.org</a></p><h3 id="Overview-3"><a href="#Overview-3" class="headerlink" title="Overview"></a>Overview</h3><ul><li>From Google</li><li>Very similar to Theano - all about computation graphs</li><li>Easy visualizations (TensorBoard)</li><li>Multi-GPU and multi-node training</li></ul><h3 id="Tensorboard"><a href="#Tensorboard" class="headerlink" title="Tensorboard"></a>Tensorboard</h3><p>Tensorboard makes it easy to visualize what’s happening inside your models</p><h3 id="Multi-GPU-1"><a href="#Multi-GPU-1" class="headerlink" title="Multi-GPU"></a>Multi-GPU</h3><h3 id="Distributed"><a href="#Distributed" class="headerlink" title="Distributed"></a>Distributed</h3><h3 id="Pretrained-Models-2"><a href="#Pretrained-Models-2" class="headerlink" title="Pretrained Models"></a>Pretrained Models</h3><p>You can get a pretrained version of Inception here:<br><a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/android/README.md" target="_blank" rel="external">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/android/README.md</a></p><p>(In an Android example?? Very well-hidden)</p><p>The only one I could find =(</p><h3 id="Pros-Cons-3"><a href="#Pros-Cons-3" class="headerlink" title="Pros / Cons"></a>Pros / Cons</h3><ul><li>(+) Python + numpy</li><li>(+) Computational graph abstraction, like Theano; great for RNNs</li><li>(+) Much faster compile times than Theano</li><li>(+) Slightly more convenient than raw Theano?</li><li>(+) TensorBoard for visualization</li><li>(+) Data AND model parallelism; best of all frameworks</li><li>(+/-) Distributed models, but not open-source yet</li><li>(-) Slower than other frameworks right now</li><li>(-) Much “fatter” than Torch; more magic</li><li>(-) Not many pretrained models</li></ul><h2 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h2><ul><li>Extract AlexNet or VGG features? <strong>Use Caffe</strong></li><li>Fine-tune AlexNet for new classes? <strong>Use Caffe</strong></li><li>Image Captioning with finetuning?<ul><li>-&gt; Need pretrained models (Caffe, Torch, Lasagne)</li><li>-&gt; Need RNNs (Torch or Lasagne)</li><li>-&gt; <strong>Use Torch or Lasagna</strong></li></ul></li><li>Segmentation? (Classify every pixel)<ul><li>-&gt; Need pretrained model (Caffe, Torch, Lasagna)</li><li>-&gt; Need funny loss function</li><li>-&gt; If loss function exists in Caffe: <strong>Use Caffe</strong></li><li>-&gt; If you want to write your own loss: <strong>Use Torch</strong></li></ul></li><li>Object Detection?<ul><li>-&gt; Need pretrained model (Torch, Caffe, Lasagne)</li><li>-&gt; Need lots of custom imperative code (NOT Lasagne)</li><li>-&gt; Use <strong>Caffe + Python</strong> or <strong>Torch</strong></li></ul></li><li>Language modeling with new <strong>RNN</strong> structure?<ul><li>-&gt; Need easy recurrent nets (NOT Caffe, Torch)</li><li>-&gt; No need for pretrained models</li><li>-&gt; <strong>Use Theano or TensorFlow</strong></li></ul></li><li>Implement BatchNorm?<ul><li>-&gt; Don’t want to derive gradient? <strong>Theano</strong> or <strong>TensorFlow</strong></li><li>-&gt; Implement efficient backward pass? <strong>Use Torch</strong></li></ul></li></ul><p><strong>Recommendation</strong>:</p><ul><li>Feature extraction / finetuning existing models: Use Caffe</li><li>Complex uses of pretrained models: Use Lasagne or Torch</li><li>Write your own layers: Use Torch</li><li>Crazy RNNs: Use Theano or Tensorflow</li><li>Huge model, need model parallelism: Use TensorFlow</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Software-Packages&quot;&gt;&lt;a href=&quot;#Software-Packages&quot; class=&quot;headerlink&quot; title=&quot;Software Packages&quot;&gt;&lt;/a&gt;Software Packages&lt;/h1&gt;&lt;h2 id=&quot;Caffe
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
      <category term="cs231n" scheme="http://yoursite.com/tags/cs231n/"/>
    
  </entry>
  
  <entry>
    <title>usr/bin/ld: cannot find -lxxx Solutions</title>
    <link href="http://yoursite.com/2017/04/11/usr-bin-ld-cannot-find-lxxx-Solutions/"/>
    <id>http://yoursite.com/2017/04/11/usr-bin-ld-cannot-find-lxxx-Solutions/</id>
    <published>2017-04-11T00:59:11.000Z</published>
    <updated>2017-04-11T01:04:39.843Z</updated>
    
    <content type="html"><![CDATA[<p>在Ubuntu上运行Qt5的过程中报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">usr/bin/ld: cannot find -lGL</div></pre></td></tr></table></figure><p>最后发现问题是系统中没有对应的库文件 <code>libgl.so</code></p><p>那么解决方式也很简单，安装即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libgl-dev</div></pre></td></tr></table></figure><p>Tada =)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Ubuntu上运行Qt5的过程中报错：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Reinforcement Learning (GT) Notes</title>
    <link href="http://yoursite.com/2017/04/10/Reinforcement-Learning-GT-Notes/"/>
    <id>http://yoursite.com/2017/04/10/Reinforcement-Learning-GT-Notes/</id>
    <published>2017-04-10T12:54:51.000Z</published>
    <updated>2017-04-10T12:55:44.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Decision-Making-amp-Reinforcement-Learning"><a href="#Decision-Making-amp-Reinforcement-Learning" class="headerlink" title="Decision Making &amp; Reinforcement Learning"></a>Decision Making &amp; Reinforcement Learning</h1><p>Supervised Learning: $y = f(x)$</p><p>Unsupervised Learning: $f(x)$</p><p>Reinforcement Learning: $y = f(x), z$</p><h2 id="Markov-Decision-Process"><a href="#Markov-Decision-Process" class="headerlink" title="Markov Decision Process"></a>Markov Decision Process</h2><p>States: $S$</p><p>Model: $T(s, a, s^{\prime}) \sim Pr(s^{\prime} | s, a)$</p><p>Actions: $A(s), A$</p><p>Reword: $R(s), R(s, a), R(s, a, s^{\prime})$</p><hr><p>Policy: $\pi(s) \rightarrow a$</p><p>​ $\pi^{*}$</p><h3 id="Sequences-of-Rewards-Assumption"><a href="#Sequences-of-Rewards-Assumption" class="headerlink" title="Sequences of Rewards: Assumption"></a>Sequences of Rewards: Assumption</h3><ul><li><p>Infinite Horizons</p></li><li><p>Utility of sequences</p><p>if $U(s_0, s_1, s_2, \cdots) &gt; U(s_0, s^{\prime}_1, s^{\prime}_2, \cdots)$</p><p>then $U(s_1, s_2, \cdots) &gt; U(s^{\prime}_1, s^{\prime}_2, \cdots)$</p></li></ul><script type="math/tex;mode=display">U(s_0, s_1, s_2, \cdots)=\sum_{t=0}^{\infty}\gamma^{t}R(s_t), 0 \leq \gamma \leq 1</script><script type="math/tex;mode=display">U\leq\frac{R_{max}}{1 - \gamma}</script><ul><li><p>Policies</p><script type="math/tex;mode=display">\pi^{\star}=argmax_{\pi} E[\sum_{t=0}^{\infty}\gamma^{t}R(S_t)|\pi]</script><script type="math/tex;mode=display">U^{\pi}(s)=E[\sum_{t=0}^{\infty}\gamma^{t}R(s_t)|\pi,s_0=s]</script><script type="math/tex;mode=display">\pi^{\star}(s)=argmax_{a}\sum_{s^{\prime}}T(s, a, s^{\prime})U(s^{\prime})</script><script type="math/tex;mode=display">U(s)=R(s)+\gamma \max_{a}\sum_{s^{\prime}}T(s, a, s^{\prime})U(s^{\prime})</script><p>Above is the <strong>Bellman Equation</strong>.</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Decision-Making-amp-Reinforcement-Learning&quot;&gt;&lt;a href=&quot;#Decision-Making-amp-Reinforcement-Learning&quot; class=&quot;headerlink&quot; title=&quot;Decision
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="reinforcement learning" scheme="http://yoursite.com/tags/reinforcement-learning/"/>
    
  </entry>
  
  <entry>
    <title>cs231n Lecture 11 Recap</title>
    <link href="http://yoursite.com/2017/04/10/cs231n-Lecture-11-Recap/"/>
    <id>http://yoursite.com/2017/04/10/cs231n-Lecture-11-Recap/</id>
    <published>2017-04-10T02:30:44.000Z</published>
    <updated>2017-04-10T03:00:37.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Working-with-CNNs-in-practice"><a href="#Working-with-CNNs-in-practice" class="headerlink" title="Working with CNNs in practice"></a>Working with CNNs in practice</h1><ul><li>Making the most of your data<ul><li>Data augmentation</li><li>Transfer learning</li></ul></li><li>All about convolutions<ul><li>How to arrange them</li><li>How to compute them fast</li></ul></li><li>Implementation details<ul><li>GPU / CPU, bottlenecks, ditributed training</li></ul></li></ul><h2 id="Data-Augmentation"><a href="#Data-Augmentation" class="headerlink" title="Data Augmentation"></a>Data Augmentation</h2><h3 id="Horizontal-flips"><a href="#Horizontal-flips" class="headerlink" title="Horizontal flips"></a>Horizontal flips</h3><h3 id="Random-crops-scales"><a href="#Random-crops-scales" class="headerlink" title="Random crops/scales"></a>Random crops/scales</h3><p><strong>Training:</strong> sample random crops /scales</p><p>ResNet:</p><ol><li>Pick random L in range [256, 480]</li><li>Resize training image, short side = L</li><li>Sample random 224 x 224 patch</li></ol><p><strong>Testing:</strong> average a fixed set of crops</p><p>ResNet:</p><ol><li>Resize image at 5 scales: {224, 256, 384, 480, 640}</li><li>For each size, use 10 224 x 224 crops: 4 corners + center, + flips</li></ol><h3 id="Color-jitter"><a href="#Color-jitter" class="headerlink" title="Color jitter"></a>Color jitter</h3><p><strong>Simple:</strong><br>Randomly jitter contrast</p><p><strong>Complex:</strong></p><ol><li>Apply PCA to all [R, G, B] pixels in training set</li><li>Sample a “color offset” along principal component directions</li><li>Add offset to all pixels of a training image</li></ol><p>(As seen in [Krizhevsky et al. 2012], ResNet, etc)</p><h2 id="Transfer-Learning"><a href="#Transfer-Learning" class="headerlink" title="Transfer Learning"></a>Transfer Learning</h2><p>“You need a lot of a data if you want to train/use CNNs”</p><p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n/lec11/tl.png" alt="tl"></p><p>some tricks:</p><div class="table-container"><table><thead><tr><th></th><th>very similar dataset</th><th>very different dataset</th></tr></thead><tbody><tr><td>very little data</td><td>Use Linear Classifer on top layer</td><td>Try linear classifer from different stages</td></tr><tr><td>quite a lot of data</td><td>Finetune a few layers</td><td>Finetune a larger number of layers</td></tr></tbody></table></div><h2 id="All-about-Convolutions"><a href="#All-about-Convolutions" class="headerlink" title="All about Convolutions"></a>All about Convolutions</h2><h3 id="How-to-stack-them"><a href="#How-to-stack-them" class="headerlink" title="How to stack them"></a>How to stack them</h3><ul><li>Replace large convolutions (5 x 5, 7 x 7) with stacks of 3 x 3 convolutions</li><li>1 x 1 “bottleneck” convolutions are very efficient</li><li>Can factor N x N convolutions into 1 x N and N x 1</li><li>All of the above give fewer parameters, less compute, more nonlinearity</li></ul><h3 id="How-to-compute-them"><a href="#How-to-compute-them" class="headerlink" title="How to compute them"></a>How to compute them</h3><h4 id="im2col"><a href="#im2col" class="headerlink" title="im2col"></a>im2col</h4><p><img src="http://o7ie0tcjk.bkt.clouddn.com/cs231n/lec11/cs231n11_im2col.png" alt="im2col"></p><h4 id="BLAS"><a href="#BLAS" class="headerlink" title="BLAS"></a>BLAS</h4><h4 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a>FFT</h4><ol><li>Compute FFT of weights: F(W)</li><li>Compute FFT of image: F(X)</li><li>Compute elementwise product: F(W) ○ F(X)</li><li>Compute inverse FFT: Y = F-1(F(W) ○ F(X))</li></ol><p>FFT convolutions get a big speedup for larger filters</p><p>Not much speedup for 3x3 filters =(</p><h4 id="Fast-algorithms"><a href="#Fast-algorithms" class="headerlink" title="Fast algorithms"></a>Fast algorithms</h4><ul><li>Strassen’s Algorithm</li><li>And so on…</li></ul><h2 id="Implementation-Details"><a href="#Implementation-Details" class="headerlink" title="Implementation Details"></a>Implementation Details</h2><ul><li>GPUs much faster than CPUs</li><li>Distributed training is sometimes used<ul><li>Not needed for small problems</li></ul></li><li>Be aware of bottlenecks: CPU / GPU, CPU / disk</li><li>Low precison makes things faster and still works<ul><li>32 bit is standard now, 16 bit soon</li><li>In the future: binary nets?</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Working-with-CNNs-in-practice&quot;&gt;&lt;a href=&quot;#Working-with-CNNs-in-practice&quot; class=&quot;headerlink&quot; title=&quot;Working with CNNs in practice&quot;&gt;&lt;/a
    
    </summary>
    
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
      <category term="cs231n" scheme="http://yoursite.com/tags/cs231n/"/>
    
  </entry>
  
  <entry>
    <title>Dynet xor demo [python version]</title>
    <link href="http://yoursite.com/2017/04/09/Dynet-xor-demo-python-version/"/>
    <id>http://yoursite.com/2017/04/09/Dynet-xor-demo-python-version/</id>
    <published>2017-04-09T06:15:18.000Z</published>
    <updated>2017-04-09T06:17:35.115Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> dynet <span class="keyword">as</span> dy</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="comment"># Parameters of the model and training</span></div><div class="line">HIDDEN_SIZE = <span class="number">20</span></div><div class="line">NUM_EPOCHS = <span class="number">20</span></div><div class="line"></div><div class="line"><span class="comment"># Define the model and SGD optimizer</span></div><div class="line">model = dy.Model()</div><div class="line">W_xh_p = model.add_parameters((HIDDEN_SIZE, <span class="number">2</span>))</div><div class="line">b_h_p = model.add_parameters(HIDDEN_SIZE)</div><div class="line">W_hy_p = model.add_parameters((<span class="number">1</span>, HIDDEN_SIZE))</div><div class="line">b_y_p = model.add_parameters(<span class="number">1</span>)</div><div class="line">trainer = dy.SimpleSGDTrainer(model)</div><div class="line"></div><div class="line"><span class="comment"># Define the training data, consisting of (x,y) tuples</span></div><div class="line">data = [([<span class="number">1</span>,<span class="number">1</span>],<span class="number">1</span>), ([<span class="number">-1</span>,<span class="number">1</span>],<span class="number">-1</span>), ([<span class="number">1</span>,<span class="number">-1</span>],<span class="number">-1</span>), ([<span class="number">-1</span>,<span class="number">-1</span>],<span class="number">1</span>)]</div><div class="line"></div><div class="line"><span class="comment"># Define the function we would like to calculate</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_function</span><span class="params">(x)</span>:</span></div><div class="line">	dy.renew_cg()</div><div class="line">	w_xh = dy.parameter(W_xh_p)</div><div class="line">	b_h = dy.parameter(b_h_p)</div><div class="line">	W_hy = dy.parameter(W_hy_p)</div><div class="line">	b_y = dy.parameter(b_y_p)</div><div class="line">	x_val = dy.inputVector(x)</div><div class="line">	h_val = dy.tanh(w_xh * x_val + b_h)</div><div class="line">	y_val = W_hy * h_val + b_y</div><div class="line">	<span class="keyword">return</span> y_val</div><div class="line"></div><div class="line"><span class="comment"># Perform training</span></div><div class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(NUM_EPOCHS):</div><div class="line">	epoch_loss = <span class="number">0</span></div><div class="line">	random.shuffle(data)</div><div class="line">	<span class="keyword">for</span> x, ystar <span class="keyword">in</span> data:</div><div class="line">		y = calc_function(x)</div><div class="line">		loss = dy.squared_distance(y, dy.scalarInput(ystar))</div><div class="line">		epoch_loss += loss.value()</div><div class="line">		loss.backward()</div><div class="line">		trainer.update()</div><div class="line">	print(<span class="string">"Epoch %d: loss=%f"</span> % (epoch, epoch_loss))</div><div class="line"></div><div class="line"><span class="comment"># Print results of prediction</span></div><div class="line"><span class="keyword">for</span> x, ystar <span class="keyword">in</span> data:</div><div class="line">	y = calc_function(x)</div><div class="line">	print(<span class="string">"%r -&gt; %f"</span> % (x, y.value()))</div></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[dynet] random seed: 1174664263</div><div class="line">[dynet] allocating memory: 512MB</div><div class="line">[dynet] memory allocation done.</div><div class="line">Epoch 0: loss=12.391680</div><div class="line">Epoch 1: loss=8.196088</div><div class="line">Epoch 2: loss=8.103037</div><div class="line">Epoch 3: loss=8.636450</div><div class="line">Epoch 4: loss=7.573008</div><div class="line">Epoch 5: loss=4.910318</div><div class="line">Epoch 6: loss=3.079966</div><div class="line">Epoch 7: loss=1.328273</div><div class="line">Epoch 8: loss=1.171368</div><div class="line">Epoch 9: loss=0.515850</div><div class="line">Epoch 10: loss=1.885216</div><div class="line">Epoch 11: loss=0.568994</div><div class="line">Epoch 12: loss=0.278629</div><div class="line">Epoch 13: loss=0.025215</div><div class="line">Epoch 14: loss=0.018466</div><div class="line">Epoch 15: loss=0.055305</div><div class="line">Epoch 16: loss=0.014131</div><div class="line">Epoch 17: loss=0.010476</div><div class="line">Epoch 18: loss=0.003893</div><div class="line">Epoch 19: loss=0.003332</div><div class="line">[1, 1] -&gt; 1.049703</div><div class="line">[-1, 1] -&gt; -0.996379</div><div class="line">[1, -1] -&gt; -0.974599</div><div class="line">[-1, -1] -&gt; 0.995763</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/d
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
      <category term="dynet" scheme="http://yoursite.com/tags/dynet/"/>
    
  </entry>
  
  <entry>
    <title>Installing the Python Dynet module</title>
    <link href="http://yoursite.com/2017/04/09/Installing-the-Python-Dynet-module/"/>
    <id>http://yoursite.com/2017/04/09/Installing-the-Python-Dynet-module/</id>
    <published>2017-04-09T05:57:09.000Z</published>
    <updated>2017-04-09T06:05:58.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Installing-the-Python-Dynet-module"><a href="#Installing-the-Python-Dynet-module" class="headerlink" title="Installing the Python Dynet module"></a>Installing the Python Dynet module</h1><p>(for instructions on installing on a computer with GPU, see below)</p><p>Python bindings to DyNet are supported for both Python 2.x and 3.x.</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>(see below for the details)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># Installing Python DyNet:</div><div class="line"></div><div class="line">pip install cython  # if you don&apos;t have it already.</div><div class="line">mkdir dynet-base</div><div class="line">cd dynet-base</div><div class="line"># getting dynet and eigen</div><div class="line">git clone https://github.com/clab/dynet.git</div><div class="line">hg clone https://bitbucket.org/eigen/eigen -r 346ecdb  # -r NUM specified a known working revision</div><div class="line">cd dynet</div><div class="line">mkdir build</div><div class="line">cd build</div><div class="line"># without GPU support:</div><div class="line">cmake .. -DEIGEN3_INCLUDE_DIR=../../eigen -DPYTHON=`which python`</div><div class="line"># or with GPU support:</div><div class="line">cmake .. -DEIGEN3_INCLUDE_DIR=../../eigen -DPYTHON=`which python` -DBACKEND=cuda</div><div class="line"></div><div class="line">make -j 2 # replace 2 with the number of available cores</div><div class="line">cd python</div><div class="line">python setup.py install  # or `python setup.py install --user` for a user-local install.</div><div class="line"></div><div class="line"># this should suffice, but on some systems you may need to add the following line to your</div><div class="line"># init files in order for the compiled .so files be accessible to Python.</div><div class="line"># /path/to/dynet/build/dynet is the location in which libdynet.dylib resides.</div><div class="line">export DYLD_LIBRARY_PATH=/path/to/dynet/build/dynet/:$DYLD_LIBRARY_PATH</div></pre></td></tr></table></figure><h2 id="Detailed-Instructions"><a href="#Detailed-Instructions" class="headerlink" title="Detailed Instructions"></a>Detailed Instructions</h2><p>First, get DyNet:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd $HOME</div><div class="line">mkdir dynet-base</div><div class="line">cd dynet-base</div><div class="line">git clone https://github.com/clab/dynet.git</div><div class="line">cd dynet</div><div class="line">git submodule init # To be consistent with DyNet&apos;s installation instructions.</div><div class="line">git submodule update # To be consistent with DyNet&apos;s installation instructions.</div></pre></td></tr></table></figure><p>Then get Eigen:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd $HOME</div><div class="line">cd dynet-base</div><div class="line">hg clone https://bitbucket.org/eigen/eigen/ -r 346ecdb</div></pre></td></tr></table></figure><p>(-r NUM specifies a known working revision of Eigen. You can remove this in order to get the bleeding edge Eigen, with the risk of some compile breaks, and the possible benefit of added optimizations.)</p><p>We also need to make sure the <code>cython</code> module is installed. (you can replace <code>pip</code> with your favorite package manager, such as <code>conda</code>, or install within a virtual environment)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install cython</div></pre></td></tr></table></figure><p>To simplify the following steps, we can set a bash variable to hold where we have saved the main directories of DyNet and Eigen. In case you have gotten DyNet and Eigen differently from the instructions above and saved them in different location(s), these variables will be helpful:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PATH_TO_DYNET=$HOME/dynet-base/dynet/</div><div class="line">PATH_TO_EIGEN=$HOME/dynet-base/eigen/</div></pre></td></tr></table></figure><p>Compile DyNet.</p><p>This is pretty much the same process as compiling DyNet, with the addition of the <code>-DPYTHON=</code> flag, pointing to the location of your Python interpreter.</p><p>If Boost is installed in a non-standard location, you should add the corresponding flags to the <code>cmake</code> commandline, see the <a href="https://github.com/clab/dynet/blob/master/doc/source/install.rst" target="_blank" rel="external">DyNet installation instructions page</a>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cd $PATH_TO_DYNET</div><div class="line">PATH_TO_PYTHON=`which python`</div><div class="line">mkdir build</div><div class="line">cd build</div><div class="line">cmake .. -DEIGEN3_INCLUDE_DIR=$PATH_TO_EIGEN -DPYTHON=$PATH_TO_PYTHON</div><div class="line">make -j 2</div></pre></td></tr></table></figure><p>Assuming that the <code>cmake</code> command found all the needed libraries and didn’t fail, the <code>make</code> command will take a while, and compile DyNet as well as the Python bindings. You can change <code>make -j 2</code> to a higher number, depending on the available cores you want to use while compiling.</p><p>You now have a working Python binding inside of <code>build/dynet</code>. To verify this is working:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd $PATH_TO_DYNET/build/python</div><div class="line">python</div></pre></td></tr></table></figure><p>then, within Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> dynet <span class="keyword">as</span> dy</div><div class="line"><span class="keyword">print</span> dy.__version__</div><div class="line">model = dy.Model()</div></pre></td></tr></table></figure><p>In order to install the module so that it is accessible from everywhere in the system, run the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd $PATH_TO_DYNET/build/python</div><div class="line">python setup.py install --user</div></pre></td></tr></table></figure><p>The <code>--user</code> switch will install the module in your local site-packages, and works without root privileges. To install the module to the system site-packages (for all users), or to the current virtualenv (if you are on one), run <code>python setup.py install</code>without this switch.</p><p>You should now have a working python binding (the <code>dynet</code> module).</p><p>Note however that the installation relies on the compiled DyNet library being in <code>$PATH_TO_DYNET/build/dynet</code>, so make sure not to move it from there.</p><p>Now, check that everything works:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd $PATH_TO_DYNET</div><div class="line">cd examples/python</div><div class="line">python xor.py</div><div class="line">python rnnlm.py rnnlm.py</div></pre></td></tr></table></figure><p>Alternatively, if the following script works for you, then your installation is likely to be working:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> dynet <span class="keyword">import</span> *</div><div class="line">model = Model()</div></pre></td></tr></table></figure><p>If it doesn’t work and you get an error similar to the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ImportError: dlopen(/Users/sneharajana/.python-eggs/dyNET-0.0.0-py2.7-macosx-10.11-intel.egg-tmp/_dynet.so, 2): Library not loaded: @rpath/libdynet.dylib</div><div class="line">Referenced from: /Users/sneharajana/.python-eggs/dyNET-0.0.0-py2.7-macosx-10.11-intel.egg-tmp/_dynet.so</div><div class="line">Reason: image not found``</div></pre></td></tr></table></figure><p>then you may need to run the following (and add it to your shell init files):</p><blockquote><p>export DYLD_LIBRARY_PATH=/path/to/dynet/build/dynet/:$DYLD_LIBRARY_PATH</p></blockquote><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>There are two ways to import the dynet module :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> dynet</div></pre></td></tr></table></figure><p>imports dynet and automatically initializes the global dynet parameters with the command line arguments (see the <a href="https://github.com/clab/dynet/blob/master/doc/source/commandline" target="_blank" rel="external">documentation</a>). The amount of memory allocated, GPU/CPU usage is fixed from there on.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> _dynet</div><div class="line"><span class="comment"># or</span></div><div class="line"><span class="keyword">import</span> _gdynet <span class="comment"># For GPU</span></div></pre></td></tr></table></figure><p>Imports dynet for CPU (resp. GPU) and doesn’t initialize the global parameters. These must be initialized manually before using dynet, using one of the following :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Same as import dynet as dy</span></div><div class="line"><span class="keyword">import</span> _dynet <span class="keyword">as</span> dy</div><div class="line">dy.init()</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Same as import dynet as dy</span></div><div class="line"><span class="keyword">import</span> _dynet <span class="keyword">as</span> dy</div><div class="line"><span class="comment"># Declare a DynetParams object</span></div><div class="line">dyparams = dy.DynetParams()</div><div class="line"><span class="comment"># Fetch the command line arguments (optional)</span></div><div class="line">dyparams.from_args()</div><div class="line"><span class="comment"># Set some parameters manualy (see the command line arguments documentation)</span></div><div class="line">dyparams.set_mem(<span class="number">2048</span>)</div><div class="line">dyparams.set_random_seed(<span class="number">666</span>)</div><div class="line">dyparams.set_weight_decay(<span class="number">1e-7</span>)</div><div class="line">dyparams.set_shared_parameters(<span class="keyword">False</span>)</div><div class="line">dyparams.set_requested_gpus(<span class="number">1</span>)</div><div class="line">dyparams.set_gpu_mask([<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>])</div><div class="line"><span class="comment"># Initialize with the given parameters</span></div><div class="line">dyparams.init() <span class="comment"># or init_from_params(dyparams)</span></div></pre></td></tr></table></figure><h2 id="Anaconda-Support"><a href="#Anaconda-Support" class="headerlink" title="Anaconda Support"></a>Anaconda Support</h2><p><a href="https://www.continuum.io/downloads" target="_blank" rel="external">Anaconda</a> is a popular package management system for Python. DyNet can be used from within an Anaconda environment, but be sure to activate the environment</p><blockquote><p>source activate my_environment_name</p></blockquote><p>then install some necessary packages as follows:</p><blockquote><p>conda install gcc cmake boost cython</p></blockquote><p>After this, the build process should be the same as normal.</p><p>Note that on some conda environments, people have reported build errors related to the interaction between the <code>icu</code> and <code>boost</code> packages. If you encounter this, try the solution in <a href="https://github.com/clab/dynet/issues/268#issuecomment-278806398" target="_blank" rel="external">this comment</a>.</p><h2 id="Windows-Support"><a href="#Windows-Support" class="headerlink" title="Windows Support"></a>Windows Support</h2><p>You can also use Python on Windows by following similar steps to the above. For simplicity, we recommend using a Python distribution that already has Cython installed. The following has been tested to work:</p><ol><li>Install WinPython 2.7.10 (comes with Cython already installed).</li><li>Run CMake as above with <code>-DPYTHON=/path/to/your/python.exe</code>.</li><li>Open a command prompt and set <code>VS90COMNTOOLS</code> to the path to your Visual Studio “Common7/Tools” directory. One easy way to do this is a command such as:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set VS90COMNTOOLS=%VS140COMNTOOLS%</div></pre></td></tr></table></figure><ol><li>Open dynet.sln from this command prompt and build the “Release” version of the solution.</li><li>Follow the rest of the instructions above for testing the build and installing it for other users</li></ol><p>Note, currently only the Release version works.</p><h2 id="GPU-MKL-Support"><a href="#GPU-MKL-Support" class="headerlink" title="GPU/MKL Support"></a>GPU/MKL Support</h2><h3 id="Installing-running-on-GPU"><a href="#Installing-running-on-GPU" class="headerlink" title="Installing/running on GPU"></a>Installing/running on GPU</h3><p>For installing on a computer with GPU, first install CUDA. The following instructions assume CUDA is installed.</p><p>The installation process is pretty much the same, while adding the <code>-DBACKEND=cuda</code> flag to the <code>cmake</code> stage:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cmake .. -DEIGEN3_INCLUDE_DIR=$PATH_TO_EIGEN -DPYTHON=$PATH_TO_PYTHON -DBACKEND=cuda</div></pre></td></tr></table></figure><p>(if CUDA is installed in a non-standard location and <code>cmake</code> cannot find it, you can specify also <code>-DCUDA_TOOLKIT_ROOT_DIR=/path/to/cuda</code>.)</p><p>Now, build the Python modules (as above, we assume Cython is installed):</p><p>After running <code>make -j 2</code>, you should have the files <code>_dynet.so</code> and <code>_gdynet.so</code> in the <code>build/python</code> folder.</p><p>As before, <code>cd build/python</code> followed by <code>python setup.py install --user</code> will install the module.</p><p>In order to use the GPU support, you can either:</p><ul><li>Use <code>import _gdynet as dy</code> instead of <code>import dynet as dy</code></li><li>Or, (preferred), <code>import dynet</code> as usual, but use the commandline switch <code>--dynet-gpu</code> or the GPU switches detailed <a href="https://github.com/clab/dynet/blob/master/doc/source/commandline.rst" target="_blank" rel="external">here</a>when invoking the program. This option lets the same code work with either the GPU or the CPU version depending on how it is invoked.</li></ul><h3 id="Running-with-MKL"><a href="#Running-with-MKL" class="headerlink" title="Running with MKL"></a>Running with MKL</h3><p>If you’ve built DyNet to use MKL (using <code>-DMKL</code> or <code>-DMKL_ROOT</code>), Python sometimes has difficulty finding the MKL shared libraries. You can try setting <code>LD_LIBRARY_PATH</code> to point to your MKL library directory. If that doesn’t work, try setting the following environment variable (supposing, for example, your MKL libraries are located at <code>/opt/intel/mkl/lib/intel64</code>):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export LD_PRELOAD=/opt/intel/mkl/lib/intel64/libmkl_def.so:/opt/intel/mkl/lib/intel64/libmkl_avx2.so:/opt/intel/mkl/lib</div></pre></td></tr></table></figure><h2 id="Some-Errors-and-correspond-Solutions"><a href="#Some-Errors-and-correspond-Solutions" class="headerlink" title="Some Errors and correspond Solutions"></a>Some Errors and correspond Solutions</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import dynet as dy</div><div class="line">-------------------------------------------</div><div class="line"></div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">  File &quot;dynet.py&quot;, line 17, in &lt;module&gt;</div><div class="line">    from _dynet import *</div><div class="line">ImportError: /home/ewan/anaconda2/lib/libstdc++.so.6: version `GLIBCXX_3.4.20&apos; not found (required by /home/ewan/dynet-base/dynet/build/dynet/libdynet.so)</div><div class="line"></div><div class="line">-------------------------------------------</div><div class="line">Solution:</div><div class="line"></div><div class="line">conda install libgcc</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Installing-the-Python-Dynet-module&quot;&gt;&lt;a href=&quot;#Installing-the-Python-Dynet-module&quot; class=&quot;headerlink&quot; title=&quot;Installing the Python Dy
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
      <category term="dynet" scheme="http://yoursite.com/tags/dynet/"/>
    
  </entry>
  
  <entry>
    <title>lda for news classification</title>
    <link href="http://yoursite.com/2017/03/26/lda-for-news-classification/"/>
    <id>http://yoursite.com/2017/03/26/lda-for-news-classification/</id>
    <published>2017-03-26T08:54:12.000Z</published>
    <updated>2017-03-26T08:54:12.906Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>netease news spider</title>
    <link href="http://yoursite.com/2017/03/26/netease-news-spider/"/>
    <id>http://yoursite.com/2017/03/26/netease-news-spider/</id>
    <published>2017-03-26T08:53:50.000Z</published>
    <updated>2017-03-26T08:53:50.064Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LDA</title>
    <link href="http://yoursite.com/2017/03/24/LDA/"/>
    <id>http://yoursite.com/2017/03/24/LDA/</id>
    <published>2017-03-24T07:11:52.000Z</published>
    <updated>2017-03-24T07:29:41.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scikit-learn-example"><a href="#Scikit-learn-example" class="headerlink" title="Scikit-learn example"></a>Scikit-learn example</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%matplotlib inline</div></pre></td></tr></table></figure><h2 id="Topic-extraction-with-Non-negative-Matrix-Factorization-and-Latent-Dirichlet-Allocation"><a href="#Topic-extraction-with-Non-negative-Matrix-Factorization-and-Latent-Dirichlet-Allocation" class="headerlink" title="Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation"></a>Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation</h2><p>This is an example of applying Non-negative Matrix Factorization and Latent Dirichlet Allocation on a corpus of documents and extract additive models of the topic structure of the corpus. The output is a list of topics, each represented as a list of terms (weights are not shown).</p><p>The default parameters (n_samples / n_features / n_topics) should make the example runnable in a couple of tens of seconds. You can try to increase the dimensions of the problem, but be aware that the time complexity is polynomial in NMF. In LDA, the time complexity is proportional to (n_samples * iterations).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Author: Olivier Grisel &lt;olivier.grisel@ensta.org&gt;</span></div><div class="line"><span class="comment">#         Lars Buitinck</span></div><div class="line"><span class="comment">#         Chyi-Kwei Yau &lt;chyikwei.yau@gmail.com&gt;</span></div><div class="line"><span class="comment"># License: BSD 3 clause</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer, CountVectorizer</div><div class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> NMF, LatentDirichletAllocation</div><div class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_20newsgroups</div><div class="line"></div><div class="line">n_samples = <span class="number">2000</span></div><div class="line">n_features = <span class="number">1000</span></div><div class="line">n_topics = <span class="number">10</span></div><div class="line">n_top_words = <span class="number">20</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_top_words</span><span class="params">(model, feature_names, n_top_words)</span>:</span></div><div class="line">    <span class="keyword">for</span> topic_idx, topic <span class="keyword">in</span> enumerate(model.components_):</div><div class="line">        print(<span class="string">"Topic #%d:"</span> % topic_idx)</div><div class="line">        print(<span class="string">" "</span>.join([feature_names[i]</div><div class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> topic.argsort()[:-n_top_words - <span class="number">1</span>:<span class="number">-1</span>]]))</div><div class="line">    print()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Load the 20 newsgroups dataset and vectorize it. We use a few heuristics</span></div><div class="line"><span class="comment"># to filter out useless terms early on: the posts are stripped of headers,</span></div><div class="line"><span class="comment"># footers and quoted replies, and common English words, words occurring in</span></div><div class="line"><span class="comment"># only one document or in at least 95% of the documents are removed.</span></div><div class="line"></div><div class="line">print(<span class="string">"Loading dataset..."</span>)</div><div class="line">t0 = time()</div><div class="line">dataset = fetch_20newsgroups(shuffle=<span class="keyword">True</span>, random_state=<span class="number">1</span>,</div><div class="line">                             remove=(<span class="string">'headers'</span>, <span class="string">'footers'</span>, <span class="string">'quotes'</span>))</div><div class="line">data_samples = dataset.data[:n_samples]</div><div class="line">print(<span class="string">"done in %0.3fs."</span> % (time() - t0))</div><div class="line"></div><div class="line"><span class="comment"># Use tf-idf features for NMF.</span></div><div class="line">print(<span class="string">"Extracting tf-idf features for NMF..."</span>)</div><div class="line">tfidf_vectorizer = TfidfVectorizer(max_df=<span class="number">0.95</span>, min_df=<span class="number">2</span>,</div><div class="line">                                   max_features=n_features,</div><div class="line">                                   stop_words=<span class="string">'english'</span>)</div><div class="line">t0 = time()</div><div class="line">tfidf = tfidf_vectorizer.fit_transform(data_samples)</div><div class="line">print(<span class="string">"done in %0.3fs."</span> % (time() - t0))</div><div class="line"></div><div class="line"><span class="comment"># Use tf (raw term count) features for LDA.</span></div><div class="line">print(<span class="string">"Extracting tf features for LDA..."</span>)</div><div class="line">tf_vectorizer = CountVectorizer(max_df=<span class="number">0.95</span>, min_df=<span class="number">2</span>,</div><div class="line">                                max_features=n_features,</div><div class="line">                                stop_words=<span class="string">'english'</span>)</div><div class="line">t0 = time()</div><div class="line">tf = tf_vectorizer.fit_transform(data_samples)</div><div class="line">print(<span class="string">"done in %0.3fs."</span> % (time() - t0))</div><div class="line"></div><div class="line"><span class="comment"># Fit the NMF model</span></div><div class="line">print(<span class="string">"Fitting the NMF model with tf-idf features, "</span></div><div class="line">      <span class="string">"n_samples=%d and n_features=%d..."</span></div><div class="line">      % (n_samples, n_features))</div><div class="line">t0 = time()</div><div class="line">nmf = NMF(n_components=n_topics, random_state=<span class="number">1</span>,</div><div class="line">          alpha=<span class="number">.1</span>, l1_ratio=<span class="number">.5</span>).fit(tfidf)</div><div class="line">print(<span class="string">"done in %0.3fs."</span> % (time() - t0))</div><div class="line"></div><div class="line">print(<span class="string">"\nTopics in NMF model:"</span>)</div><div class="line">tfidf_feature_names = tfidf_vectorizer.get_feature_names()</div><div class="line">print_top_words(nmf, tfidf_feature_names, n_top_words)</div><div class="line"></div><div class="line">print(<span class="string">"Fitting LDA models with tf features, "</span></div><div class="line">      <span class="string">"n_samples=%d and n_features=%d..."</span></div><div class="line">      % (n_samples, n_features))</div><div class="line">lda = LatentDirichletAllocation(n_topics=n_topics, max_iter=<span class="number">5</span>,</div><div class="line">                                learning_method=<span class="string">'online'</span>,</div><div class="line">                                learning_offset=<span class="number">50.</span>,</div><div class="line">                                random_state=<span class="number">0</span>)</div><div class="line">t0 = time()</div><div class="line">lda.fit(tf)</div><div class="line">print(<span class="string">"done in %0.3fs."</span> % (time() - t0))</div><div class="line"></div><div class="line">print(<span class="string">"\nTopics in LDA model:"</span>)</div><div class="line">tf_feature_names = tf_vectorizer.get_feature_names()</div><div class="line">print_top_words(lda, tf_feature_names, n_top_words)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Loading dataset...</div></pre></td></tr></table></figure><p>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">No handlers could be found <span class="keyword">for</span> logger <span class="string">"sklearn.datasets.twenty_newsgroups"</span></div></pre></td></tr></table></figure><p>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">done <span class="keyword">in</span> <span class="number">691.647</span>s.</div><div class="line">Extracting tf-idf features <span class="keyword">for</span> NMF...</div><div class="line">done <span class="keyword">in</span> <span class="number">0.454</span>s.</div><div class="line">Extracting tf features <span class="keyword">for</span> LDA...</div><div class="line">done <span class="keyword">in</span> <span class="number">0.416</span>s.</div><div class="line">Fitting the NMF model <span class="keyword">with</span> tf-idf features, n_samples=<span class="number">2000</span> <span class="keyword">and</span> n_features=<span class="number">1000.</span>..</div><div class="line">done <span class="keyword">in</span> <span class="number">0.367</span>s.</div><div class="line"></div><div class="line">Topics <span class="keyword">in</span> NMF model:</div><div class="line">Topic <span class="comment">#0:</span></div><div class="line">just people don think like know time good make way really say right ve want did ll new use years</div><div class="line">Topic <span class="comment">#1:</span></div><div class="line">windows use dos using window program os drivers application help software pc running ms screen files version card code work</div><div class="line">Topic <span class="comment">#2:</span></div><div class="line">god jesus bible faith christian christ christians does heaven sin believe lord life church mary atheism belief human love religion</div><div class="line">Topic <span class="comment">#3:</span></div><div class="line">thanks know does mail advance hi info interested email anybody looking card help like appreciated information send list video need</div><div class="line">Topic <span class="comment">#4:</span></div><div class="line">car cars tires miles <span class="number">00</span> new engine insurance price condition oil power speed good <span class="number">000</span> brake year models used bought</div><div class="line">Topic <span class="comment">#5:</span></div><div class="line">edu soon com send university internet mit ftp mail cc pub article information hope program mac email home contact blood</div><div class="line">Topic <span class="comment">#6:</span></div><div class="line">file problem files format win sound ftp pub read save site help image available create copy running memory self version</div><div class="line">Topic <span class="comment">#7:</span></div><div class="line">game team games year win play season players nhl runs goal hockey toronto division flyers player defense leafs bad teams</div><div class="line">Topic <span class="comment">#8:</span></div><div class="line">drive drives hard disk floppy software card mac computer power scsi controller apple mb <span class="number">00</span> pc rom sale problem internal</div><div class="line">Topic <span class="comment">#9:</span></div><div class="line">key chip clipper keys encryption government public use secure enforcement phone nsa communications law encrypted security clinton used legal standard</div><div class="line"></div><div class="line">Fitting LDA models <span class="keyword">with</span> tf features, n_samples=<span class="number">2000</span> <span class="keyword">and</span> n_features=<span class="number">1000.</span>..</div><div class="line">done <span class="keyword">in</span> <span class="number">2.169</span>s.</div><div class="line"></div><div class="line">Topics <span class="keyword">in</span> LDA model:</div><div class="line">Topic <span class="comment">#0:</span></div><div class="line">edu com mail send graphics ftp pub available contact university list faq ca information cs <span class="number">1993</span> program sun uk mit</div><div class="line">Topic <span class="comment">#1:</span></div><div class="line">don like just know think ve way use right good going make sure ll point got need really time doesn</div><div class="line">Topic <span class="comment">#2:</span></div><div class="line">christian think atheism faith pittsburgh new bible radio games alt lot just religion like book read play time subject believe</div><div class="line">Topic <span class="comment">#3:</span></div><div class="line">drive disk windows thanks use card drives hard version pc software file using scsi help does new dos controller <span class="number">16</span></div><div class="line">Topic <span class="comment">#4:</span></div><div class="line">hiv health aids disease april medical care research <span class="number">1993</span> light information study national service test led <span class="number">10</span> page new drug</div><div class="line">Topic <span class="comment">#5:</span></div><div class="line">god people does just good don jesus say israel way life know true fact time law want believe make think</div><div class="line">Topic <span class="comment">#6:</span></div><div class="line"><span class="number">55</span> <span class="number">10</span> <span class="number">11</span> <span class="number">18</span> <span class="number">15</span> team game <span class="number">19</span> period play <span class="number">23</span> <span class="number">12</span> <span class="number">13</span> flyers <span class="number">20</span> <span class="number">25</span> <span class="number">22</span> <span class="number">17</span> <span class="number">24</span> <span class="number">16</span></div><div class="line">Topic <span class="comment">#7:</span></div><div class="line">car year just cars new engine like bike good oil insurance better tires <span class="number">000</span> thing speed model brake driving performance</div><div class="line">Topic <span class="comment">#8:</span></div><div class="line">people said did just didn know time like went think children came come don took years say dead told started</div><div class="line">Topic <span class="comment">#9:</span></div><div class="line">key space law government public use encryption earth section security moon probe enforcement keys states lunar military crime surface technology</div></pre></td></tr></table></figure><p>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data_samples[<span class="number">0</span>]</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">u"Well i'm not sure about the story nad it did seem biased. What\nI disagree with is your statement that the U.S. Media is out to\nruin Israels reputation. That is rediculous. The U.S. media is\nthe most pro-israeli media in the world. Having lived in Europe\nI realize that incidences such as the one described in the\nletter have occured. The U.S. media as a whole seem to try to\nignore them. The U.S. is subsidizing Israels existance and the\nEuropeans are not (at least not to the same degree). So I think\nthat might be a reason they report more clearly on the\natrocities.\n\tWhat is a shame is that in Austria, daily reports of\nthe inhuman acts commited by Israeli soldiers and the blessing\nreceived from the Government makes some of the Holocaust guilt\ngo away. After all, look how the Jews are treating other races\nwhen they got power. It is unfortunate.\n"</span></div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tfidf_vectorizer.get_feature_names()[<span class="number">-10</span>:]</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[<span class="string">u'worth'</span>,</div><div class="line"> <span class="string">u'wouldn'</span>,</div><div class="line"> <span class="string">u'write'</span>,</div><div class="line"> <span class="string">u'written'</span>,</div><div class="line"> <span class="string">u'wrong'</span>,</div><div class="line"> <span class="string">u'xfree86'</span>,</div><div class="line"> <span class="string">u'year'</span>,</div><div class="line"> <span class="string">u'years'</span>,</div><div class="line"> <span class="string">u'yes'</span>,</div><div class="line"> <span class="string">u'young'</span>]</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tfidf.toarray().shape</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="number">2000L</span>, <span class="number">1000L</span>)</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dataset.target_names</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'alt.atheism'</span>,</div><div class="line"> <span class="string">'comp.graphics'</span>,</div><div class="line"> <span class="string">'comp.os.ms-windows.misc'</span>,</div><div class="line"> <span class="string">'comp.sys.ibm.pc.hardware'</span>,</div><div class="line"> <span class="string">'comp.sys.mac.hardware'</span>,</div><div class="line"> <span class="string">'comp.windows.x'</span>,</div><div class="line"> <span class="string">'misc.forsale'</span>,</div><div class="line"> <span class="string">'rec.autos'</span>,</div><div class="line"> <span class="string">'rec.motorcycles'</span>,</div><div class="line"> <span class="string">'rec.sport.baseball'</span>,</div><div class="line"> <span class="string">'rec.sport.hockey'</span>,</div><div class="line"> <span class="string">'sci.crypt'</span>,</div><div class="line"> <span class="string">'sci.electronics'</span>,</div><div class="line"> <span class="string">'sci.med'</span>,</div><div class="line"> <span class="string">'sci.space'</span>,</div><div class="line"> <span class="string">'soc.religion.christian'</span>,</div><div class="line"> <span class="string">'talk.politics.guns'</span>,</div><div class="line"> <span class="string">'talk.politics.mideast'</span>,</div><div class="line"> <span class="string">'talk.politics.misc'</span>,</div><div class="line"> <span class="string">'talk.religion.misc'</span>]</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lda.transform(tf)[<span class="number">1934</span>]</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">array([ <span class="number">0.3587206</span> ,  <span class="number">0.00227337</span>,  <span class="number">0.00227317</span>,  <span class="number">0.50146046</span>,  <span class="number">0.00227288</span>,</div><div class="line">        <span class="number">0.12390701</span>,  <span class="number">0.00227282</span>,  <span class="number">0.00227329</span>,  <span class="number">0.00227343</span>,  <span class="number">0.00227299</span>])</div></pre></td></tr></table></figure><h1 id="Extras"><a href="#Extras" class="headerlink" title="Extras"></a>Extras</h1><p>Some materials can find from Github.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Scikit-learn-example&quot;&gt;&lt;a href=&quot;#Scikit-learn-example&quot; class=&quot;headerlink&quot; title=&quot;Scikit-learn example&quot;&gt;&lt;/a&gt;Scikit-learn example&lt;/h1&gt;&lt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="machine learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>Tic-Tac-Toe</title>
    <link href="http://yoursite.com/2017/03/18/Tic-Tac-Toe/"/>
    <id>http://yoursite.com/2017/03/18/Tic-Tac-Toe/</id>
    <published>2017-03-18T14:26:52.000Z</published>
    <updated>2017-03-18T14:27:44.552Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#######################################################################</span></div><div class="line"><span class="comment"># Copyright (C)                                                       #</span></div><div class="line"><span class="comment"># 2016 Shangtong Zhang(zhangshangtong.cpp@gmail.com)                  #</span></div><div class="line"><span class="comment"># 2016 Jan Hakenberg(jan.hakenberg@gmail.com)                         #</span></div><div class="line"><span class="comment"># 2016 Tian Jun(tianjun.cpp@gmail.com)                                #</span></div><div class="line"><span class="comment"># Permission given to modify the code as long as you keep this        #</span></div><div class="line"><span class="comment"># declaration at the top                                              #</span></div><div class="line"><span class="comment">#######################################################################</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pickle</div><div class="line"></div><div class="line">BOARD_ROWS = <span class="number">3</span></div><div class="line">BOARD_COLS = <span class="number">3</span></div><div class="line">BOARD_SIZE = BOARD_ROWS * BOARD_COLS</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># the board is represented by a n * n array,</span></div><div class="line">        <span class="comment"># 1 represents chessman of the player who moves first,</span></div><div class="line">        <span class="comment"># -1 represents chessman of another player</span></div><div class="line">        <span class="comment"># 0 represents empty position</span></div><div class="line">        self.data = np.zeros((BOARD_ROWS, BOARD_COLS))</div><div class="line">        self.winner = <span class="keyword">None</span></div><div class="line">        self.hashVal = <span class="keyword">None</span></div><div class="line">        self.end = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="comment"># calculate the hash value for one state, it's unique</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getHash</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.hashVal <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self.hashVal = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> self.data.reshape(BOARD_ROWS * BOARD_COLS):</div><div class="line">                <span class="keyword">if</span> i == <span class="number">-1</span>:</div><div class="line">                    i = <span class="number">2</span></div><div class="line">                self.hashVal = self.hashVal * <span class="number">3</span> + i</div><div class="line">        <span class="keyword">return</span> int(self.hashVal)</div><div class="line"></div><div class="line">    <span class="comment"># determine whether a player has won the game, or it's a tie</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEnd</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.end <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self.end</div><div class="line">        results = []</div><div class="line">        <span class="comment"># check row</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">            results.append(np.sum(self.data[i, :]))</div><div class="line">        <span class="comment"># check columns</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_COLS):</div><div class="line">            results.append(np.sum(self.data[:, i]))</div><div class="line"></div><div class="line">        <span class="comment"># check diagonals</span></div><div class="line">        results.append(<span class="number">0</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">            results[<span class="number">-1</span>] += self.data[i, i]</div><div class="line">        results.append(<span class="number">0</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">            results[<span class="number">-1</span>] += self.data[i, BOARD_ROWS - <span class="number">1</span> - i]</div><div class="line"></div><div class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> results:</div><div class="line">            <span class="keyword">if</span> result == <span class="number">3</span>:</div><div class="line">                self.winner = <span class="number">1</span></div><div class="line">                self.end = <span class="keyword">True</span></div><div class="line">                <span class="keyword">return</span> self.end</div><div class="line">            <span class="keyword">if</span> result == <span class="number">-3</span>:</div><div class="line">                self.winner = <span class="number">-1</span></div><div class="line">                self.end = <span class="keyword">True</span></div><div class="line">                <span class="keyword">return</span> self.end</div><div class="line"></div><div class="line">        <span class="comment"># whether it's a tie</span></div><div class="line">        sum = np.sum(np.abs(self.data))</div><div class="line">        <span class="keyword">if</span> sum == BOARD_ROWS * BOARD_COLS:</div><div class="line">            self.winner = <span class="number">0</span></div><div class="line">            self.end = <span class="keyword">True</span></div><div class="line">            <span class="keyword">return</span> self.end</div><div class="line"></div><div class="line">        <span class="comment"># game is still going on</span></div><div class="line">        self.end = <span class="keyword">False</span></div><div class="line">        <span class="keyword">return</span> self.end</div><div class="line"></div><div class="line">    <span class="comment"># @symbol 1 or -1</span></div><div class="line">    <span class="comment"># put chessman symbol in position (i, j)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextState</span><span class="params">(self, i, j, symbol)</span>:</span></div><div class="line">        newState = State()</div><div class="line">        newState.data = np.copy(self.data)</div><div class="line">        newState.data[i, j] = symbol</div><div class="line">        <span class="keyword">return</span> newState</div><div class="line"></div><div class="line">    <span class="comment"># print the board</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">            print(<span class="string">'-------------'</span>)</div><div class="line">            out = <span class="string">'| '</span></div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_COLS):</div><div class="line">                <span class="keyword">if</span> self.data[i, j] == <span class="number">1</span>:</div><div class="line">                    token = <span class="string">'*'</span></div><div class="line">                <span class="keyword">if</span> self.data[i, j] == <span class="number">0</span>:</div><div class="line">                    token = <span class="string">'0'</span></div><div class="line">                <span class="keyword">if</span> self.data[i, j] == <span class="number">-1</span>:</div><div class="line">                    token = <span class="string">'x'</span></div><div class="line">                out += token + <span class="string">' | '</span></div><div class="line">            print(out)</div><div class="line">        print(<span class="string">'-------------'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAllStatesImpl</span><span class="params">(currentState, currentSymbol, allStates)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_ROWS):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, BOARD_COLS):</div><div class="line">            <span class="keyword">if</span> currentState.data[i][j] == <span class="number">0</span>:</div><div class="line">                newState = currentState.nextState(i, j, currentSymbol)</div><div class="line">                newHash = newState.getHash()</div><div class="line">                <span class="keyword">if</span> newHash <span class="keyword">not</span> <span class="keyword">in</span> allStates.keys():</div><div class="line">                    isEnd = newState.isEnd()</div><div class="line">                    allStates[newHash] = (newState, isEnd)</div><div class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> isEnd:</div><div class="line">                        getAllStatesImpl(newState, -currentSymbol, allStates)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAllStates</span><span class="params">()</span>:</span></div><div class="line">    currentSymbol = <span class="number">1</span></div><div class="line">    currentState = State()</div><div class="line">    allStates = dict()</div><div class="line">    allStates[currentState.getHash()] = (currentState, currentState.isEnd())</div><div class="line">    getAllStatesImpl(currentState, currentSymbol, allStates)</div><div class="line">    <span class="keyword">return</span> allStates</div><div class="line"></div><div class="line"><span class="comment"># all possible board configurations</span></div><div class="line">allStates = getAllStates()</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Judger</span>:</span></div><div class="line">    <span class="comment"># @player1: player who will move first, its chessman will be 1</span></div><div class="line">    <span class="comment"># @player2: another player with chessman -1</span></div><div class="line">    <span class="comment"># @feedback: if True, both players will receive rewards when game is end</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, player1, player2, feedback=True)</span>:</span></div><div class="line">        self.p1 = player1</div><div class="line">        self.p2 = player2</div><div class="line">        self.feedback = feedback</div><div class="line">        self.currentPlayer = <span class="keyword">None</span></div><div class="line">        self.p1Symbol = <span class="number">1</span></div><div class="line">        self.p2Symbol = <span class="number">-1</span></div><div class="line">        self.p1.setSymbol(self.p1Symbol)</div><div class="line">        self.p2.setSymbol(self.p2Symbol)</div><div class="line">        self.currentState = State()</div><div class="line">        self.allStates = allStates</div><div class="line"></div><div class="line">    <span class="comment"># give reward to two players</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">giveReward</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.currentState.winner == self.p1Symbol:</div><div class="line">            self.p1.feedReward(<span class="number">1</span>)</div><div class="line">            self.p2.feedReward(<span class="number">0</span>)</div><div class="line">        <span class="keyword">elif</span> self.currentState.winner == self.p2Symbol:</div><div class="line">            self.p1.feedReward(<span class="number">0</span>)</div><div class="line">            self.p2.feedReward(<span class="number">1</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.p1.feedReward(<span class="number">0</span>)</div><div class="line">            self.p2.feedReward(<span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedCurrentState</span><span class="params">(self)</span>:</span></div><div class="line">        self.p1.feedState(self.currentState)</div><div class="line">        self.p2.feedState(self.currentState)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></div><div class="line">        self.p1.reset()</div><div class="line">        self.p2.reset()</div><div class="line">        self.currentState = State()</div><div class="line">        self.currentPlayer = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="comment"># @show: if True, print each board during the game</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self, show=False)</span>:</span></div><div class="line">        self.reset()</div><div class="line">        self.feedCurrentState()</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="comment"># set current player</span></div><div class="line">            <span class="keyword">if</span> self.currentPlayer == self.p1:</div><div class="line">                self.currentPlayer = self.p2</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self.currentPlayer = self.p1</div><div class="line">            <span class="keyword">if</span> show:</div><div class="line">                self.currentState.show()</div><div class="line">            [i, j, symbol] = self.currentPlayer.takeAction()</div><div class="line">            self.currentState = self.currentState.nextState(i, j, symbol)</div><div class="line">            hashValue = self.currentState.getHash()</div><div class="line">            self.currentState, isEnd = self.allStates[hashValue]</div><div class="line">            self.feedCurrentState()</div><div class="line">            <span class="keyword">if</span> isEnd:</div><div class="line">                <span class="keyword">if</span> self.feedback:</div><div class="line">                    self.giveReward()</div><div class="line">                <span class="keyword">return</span> self.currentState.winner</div><div class="line"></div><div class="line"><span class="comment"># AI player</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span>:</span></div><div class="line">    <span class="comment"># @stepSize: step size to update estimations</span></div><div class="line">    <span class="comment"># @exploreRate: possibility to explore</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, stepSize = <span class="number">0.1</span>, exploreRate=<span class="number">0.1</span>)</span>:</span></div><div class="line">        self.allStates = allStates</div><div class="line">        self.estimations = dict()</div><div class="line">        self.stepSize = stepSize</div><div class="line">        self.exploreRate = exploreRate</div><div class="line">        self.states = []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></div><div class="line">        self.states = []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setSymbol</span><span class="params">(self, symbol)</span>:</span></div><div class="line">        self.symbol = symbol</div><div class="line">        <span class="keyword">for</span> hash <span class="keyword">in</span> self.allStates.keys():</div><div class="line">            (state, isEnd) = self.allStates[hash]</div><div class="line">            <span class="keyword">if</span> isEnd:</div><div class="line">                <span class="keyword">if</span> state.winner == self.symbol:</div><div class="line">                    self.estimations[hash] = <span class="number">1.0</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    self.estimations[hash] = <span class="number">0</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self.estimations[hash] = <span class="number">0.5</span></div><div class="line"></div><div class="line">    <span class="comment"># accept a state</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedState</span><span class="params">(self, state)</span>:</span></div><div class="line">        self.states.append(state)</div><div class="line"></div><div class="line">    <span class="comment"># update estimation according to reward</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedReward</span><span class="params">(self, reward)</span>:</span></div><div class="line">        <span class="keyword">if</span> len(self.states) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        self.states = [state.getHash() <span class="keyword">for</span> state <span class="keyword">in</span> self.states]</div><div class="line">        target = reward</div><div class="line">        <span class="keyword">for</span> latestState <span class="keyword">in</span> reversed(self.states):</div><div class="line">            value = self.estimations[latestState] + self.stepSize * (target - self.estimations[latestState])</div><div class="line">            self.estimations[latestState] = value</div><div class="line">            target = value</div><div class="line">        self.states = []</div><div class="line"></div><div class="line">    <span class="comment"># determine next action</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">takeAction</span><span class="params">(self)</span>:</span></div><div class="line">        state = self.states[<span class="number">-1</span>]</div><div class="line">        nextStates = []</div><div class="line">        nextPositions = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(BOARD_ROWS):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(BOARD_COLS):</div><div class="line">                <span class="keyword">if</span> state.data[i, j] == <span class="number">0</span>:</div><div class="line">                    nextPositions.append([i, j])</div><div class="line">                    nextStates.append(state.nextState(i, j, self.symbol).getHash())</div><div class="line">        <span class="keyword">if</span> np.random.binomial(<span class="number">1</span>, self.exploreRate):</div><div class="line">            np.random.shuffle(nextPositions)</div><div class="line">            <span class="comment"># Not sure if truncating is the best way to deal with exploratory step</span></div><div class="line">            <span class="comment"># Maybe it's better to only skip this step rather than forget all the history</span></div><div class="line">            self.states = []</div><div class="line">            action = nextPositions[<span class="number">0</span>]</div><div class="line">            action.append(self.symbol)</div><div class="line">            <span class="keyword">return</span> action</div><div class="line"></div><div class="line">        values = []</div><div class="line">        <span class="keyword">for</span> hash, pos <span class="keyword">in</span> zip(nextStates, nextPositions):</div><div class="line">            values.append((self.estimations[hash], pos))</div><div class="line">        np.random.shuffle(values)</div><div class="line">        values.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>], reverse=<span class="keyword">True</span>)</div><div class="line">        action = values[<span class="number">0</span>][<span class="number">1</span>]</div><div class="line">        action.append(self.symbol)</div><div class="line">        <span class="keyword">return</span> action</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">savePolicy</span><span class="params">(self)</span>:</span></div><div class="line">        fw = open(<span class="string">'optimal_policy_'</span> + str(self.symbol), <span class="string">'wb'</span>)</div><div class="line">        pickle.dump(self.estimations, fw)</div><div class="line">        fw.close()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loadPolicy</span><span class="params">(self)</span>:</span></div><div class="line">        fr = open(<span class="string">'optimal_policy_'</span> + str(self.symbol),<span class="string">'rb'</span>)</div><div class="line">        self.estimations = pickle.load(fr)</div><div class="line">        fr.close()</div><div class="line"></div><div class="line"><span class="comment"># human interface</span></div><div class="line"><span class="comment"># input a number to put a chessman</span></div><div class="line"><span class="comment"># | 1 | 2 | 3 |</span></div><div class="line"><span class="comment"># | 4 | 5 | 6 |</span></div><div class="line"><span class="comment"># | 7 | 8 | 9 |</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanPlayer</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, stepSize = <span class="number">0.1</span>, exploreRate=<span class="number">0.1</span>)</span>:</span></div><div class="line">        self.symbol = <span class="keyword">None</span></div><div class="line">        self.currentState = <span class="keyword">None</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setSymbol</span><span class="params">(self, symbol)</span>:</span></div><div class="line">        self.symbol = symbol</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedState</span><span class="params">(self, state)</span>:</span></div><div class="line">        self.currentState = state</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feedReward</span><span class="params">(self, reward)</span>:</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">takeAction</span><span class="params">(self)</span>:</span></div><div class="line">        data = int(input(<span class="string">"Input your position:"</span>))</div><div class="line">        data -= <span class="number">1</span></div><div class="line">        i = data // int(BOARD_COLS)</div><div class="line">        j = data % BOARD_COLS</div><div class="line">        <span class="keyword">if</span> self.currentState.data[i, j] != <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> self.takeAction()</div><div class="line">        <span class="keyword">return</span> (i, j, self.symbol)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(epochs=<span class="number">20000</span>)</span>:</span></div><div class="line">    player1 = Player()</div><div class="line">    player2 = Player()</div><div class="line">    judger = Judger(player1, player2)</div><div class="line">    player1Win = <span class="number">0.0</span></div><div class="line">    player2Win = <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, epochs):</div><div class="line">        print(<span class="string">"Epoch"</span>, i)</div><div class="line">        winner = judger.play()</div><div class="line">        <span class="keyword">if</span> winner == <span class="number">1</span>:</div><div class="line">            player1Win += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> winner == <span class="number">-1</span>:</div><div class="line">            player2Win += <span class="number">1</span></div><div class="line">        judger.reset()</div><div class="line">    print(player1Win / epochs)</div><div class="line">    print(player2Win / epochs)</div><div class="line">    player1.savePolicy()</div><div class="line">    player2.savePolicy()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compete</span><span class="params">(turns=<span class="number">500</span>)</span>:</span></div><div class="line">    player1 = Player(exploreRate=<span class="number">0</span>)</div><div class="line">    player2 = Player(exploreRate=<span class="number">0</span>)</div><div class="line">    judger = Judger(player1, player2, <span class="keyword">False</span>)</div><div class="line">    player1.loadPolicy()</div><div class="line">    player2.loadPolicy()</div><div class="line">    player1Win = <span class="number">0.0</span></div><div class="line">    player2Win = <span class="number">0.0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, turns):</div><div class="line">        print(<span class="string">"Epoch"</span>, i)</div><div class="line">        winner = judger.play()</div><div class="line">        <span class="keyword">if</span> winner == <span class="number">1</span>:</div><div class="line">            player1Win += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> winner == <span class="number">-1</span>:</div><div class="line">            player2Win += <span class="number">1</span></div><div class="line">        judger.reset()</div><div class="line">    print(player1Win / turns)</div><div class="line">    print(player2Win / turns)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        player1 = Player(exploreRate=<span class="number">0</span>)</div><div class="line">        player2 = HumanPlayer()</div><div class="line">        judger = Judger(player1, player2, <span class="keyword">False</span>)</div><div class="line">        player1.loadPolicy()</div><div class="line">        winner = judger.play(<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">if</span> winner == player2.symbol:</div><div class="line">            print(<span class="string">"Win!"</span>)</div><div class="line">        <span class="keyword">elif</span> winner == player1.symbol:</div><div class="line">            print(<span class="string">"Lose!"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"Tie!"</span>)</div><div class="line"></div><div class="line">train()</div><div class="line">compete()</div><div class="line">play()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/d
    
    </summary>
    
    
      <category term="Reinforcement Learning" scheme="http://yoursite.com/tags/Reinforcement-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Excel merge the same value that in a column to a cell</title>
    <link href="http://yoursite.com/2017/03/16/Excel-merge-the-same-value-that-in-a-column-to-a-cell/"/>
    <id>http://yoursite.com/2017/03/16/Excel-merge-the-same-value-that-in-a-column-to-a-cell/</id>
    <published>2017-03-16T05:59:42.000Z</published>
    <updated>2017-03-16T06:04:36.866Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o7ie0tcjk.bkt.clouddn.com/excel/merge_same_value_in_a_column/merge.gif" alt="excel_merge"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o7ie0tcjk.bkt.clouddn.com/excel/merge_same_value_in_a_column/merge.gif&quot; alt=&quot;excel_merge&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Excel" scheme="http://yoursite.com/tags/Excel/"/>
    
  </entry>
  
</feed>
